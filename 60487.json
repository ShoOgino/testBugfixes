{"path":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery#adjustFrequencies(TermContext,int,long).mjava","commits":[{"id":"9f7c14f40c65357617cada58ca9b026ab9f81c24","date":1432120112,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery#adjustFrequencies(TermContext,int,long).mjava","pathOld":"/dev/null","sourceNew":"  private static TermContext adjustFrequencies(TermContext ctx, int artificialDf,\n      long artificialTtf) {\n    List<LeafReaderContext> leaves = ctx.topReaderContext.leaves();\n    final int len;\n    if (leaves == null) {\n      len = 1;\n    } else {\n      len = leaves.size();\n    }\n    TermContext newCtx = new TermContext(ctx.topReaderContext);\n    for (int i = 0; i < len; ++i) {\n      TermState termState = ctx.get(i);\n      if (termState == null) {\n        continue;\n      }\n      newCtx.register(termState, i);\n    }\n    newCtx.accumulateStatistics(artificialDf, artificialTtf);\n    return newCtx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2e0b693f44c4d48acb66e289f04ec7309118a1a","date":1437989791,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BlendedTermQuery#adjustFrequencies(TermContext,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiTermQuery#adjustFrequencies(TermContext,int,long).mjava","sourceNew":"  private static TermContext adjustFrequencies(TermContext ctx, int artificialDf, long artificialTtf) {\n    List<LeafReaderContext> leaves = ctx.topReaderContext.leaves();\n    final int len;\n    if (leaves == null) {\n      len = 1;\n    } else {\n      len = leaves.size();\n    }\n    TermContext newCtx = new TermContext(ctx.topReaderContext);\n    for (int i = 0; i < len; ++i) {\n      TermState termState = ctx.get(i);\n      if (termState == null) {\n        continue;\n      }\n      newCtx.register(termState, i);\n    }\n    newCtx.accumulateStatistics(artificialDf, artificialTtf);\n    return newCtx;\n  }\n\n","sourceOld":"  private static TermContext adjustFrequencies(TermContext ctx, int artificialDf,\n      long artificialTtf) {\n    List<LeafReaderContext> leaves = ctx.topReaderContext.leaves();\n    final int len;\n    if (leaves == null) {\n      len = 1;\n    } else {\n      len = leaves.size();\n    }\n    TermContext newCtx = new TermContext(ctx.topReaderContext);\n    for (int i = 0; i < len; ++i) {\n      TermState termState = ctx.get(i);\n      if (termState == null) {\n        continue;\n      }\n      newCtx.register(termState, i);\n    }\n    newCtx.accumulateStatistics(artificialDf, artificialTtf);\n    return newCtx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9f7c14f40c65357617cada58ca9b026ab9f81c24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["9f7c14f40c65357617cada58ca9b026ab9f81c24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"]},"commit2Childs":{"9f7c14f40c65357617cada58ca9b026ab9f81c24":["f2e0b693f44c4d48acb66e289f04ec7309118a1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f7c14f40c65357617cada58ca9b026ab9f81c24"],"f2e0b693f44c4d48acb66e289f04ec7309118a1a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}