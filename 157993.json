{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","commits":[{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      for (Row row : matrix) row.replicaInfo.forEach((s, e) -> collections.add(s));\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      for (Row row : matrix) row.replicaInfo.forEach((s, e) -> collections.add(s));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        String p = dataProvider.getPolicy(c);\n        if (p != null) {\n          List<Clause> perCollPolicy = policies.get(p);\n          if (perCollPolicy == null)\n            throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n        }\n        expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      for (Row row : matrix) row.replicaInfo.forEach((s, e) -> collections.add(s));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      for (Row row : matrix) row.replicaInfo.forEach((s, e) -> collections.add(s));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        String p = dataProvider.getPolicy(c);\n        if (p != null) {\n          List<Clause> perCollPolicy = policies.get(p);\n          if (perCollPolicy == null)\n            throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n        }\n        expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        String p = dataProvider.getPolicy(c);\n        if (p != null) {\n          List<Clause> perCollPolicy = policies.get(p);\n          if (perCollPolicy == null)\n            throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n        }\n        expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      for (Row row : matrix) row.replicaInfo.forEach((s, e) -> collections.add(s));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc","date":1495616754,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        String p = dataProvider.getPolicy(c);\n        if (p != null) {\n          List<Clause> perCollPolicy = policies.get(p);\n          if (perCollPolicy == null)\n            throw new RuntimeException(StrUtils.formatString(\"Policy for collection {0} is {1} . It does not exist\", c, p));\n        }\n        expandedClauses.addAll(mergePolicies(c, policies.getOrDefault(p, emptyList()), clusterPolicy));\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"/dev/null","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"/dev/null","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n      List<String> p = new ArrayList<>(params);\n      p.addAll(expandedClauses.stream().map(clause -> clause.tag.name).distinct().collect(Collectors.toList()));\n      paramsOfInterest = new ArrayList<>(p);\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, paramsOfInterest, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Session#Session(ClusterDataProvider).mjava","sourceNew":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","sourceOld":"    Session(ClusterDataProvider dataProvider) {\n      this.nodes = new ArrayList<>(dataProvider.getNodes());\n      this.dataProvider = dataProvider;\n      for (String node : nodes) {\n        collections.addAll(dataProvider.getReplicaInfo(node, Collections.emptyList()).keySet());\n      }\n\n      expandedClauses = clusterPolicy.stream()\n          .filter(clause -> !clause.isPerCollectiontag())\n          .collect(Collectors.toList());\n\n      for (String c : collections) {\n        addClausesForCollection(dataProvider, c);\n      }\n\n      Collections.sort(expandedClauses);\n\n      matrix = new ArrayList<>(nodes.size());\n      for (String node : nodes) matrix.add(new Row(node, params, dataProvider));\n      applyRules();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["86fff6c123a5a1d38adb665dd045347219798da9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d2e1fb1b46fffdd00b6f31596d6eee00b71015fc","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86fff6c123a5a1d38adb665dd045347219798da9":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98f11c416d30e556e0004a9a84960702d12d35b1":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["a513b6a92751e54c76fb5447948c9e7d437163a7"]},"commit2Childs":{"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["d2e1fb1b46fffdd00b6f31596d6eee00b71015fc"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["98f11c416d30e556e0004a9a84960702d12d35b1"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"d2e1fb1b46fffdd00b6f31596d6eee00b71015fc":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"86fff6c123a5a1d38adb665dd045347219798da9":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["86fff6c123a5a1d38adb665dd045347219798da9"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}