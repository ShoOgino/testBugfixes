{"path":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","commits":[{"id":"97fc5a00245e9b31c118c53df88b1376237ea87b","date":1222659461,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n    synchronized (reserves) {\n      reserves.put(indexVersion, System.currentTimeMillis() + reserveTime);\n      List<Long> removeThese = new ArrayList<Long>();\n      for (Map.Entry<Long, Long> entry : reserves.entrySet()) {\n        if (entry.getValue() < System.currentTimeMillis()) removeThese.add(entry.getKey());\n      }\n      for (Long l : removeThese) reserves.remove(l);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d6028dbe4a16095efe9f1651fe1a8e88d683e92","date":1224723463,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","pathOld":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","sourceNew":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n      reserves.put(indexVersion, System.currentTimeMillis() + reserveTime);\n  }\n\n","sourceOld":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n    synchronized (reserves) {\n      reserves.put(indexVersion, System.currentTimeMillis() + reserveTime);\n      List<Long> removeThese = new ArrayList<Long>();\n      for (Map.Entry<Long, Long> entry : reserves.entrySet()) {\n        if (entry.getValue() < System.currentTimeMillis()) removeThese.add(entry.getKey());\n      }\n      for (Long l : removeThese) reserves.remove(l);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"243885d7a8da5b172092cfac738e33970bec02e1","date":1224867045,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","pathOld":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","sourceNew":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n    long timeToSet = System.currentTimeMillis() + reserveTime;\n    for(;;) {\n      Long previousTime = reserves.put(indexVersion, timeToSet);\n\n      // this is the common success case: the older time didn't exist, or\n      // came before the new time.\n      if (previousTime == null || previousTime <= timeToSet) break;\n\n      // At this point, we overwrote a longer reservation, so we want to restore the older one.\n      // the problem is that an even longer reservation may come in concurrently\n      // and we don't want to overwrite that one too.  We simply keep retrying in a loop\n      // with the maximum time value we have seen.\n      timeToSet = previousTime;      \n    }\n  }\n\n","sourceOld":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n      reserves.put(indexVersion, System.currentTimeMillis() + reserveTime);\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16","19f02bb04467ed179738a398a7da80bbbe161c16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","pathOld":"src/java/org/apache/solr/core/IndexDeletionPolicyWrapper#setReserveDuration(Long,long).mjava","sourceNew":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n    long timeToSet = System.currentTimeMillis() + reserveTime;\n    for(;;) {\n      Long previousTime = reserves.put(indexVersion, timeToSet);\n\n      // this is the common success case: the older time didn't exist, or\n      // came before the new time.\n      if (previousTime == null || previousTime <= timeToSet) break;\n\n      // At this point, we overwrote a longer reservation, so we want to restore the older one.\n      // the problem is that an even longer reservation may come in concurrently\n      // and we don't want to overwrite that one too.  We simply keep retrying in a loop\n      // with the maximum time value we have seen.\n      timeToSet = previousTime;      \n    }\n  }\n\n","sourceOld":"  /**\n   * Set the duration for which commit point is to be reserved by the deletion policy.\n   *\n   * @param indexVersion version of the commit point to be reserved\n   * @param reserveTime  time in milliseconds for which the commit point is to be reserved\n   */\n  public void setReserveDuration(Long indexVersion, long reserveTime) {\n    long timeToSet = System.currentTimeMillis() + reserveTime;\n    for(;;) {\n      Long previousTime = reserves.put(indexVersion, timeToSet);\n\n      // this is the common success case: the older time didn't exist, or\n      // came before the new time.\n      if (previousTime == null || previousTime <= timeToSet) break;\n\n      // At this point, we overwrote a longer reservation, so we want to restore the older one.\n      // the problem is that an even longer reservation may come in concurrently\n      // and we don't want to overwrite that one too.  We simply keep retrying in a loop\n      // with the maximum time value we have seen.\n      timeToSet = previousTime;      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"97fc5a00245e9b31c118c53df88b1376237ea87b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["97fc5a00245e9b31c118c53df88b1376237ea87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"243885d7a8da5b172092cfac738e33970bec02e1":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"ad94625fb8d088209f46650c8097196fec67f00c":["243885d7a8da5b172092cfac738e33970bec02e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"97fc5a00245e9b31c118c53df88b1376237ea87b":["1d6028dbe4a16095efe9f1651fe1a8e88d683e92"],"1d6028dbe4a16095efe9f1651fe1a8e88d683e92":["243885d7a8da5b172092cfac738e33970bec02e1"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["97fc5a00245e9b31c118c53df88b1376237ea87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"243885d7a8da5b172092cfac738e33970bec02e1":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}