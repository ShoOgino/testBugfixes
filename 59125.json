{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#initWritableLiveDocs().mjava","sourceNew":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.getDocCount() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.getDocCount());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.getDocCount() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.getDocCount());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.maxDoc() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.getDocCount() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.getDocCount());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.maxDoc() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.getDocCount() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.getDocCount());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.maxDoc() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.getDocCount() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.getDocCount());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.maxDoc() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.maxDoc() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","sourceOld":"  public synchronized void initWritableLiveDocs() throws IOException {\n    assert Thread.holdsLock(writer);\n    assert info.info.maxDoc() > 0;\n    //System.out.println(\"initWritableLivedocs seg=\" + info + \" liveDocs=\" + liveDocs + \" shared=\" + shared);\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        //System.out.println(\"create BV seg=\" + info);\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n\n    assert liveDocs != null;\n    assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + liveDocs.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = liveDocs.get(docID);\n    if (didDelete) {\n      ((MutableBits) liveDocs).clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PendingDeletes#delete(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#initWritableLiveDocs().mjava","sourceNew":"  /**\n   * Marks a document as deleted in this segment and return true if a document got actually deleted or\n   * if the document was already deleted.\n   */\n  boolean delete(int docID) throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n\n    assert liveDocs != null;\n    assert docID >= 0 && docID < liveDocs.length() : \"out of bounds: docid=\" + docID + \" liveDocsLength=\" + liveDocs.length() + \" seg=\" + info.info.name + \" maxDoc=\" + info.info.maxDoc();\n    assert !liveDocsShared;\n    final boolean didDelete = liveDocs.get(docID);\n    if (didDelete) {\n      ((MutableBits) liveDocs).clear(docID);\n      pendingDeleteCount++;\n    }\n    return didDelete;\n  }\n\n","sourceOld":"  private synchronized void initWritableLiveDocs() throws IOException {\n    assert info.info.maxDoc() > 0;\n    if (liveDocsShared) {\n      // Copy on write: this means we've cloned a\n      // SegmentReader sharing the current liveDocs\n      // instance; must now make a private clone so we can\n      // change it:\n      LiveDocsFormat liveDocsFormat = info.info.getCodec().liveDocsFormat();\n      if (liveDocs == null) {\n        liveDocs = liveDocsFormat.newLiveDocs(info.info.maxDoc());\n      } else {\n        liveDocs = liveDocsFormat.newLiveDocs(liveDocs);\n      }\n      liveDocsShared = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b0267c69e2456a3477a1ad785723f2135da3117e"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b06445ae1731e049327712db0454e5643ca9b7fe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","b0267c69e2456a3477a1ad785723f2135da3117e"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["28288370235ed02234a64753cdbf0c6ec096304a","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["b0267c69e2456a3477a1ad785723f2135da3117e","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}