{"path":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n      \n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07199b50babd5f7f62e5b72acb4ed751e799de1a","date":1066875648,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n      \n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2355382afa0f25b02f903f0c0c00433c59edd075","date":1094509762,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(Field.Text(PRIORITY_FIELD, HIGH_PRIORITY));\n        d.add(Field.Text(ID_FIELD, Integer.toString(j)));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n      Hits hits = null;\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query);\n      printHits(out, hits);\n      checkHits(hits, MAX_DOCS);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.TOKENIZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(Version.LUCENE_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer();\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(Version.LUCENE_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(Version.LUCENE_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFiles);\n      lmp.setUseCompoundDocStore(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFiles);\n      lmp.setUseCompoundDocStore(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFiles);\n      lmp.setUseCompoundDocStore(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, analyzer, true,\n                                           IndexWriter.MaxFieldLength.LIMITED);\n\n      writer.setUseCompoundFile(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","pathOld":"src/test/org/apache/lucene/TestSearchForDuplicates#doTest(PrintWriter,boolean).mjava","sourceNew":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFiles);\n      lmp.setUseCompoundDocStore(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","sourceOld":"  private void doTest(PrintWriter out, boolean useCompoundFiles) throws Exception {\n      Directory directory = new RAMDirectory();\n      Analyzer analyzer = new SimpleAnalyzer(TEST_VERSION_CURRENT);\n      IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFiles);\n      lmp.setUseCompoundDocStore(useCompoundFiles);\n\n      final int MAX_DOCS = 225;\n\n      for (int j = 0; j < MAX_DOCS; j++) {\n        Document d = new Document();\n        d.add(new Field(PRIORITY_FIELD, HIGH_PRIORITY, Field.Store.YES, Field.Index.ANALYZED));\n        d.add(new Field(ID_FIELD, Integer.toString(j), Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(d);\n      }\n      writer.close();\n\n      // try a search without OR\n      Searcher searcher = new IndexSearcher(directory, true);\n\n      QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      Query query = parser.parse(HIGH_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      ScoreDoc[] hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n\n      // try a new search with OR\n      searcher = new IndexSearcher(directory, true);\n      hits = null;\n\n      parser = new QueryParser(TEST_VERSION_CURRENT, PRIORITY_FIELD, analyzer);\n\n      query = parser.parse(HIGH_PRIORITY + \" OR \" + MED_PRIORITY);\n      out.println(\"Query: \" + query.toString(PRIORITY_FIELD));\n\n      hits = searcher.search(query, null, MAX_DOCS).scoreDocs;\n      printHits(out, hits, searcher);\n      checkHits(hits, MAX_DOCS, searcher);\n\n      searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["2355382afa0f25b02f903f0c0c00433c59edd075"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba1116b3450a9c1642c89445d131b37344055245":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"2355382afa0f25b02f903f0c0c00433c59edd075":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"235efcba838a273934c5dd0ef66bb07c7fb0d718":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba1116b3450a9c1642c89445d131b37344055245"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"07199b50babd5f7f62e5b72acb4ed751e799de1a":["2355382afa0f25b02f903f0c0c00433c59edd075"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["07199b50babd5f7f62e5b72acb4ed751e799de1a"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"2355382afa0f25b02f903f0c0c00433c59edd075":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}