{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(Searcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final Searcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(IndexReader reader, int docBase)\n          throws IOException {\n        this.docBase = docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","sourceNew":"  /**\n   * This method uses a custom Collector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb54925ca44e8bf7c336c1850d3e98132ec4fa46","date":1298214107,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method uses a custom Collector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/SearchFiles#doStreamingSearch(IndexSearcher,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method uses a custom HitCollector implementation which simply prints out\n   * the docId and score of every matching document. \n   * \n   *  This simulates the streaming search use case, where all hits are supposed to\n   *  be processed, regardless of their relevance.\n   */\n  public static void doStreamingSearch(final IndexSearcher searcher, Query query) throws IOException {\n    Collector streamingHitCollector = new Collector() {\n      private Scorer scorer;\n      private int docBase;\n      \n      // simply print docId and score of every matching document\n      @Override\n      public void collect(int doc) throws IOException {\n        System.out.println(\"doc=\" + doc + docBase + \" score=\" + scorer.score());\n      }\n\n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n\n      @Override\n      public void setNextReader(AtomicReaderContext context)\n          throws IOException {\n        this.docBase = context.docBase;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n    };\n    \n    searcher.search(query, streamingHitCollector);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb54925ca44e8bf7c336c1850d3e98132ec4fa46":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"323f871ffe96b871d8c534a614be60751bb023c2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["29ef99d61cda9641b6250bf9567329a6e65f901d","eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["323f871ffe96b871d8c534a614be60751bb023c2"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb54925ca44e8bf7c336c1850d3e98132ec4fa46"]},"commit2Childs":{"eb54925ca44e8bf7c336c1850d3e98132ec4fa46":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"323f871ffe96b871d8c534a614be60751bb023c2":["81ea17596392ebd5d12741eb9e3b2516258b9413","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["eb54925ca44e8bf7c336c1850d3e98132ec4fa46"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}