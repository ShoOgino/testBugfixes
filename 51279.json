{"path":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","commits":[{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/MockAuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  @Override\n  public boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, (req, res) -> {\n      filterChain.doFilter(req, res);\n      requestContinues.set(true);\n    });\n    return requestContinues.get();\n  }\n\n","sourceOld":"  @Override\n  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    String user = null;\n    if (predicate != null) {\n      if (predicate.test(request)) {\n        user = (String) request.getAttribute(Principal.class.getName());\n        request.removeAttribute(Principal.class.getName());\n      }\n    }\n\n    final FilterChain ffc = filterChain;\n    final AtomicBoolean requestContinues = new AtomicBoolean(false);\n    forward(user, request, response, new FilterChain() {\n      @Override\n      public void doFilter(ServletRequest req, ServletResponse res) throws IOException, ServletException {\n        ffc.doFilter(req, res);\n        requestContinues.set(true);\n      }\n    });\n    return requestContinues.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"]},"commit2Childs":{"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}