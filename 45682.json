{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator.TermsEnumDisjunctionMatchesIterator#init().mjava","commits":[{"id":"ed92e59fbbda9c37864901408389996d7ac5f97f","date":1565173175,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMatchesIterator.TermsEnumDisjunctionMatchesIterator#init().mjava","pathOld":"/dev/null","sourceNew":"    private void init() throws IOException {\n      List<MatchesIterator> mis = new ArrayList<>();\n      mis.add(first);\n      PostingsEnum reuse = null;\n      for (BytesRef term = terms.next(); term != null; term = terms.next()) {\n        if (te.seekExact(term)) {\n          PostingsEnum pe = te.postings(reuse, PostingsEnum.OFFSETS);\n          if (pe.advance(doc) == doc) {\n            mis.add(new TermMatchesIterator(query, pe));\n            reuse = null;\n          } else {\n            reuse = pe;\n          }\n        }\n      }\n      it = fromSubIterators(mis);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed92e59fbbda9c37864901408389996d7ac5f97f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed92e59fbbda9c37864901408389996d7ac5f97f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ed92e59fbbda9c37864901408389996d7ac5f97f"],"ed92e59fbbda9c37864901408389996d7ac5f97f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}