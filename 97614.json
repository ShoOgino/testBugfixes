{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestAnalyzers#verifyPayload(TokenStream).mjava","sourceNew":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","sourceOld":"  void verifyPayload(TokenStream ts) throws IOException {\n    PayloadAttribute payloadAtt = ts.getAttribute(PayloadAttribute.class);\n    for(byte b=1;;b++) {\n      boolean hasNext = ts.incrementToken();\n      if (!hasNext) break;\n      // System.out.println(\"id=\"+System.identityHashCode(nextToken) + \" \" + t);\n      // System.out.println(\"payload=\" + (int)nextToken.getPayload().toByteArray()[0]);\n      assertEquals(b, payloadAtt.getPayload().toByteArray()[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}