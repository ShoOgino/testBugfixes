{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","commits":[{"id":"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e","date":1358793943,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVInt((int)ord);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVInt((int)ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVInt((int)ord);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVInt((int)ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVInt((int)ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf317f41f8247db62a955791ebb8a5ab3e7c8d47","date":1366724337,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // three cases for simulating the old writer:\n    // 1. no missing\n    // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n    // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean hasEmptyString = false;\n    for (BytesRef b : values) {\n      hasEmptyString = b.length == 0;\n      break;\n    }\n    \n    if (!anyMissing) {\n      // nothing to do\n    } else if (hasEmptyString) {\n      docToOrd = MissingOrdRemapper.mapMissingToOrd0(docToOrd);\n    } else {\n      docToOrd = MissingOrdRemapper.mapAllOrds(docToOrd);\n      values = MissingOrdRemapper.insertEmptyValue(values);\n    }\n    \n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // write the ordinals as numerics\n    addNumericField(field, docToOrd, false);\n    \n    // write the values as FST\n    writeFST(field, values);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f366ce28775e2b8ea4e06355009471328711666d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","f366ce28775e2b8ea4e06355009471328711666d"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["9faa42f41b6adb98daf009cf99a4ee239189e469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","3fe3dfb6cc2d72874c6ebeee5cf8b6818434714e"],"bf317f41f8247db62a955791ebb8a5ab3e7c8d47":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f366ce28775e2b8ea4e06355009471328711666d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["bf317f41f8247db62a955791ebb8a5ab3e7c8d47"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}