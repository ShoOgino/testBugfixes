{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","commits":[{"id":"d902f463d0a39aa9fc43326e245a5e5c94295d68","date":1217857015,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getds(), 0, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"22c24d4a654221b7563bec52013446d6cc8bcad4","date":1222286638,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), 0, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getds(), 0, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), 0, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b5d20090448d280035afb31f1fd2e67ff43336b","date":1258790174,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    Assert.assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    Assert.assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor();\n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n    }\n    Assert.assertEquals(3, result.size());\n    Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n    Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n    Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n  }\n\n","bugFix":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestXPathEntityProcessor#withFieldsAndXpathStream().mjava","sourceNew":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    Assert.assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    Assert.assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void withFieldsAndXpathStream() throws Exception {\n    final Object monitor = new Object();\n    final boolean[] done = new boolean[1];\n    \n    Map entityAttrs = createMap(\"name\", \"e\", \"url\", \"cd.xml\",\n        XPathEntityProcessor.FOR_EACH, \"/catalog/cd\", \"stream\", \"true\", \"batchSize\",\"1\");\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"title\", \"xpath\", \"/catalog/cd/title\"));\n    fields.add(createMap(\"column\", \"artist\", \"xpath\", \"/catalog/cd/artist\"));\n    fields.add(createMap(\"column\", \"year\", \"xpath\", \"/catalog/cd/year\"));\n    Context c = AbstractDataImportHandlerTest.getContext(null,\n        new VariableResolverImpl(), getDataSource(cdData), Context.FULL_DUMP, fields, entityAttrs);\n    XPathEntityProcessor xPathEntityProcessor = new XPathEntityProcessor() {\n      private int count;\n      \n      @Override\n      protected Map<String, Object> readRow(Map<String, Object> record,\n          String xpath) {\n        synchronized (monitor) {\n          if (simulateSlowReader && !done[0]) {\n            try {\n              monitor.wait(100);\n            } catch (InterruptedException e) {\n              throw new RuntimeException(e);\n            }\n          }\n        }\n        \n        return super.readRow(record, xpath);\n      }\n    };\n    \n    if (simulateSlowResultProcessor) {\n      xPathEntityProcessor.blockingQueueSize = 1;\n    }\n    xPathEntityProcessor.blockingQueueTimeOut = 1;\n    xPathEntityProcessor.blockingQueueTimeOutUnits = TimeUnit.MICROSECONDS;\n    \n    xPathEntityProcessor.init(c);\n    List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();\n    while (true) {\n      if (rowsToRead >= 0 && result.size() >= rowsToRead) {\n        Thread.currentThread().interrupt();\n      }\n      Map<String, Object> row = xPathEntityProcessor.nextRow();\n      if (row == null)\n        break;\n      result.add(row);\n      if (simulateSlowResultProcessor) {\n        synchronized (xPathEntityProcessor.publisherThread) {\n          if (xPathEntityProcessor.publisherThread.isAlive()) {\n            xPathEntityProcessor.publisherThread.wait(1000);\n          }\n        }\n      }\n    }\n    \n    synchronized (monitor) {\n      done[0] = true;\n      monitor.notify();\n    }\n    \n    // confirm that publisher thread stops.\n    xPathEntityProcessor.publisherThread.join(1000);\n    Assert.assertEquals(\"Expected thread to stop\", false, xPathEntityProcessor.publisherThread.isAlive());\n    \n    Assert.assertEquals(rowsToRead < 0 ? 3 : rowsToRead, result.size());\n    \n    if (rowsToRead < 0) {\n      Assert.assertEquals(\"Empire Burlesque\", result.get(0).get(\"title\"));\n      Assert.assertEquals(\"Bonnie Tyler\", result.get(1).get(\"artist\"));\n      Assert.assertEquals(\"1982\", result.get(2).get(\"year\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22c24d4a654221b7563bec52013446d6cc8bcad4":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1b5d20090448d280035afb31f1fd2e67ff43336b":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["22c24d4a654221b7563bec52013446d6cc8bcad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"22c24d4a654221b7563bec52013446d6cc8bcad4":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d902f463d0a39aa9fc43326e245a5e5c94295d68"],"1b5d20090448d280035afb31f1fd2e67ff43336b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["1b5d20090448d280035afb31f1fd2e67ff43336b"],"d902f463d0a39aa9fc43326e245a5e5c94295d68":["22c24d4a654221b7563bec52013446d6cc8bcad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}