{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#substitutionsOf(String).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#substitutionsOf(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character substitutions of s\n   * (replacing one character)\n   */\n  private Automaton substitutionsOf(String s) {\n    List<Automaton> list = new ArrayList<Automaton>();\n    \n    for (int i = 0; i < s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i + 1)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#substitutionsOf(String).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#substitutionsOf(String).mjava","sourceNew":"  /**\n   * Return an automaton that accepts all 1-character substitutions of s\n   * (replacing one character)\n   */\n  private Automaton substitutionsOf(String s) {\n    List<Automaton> list = new ArrayList<Automaton>();\n    \n    for (int i = 0; i < s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i + 1)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","sourceOld":"  /**\n   * Return an automaton that accepts all 1-character substitutions of s\n   * (replacing one character)\n   */\n  private Automaton substitutionsOf(String s) {\n    List<Automaton> list = new ArrayList<Automaton>();\n    \n    for (int i = 0; i < s.length(); i++) {\n      Automaton a = BasicAutomata.makeString(s.substring(0, i));\n      a = BasicOperations.concatenate(a, BasicAutomata.makeAnyChar());\n      a = BasicOperations.concatenate(a, BasicAutomata.makeString(s\n          .substring(i + 1)));\n      list.add(a);\n    }\n    \n    Automaton a = BasicOperations.union(list);\n    MinimizationOperations.minimize(a);\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}