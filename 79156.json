{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        LOG.warn(\"Unable to fetch properties of MXBean \" + obj.getClass().getName());\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        LOG.warn(\"Unable to fetch properties of MXBean \" + obj.getClass().getName());\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","sourceNew":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        log.warn(\"Unable to fetch properties of MXBean \" + obj.getClass().getName());\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        LOG.warn(\"Unable to fetch properties of MXBean \" + obj.getClass().getName());\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","sourceNew":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unable to fetch properties of MXBean {}\", obj.getClass().getName());\n        }\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        log.warn(\"Unable to fetch properties of MXBean \" + obj.getClass().getName());\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#[T-extends-PlatformManagedObject]_addMXBeanMetrics(T,Class[#-extends-T],String,BiConsumer[String,Metric]).mjava","sourceNew":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        log.warn(\"Unable to fetch properties of MXBean {}\", obj.getClass().getName());\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.\n   * @param obj an instance of MXBean\n   * @param intf MXBean interface, one of {@link PlatformManagedObject}-s\n   * @param consumer consumer for created names and metrics\n   * @param <T> formal type\n   */\n  public static <T extends PlatformManagedObject> void addMXBeanMetrics(T obj, Class<? extends T> intf,\n      String prefix, BiConsumer<String, Metric> consumer) {\n    if (intf.isInstance(obj)) {\n      BeanInfo beanInfo;\n      try {\n        beanInfo = Introspector.getBeanInfo(intf, intf.getSuperclass(), Introspector.IGNORE_ALL_BEANINFO);\n      } catch (IntrospectionException e) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unable to fetch properties of MXBean {}\", obj.getClass().getName());\n        }\n        return;\n      }\n      for (final PropertyDescriptor desc : beanInfo.getPropertyDescriptors()) {\n        final String name = desc.getName();\n        // test if it works at all\n        try {\n          desc.getReadMethod().invoke(obj);\n          // worked - consume it\n          final Gauge<?> gauge = () -> {\n            try {\n              return desc.getReadMethod().invoke(obj);\n            } catch (InvocationTargetException ite) {\n              // ignore (some properties throw UOE)\n              return null;\n            } catch (IllegalAccessException e) {\n              return null;\n            }\n          };\n          String metricName = MetricRegistry.name(prefix, name);\n          consumer.accept(metricName, gauge);\n        } catch (Exception e) {\n          // didn't work, skip it...\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}