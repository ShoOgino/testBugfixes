{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","commits":[{"id":"f4fbde3b8cf6b01501201d080622f6a282d0b5df","date":1383267008,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"/dev/null","sourceNew":"    public void setShards(String shards) { this.shards = shards; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    public Create setShards(String shards) { this.shards = shards; return this; }\n\n","sourceOld":"    public void setShards(String shards) { this.shards = shards; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbd8af67010775ee4b53c58597a30bbe480707ee","date":1455837524,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(\"Invalid shard: \" + shard\n              + \". Shard names must consist entirely of periods, underscores and alphanumerics\");\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    public Create setShards(String shards) { this.shards = shards; return this; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06043fcf612d2cd93636c22cd062e0641406b417","date":1455841699,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(\"Invalid shard: \" + shard\n              + \". Shard names must consist entirely of periods, underscores and alphanumerics\");\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    public Create setShards(String shards) { this.shards = shards; return this; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c68b625b6d40ea28c8d7927c14d1453867cd2a4a","date":1455847572,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(\"Invalid shard: \" + shard\n              + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(\"Invalid shard: \" + shard\n              + \". Shard names must consist entirely of periods, underscores and alphanumerics\");\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a839eb6696740aa302262e32e6f45b5e70b47bff","date":1457028247,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n              shard));\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(\"Invalid shard: \" + shard\n              + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n              shard));\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(\"Invalid shard: \" + shard\n              + \". Shard names must consist entirely of periods, underscores, and alphanumerics\");\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daed6b66edd950a7f2af9857df64b09acf3deacc","date":1457527865,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        SolrIdentifierValidator.validateShardName(shard);\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        if (!SolrIdentifierValidator.validateShardName(shard)) {\n          throw new IllegalArgumentException(SolrIdentifierValidator.getIdentifierMessage(SolrIdentifierValidator.IdentifierType.SHARD,\n              shard));\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      if (null != shards) {\n        for (String shard : shards.split(\",\")) {\n          SolrIdentifierValidator.validateShardName(shard);\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        SolrIdentifierValidator.validateShardName(shard);\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      if (null != shards) {\n        for (String shard : shards.split(\",\")) {\n          SolrIdentifierValidator.validateShardName(shard);\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        SolrIdentifierValidator.validateShardName(shard);\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      if (null != shards) {\n        for (String shard : shards.split(\",\")) {\n          SolrIdentifierValidator.validateShardName(shard);\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        SolrIdentifierValidator.validateShardName(shard);\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      if (null != shards) {\n        for (String shard : shards.split(\",\")) {\n          SolrIdentifierValidator.validateShardName(shard);\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      for (String shard : shards.split(\",\")) {\n        SolrIdentifierValidator.validateShardName(shard);\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105e345cf3c0abed3cb6c109274a379cb2655adc","date":1561038472,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/request/CollectionAdminRequest.Create#setShards(String).mjava","sourceNew":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     *\n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     *\n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      if (null != shards) {\n        for (String shard : shards.split(\",\")) {\n          SolrIdentifierValidator.validateShardName(shard);\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","sourceOld":"    /**\n     * Provide the name of the shards to be created, separated by commas\n     * \n     * Shard names must consist entirely of periods, underscores, hyphens, and alphanumerics.  Other characters are not allowed.\n     * \n     * @throws IllegalArgumentException if any of the shard names contain invalid characters.\n     */\n    public Create setShards(String shards) {\n      if (null != shards) {\n        for (String shard : shards.split(\",\")) {\n          SolrIdentifierValidator.validateShardName(shard);\n        }\n      }\n      this.shards = shards;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4fbde3b8cf6b01501201d080622f6a282d0b5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"3217321f3e1d7922898c6c633d17acfa840d6875":["daed6b66edd950a7f2af9857df64b09acf3deacc","ac97ea104d893f16aab430d9904473bc1f233f3c"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["daed6b66edd950a7f2af9857df64b09acf3deacc","3217321f3e1d7922898c6c633d17acfa840d6875"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["daed6b66edd950a7f2af9857df64b09acf3deacc","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"105e345cf3c0abed3cb6c109274a379cb2655adc":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c68b625b6d40ea28c8d7927c14d1453867cd2a4a":["06043fcf612d2cd93636c22cd062e0641406b417"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["f4fbde3b8cf6b01501201d080622f6a282d0b5df"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a","a839eb6696740aa302262e32e6f45b5e70b47bff"],"06043fcf612d2cd93636c22cd062e0641406b417":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","cbd8af67010775ee4b53c58597a30bbe480707ee"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["105e345cf3c0abed3cb6c109274a379cb2655adc"]},"commit2Childs":{"f4fbde3b8cf6b01501201d080622f6a282d0b5df":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"3217321f3e1d7922898c6c633d17acfa840d6875":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","105e345cf3c0abed3cb6c109274a379cb2655adc"],"daed6b66edd950a7f2af9857df64b09acf3deacc":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"105e345cf3c0abed3cb6c109274a379cb2655adc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a839eb6696740aa302262e32e6f45b5e70b47bff":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4fbde3b8cf6b01501201d080622f6a282d0b5df"],"c68b625b6d40ea28c8d7927c14d1453867cd2a4a":["a839eb6696740aa302262e32e6f45b5e70b47bff","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["daed6b66edd950a7f2af9857df64b09acf3deacc"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["06043fcf612d2cd93636c22cd062e0641406b417","cbd8af67010775ee4b53c58597a30bbe480707ee"],"06043fcf612d2cd93636c22cd062e0641406b417":["c68b625b6d40ea28c8d7927c14d1453867cd2a4a"],"cbd8af67010775ee4b53c58597a30bbe480707ee":["06043fcf612d2cd93636c22cd062e0641406b417"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}