{"path":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","commits":[{"id":"c881464041e282c06fdb34e91f883b83b8d97968","date":1247607562,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","pathOld":"/dev/null","sourceNew":"  public void testUnmodifiableSet(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7f6c85ffa816c86be877aa7a5029a5daa1336e7f","date":1259617761,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","sourceNew":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testUnmodifiableSet(){\n    CharArraySet set=new CharArraySet(10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ddbb40e897ef945a09991763daff7fa6b72ba87","date":1261610677,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","sourceNew":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    set.add(Integer.valueOf(1));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertTrue(set.contains(stopword));\n    }\n    assertTrue(set.contains(Integer.valueOf(1)));\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","sourceNew":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    set.add(Integer.valueOf(1));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertTrue(set.contains(stopword));\n    }\n    assertTrue(set.contains(Integer.valueOf(1)));\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(Version.LUCENE_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    set.add(Integer.valueOf(1));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertTrue(set.contains(stopword));\n    }\n    assertTrue(set.contains(Integer.valueOf(1)));\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharArraySet#testUnmodifiableSet().mjava","sourceNew":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    set.add(Integer.valueOf(1));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertTrue(set.contains(stopword));\n    }\n    assertTrue(set.contains(Integer.valueOf(1)));\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","sourceOld":"  public void testUnmodifiableSet(){\n    CharArraySet set = new CharArraySet(TEST_VERSION_CURRENT, 10,true);\n    set.addAll(Arrays.asList(TEST_STOP_WORDS));\n    set.add(Integer.valueOf(1));\n    final int size = set.size();\n    set = CharArraySet.unmodifiableSet(set);\n    assertEquals(\"Set size changed due to unmodifiableSet call\" , size, set.size());\n    for (String stopword : TEST_STOP_WORDS) {\n      assertTrue(set.contains(stopword));\n    }\n    assertTrue(set.contains(Integer.valueOf(1)));\n    assertTrue(set.contains(\"1\"));\n    assertTrue(set.contains(new char[]{'1'}));\n    \n    try{\n      CharArraySet.unmodifiableSet(null);\n      fail(\"can not make null unmodifiable\");\n    }catch (NullPointerException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3ddbb40e897ef945a09991763daff7fa6b72ba87":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["3ddbb40e897ef945a09991763daff7fa6b72ba87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c881464041e282c06fdb34e91f883b83b8d97968":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["c881464041e282c06fdb34e91f883b83b8d97968"]},"commit2Childs":{"3ddbb40e897ef945a09991763daff7fa6b72ba87":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c881464041e282c06fdb34e91f883b83b8d97968"],"c881464041e282c06fdb34e91f883b83b8d97968":["7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"7f6c85ffa816c86be877aa7a5029a5daa1336e7f":["3ddbb40e897ef945a09991763daff7fa6b72ba87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}