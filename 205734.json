{"path":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","commits":[{"id":"587637d2d2a2c50503511d5b626fdc366b4fd3d4","date":1507632212,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String).mjava","sourceNew":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      if (status.getCoreStatus().size() == 0) {\n        return 0;\n      }\n      // filter size by collection name\n      if (collectionName == null) {\n        return status.getCoreStatus().size();\n      } else {\n        int size = 0;\n        Iterator<Map.Entry<String, NamedList<Object>>> it = status.getCoreStatus().iterator();\n        while (it.hasNext()) {\n          String coll = (String)it.next().getValue().findRecursive(\"cloud\", \"collection\");\n          if (collectionName.equals(coll)) {\n            size++;\n          }\n        }\n        return size;\n      }\n    }\n  }\n\n","sourceOld":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      return status.getCoreStatus().size();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76f2f6f3c2e485c3114e415c8253c2e208c7f909","date":1551210527,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","sourceNew":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      if (status.getCoreStatus().size() == 0) {\n        return 0;\n      }\n      // filter size by collection name\n      if (collectionName == null) {\n        return status.getCoreStatus().size();\n      } else {\n        int size = 0;\n        for (Map.Entry<String, NamedList<Object>> stringNamedListEntry : status.getCoreStatus()) {\n          String coll = (String) stringNamedListEntry.getValue().findRecursive(\"cloud\", \"collection\");\n          if (collectionName.equals(coll)) {\n            size++;\n          }\n        }\n        return size;\n      }\n    }\n  }\n\n","sourceOld":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      if (status.getCoreStatus().size() == 0) {\n        return 0;\n      }\n      // filter size by collection name\n      if (collectionName == null) {\n        return status.getCoreStatus().size();\n      } else {\n        int size = 0;\n        Iterator<Map.Entry<String, NamedList<Object>>> it = status.getCoreStatus().iterator();\n        while (it.hasNext()) {\n          String coll = (String)it.next().getValue().findRecursive(\"cloud\", \"collection\");\n          if (collectionName.equals(coll)) {\n            size++;\n          }\n        }\n        return size;\n      }\n    }\n  }\n\n","bugFix":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"accbc347dd28993a84ae51e9e6f01e31a26a7184","date":1551252530,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","sourceNew":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      if (status.getCoreStatus().size() == 0) {\n        return 0;\n      }\n      // filter size by collection name\n      if (collectionName == null) {\n        return status.getCoreStatus().size();\n      } else {\n        int size = 0;\n        for (Map.Entry<String, NamedList<Object>> stringNamedListEntry : status.getCoreStatus()) {\n          String coll = (String) stringNamedListEntry.getValue().findRecursive(\"cloud\", \"collection\");\n          if (collectionName.equals(coll)) {\n            size++;\n          }\n        }\n        return size;\n      }\n    }\n  }\n\n","sourceOld":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      if (status.getCoreStatus().size() == 0) {\n        return 0;\n      }\n      // filter size by collection name\n      if (collectionName == null) {\n        return status.getCoreStatus().size();\n      } else {\n        int size = 0;\n        Iterator<Map.Entry<String, NamedList<Object>>> it = status.getCoreStatus().iterator();\n        while (it.hasNext()) {\n          String coll = (String)it.next().getValue().findRecursive(\"cloud\", \"collection\");\n          if (collectionName.equals(coll)) {\n            size++;\n          }\n        }\n        return size;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13566d7393ca95d9897baf67f5e9c87dca82a253","date":1571390317,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaTest#getNumOfCores(CloudSolrClient,String,String).mjava","sourceNew":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    return getNumOfCores(cloudClient, nodeName, collectionName, null);\n  }\n\n","sourceOld":"  private int getNumOfCores(CloudSolrClient cloudClient, String nodeName, String collectionName) throws IOException, SolrServerException {\n    try (HttpSolrClient coreclient = getHttpSolrClient(cloudClient.getZkStateReader().getBaseUrlForNodeName(nodeName))) {\n      CoreAdminResponse status = CoreAdminRequest.getStatus(null, coreclient);\n      if (status.getCoreStatus().size() == 0) {\n        return 0;\n      }\n      // filter size by collection name\n      if (collectionName == null) {\n        return status.getCoreStatus().size();\n      } else {\n        int size = 0;\n        for (Map.Entry<String, NamedList<Object>> stringNamedListEntry : status.getCoreStatus()) {\n          String coll = (String) stringNamedListEntry.getValue().findRecursive(\"cloud\", \"collection\");\n          if (collectionName.equals(coll)) {\n            size++;\n          }\n        }\n        return size;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13566d7393ca95d9897baf67f5e9c87dca82a253":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"76f2f6f3c2e485c3114e415c8253c2e208c7f909":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"587637d2d2a2c50503511d5b626fdc366b4fd3d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["587637d2d2a2c50503511d5b626fdc366b4fd3d4","76f2f6f3c2e485c3114e415c8253c2e208c7f909"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13566d7393ca95d9897baf67f5e9c87dca82a253"]},"commit2Childs":{"13566d7393ca95d9897baf67f5e9c87dca82a253":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76f2f6f3c2e485c3114e415c8253c2e208c7f909":["accbc347dd28993a84ae51e9e6f01e31a26a7184"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"587637d2d2a2c50503511d5b626fdc366b4fd3d4":["76f2f6f3c2e485c3114e415c8253c2e208c7f909","accbc347dd28993a84ae51e9e6f01e31a26a7184"],"accbc347dd28993a84ae51e9e6f01e31a26a7184":["13566d7393ca95d9897baf67f5e9c87dca82a253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}