{"path":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","commits":[{"id":"44f497c313977be641ddf24aab74b30e6de834d8","date":1156361697,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"/dev/null","sourceNew":"    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(),new NamedList(Arrays.asList(q)));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d119e8687d5c78856fc86eee0f86c8367fdfad1f","date":1176085764,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(),new NamedList(Arrays.asList(q)));\n    }\n\n","sourceOld":"    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(),new NamedList(Arrays.asList(q)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b2d92924883e6f7ae47b7654e37f54545916304","date":1235082032,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(),new NamedList(Arrays.asList(q)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f7f5e0fec688d634ac276fbdb849062763c6f6","date":1266977361,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness.LocalRequestFactory#makeRequest(String...).mjava","sourceNew":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","sourceOld":"    /**\n     * Creates a LocalSolrQueryRequest based on variable args; for\n     * historical reasons, this method has some peculiar behavior:\n     * <ul>\n     *   <li>If there is a single arg, then it is treated as the \"q\"\n     *       param, and the LocalSolrQueryRequest consists of that query\n     *       string along with \"qt\", \"start\", and \"rows\" params (based\n     *       on the qtype, start, and limit properties of this factory)\n     *       along with any other default \"args\" set on this factory.\n     *   </li>\n     *   <li>If there are multiple args, then there must be an even number\n     *       of them, and each pair of args is used as a key=value param in\n     *       the LocalSolrQueryRequest.  <b>NOTE: In this usage, the \"qtype\",\n     *       \"start\", \"limit\", and \"args\" properties of this factory are\n     *       ignored.</b>\n     *   </li>\n     * </ul>\n     */\n    public LocalSolrQueryRequest makeRequest(String ... q) {\n      if (q.length==1) {\n        return new LocalSolrQueryRequest(TestHarness.this.getCore(),\n                                       q[0], qtype, start, limit, args);\n      }\n      if (q.length%2 != 0) { \n        throw new RuntimeException(\"The length of the string array (query arguments) needs to be even\");\n      }\n      Map.Entry<String, String> [] entries = new NamedListEntry[q.length / 2];\n      for (int i = 0; i < q.length; i += 2) {\n        entries[i/2] = new NamedListEntry<String>(q[i], q[i+1]);\n      }\n      return new LocalSolrQueryRequest(TestHarness.this.getCore(), new NamedList(entries));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b2d92924883e6f7ae47b7654e37f54545916304":["d119e8687d5c78856fc86eee0f86c8367fdfad1f"],"44f497c313977be641ddf24aab74b30e6de834d8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91f7f5e0fec688d634ac276fbdb849062763c6f6":["1b2d92924883e6f7ae47b7654e37f54545916304"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d119e8687d5c78856fc86eee0f86c8367fdfad1f":["44f497c313977be641ddf24aab74b30e6de834d8"],"ad94625fb8d088209f46650c8097196fec67f00c":["91f7f5e0fec688d634ac276fbdb849062763c6f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1b2d92924883e6f7ae47b7654e37f54545916304":["91f7f5e0fec688d634ac276fbdb849062763c6f6"],"44f497c313977be641ddf24aab74b30e6de834d8":["d119e8687d5c78856fc86eee0f86c8367fdfad1f"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["44f497c313977be641ddf24aab74b30e6de834d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91f7f5e0fec688d634ac276fbdb849062763c6f6":["ad94625fb8d088209f46650c8097196fec67f00c"],"d119e8687d5c78856fc86eee0f86c8367fdfad1f":["1b2d92924883e6f7ae47b7654e37f54545916304"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}