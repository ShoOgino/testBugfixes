{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","commits":[{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", tuples.size(), 1);\n    assertEquals(\"should only have gotten back document 0\", tuples.get(0).getString(\"id\"), \"0\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", tuples.size(), 1);\n    assertEquals(\"should only have gotten back document 0\", tuples.get(0).getString(\"id\"), \"0\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", tuples.size(), 1);\n    assertEquals(\"should only have gotten back document 0\", tuples.get(0).getString(\"id\"), \"0\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", tuples.size(), 1);\n    assertEquals(\"should only have gotten back document 0\", tuples.get(0).getString(\"id\"), \"0\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58bb411852ed0249bf624e9fc223b4973776d357","date":1479107017,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","sourceNew":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n    assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", tuples.size(), 1);\n    assertEquals(\"should only have gotten back document 0\", tuples.get(0).getString(\"id\"), \"0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","sourceNew":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n    assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", tuples.size(), 1);\n    assertEquals(\"should only have gotten back document 0\", tuples.get(0).getString(\"id\"), \"0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","sourceNew":"@Test\npublic void testMultipleFqClauses() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n  .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n      .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n      .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n      .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n      \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, params);\n  List<Tuple> tuples = getTuples(stream);\n  assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n  assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n}\n\n","sourceOld":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n    assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","sourceNew":"@Test\npublic void testMultipleFqClauses() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n  .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n      .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n      .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n      .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n      \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, params);\n  List<Tuple> tuples = getTuples(stream);\n  assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n  assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n}\n\n","sourceOld":"  @Test\n  public void testMultipleFqClauses() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n    .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n        .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n        .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n        .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    streamFactory.withCollectionZkHost(COLLECTION, zkHost);\n\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n    assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","sourceNew":"@Test\npublic void testMultipleFqClauses() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n  .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n      .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n      .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n      .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n\n  try {\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\",\n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, params);\n    stream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n    assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n  } finally {\n    solrClientCache.close();\n  }\n}\n\n","sourceOld":"@Test\npublic void testMultipleFqClauses() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n  .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n      .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n      .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n      .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n      \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, params);\n  List<Tuple> tuples = getTuples(stream);\n  assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n  assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testMultipleFqClauses().mjava","sourceNew":"@Test\npublic void testMultipleFqClauses() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n  .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n      .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n      .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n      .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n\n  try {\n    ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\",\n        \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, params);\n    stream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(stream);\n    assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n    assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n  } finally {\n    solrClientCache.close();\n  }\n}\n\n","sourceOld":"@Test\npublic void testMultipleFqClauses() throws Exception {\n\n  new UpdateRequest()\n      .add(id, \"0\", \"a_ss\", \"hello0\", \"a_ss\", \"hello1\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_ss\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n  .add(id, \"3\", \"a_ss\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_ss\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_ss\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .add(id, \"5\", \"a_ss\", \"hello1\", \"a_i\", \"10\", \"a_f\", \"1\")\n      .add(id, \"6\", \"a_ss\", \"hello1\", \"a_i\", \"11\", \"a_f\", \"5\")\n      .add(id, \"7\", \"a_ss\", \"hello1\", \"a_i\", \"12\", \"a_f\", \"5\")\n      .add(id, \"8\", \"a_ss\", \"hello1\", \"a_i\", \"13\", \"a_f\", \"4\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  streamFactory.withCollectionZkHost(COLLECTIONORALIAS, zkHost);\n\n  ModifiableSolrParams params = new ModifiableSolrParams(mapParams(\"q\", \"*:*\", \"fl\", \"id,a_i\", \n      \"sort\", \"a_i asc\", \"fq\", \"a_ss:hello0\", \"fq\", \"a_ss:hello1\"));\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, params);\n  List<Tuple> tuples = getTuples(stream);\n  assertEquals(\"Multiple fq clauses should have been honored\", 1, tuples.size());\n  assertEquals(\"should only have gotten back document 0\", \"0\", tuples.get(0).getString(\"id\"));\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58bb411852ed0249bf624e9fc223b4973776d357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["58bb411852ed0249bf624e9fc223b4973776d357"],"58bb411852ed0249bf624e9fc223b4973776d357":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"58bb411852ed0249bf624e9fc223b4973776d357":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["58bb411852ed0249bf624e9fc223b4973776d357","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}