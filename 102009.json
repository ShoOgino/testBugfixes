{"path":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#getTotalCount().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#getTotalCount().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#getTotalCount().mjava","sourceNew":"  /**\n   * Return the total number of times that a {@link Query} has been looked up\n   * in this {@link QueryCache}. Note that this number is incremented once per\n   * segment so running a cached query only once will increment this counter\n   * by the number of segments that are wrapped by the searcher.\n   * Note that by definition, {@link #getTotalCount()} is the sum of\n   * {@link #getHitCount()} and {@link #getMissCount()}.\n   * @see #getHitCount()\n   * @see #getMissCount()\n   */\n  public final long getTotalCount() {\n    return getHitCount() + getMissCount();\n  }\n\n","sourceOld":"  /**\n   * Return the total number of times that a {@link Filter} has been looked up\n   * in this {@link FilterCache}. Note that this number is incremented once per\n   * segment so running a cached filter only once will increment this counter\n   * by the number of segments that are wrapped by the searcher.\n   * Note that by definition, {@link #getTotalCount()} is the sum of\n   * {@link #getHitCount()} and {@link #getMissCount()}.\n   * @see #getHitCount()\n   * @see #getMissCount()\n   */\n  public final long getTotalCount() {\n    return getHitCount() + getMissCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#getTotalCount().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the total number of times that a {@link Query} has been looked up\n   * in this {@link QueryCache}. Note that this number is incremented once per\n   * segment so running a cached query only once will increment this counter\n   * by the number of segments that are wrapped by the searcher.\n   * Note that by definition, {@link #getTotalCount()} is the sum of\n   * {@link #getHitCount()} and {@link #getMissCount()}.\n   * @see #getHitCount()\n   * @see #getMissCount()\n   */\n  public final long getTotalCount() {\n    return getHitCount() + getMissCount();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}