{"path":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","commits":[{"id":"3889414cacfb5deed6b77fd2287545dc3cc89e08","date":1504233106,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetLength() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      t.setLength(-1);\n    });\n    assertTrue(expected.getMessage().contains(\"must not be negative\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetLength() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      t.setLength(-1);\n    });\n    assertTrue(expected.getMessage().contains(\"must not be negative\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21283ed01203901a7257aa4b7f0a0899c86e56e","date":1504689720,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetLength() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      t.setLength(-1);\n    });\n    assertTrue(expected.getMessage().contains(\"must not be negative\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testSetLength() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      t.setLength(-1);\n    });\n    assertTrue(expected.getMessage().contains(\"must not be negative\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testSetLength().mjava","sourceNew":"  public void testSetLength() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    expectThrows(IndexOutOfBoundsException.class, () -> {\n      t.setLength(-1);\n    });\n  }\n\n","sourceOld":"  public void testSetLength() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, content.length);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      t.setLength(-1);\n    });\n    assertTrue(expected.getMessage().contains(\"must not be negative\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3889414cacfb5deed6b77fd2287545dc3cc89e08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3889414cacfb5deed6b77fd2287545dc3cc89e08"],"456d7e7092cb043c740b4674301660ee8abc26fe":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b21283ed01203901a7257aa4b7f0a0899c86e56e"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3889414cacfb5deed6b77fd2287545dc3cc89e08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"]},"commit2Childs":{"3889414cacfb5deed6b77fd2287545dc3cc89e08":["b21283ed01203901a7257aa4b7f0a0899c86e56e","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"b21283ed01203901a7257aa4b7f0a0899c86e56e":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["456d7e7092cb043c740b4674301660ee8abc26fe"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3889414cacfb5deed6b77fd2287545dc3cc89e08","b21283ed01203901a7257aa4b7f0a0899c86e56e","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}