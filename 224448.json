{"path":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c","date":1208435858,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,NamedList[Object],SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",rsp.getException()==null ? 0 : 500);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, NamedList<Object> responseHeader,SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n    \n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n        \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8df14eca184f665d0ebd21bff9b962df55107e03","date":1234329251,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",status);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    responseHeader.add(\"status\",rsp.getException()==null ? 0 : 500);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",rsp.getException()==null ? 0 : 500);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":["d119e8687d5c78856fc86eee0f86c8367fdfad1f","ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeddcf8e42f213f1b4499194c6f014554e1a22ef","date":1242729902,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",status);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  protected void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",status);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/core/SolrCore#setResponseHeaderValues(SolrRequestHandler,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",status);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","sourceOld":"  public static void setResponseHeaderValues(SolrRequestHandler handler, SolrQueryRequest req, SolrQueryResponse rsp) {\n    // TODO should check that responseHeader has not been replaced by handler\n\tNamedList responseHeader = rsp.getResponseHeader();\n    final int qtime=(int)(rsp.getEndTime() - req.getStartTime());\n    int status = 0;\n    Exception exception = rsp.getException();\n    if( exception != null ){\n      if( exception instanceof SolrException )\n        status = ((SolrException)exception).code();\n      else\n        status = 500;\n    }\n    responseHeader.add(\"status\",status);\n    responseHeader.add(\"QTime\",qtime);\n    rsp.getToLog().add(\"status\",status);\n    rsp.getToLog().add(\"QTime\",qtime);\n    \n    SolrParams params = req.getParams();\n    if( params.getBool(CommonParams.HEADER_ECHO_HANDLER, false) ) {\n      responseHeader.add(\"handler\", handler.getName() );\n    }\n    \n    // Values for echoParams... false/true/all or false/explicit/all ???\n    String ep = params.get( CommonParams.HEADER_ECHO_PARAMS, null );\n    if( ep != null ) {\n      EchoParamStyle echoParams = EchoParamStyle.get( ep );\n      if( echoParams == null ) {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\"Invalid value '\" + ep + \"' for \" + CommonParams.HEADER_ECHO_PARAMS \n            + \" parameter, use '\" + EchoParamStyle.EXPLICIT + \"' or '\" + EchoParamStyle.ALL + \"'\" );\n      }\n      if( echoParams == EchoParamStyle.EXPLICIT ) {\n        responseHeader.add(\"params\", req.getOriginalParams().toNamedList());\n      } else if( echoParams == EchoParamStyle.ALL ) {\n        responseHeader.add(\"params\", req.getParams().toNamedList());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["8df14eca184f665d0ebd21bff9b962df55107e03"],"8df14eca184f665d0ebd21bff9b962df55107e03":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c":["8df14eca184f665d0ebd21bff9b962df55107e03"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ae248910a22eb7d1b6bd9ade7f9a33dfc0506f0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"eeddcf8e42f213f1b4499194c6f014554e1a22ef":["ad94625fb8d088209f46650c8097196fec67f00c"],"8df14eca184f665d0ebd21bff9b962df55107e03":["eeddcf8e42f213f1b4499194c6f014554e1a22ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}