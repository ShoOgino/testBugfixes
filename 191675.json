{"path":"lucene/backwards/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testCaching().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testCaching().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testCaching().mjava","sourceNew":"  public void testCaching() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    TokenStream stream = new TokenStream() {\n      private int index = 0;\n      private TermAttribute termAtt = addAttribute(TermAttribute.class);\n      private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (index == tokens.length) {\n          return false;\n        } else {\n          termAtt.setTermBuffer(tokens[index++]);\n          offsetAtt.setOffset(0,0);\n          return true;\n        }        \n      }\n      \n    };\n    \n    stream = new CachingTokenFilter(stream);\n    \n    doc.add(new Field(\"preanalyzed\", stream, TermVector.NO));\n    \n    // 1) we consume all tokens twice before we add the doc to the index\n    checkTokens(stream);\n    stream.reset();  \n    checkTokens(stream);\n    \n    // 2) now add the document to the index and verify if all tokens are indexed\n    //    don't reset the stream here, the DocumentWriter should do that implicitly\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, true);\n    TermPositions termPositions = reader.termPositions(new Term(\"preanalyzed\", \"term1\"));\n    assertTrue(termPositions.next());\n    assertEquals(1, termPositions.freq());\n    assertEquals(0, termPositions.nextPosition());\n\n    termPositions.seek(new Term(\"preanalyzed\", \"term2\"));\n    assertTrue(termPositions.next());\n    assertEquals(2, termPositions.freq());\n    assertEquals(1, termPositions.nextPosition());\n    assertEquals(3, termPositions.nextPosition());\n    \n    termPositions.seek(new Term(\"preanalyzed\", \"term3\"));\n    assertTrue(termPositions.next());\n    assertEquals(1, termPositions.freq());\n    assertEquals(2, termPositions.nextPosition());\n    reader.close();\n    \n    // 3) reset stream and consume tokens again\n    stream.reset();\n    checkTokens(stream);\n  }\n\n","sourceOld":"  public void testCaching() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    TokenStream stream = new TokenStream() {\n      private int index = 0;\n      private TermAttribute termAtt = addAttribute(TermAttribute.class);\n      private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (index == tokens.length) {\n          return false;\n        } else {\n          termAtt.setTermBuffer(tokens[index++]);\n          offsetAtt.setOffset(0,0);\n          return true;\n        }        \n      }\n      \n    };\n    \n    stream = new CachingTokenFilter(stream);\n    \n    doc.add(new Field(\"preanalyzed\", stream, TermVector.NO));\n    \n    // 1) we consume all tokens twice before we add the doc to the index\n    checkTokens(stream);\n    stream.reset();  \n    checkTokens(stream);\n    \n    // 2) now add the document to the index and verify if all tokens are indexed\n    //    don't reset the stream here, the DocumentWriter should do that implicitly\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, true);\n    TermPositions termPositions = reader.termPositions(new Term(\"preanalyzed\", \"term1\"));\n    assertTrue(termPositions.next());\n    assertEquals(1, termPositions.freq());\n    assertEquals(0, termPositions.nextPosition());\n\n    termPositions.seek(new Term(\"preanalyzed\", \"term2\"));\n    assertTrue(termPositions.next());\n    assertEquals(2, termPositions.freq());\n    assertEquals(1, termPositions.nextPosition());\n    assertEquals(3, termPositions.nextPosition());\n    \n    termPositions.seek(new Term(\"preanalyzed\", \"term3\"));\n    assertTrue(termPositions.next());\n    assertEquals(1, termPositions.freq());\n    assertEquals(2, termPositions.nextPosition());\n    reader.close();\n    \n    // 3) reset stream and consume tokens again\n    stream.reset();\n    checkTokens(stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testCaching().mjava","sourceNew":null,"sourceOld":"  public void testCaching() throws IOException {\n    Directory dir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(dir, new SimpleAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    TokenStream stream = new TokenStream() {\n      private int index = 0;\n      private TermAttribute termAtt = addAttribute(TermAttribute.class);\n      private OffsetAttribute offsetAtt = addAttribute(OffsetAttribute.class);\n      \n      @Override\n      public boolean incrementToken() throws IOException {\n        if (index == tokens.length) {\n          return false;\n        } else {\n          termAtt.setTermBuffer(tokens[index++]);\n          offsetAtt.setOffset(0,0);\n          return true;\n        }        \n      }\n      \n    };\n    \n    stream = new CachingTokenFilter(stream);\n    \n    doc.add(new Field(\"preanalyzed\", stream, TermVector.NO));\n    \n    // 1) we consume all tokens twice before we add the doc to the index\n    checkTokens(stream);\n    stream.reset();  \n    checkTokens(stream);\n    \n    // 2) now add the document to the index and verify if all tokens are indexed\n    //    don't reset the stream here, the DocumentWriter should do that implicitly\n    writer.addDocument(doc);\n    writer.close();\n    \n    IndexReader reader = IndexReader.open(dir, true);\n    TermPositions termPositions = reader.termPositions(new Term(\"preanalyzed\", \"term1\"));\n    assertTrue(termPositions.next());\n    assertEquals(1, termPositions.freq());\n    assertEquals(0, termPositions.nextPosition());\n\n    termPositions.seek(new Term(\"preanalyzed\", \"term2\"));\n    assertTrue(termPositions.next());\n    assertEquals(2, termPositions.freq());\n    assertEquals(1, termPositions.nextPosition());\n    assertEquals(3, termPositions.nextPosition());\n    \n    termPositions.seek(new Term(\"preanalyzed\", \"term3\"));\n    assertTrue(termPositions.next());\n    assertEquals(1, termPositions.freq());\n    assertEquals(2, termPositions.nextPosition());\n    reader.close();\n    \n    // 3) reset stream and consume tokens again\n    stream.reset();\n    checkTokens(stream);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}