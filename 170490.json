{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab2f54aa3920f7b4a9b92e45334237f6427b20d3","date":1522384863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"01c08b5f2812e10a28b12f814ff1b9bf64093081","date":1523849182,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 26-Mar-2018\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"273ff2f5b0b365591fcbe91ea23b5e97027ca60d","date":1551111277,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  public void testCollectionReload() throws Exception {\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91f7dccce9b0ec051304926da532b96944956895","date":1551188806,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#testCollectionReload().mjava","sourceNew":"  @Test\n  public void testCollectionReload() throws Exception {\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","sourceOld":"  @Test\n  public void testCollectionReload() throws Exception {\n\n    final String collectionName = \"reloaded_collection\";\n    CollectionAdminRequest.createCollection(collectionName, \"conf\", 2, 2).process(cluster.getSolrClient());\n\n    // get core open times\n    Map<String, Long> urlToTimeBefore = new HashMap<>();\n    collectStartTimes(collectionName, urlToTimeBefore);\n    assertTrue(urlToTimeBefore.size() > 0);\n\n    CollectionAdminRequest.reloadCollection(collectionName).processAsync(cluster.getSolrClient());\n\n    // reloads make take a short while\n    boolean allTimesAreCorrect = waitForReloads(collectionName, urlToTimeBefore);\n    assertTrue(\"some core start times did not change on reload\", allTimesAreCorrect);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"01c08b5f2812e10a28b12f814ff1b9bf64093081":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["b94236357aaa22b76c10629851fe4e376e0cea82","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"91f7dccce9b0ec051304926da532b96944956895":["01c08b5f2812e10a28b12f814ff1b9bf64093081","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["01c08b5f2812e10a28b12f814ff1b9bf64093081"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91f7dccce9b0ec051304926da532b96944956895"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d","ab2f54aa3920f7b4a9b92e45334237f6427b20d3"],"01c08b5f2812e10a28b12f814ff1b9bf64093081":["91f7dccce9b0ec051304926da532b96944956895","273ff2f5b0b365591fcbe91ea23b5e97027ca60d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["01c08b5f2812e10a28b12f814ff1b9bf64093081"],"91f7dccce9b0ec051304926da532b96944956895":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"273ff2f5b0b365591fcbe91ea23b5e97027ca60d":["91f7dccce9b0ec051304926da532b96944956895"],"ab2f54aa3920f7b4a9b92e45334237f6427b20d3":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}