{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","commits":[{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene42/Lucene42TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addProx(int numProx, DataInput positions, DataInput offsets)\n      throws IOException {\n    assert (curField.hasPositions) == (positions != null);\n    assert (curField.hasOffsets) == (offsets != null);\n\n    if (curField.hasPositions) {\n      final int posStart = curField.posStart + curField.totalPositions;\n      if (posStart + numProx > positionsBuf.length) {\n        positionsBuf = ArrayUtil.grow(positionsBuf, posStart + numProx);\n      }\n      int position = 0;\n      if (curField.hasPayloads) {\n        final int payStart = curField.payStart + curField.totalPositions;\n        if (payStart + numProx > payloadLengthsBuf.length) {\n          payloadLengthsBuf = ArrayUtil.grow(payloadLengthsBuf, payStart + numProx);\n        }\n        for (int i = 0; i < numProx; ++i) {\n          final int code = positions.readVInt();\n          if ((code & 1) != 0) {\n            // This position has a payload\n            final int payloadLength = positions.readVInt();\n            payloadLengthsBuf[payStart + i] = payloadLength;\n            payloadBytes.copyBytes(positions, payloadLength);\n          } else {\n            payloadLengthsBuf[payStart + i] = 0;\n          }\n          position += code >>> 1;\n          positionsBuf[posStart + i] = position;\n        }\n      } else {\n        for (int i = 0; i < numProx; ++i) {\n          position += (positions.readVInt() >>> 1);\n          positionsBuf[posStart + i] = position;\n        }\n      }\n    }\n\n    if (curField.hasOffsets) {\n      final int offStart = curField.offStart + curField.totalPositions;\n      if (offStart + numProx > startOffsetsBuf.length) {\n        final int newLength = ArrayUtil.oversize(offStart + numProx, 4);\n        startOffsetsBuf = Arrays.copyOf(startOffsetsBuf, newLength);\n        lengthsBuf = Arrays.copyOf(lengthsBuf, newLength);\n      }\n      int lastOffset = 0, startOffset, endOffset;\n      for (int i = 0; i < numProx; ++i) {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n        startOffsetsBuf[offStart + i] = startOffset;\n        lengthsBuf[offStart + i] = endOffset - startOffset;\n      }\n    }\n\n    curField.totalPositions += numProx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}