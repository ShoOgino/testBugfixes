{"path":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testForDVEnabledFields().mjava","commits":[{"id":"080177034f0f8c5fc458255dbe1e84334b531ade","date":1553677716,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/org/apache/solr/handler/extraction/TestXLSXResponseWriter#testForDVEnabledFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testForDVEnabledFields() throws Exception {\n    // for dv enabled and useDocValueAsStored=true\n    // returns pubyear_ii, store_iis but not price_ff\n    String singleFuncText = getStringFromSheet(\n        getWSResultForQuery(req(\"df\", \"text\", \"q\",\"id:5\", \"wt\",\"xlsx\")));\n    String sortedHeader = sortHeader(\"foo_i,foo_l,foo_s,pubyear_ii,store_iis,\" +\n        \"v2_ss,multiDefault,timestamp,foo_dt1,foo_b,foo_d,id,foo_f,v_ss,foo_s1,intDefault\");\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(2, singleFuncLines.length);\n    assertEquals(sortedHeader, sortHeader(singleFuncLines[0]));\n    List<String> actualVal = Arrays.stream(singleFuncLines[1].trim().split(\",\"))\n        .filter(val -> !val.trim().isEmpty() && !val.trim().equals(\"\\\"\\\"\"))\n        .collect(Collectors.toList());\n    assertTrue(actualVal.containsAll(Arrays.asList(\"5\", \"123\", \"12\")));\n\n    // explicit fl=*\n    singleFuncText = getStringFromSheet(\n        getWSResultForQuery(req(\"df\", \"text\", \"q\",\"id:5\", \"wt\",\"xlsx\", \"fl\", \"*\")));\n    singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(2, singleFuncLines.length);\n    assertEquals(sortedHeader, sortHeader(singleFuncLines[0]));\n    actualVal = Arrays.stream(singleFuncLines[1].trim().split(\",\"))\n        .filter(val -> !val.trim().isEmpty() && !val.trim().equals(\"\\\"\\\"\"))\n        .collect(Collectors.toList());\n    assertTrue(actualVal.containsAll(Arrays.asList(\"5\", \"123\", \"12\")));\n\n    // explicit price_ff\n    singleFuncText = getStringFromSheet(\n        getWSResultForQuery(req(\"df\", \"text\", \"q\",\"id:5\", \"wt\",\"xlsx\", \"fl\", \"price_ff\")));\n    singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(2, singleFuncLines.length);\n    assertEquals(\"price_ff\", singleFuncLines[0]);\n    assertEquals(\"1.3\", singleFuncLines[1]);\n\n    // explicit price_ff with fl=*\n    singleFuncText = getStringFromSheet(\n        getWSResultForQuery(req(\"df\", \"text\", \"q\",\"id:5\", \"wt\",\"xlsx\", \"csv.header\",\"true\", \"fl\", \"*,price_ff\")));\n    sortedHeader = sortHeader(\"foo_i,foo_l,foo_b,foo_s,pubyear_ii,store_iis,\" +\n        \"v2_ss,multiDefault,timestamp,foo_dt1,id,foo_d,foo_f,v_ss,foo_s1,intDefault,price_ff\");\n    singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(2, singleFuncLines.length);\n    assertEquals(sortedHeader, sortHeader(singleFuncLines[0]));\n    actualVal = Arrays.stream(singleFuncLines[1].trim().split(\",\"))\n        .filter(val -> !val.trim().isEmpty() && !val.trim().equals(\"\\\"\\\"\"))\n        .collect(Collectors.toList());\n    assertTrue(actualVal.containsAll(Arrays.asList(\"5\", \"123\", \"12\", \"1.3\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"080177034f0f8c5fc458255dbe1e84334b531ade":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["080177034f0f8c5fc458255dbe1e84334b531ade"]},"commit2Childs":{"080177034f0f8c5fc458255dbe1e84334b531ade":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["080177034f0f8c5fc458255dbe1e84334b531ade"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}