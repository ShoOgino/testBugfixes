{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues,SortedSetDocValues).mjava","commits":[{"id":"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0","date":1552989190,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedSetDocValues(String,int,SortedSetDocValues).mjava","sourceNew":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv, SortedSetDocValues dv2) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    for (int docID = dv.nextDoc(); docID != NO_MORE_DOCS; docID = dv.nextDoc()) {\n      if (dv2.advanceExact(docID) == false) {\n        throw new RuntimeException(\"advanceExact did not find matching doc ID: \" + docID);\n      }\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        long ord2 = dv2.nextOrd();\n        if (ord != ord2) {\n          throw new RuntimeException(\"nextDoc and advanceExact report different ords: \" + ord + \" != \" + ord2);\n        }\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n      long ord2 = dv2.nextOrd();\n      if (ord != ord2) {\n        throw new RuntimeException(\"nextDoc and advanceExact report different ords: \" + ord + \" != \" + ord2);\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","sourceOld":"  private static void checkSortedSetDocValues(String fieldName, int maxDoc, SortedSetDocValues dv) throws IOException {\n    final long maxOrd = dv.getValueCount()-1;\n    LongBitSet seenOrds = new LongBitSet(dv.getValueCount());\n    long maxOrd2 = -1;\n    int docID;\n    while ((docID = dv.nextDoc()) != NO_MORE_DOCS) {\n      long lastOrd = -1;\n      long ord;\n      int ordCount = 0;\n      while ((ord = dv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        if (ord <= lastOrd) {\n          throw new RuntimeException(\"ords out of order: \" + ord + \" <= \" + lastOrd + \" for doc: \" + docID);\n        }\n        if (ord < 0 || ord > maxOrd) {\n          throw new RuntimeException(\"ord out of bounds: \" + ord);\n        }\n        lastOrd = ord;\n        maxOrd2 = Math.max(maxOrd2, ord);\n        seenOrds.set(ord);\n        ordCount++;\n      }\n      if (ordCount == 0) {\n        throw new RuntimeException(\"dv for field: \" + fieldName + \" returned docID=\" + docID + \" yet has no ordinals\");\n      }\n    }\n    if (maxOrd != maxOrd2) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" reports wrong maxOrd=\" + maxOrd + \" but this is not the case: \" + maxOrd2);\n    }\n    if (seenOrds.cardinality() != dv.getValueCount()) {\n      throw new RuntimeException(\"dv for field: \" + fieldName + \" has holes in its ords, valueCount=\" + dv.getValueCount() + \" but only used: \" + seenOrds.cardinality());\n    }\n    \n    BytesRef lastValue = null;\n    for (long i = 0; i <= maxOrd; i++) {\n      final BytesRef term = dv.lookupOrd(i);\n      assert term.isValid();\n      if (lastValue != null) {\n        if (term.compareTo(lastValue) <= 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" has ords out of order: \" + lastValue + \" >=\" + term);\n        }\n      }\n      lastValue = BytesRef.deepCopyOf(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3d2a33d17fc14a585ce28e167b1bb1c31946b0"],"7f3d2a33d17fc14a585ce28e167b1bb1c31946b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}