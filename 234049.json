{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int totalLength = totalLength();\n      decompressor.decompress(fieldsStream, totalLength, 0, totalLength, bytes);\n      assert bytes.length == totalLength;\n      if (bytes.length != chunkSize()) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length);\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int totalLength = totalLength();\n      decompressor.decompress(fieldsStream, totalLength, 0, totalLength, bytes);\n      assert bytes.length == totalLength;\n      if (bytes.length != chunkSize()) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f5960acae7f4fa2e8a50f3f9aae784127f98eb7","date":1352900832,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length);\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int totalLength = totalLength();\n      decompressor.decompress(fieldsStream, totalLength, 0, totalLength, bytes);\n      assert bytes.length == totalLength;\n      if (bytes.length != chunkSize()) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length + \" (resource=\" + fieldsStream + \")\");\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length);\n      }\n    }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47081d784f5fff71bb715c806c824b50901392fb","date":1378303234,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (version >= VERSION_BIG_CHUNKS && chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length + \" (resource=\" + fieldsStream + \")\");\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length + \" (resource=\" + fieldsStream + \")\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (version >= VERSION_BIG_CHUNKS && chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length, fieldsStream);\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (version >= VERSION_BIG_CHUNKS && chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length + \" (resource=\" + fieldsStream + \")\");\n      }\n    }\n\n","bugFix":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"389e8bca54f58e35576077f3ff46f123b3660018","date":1411859915,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length, fieldsStream);\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (version >= VERSION_BIG_CHUNKS && chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length, fieldsStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length, fieldsStream);\n      }\n    }\n\n","sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (version >= VERSION_BIG_CHUNKS && chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length, fieldsStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f09f483a0844bb9dc34fb10380cb053aa96219b","date":1418894001,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.ChunkIterator#decompress().mjava","sourceNew":null,"sourceOld":"    /**\n     * Decompress the chunk.\n     */\n    void decompress() throws IOException {\n      // decompress data\n      final int chunkSize = chunkSize();\n      if (chunkSize >= 2 * CompressingStoredFieldsReader.this.chunkSize) {\n        bytes.offset = bytes.length = 0;\n        for (int decompressed = 0; decompressed < chunkSize; ) {\n          final int toDecompress = Math.min(chunkSize - decompressed, CompressingStoredFieldsReader.this.chunkSize);\n          decompressor.decompress(fieldsStream, toDecompress, 0, toDecompress, spare);\n          bytes.bytes = ArrayUtil.grow(bytes.bytes, bytes.length + spare.length);\n          System.arraycopy(spare.bytes, spare.offset, bytes.bytes, bytes.length, spare.length);\n          bytes.length += spare.length;\n          decompressed += toDecompress;\n        }\n      } else {\n        decompressor.decompress(fieldsStream, chunkSize, 0, chunkSize, bytes);\n      }\n      if (bytes.length != chunkSize) {\n        throw new CorruptIndexException(\"Corrupted: expected chunk size = \" + chunkSize() + \", got \" + bytes.length, fieldsStream);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["4f5960acae7f4fa2e8a50f3f9aae784127f98eb7"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["47081d784f5fff71bb715c806c824b50901392fb"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","389e8bca54f58e35576077f3ff46f123b3660018"],"4f5960acae7f4fa2e8a50f3f9aae784127f98eb7":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f5960acae7f4fa2e8a50f3f9aae784127f98eb7"],"1f09f483a0844bb9dc34fb10380cb053aa96219b":["9bb9a29a5e71a90295f175df8919802993142c9a"],"389e8bca54f58e35576077f3ff46f123b3660018":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"47081d784f5fff71bb715c806c824b50901392fb":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f09f483a0844bb9dc34fb10380cb053aa96219b"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["47081d784f5fff71bb715c806c824b50901392fb"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["9bb9a29a5e71a90295f175df8919802993142c9a","389e8bca54f58e35576077f3ff46f123b3660018"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["4f5960acae7f4fa2e8a50f3f9aae784127f98eb7"],"9bb9a29a5e71a90295f175df8919802993142c9a":["1f09f483a0844bb9dc34fb10380cb053aa96219b"],"4f5960acae7f4fa2e8a50f3f9aae784127f98eb7":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"1f09f483a0844bb9dc34fb10380cb053aa96219b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"389e8bca54f58e35576077f3ff46f123b3660018":["9bb9a29a5e71a90295f175df8919802993142c9a"],"47081d784f5fff71bb715c806c824b50901392fb":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}