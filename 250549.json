{"path":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","commits":[{"id":"aa6d0ca44ce171ad041951fa8fb94731b7d778d9","date":1316629244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","pathOld":"/dev/null","sourceNew":"  /** dfr with parameterized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","sourceNew":"  /** dfr with parametrized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","sourceOld":"  /** dfr with parameterized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","sourceNew":"  /** dfr with parametrized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","sourceOld":"  /** dfr with parameterized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/similarities/TestDFRSimilarityFactory#testParameters().mjava","sourceNew":"  /** dfr with parametrized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","sourceOld":"  /** dfr with parameterized normalization */\n  public void testParameters() throws Exception {\n    Similarity sim = getSimilarity(\"text_params\");\n    assertEquals(DFRSimilarity.class, sim.getClass());\n    DFRSimilarity dfr = (DFRSimilarity) sim;\n    assertEquals(BasicModelIF.class, dfr.getBasicModel().getClass());\n    assertEquals(AfterEffectB.class, dfr.getAfterEffect().getClass());\n    assertEquals(NormalizationH3.class, dfr.getNormalization().getClass());\n    NormalizationH3 norm = (NormalizationH3) dfr.getNormalization();\n    assertEquals(900f, norm.getMu(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa6d0ca44ce171ad041951fa8fb94731b7d778d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9"]},"commit2Childs":{"aa6d0ca44ce171ad041951fa8fb94731b7d778d9":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa6d0ca44ce171ad041951fa8fb94731b7d778d9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}