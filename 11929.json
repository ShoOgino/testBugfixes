{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testRandom().mjava","commits":[{"id":"d19946da5b8a6505034a72adcb5bae87dd043ddd","date":1423451445,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @Repeat(iterations = 20)\n  public void testRandom() throws IOException {\n    // Tests using random index shapes & query shapes. This has found all sorts of edge case bugs (e.g. dateline,\n    // cell border, overflow(?)).\n\n    final int numIndexedShapes = 1 + atMost(9);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\" + i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\" + id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    // once without dateline wrap\n    final Rectangle rect = randomRectangle();\n    queryHeatmapRecursive(usually() ? ctx.getWorldBounds() : rect, 1);\n    // and once with dateline wrap\n    if (rect.getWidth() > 0) {\n      double shift = random().nextDouble() % rect.getWidth();\n      queryHeatmapRecursive(ctx.makeRectangle(\n              DistanceUtils.normLonDEG(rect.getMinX() - shift),\n              DistanceUtils.normLonDEG(rect.getMaxX() - shift),\n              rect.getMinY(), rect.getMaxY()),\n          1);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testRandom().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testRandom().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 20)\n  public void testRandom() throws IOException {\n    // Tests using random index shapes & query shapes. This has found all sorts of edge case bugs (e.g. dateline,\n    // cell border, overflow(?)).\n\n    final int numIndexedShapes = 1 + atMost(9);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\" + i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\" + id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    // once without dateline wrap\n    final Rectangle rect = randomRectangle();\n    queryHeatmapRecursive(usually() ? ctx.getWorldBounds() : rect, 1);\n    // and once with dateline wrap\n    if (rect.getWidth() > 0) {\n      double shift = random().nextDouble() % rect.getWidth();\n      queryHeatmapRecursive(ctx.makeRectangle(\n              DistanceUtils.normLonDEG(rect.getMinX() - shift),\n              DistanceUtils.normLonDEG(rect.getMaxX() - shift),\n              rect.getMinY(), rect.getMaxY()),\n          1);\n    }\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 20)\n  public void testRandom() throws IOException {\n    // Tests using random index shapes & query shapes. This has found all sorts of edge case bugs (e.g. dateline,\n    // cell border, overflow(?)).\n\n    final int numIndexedShapes = 1 + atMost(9);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\" + i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\" + id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    // once without dateline wrap\n    final Rectangle rect = randomRectangle();\n    queryHeatmapRecursive(usually() ? ctx.getWorldBounds() : rect, 1);\n    // and once with dateline wrap\n    if (rect.getWidth() > 0) {\n      double shift = random().nextDouble() % rect.getWidth();\n      queryHeatmapRecursive(ctx.makeRectangle(\n              DistanceUtils.normLonDEG(rect.getMinX() - shift),\n              DistanceUtils.normLonDEG(rect.getMaxX() - shift),\n              rect.getMinY(), rect.getMaxY()),\n          1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testRandom().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/HeatmapFacetCounterTest#testRandom().mjava","sourceNew":"  @Test\n  @Repeat(iterations = 20)\n  public void testRandom() throws IOException {\n    // Tests using random index shapes & query shapes. This has found all sorts of edge case bugs (e.g. dateline,\n    // cell border, overflow(?)).\n\n    final int numIndexedShapes = 1 + atMost(9);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\" + i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\" + id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    // once without dateline wrap\n    final Rectangle rect = randomRectangle();\n    queryHeatmapRecursive(usually() ? ctx.getWorldBounds() : rect, 1);\n    // and once with dateline wrap\n    if (rect.getWidth() > 0) {\n      double shift = random().nextDouble() % rect.getWidth();\n      queryHeatmapRecursive(ctx.makeRectangle(\n              DistanceUtils.normLonDEG(rect.getMinX() - shift),\n              DistanceUtils.normLonDEG(rect.getMaxX() - shift),\n              rect.getMinY(), rect.getMaxY()),\n          1);\n    }\n  }\n\n","sourceOld":"  @Test\n  @Repeat(iterations = 20)\n  public void testRandom() throws IOException {\n    // Tests using random index shapes & query shapes. This has found all sorts of edge case bugs (e.g. dateline,\n    // cell border, overflow(?)).\n\n    final int numIndexedShapes = 1 + atMost(9);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    //Main index loop:\n    for (int i = 0; i < indexedShapes.size(); i++) {\n      Shape shape = indexedShapes.get(i);\n      adoc(\"\" + i, shape);\n\n      if (random().nextInt(10) == 0)\n        commit();//intermediate commit, produces extra segments\n    }\n    //delete some documents randomly\n    for (int id = 0; id < indexedShapes.size(); id++) {\n      if (random().nextInt(10) == 0) {\n        deleteDoc(\"\" + id);\n        indexedShapes.set(id, null);\n      }\n    }\n\n    commit();\n\n    // once without dateline wrap\n    final Rectangle rect = randomRectangle();\n    queryHeatmapRecursive(usually() ? ctx.getWorldBounds() : rect, 1);\n    // and once with dateline wrap\n    if (rect.getWidth() > 0) {\n      double shift = random().nextDouble() % rect.getWidth();\n      queryHeatmapRecursive(ctx.makeRectangle(\n              DistanceUtils.normLonDEG(rect.getMinX() - shift),\n              DistanceUtils.normLonDEG(rect.getMaxX() - shift),\n              rect.getMinY(), rect.getMaxY()),\n          1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d19946da5b8a6505034a72adcb5bae87dd043ddd","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d19946da5b8a6505034a72adcb5bae87dd043ddd"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"d19946da5b8a6505034a72adcb5bae87dd043ddd":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}