{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","commits":[{"id":"cd9165e54429bb5c99e75d5cb1c926cc98772456","date":1337362687,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129c6e8ac0c0d9a110ba29e4b5f1889374f30076","date":1337725510,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8febb56d1ed9f3314d35d075599fd9aff857be3c","date":1337729003,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16cbef32b882ec68df422af3f08845ec82620335","date":1337802266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[FieldInfo,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<FieldInfo, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(state.numDocs);\n        assert state.segmentName != null;\n        writer.finish(state.numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4851f51f54c38a114862c7c4b92fb9e2d20e2bdf","date":1370604663,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n\n    for (final TermsHashConsumerPerField field : fieldsToFlush.values() ) {\n      TermVectorsConsumerPerField perField = (TermVectorsConsumerPerField) field;\n      perField.termsHashPerField.reset();\n      perField.shrinkHash();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashConsumerPerField],SegmentWriteState).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashConsumerPerField> fieldsToFlush, final SegmentWriteState state) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.getDocCount();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","52c7e49be259508735752fba88085255014a6ecf"],"8febb56d1ed9f3314d35d075599fd9aff857be3c":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16cbef32b882ec68df422af3f08845ec82620335"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["cd9165e54429bb5c99e75d5cb1c926cc98772456"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","3394716f52b34ab259ad5247e7595d9f9db6e935"],"4851f51f54c38a114862c7c4b92fb9e2d20e2bdf":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4851f51f54c38a114862c7c4b92fb9e2d20e2bdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16cbef32b882ec68df422af3f08845ec82620335":["8febb56d1ed9f3314d35d075599fd9aff857be3c"],"52c7e49be259508735752fba88085255014a6ecf":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8febb56d1ed9f3314d35d075599fd9aff857be3c":["16cbef32b882ec68df422af3f08845ec82620335"],"129c6e8ac0c0d9a110ba29e4b5f1889374f30076":["8febb56d1ed9f3314d35d075599fd9aff857be3c"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["4851f51f54c38a114862c7c4b92fb9e2d20e2bdf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"4851f51f54c38a114862c7c4b92fb9e2d20e2bdf":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","cd9165e54429bb5c99e75d5cb1c926cc98772456"],"16cbef32b882ec68df422af3f08845ec82620335":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd9165e54429bb5c99e75d5cb1c926cc98772456":["129c6e8ac0c0d9a110ba29e4b5f1889374f30076"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}