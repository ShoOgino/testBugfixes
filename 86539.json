{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","pathOld":"/dev/null","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","pathOld":"/dev/null","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThread#deleteDocID(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","sourceNew":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","sourceNew":null,"sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#deleteDocID(int).mjava","sourceNew":null,"sourceOld":"  // Buffer a specific docID for deletion.  Currently only\n  // used when we hit a exception when adding a document\n  synchronized void deleteDocID(int docIDUpto) {\n    pendingDeletes.addDocID(docIDUpto);\n    // NOTE: we do not trigger flush here.  This is\n    // potentially a RAM leak, if you have an app that tries\n    // to add docs but every single doc always hits a\n    // non-aborting exception.  Allowing a flush here gets\n    // very messy because we are only invoked when handling\n    // exceptions so to do this properly, while handling an\n    // exception we'd have to go off and flush new deletes\n    // which is risky (likely would hit some other\n    // confounding exception).\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}