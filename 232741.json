{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611797611928fc8d5afd1c468ef7522f1cc03b61","date":1496234454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    Map autoSalingJson = zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true);\n    autoSalingJson = autoSalingJson == null ? Collections.EMPTY_MAP : autoSalingJson;\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoSalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      String collName = message.getStr(COLLECTION_PROP, message.getStr(NAME));\n      try (CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n        Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            clientDataProvider, singletonMap(collName, policyName), shardNames, numNrtReplicas);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for (int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b","date":1496237185,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoSalingJson = zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true);\n    autoSalingJson = autoSalingJson == null ? Collections.EMPTY_MAP : autoSalingJson;\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoSalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(message.getStr(COLLECTION_PROP, message.getStr(NAME)),\n          shardNames, numNrtReplicas, policyName, zkStateReader);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    Map autoSalingJson = zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true);\n    autoSalingJson = autoSalingJson == null ? Collections.EMPTY_MAP : autoSalingJson;\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoSalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      String collName = message.getStr(COLLECTION_PROP, message.getStr(NAME));\n      try (CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n        Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            clientDataProvider, singletonMap(collName, policyName), shardNames, numNrtReplicas);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for (int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4328dc3f7309b4c82d12f9e9420a487a1b9945dd","date":1496650286,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(message.getStr(COLLECTION_PROP, message.getStr(NAME)),\n          shardNames, numNrtReplicas, policyName, zkStateReader);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoSalingJson = zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true);\n    autoSalingJson = autoSalingJson == null ? Collections.EMPTY_MAP : autoSalingJson;\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoSalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(message.getStr(COLLECTION_PROP, message.getStr(NAME)),\n          shardNames, numNrtReplicas, policyName, zkStateReader);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(message.getStr(COLLECTION_PROP, message.getStr(NAME)),\n          shardNames, numNrtReplicas, policyName, zkStateReader);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","sourceNew":null,"sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["61c45e99cf6676da48f19d7511c73712ad39402b"],"25e4a4cddd699db6cce60282e747c7705897e821":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["61c45e99cf6676da48f19d7511c73712ad39402b","25e4a4cddd699db6cce60282e747c7705897e821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"28288370235ed02234a64753cdbf0c6ec096304a":["61c45e99cf6676da48f19d7511c73712ad39402b","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["d118ef896fa37a21d831f7e8ffcb8c44b9afc13b"]},"commit2Childs":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["d118ef896fa37a21d831f7e8ffcb8c44b9afc13b"],"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"61c45e99cf6676da48f19d7511c73712ad39402b":["611797611928fc8d5afd1c468ef7522f1cc03b61","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61c45e99cf6676da48f19d7511c73712ad39402b"],"d118ef896fa37a21d831f7e8ffcb8c44b9afc13b":["4328dc3f7309b4c82d12f9e9420a487a1b9945dd"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4328dc3f7309b4c82d12f9e9420a487a1b9945dd":["25e4a4cddd699db6cce60282e747c7705897e821"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}