{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","commits":[{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7875fce026a0a335830cfc75abc3eb009eff9a73","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      if (overseerClient != null) {\n       overseerClient.close();\n      }\n      if (mockController != null) {\n        mockController.close();\n      }\n\n      if (controllerClient != null) {\n        controllerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getCloudState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29f5eaf296600e1665151e7929d42a3cbe22e481","date":1393983215,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", \"collection1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(\"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      controllerClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n      \n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", ZkStateReader.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48cfd089cba66f9745d8043e8e971b60514418d","date":1449003177,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, collection);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(collection).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, \"collection1\");\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(\"collection1\").size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, COLLECTION);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(COLLECTION).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, collection);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(collection).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, COLLECTION);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(COLLECTION).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(collection, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, collection);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(collection).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, COLLECTION);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(COLLECTION).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, COLLECTION);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(COLLECTION).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testPlaceholders().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPlaceholders() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient controllerClient = null;\n    SolrZkClient overseerClient = null;\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n    \n    try {\n      server.run();\n      controllerClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(controllerClient);\n\n      reader = new ZkStateReader(controllerClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      mockController.publishState(COLLECTION, \"core1\", \"node1\", Replica.State.RECOVERING, 12);\n\n      waitForCollections(reader, COLLECTION);\n      \n      assertEquals(\"Slicecount does not match\", 12, reader.getClusterState().getSlices(COLLECTION).size());\n      \n    } finally {\n      close(overseerClient);\n      close(mockController);\n      close(controllerClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["849494cf2f3a96af5c8c84995108ddd8456fcd04","29f5eaf296600e1665151e7929d42a3cbe22e481"],"5de502b5478255493125e7e801411ba17a6682ec":["d48cfd089cba66f9745d8043e8e971b60514418d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["29f5eaf296600e1665151e7929d42a3cbe22e481","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3f767f8c99eaedb984df754fe61f21c5de260f94","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["84250b785753dee996ec3f88a1ea2e941ebe7cfb","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["d48cfd089cba66f9745d8043e8e971b60514418d"],"d48cfd089cba66f9745d8043e8e971b60514418d":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f4abec28b874149a7223e32cc7a01704c27790de","7875fce026a0a335830cfc75abc3eb009eff9a73"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["29f5eaf296600e1665151e7929d42a3cbe22e481"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d48cfd089cba66f9745d8043e8e971b60514418d":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"29f5eaf296600e1665151e7929d42a3cbe22e481":["96ea64d994d340044e0d57aeb6a5871539d10ca5","2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["d48cfd089cba66f9745d8043e8e971b60514418d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","29f5eaf296600e1665151e7929d42a3cbe22e481"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8fd5be977c105554c6a7b68afcdbc511439723ab","849494cf2f3a96af5c8c84995108ddd8456fcd04","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a5093a9e893633cc091cf2f729d7863671c2b715":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8fd5be977c105554c6a7b68afcdbc511439723ab","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}