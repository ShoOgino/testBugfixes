{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","commits":[{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(byte[] segmentID, Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.segmentID = segmentID;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          if (version >= CompoundFileWriter.VERSION_SEGMENTHEADER) {\n            // nocommit: remove this null \"hack\", its because old rw test codecs cant properly impersonate\n            if (segmentID == null) {\n              CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n              handle.skipBytes(StringHelper.ID_LENGTH);\n            } else {\n              CodecUtil.checkSegmentHeader(handle, CompoundFileWriter.DATA_CODEC, version, version, segmentID, \"\");\n            }\n          } else {\n            CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          }\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(segmentID, directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(byte[] segmentID, Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.segmentID = segmentID;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          if (version >= CompoundFileWriter.VERSION_SEGMENTHEADER) {\n            // nocommit: remove this null \"hack\", its because old rw test codecs cant properly impersonate\n            if (segmentID == null) {\n              CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n              handle.skipBytes(StringHelper.ID_LENGTH);\n            } else {\n              CodecUtil.checkSegmentHeader(handle, CompoundFileWriter.DATA_CODEC, version, version, segmentID, \"\");\n            }\n          } else {\n            CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          }\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(segmentID, directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c550967fa12e5ac7ea0a4134124f18280da0ebb1","date":1412264295,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(byte[] segmentID, Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.segmentID = segmentID;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        CodecUtil.checkSegmentHeader(handle, CompoundFileWriter.DATA_CODEC, version, version, segmentID, \"\");\n\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(handle);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(segmentID, directory, fileName);\n      handle = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(byte[] segmentID, Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.segmentID = segmentID;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        if (version >= CompoundFileWriter.VERSION_CHECKSUM) {\n          if (version >= CompoundFileWriter.VERSION_SEGMENTHEADER) {\n            // nocommit: remove this null \"hack\", its because old rw test codecs cant properly impersonate\n            if (segmentID == null) {\n              CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n              handle.skipBytes(StringHelper.ID_LENGTH);\n            } else {\n              CodecUtil.checkSegmentHeader(handle, CompoundFileWriter.DATA_CODEC, version, version, segmentID, \"\");\n            }\n          } else {\n            CodecUtil.checkHeader(handle, CompoundFileWriter.DATA_CODEC, version, version);\n          }\n          // NOTE: data file is too costly to verify checksum against all the bytes on open,\n          // but for now we at least verify proper structure of the checksum footer: which looks\n          // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n          // such as file truncation.\n          CodecUtil.retrieveChecksum(handle);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(segmentID, directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f936b67ab4a872d22231aae4f63608e7f411071","date":1412266152,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/CompoundFileDirectory#CompoundFileDirectory(byte[],Directory,String,IOContext,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public CompoundFileDirectory(byte[] segmentID, Directory directory, String fileName, IOContext context, boolean openForWrite) throws IOException {\n    this.directory = directory;\n    this.segmentID = segmentID;\n    this.fileName = fileName;\n    this.readBufferSize = BufferedIndexInput.bufferSize(context);\n    this.isOpen = false;\n    this.openForWrite = openForWrite;\n    if (!openForWrite) {\n      boolean success = false;\n      handle = directory.openInput(fileName, context);\n      try {\n        this.entries = readEntries(directory, fileName);\n        CodecUtil.checkSegmentHeader(handle, CompoundFileWriter.DATA_CODEC, version, version, segmentID, \"\");\n\n        // NOTE: data file is too costly to verify checksum against all the bytes on open,\n        // but for now we at least verify proper structure of the checksum footer: which looks\n        // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n        // such as file truncation.\n        CodecUtil.retrieveChecksum(handle);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(handle);\n        }\n      }\n      this.isOpen = true;\n      writer = null;\n    } else {\n      assert !(directory instanceof CompoundFileDirectory) : \"compound file inside of compound file: \" + fileName;\n      this.entries = SENTINEL;\n      this.isOpen = true;\n      writer = new CompoundFileWriter(segmentID, directory, fileName);\n      handle = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f936b67ab4a872d22231aae4f63608e7f411071":["c550967fa12e5ac7ea0a4134124f18280da0ebb1"],"c550967fa12e5ac7ea0a4134124f18280da0ebb1":["989d940c4bf402188f4f0ae13736836885227383"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["c550967fa12e5ac7ea0a4134124f18280da0ebb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["989d940c4bf402188f4f0ae13736836885227383","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f936b67ab4a872d22231aae4f63608e7f411071":[],"c550967fa12e5ac7ea0a4134124f18280da0ebb1":["7f936b67ab4a872d22231aae4f63608e7f411071"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f936b67ab4a872d22231aae4f63608e7f411071","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}