{"path":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String startStr, String endStr, boolean minInclusive, boolean maxInclusive) {\n    if (parser == null) {//null when invoked by SimpleFacets.  But getQueryFromSpatialArgs expects to get localParams.\n      final SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();\n      parser = new QParser(\"\", null, requestInfo.getReq().getParams(), requestInfo.getReq()) {\n        @Override\n        public Query parse() throws SyntaxError {\n          throw new IllegalStateException();\n        }\n      };\n    }\n\n    Calendar startCal;\n    if (startStr == null) {\n      startCal = tree.newCal();\n    } else {\n      startCal = parseCalendar(startStr);\n      if (!minInclusive) {\n        startCal.add(Calendar.MILLISECOND, 1);\n      }\n    }\n    Calendar endCal;\n    if (endStr == null) {\n      endCal = tree.newCal();\n    } else {\n      endCal = parseCalendar(endStr);\n      if (!maxInclusive) {\n        endCal.add(Calendar.MILLISECOND, -1);\n      }\n    }\n    Shape shape = tree.toRangeShape(tree.toShape(startCal), tree.toShape(endCal));\n    SpatialArgs spatialArgs = new SpatialArgs(SpatialOperation.Intersects, shape);\n    return getQueryFromSpatialArgs(parser, field, spatialArgs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c81907bd971f786e378654d32b80da32b0e950d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}