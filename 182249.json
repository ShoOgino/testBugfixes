{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,int,Sort,boolean,boolean).mjava","commits":[{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Search implementation with arbitrary sorting, plus\n   * control over whether hit scores and max score\n   * should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code>, and sorting\n   * the hits by the criteria in <code>sort</code>.\n   * If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs search(Query query, int n,\n      Sort sort, boolean doDocScores, boolean doMaxScore) throws IOException {\n    return searchAfter(null, query, n, sort, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting, plus\n   * control over whether hit scores and max score\n   * should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code>, applying\n   * <code>filter</code> if non-null, and sorting the hits by the criteria in\n   * <code>sort</code>.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs search(Query query, Filter filter, int n,\n                             Sort sort, boolean doDocScores, boolean doMaxScore) throws IOException {\n    return searchAfter(null, query, filter, n, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,int,Sort,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Search implementation with arbitrary sorting, plus\n   * control over whether hit scores and max score\n   * should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code>, and sorting\n   * the hits by the criteria in <code>sort</code>.\n   * If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs search(Query query, int n,\n      Sort sort, boolean doDocScores) throws IOException {\n    return searchAfter(null, query, n, sort, doDocScores);\n  }\n\n","sourceOld":"  /** Search implementation with arbitrary sorting, plus\n   * control over whether hit scores and max score\n   * should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code>, and sorting\n   * the hits by the criteria in <code>sort</code>.\n   * If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs search(Query query, int n,\n      Sort sort, boolean doDocScores, boolean doMaxScore) throws IOException {\n    return searchAfter(null, query, n, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,int,Sort,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /** Search implementation with arbitrary sorting, plus\n   * control over whether hit scores and max score\n   * should be computed.  Finds\n   * the top <code>n</code> hits for <code>query</code>, and sorting\n   * the hits by the criteria in <code>sort</code>.\n   * If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   * \n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs search(Query query, int n,\n      Sort sort, boolean doDocScores, boolean doMaxScore) throws IOException {\n    return searchAfter(null, query, n, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}