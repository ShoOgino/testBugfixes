{"path":"solr/core/src/java/org/apache/solr/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n    final LegacyFieldType fieldType = (LegacyFieldType) fieldType();\n    final LegacyNumericType numericType = fieldType.numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(fieldType.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n    return super.tokenStream(analyzer, reuse);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n    final LegacyFieldType fieldType = (LegacyFieldType) fieldType();\n    final LegacyNumericType numericType = fieldType.numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(fieldType.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n    return super.tokenStream(analyzer, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n    final LegacyFieldType fieldType = (LegacyFieldType) fieldType();\n    final LegacyNumericType numericType = fieldType.numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(fieldType.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n    return super.tokenStream(analyzer, reuse);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n    final LegacyFieldType fieldType = (LegacyFieldType) fieldType();\n    final LegacyNumericType numericType = fieldType.numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(fieldType.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n    return super.tokenStream(analyzer, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyField#tokenStream(Analyzer,TokenStream).mjava","sourceNew":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n    final LegacyFieldType fieldType = (LegacyFieldType) fieldType();\n    final LegacyNumericType numericType = fieldType.numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(fieldType.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n    return super.tokenStream(analyzer, reuse);\n  }\n\n","sourceOld":"  @Override\n  public TokenStream tokenStream(Analyzer analyzer, TokenStream reuse) {\n    if (fieldType().indexOptions() == IndexOptions.NONE) {\n      // Not indexed\n      return null;\n    }\n    final LegacyFieldType fieldType = (LegacyFieldType) fieldType();\n    final LegacyNumericType numericType = fieldType.numericType();\n    if (numericType != null) {\n      if (!(reuse instanceof LegacyNumericTokenStream && ((LegacyNumericTokenStream)reuse).getPrecisionStep() == fieldType.numericPrecisionStep())) {\n        // lazy init the TokenStream as it is heavy to instantiate\n        // (attributes,...) if not needed (stored field loading)\n        reuse = new LegacyNumericTokenStream(fieldType.numericPrecisionStep());\n      }\n      final LegacyNumericTokenStream nts = (LegacyNumericTokenStream) reuse;\n      // initialize value in TokenStream\n      final Number val = (Number) fieldsData;\n      switch (numericType) {\n      case INT:\n        nts.setIntValue(val.intValue());\n        break;\n      case LONG:\n        nts.setLongValue(val.longValue());\n        break;\n      case FLOAT:\n        nts.setFloatValue(val.floatValue());\n        break;\n      case DOUBLE:\n        nts.setDoubleValue(val.doubleValue());\n        break;\n      default:\n        throw new AssertionError(\"Should never get here\");\n      }\n      return reuse;\n    }\n    return super.tokenStream(analyzer, reuse);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}