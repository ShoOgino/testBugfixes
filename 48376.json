{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testTooLarge().mjava","commits":[{"id":"dd4aa10c3623b9da92a555b8d04677af8fe86877","date":1456230278,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testTooLarge().mjava","pathOld":"/dev/null","sourceNew":"  /** Test if we add a too-large value */\n  public void testTooLarge() throws Exception {\n    BigInteger tooLarge = BigInteger.ONE.shiftLeft(128);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BigIntegerPoint(\"field\", tooLarge);\n    });\n    assertTrue(expected.getMessage().contains(\"requires more than 16 bytes storage\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testTooLarge().mjava","pathOld":"/dev/null","sourceNew":"  /** Test if we add a too-large value */\n  public void testTooLarge() throws Exception {\n    BigInteger tooLarge = BigInteger.ONE.shiftLeft(128);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BigIntegerPoint(\"field\", tooLarge);\n    });\n    assertTrue(expected.getMessage().contains(\"requires more than 16 bytes storage\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testTooLarge().mjava","pathOld":"/dev/null","sourceNew":"  /** Test if we add a too-large value */\n  public void testTooLarge() throws Exception {\n    BigInteger tooLarge = BigInteger.ONE.shiftLeft(128);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BigIntegerPoint(\"field\", tooLarge);\n    });\n    assertTrue(expected.getMessage().contains(\"requires more than 16 bytes storage\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testTooLarge().mjava","sourceNew":null,"sourceOld":"  /** Test if we add a too-large value */\n  public void testTooLarge() throws Exception {\n    BigInteger tooLarge = BigInteger.ONE.shiftLeft(128);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BigIntegerPoint(\"field\", tooLarge);\n    });\n    assertTrue(expected.getMessage().contains(\"requires more than 16 bytes storage\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2666c8ef916fe551b88266a876c0320db0683dd","date":1456397478,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestBigIntegerPoint#testTooLarge().mjava","pathOld":"/dev/null","sourceNew":"  /** Test if we add a too-large value */\n  public void testTooLarge() throws Exception {\n    BigInteger tooLarge = BigInteger.ONE.shiftLeft(128);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new BigIntegerPoint(\"field\", tooLarge);\n    });\n    assertTrue(expected.getMessage().contains(\"requires more than 16 bytes storage\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd4aa10c3623b9da92a555b8d04677af8fe86877":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5296efc4b319f5647b606629c093a94b23692c6"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["dd4aa10c3623b9da92a555b8d04677af8fe86877"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd4aa10c3623b9da92a555b8d04677af8fe86877"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"d2666c8ef916fe551b88266a876c0320db0683dd":["b9ccce763ea3c7e51eff749e584c061d8744b72d"]},"commit2Childs":{"dd4aa10c3623b9da92a555b8d04677af8fe86877":["b9ccce763ea3c7e51eff749e584c061d8744b72d","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd4aa10c3623b9da92a555b8d04677af8fe86877","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","a5296efc4b319f5647b606629c093a94b23692c6"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["d2666c8ef916fe551b88266a876c0320db0683dd"],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d2666c8ef916fe551b88266a876c0320db0683dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d2666c8ef916fe551b88266a876c0320db0683dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}