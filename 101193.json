{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","commits":[{"id":"e7b27dde701ae80df8bea8eb554d31e4e8bc6126","date":1354814363,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"/dev/null","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(strategy.makeQuery(q.args), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there & parses\n      assertNotNull(ctx.readShape(got.results.get(0).document.get(strategy.getFieldName())));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"/dev/null","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(strategy.makeQuery(q.args), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there & parses\n      assertNotNull(ctx.readShape(got.results.get(0).document.get(strategy.getFieldName())));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(strategy.makeQuery(q.args), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(strategy.makeQuery(q.args), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there & parses\n      assertNotNull(ctx.readShape(got.results.get(0).document.get(strategy.getFieldName())));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1068799b5537c6408504cf7e15cb90ba57491440","date":1392577122,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(strategy.makeQuery(q.args), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<String>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQuery(SpatialMatchConcern,SpatialTestQuery).mjava","sourceNew":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQuery(SpatialMatchConcern concern, SpatialTestQuery q) {\n    String msg = q.toString(); //\"Query: \" + q.args.toString(ctx);\n    SearchResults got = executeQuery(makeQuery(q), Math.max(100, q.ids.size()+1));\n    if (storeShape && got.numFound > 0) {\n      //check stored value is there\n      assertNotNull(got.results.get(0).document.get(strategy.getFieldName()));\n    }\n    if (concern.orderIsImportant) {\n      Iterator<String> ids = q.ids.iterator();\n      for (SearchResult r : got.results) {\n        String id = r.document.get(\"id\");\n        if (!ids.hasNext()) {\n          fail(msg + \" :: Did not get enough results.  Expect\" + q.ids + \", got: \" + got.toDebugString());\n        }\n        assertEquals(\"out of order: \" + msg, ids.next(), id);\n      }\n\n      if (ids.hasNext()) {\n        fail(msg + \" :: expect more results then we got: \" + ids.next());\n      }\n    } else {\n      // We are looking at how the results overlap\n      if (concern.resultsAreSuperset) {\n        Set<String> found = new HashSet<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n        for (String s : q.ids) {\n          if (!found.contains(s)) {\n            fail(\"Results are mising id: \" + s + \" :: \" + found);\n          }\n        }\n      } else {\n        List<String> found = new ArrayList<>();\n        for (SearchResult r : got.results) {\n          found.add(r.document.get(\"id\"));\n        }\n\n        // sort both so that the order is not important\n        Collections.sort(q.ids);\n        Collections.sort(found);\n        assertEquals(msg, q.ids.toString(), found.toString());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1068799b5537c6408504cf7e15cb90ba57491440":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1068799b5537c6408504cf7e15cb90ba57491440"],"af2638813028b254a88b418ebeafb541afb49653":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","112d77ac8d3e10a362516ad834c9a11d35c94234"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"1068799b5537c6408504cf7e15cb90ba57491440":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","407687e67faf6e1f02a211ca078d8e3eed631027"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["1068799b5537c6408504cf7e15cb90ba57491440"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}