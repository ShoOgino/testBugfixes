{"path":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyCommitOrder(List commits) {\n    long last = SegmentInfos.generationFromSegmentsFileName(((IndexCommitPoint) commits.get(0)).getSegmentsFileName());\n    for(int i=1;i<commits.size();i++) {\n      long now = SegmentInfos.generationFromSegmentsFileName(((IndexCommitPoint) commits.get(i)).getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      last = now;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","sourceNew":"  private void verifyCommitOrder(List commits) {\n    long last = SegmentInfos.generationFromSegmentsFileName(((IndexCommit) commits.get(0)).getSegmentsFileName());\n    for(int i=1;i<commits.size();i++) {\n      long now = SegmentInfos.generationFromSegmentsFileName(((IndexCommit) commits.get(i)).getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List commits) {\n    long last = SegmentInfos.generationFromSegmentsFileName(((IndexCommitPoint) commits.get(0)).getSegmentsFileName());\n    for(int i=1;i<commits.size();i++) {\n      long now = SegmentInfos.generationFromSegmentsFileName(((IndexCommitPoint) commits.get(i)).getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59818e85900870556e1bdd604772c77d74f57d89","date":1211972433,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","sourceNew":"  private void verifyCommitOrder(List commits) {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List commits) {\n    long last = SegmentInfos.generationFromSegmentsFileName(((IndexCommit) commits.get(0)).getSegmentsFileName());\n    for(int i=1;i<commits.size();i++) {\n      long now = SegmentInfos.generationFromSegmentsFileName(((IndexCommit) commits.get(i)).getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9bc49aba3d3634b4dc5a1347aa5d27cc5b88ac8","date":1220521229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","sourceNew":"  private void verifyCommitOrder(List commits) throws IOException {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List commits) {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List commits) throws IOException {\n    final IndexCommit firstCommit = ((IndexCommit) commits.get(0));\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit = ((IndexCommit) commits.get(i));\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9bc49aba3d3634b4dc5a1347aa5d27cc5b88ac8"],"59818e85900870556e1bdd604772c77d74f57d89":["8a1559506fd82ede79bd8e60facef2a57524e175"],"8a1559506fd82ede79bd8e60facef2a57524e175":["8b6187898fc4413ccd18229711786550a280383c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a9bc49aba3d3634b4dc5a1347aa5d27cc5b88ac8":["59818e85900870556e1bdd604772c77d74f57d89"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["8a1559506fd82ede79bd8e60facef2a57524e175"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59818e85900870556e1bdd604772c77d74f57d89":["a9bc49aba3d3634b4dc5a1347aa5d27cc5b88ac8"],"8a1559506fd82ede79bd8e60facef2a57524e175":["59818e85900870556e1bdd604772c77d74f57d89"],"a9bc49aba3d3634b4dc5a1347aa5d27cc5b88ac8":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}