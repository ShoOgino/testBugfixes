{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<BytesRef>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<BytesRef>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<BytesRef>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<DistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context, String term, Sort groupSort, int topN) {\n    class GroupCount extends DistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<DistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context, String term, Sort groupSort, int topN) {\n    class GroupCount extends DistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<AbstractDistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context,  String term, Sort groupSort, int topN) {\n    class GroupCount extends AbstractDistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> createExpectedResult(IndexContext context, String term, Sort groupSort, int topN) {\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new DistinctValuesCollector.GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<DistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context, String term, Sort groupSort, int topN) {\n    class GroupCount extends DistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#createExpectedResult(IndexContext,String,Sort,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<DistinctValuesCollector.GroupCount<Comparable<Object>, Comparable<Object>>> createExpectedResult(IndexContext context, String term, Sort groupSort, int topN) {\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new DistinctValuesCollector.GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private List<DistinctValuesCollector.GroupCount<Comparable<?>>> createExpectedResult(IndexContext context, String term, Sort groupSort, int topN) {\n    class GroupCount extends DistinctValuesCollector.GroupCount<BytesRef> {\n      GroupCount(BytesRef groupValue, Collection<BytesRef> uniqueValues) {\n        super(groupValue);\n        this.uniqueValues.addAll(uniqueValues);\n      }\n    }\n\n    List result = new ArrayList();\n    Map<String, Set<String>> groupCounts = context.searchTermToGroupCounts.get(term);\n    int i = 0;\n    for (String group : groupCounts.keySet()) {\n      if (topN <= i++) {\n        break;\n      }\n      Set<BytesRef> uniqueValues = new HashSet<>();\n      for (String val : groupCounts.get(group)) {\n        uniqueValues.add(val != null ? new BytesRef(val) : null);\n      }\n      result.add(new GroupCount(group != null ? new BytesRef(group) : null, uniqueValues));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["97d4692d0c601ff773f0a2231967312428a904e4"],"97d4692d0c601ff773f0a2231967312428a904e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["97d4692d0c601ff773f0a2231967312428a904e4","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["97d4692d0c601ff773f0a2231967312428a904e4"],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}