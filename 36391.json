{"path":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","sourceNew":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","sourceOld":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","sourceNew":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public final void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","sourceOld":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","sourceNew":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public final void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","sourceOld":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","sourceNew":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public final void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","sourceOld":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource#restoreState(State).mjava","sourceNew":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public final void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","sourceOld":"  /**\n   * Restores this state by copying the values of all attribute implementations\n   * that this state contains into the attributes implementations of the targetStream.\n   * The targetStream must contain a corresponding instance for each argument\n   * contained in this state (e.g. it is not possible to restore the state of\n   * an AttributeSource containing a TermAttribute into a AttributeSource using\n   * a Token instance as implementation).\n   * <p>\n   * Note that this method does not affect attributes of the targetStream\n   * that are not contained in this state. In other words, if for example\n   * the targetStream contains an OffsetAttribute, but this state doesn't, then\n   * the value of the OffsetAttribute remains unchanged. It might be desirable to\n   * reset its value to the default, in which case the caller should first\n   * call {@link TokenStream#clearAttributes()} on the targetStream.   \n   */\n  public final void restoreState(State state) {\n    if (state == null)  return;\n    \n    do {\n      AttributeImpl targetImpl = attributeImpls.get(state.attribute.getClass());\n      if (targetImpl == null) {\n        throw new IllegalArgumentException(\"State contains AttributeImpl of type \" +\n          state.attribute.getClass().getName() + \" that is not in in this AttributeSource\");\n      }\n      state.attribute.copyTo(targetImpl);\n      state = state.next;\n    } while (state != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}