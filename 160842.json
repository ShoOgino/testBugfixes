{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,Node).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final Polygon polygon, int index, final Node lastNode) {\n    final Node node = new Node(polygon, index);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.nextZ;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final Polygon polygon, int index, final Node lastNode) {\n    final Node node = new Node(polygon, index);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.nextZ;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final Polygon polygon, int index, final Node lastNode) {\n    final Node node = new Node(polygon, index);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.nextZ;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62608383871b832d79e6dc58a3c783d7300f64d5","date":1532707246,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,int,Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#insertNode(Polygon,int,Node).mjava","sourceNew":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final Polygon polygon, int index, int vertexIndex, final Node lastNode) {\n    final Node node = new Node(polygon, index, vertexIndex);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.nextZ;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","sourceOld":"  /** Creates a node and optionally links it with a previous node in a circular doubly-linked list */\n  private static final Node insertNode(final Polygon polygon, int index, final Node lastNode) {\n    final Node node = new Node(polygon, index);\n    if(lastNode == null) {\n      node.previous = node;\n      node.previousZ = node;\n      node.next = node;\n      node.nextZ = node;\n    } else {\n      node.next = lastNode.next;\n      node.nextZ = lastNode.nextZ;\n      node.previous = lastNode;\n      node.previousZ = lastNode;\n      lastNode.next.previous = node;\n      lastNode.nextZ.previousZ = node;\n      lastNode.next = node;\n      lastNode.nextZ = node;\n    }\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"62608383871b832d79e6dc58a3c783d7300f64d5":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62608383871b832d79e6dc58a3c783d7300f64d5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"62608383871b832d79e6dc58a3c783d7300f64d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["62608383871b832d79e6dc58a3c783d7300f64d5","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}