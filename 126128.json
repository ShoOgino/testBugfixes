{"path":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","commits":[{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a","date":1410373276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_410\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    try {\n      Version.parseLeniently(\"LUCENE41\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_410\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_410\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE41\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE41\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_6.0.0\"));\n    }\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_410\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n    try {\n      Version.parseLeniently(\"LUCENE41\");\n      fail();\n    } catch (IllegalArgumentException iae) {\n      // pass\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_610\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_610\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE61\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE61\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_6.0.0\"));\n    }\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_410\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_410\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE41\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE41\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_6.0.0\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6.0.0\"));\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    try {\n      Version.parseLeniently(\"LUCENE\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_610\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_610\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE61\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE61\"));\n    }\n    try {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n      fail();\n    } catch (ParseException pe) {\n      // pass\n      assertTrue(pe.getMessage().contains(\"LUCENE_6.0.0\"));\n    }\n  }\n\n","bugFix":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a","057a1793765d068ea9302f1a29e21734ee58d41e","46ff533a28b45377dffc601931e60e19492e6384","71387d8cb6923eb831b17a8b734608ba2e21c653"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85b9829d27224bda451a373a47f081afb1c664b8","date":1498846708,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_7.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_7.0.0\"));\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6.0.0\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc018b79379c67835b40b1259cd3dc931df60944","date":1499109112,"type":3,"author":"Anshum Gupta","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_7.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_7.0.0\"));\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6.0.0\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestVersion#testParseLenientlyExceptions().mjava","sourceNew":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_7.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_7.0.0\"));\n  }\n\n","sourceOld":"  public void testParseLenientlyExceptions() {\n    ParseException expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_610\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_610\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE61\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE61\"));\n\n    expected = expectThrows(ParseException.class, () -> {\n      Version.parseLeniently(\"LUCENE_6.0.0\");\n    });\n    assertTrue(expected.getMessage().contains(\"LUCENE_6.0.0\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["057a1793765d068ea9302f1a29e21734ee58d41e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cc018b79379c67835b40b1259cd3dc931df60944":["05fe562aa248790944d43cdd478f512572835ba0","85b9829d27224bda451a373a47f081afb1c664b8"],"30c8e5574b55d57947e989443dfde611646530ee":["05fe562aa248790944d43cdd478f512572835ba0","cc018b79379c67835b40b1259cd3dc931df60944"],"46ff533a28b45377dffc601931e60e19492e6384":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"057a1793765d068ea9302f1a29e21734ee58d41e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85b9829d27224bda451a373a47f081afb1c664b8":["05fe562aa248790944d43cdd478f512572835ba0"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["46ff533a28b45377dffc601931e60e19492e6384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc018b79379c67835b40b1259cd3dc931df60944"]},"commit2Childs":{"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["46ff533a28b45377dffc601931e60e19492e6384"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["057a1793765d068ea9302f1a29e21734ee58d41e"],"05fe562aa248790944d43cdd478f512572835ba0":["cc018b79379c67835b40b1259cd3dc931df60944","30c8e5574b55d57947e989443dfde611646530ee","85b9829d27224bda451a373a47f081afb1c664b8"],"cc018b79379c67835b40b1259cd3dc931df60944":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30c8e5574b55d57947e989443dfde611646530ee":[],"46ff533a28b45377dffc601931e60e19492e6384":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"057a1793765d068ea9302f1a29e21734ee58d41e":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"85b9829d27224bda451a373a47f081afb1c664b8":["cc018b79379c67835b40b1259cd3dc931df60944"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}