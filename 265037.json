{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","pathOld":"/dev/null","sourceNew":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","pathOld":"/dev/null","sourceNew":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","pathOld":"/dev/null","sourceNew":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438db4300385bd0008ea7dca4759c7a38629e604","date":1482349496,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","sourceNew":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(+0f)));\n  }\n\n","sourceOld":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testNextDown().mjava","sourceNew":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(+0f)));\n  }\n\n","sourceOld":"  public void testNextDown() {\n    assertEquals(Float.NaN, HalfFloatPoint.nextDown(Float.NaN), 0f);\n    assertEquals(Float.NEGATIVE_INFINITY, HalfFloatPoint.nextDown(Float.NEGATIVE_INFINITY), 0f);\n    assertEquals(65504, HalfFloatPoint.nextDown(Float.POSITIVE_INFINITY), 0f);\n    assertEquals(Float.floatToIntBits(-0f), Float.floatToIntBits(HalfFloatPoint.nextDown(0f)));\n    // values that cannot be exactly represented as a half float\n    assertEquals(Float.floatToIntBits(0f), Float.floatToIntBits(HalfFloatPoint.nextDown(Float.MIN_VALUE)));\n    assertEquals(HalfFloatPoint.nextDown(-0f), HalfFloatPoint.nextDown(-Float.MIN_VALUE), 0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"438db4300385bd0008ea7dca4759c7a38629e604":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438db4300385bd0008ea7dca4759c7a38629e604"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","438db4300385bd0008ea7dca4759c7a38629e604"]},"commit2Childs":{"438db4300385bd0008ea7dca4759c7a38629e604":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["438db4300385bd0008ea7dca4759c7a38629e604","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}