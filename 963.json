{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","commits":[{"id":"9339df295b9162e4c81adbb4da44b5939d27c1ef","date":1520594349,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","849f0b604d62767ac71859248cb478428b39170c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bfcbdfe07d46da058707c12412aef939a5f2198","date":1521339918,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["849f0b604d62767ac71859248cb478428b39170c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849f0b604d62767ac71859248cb478428b39170c","date":1523510880,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":["0bfcbdfe07d46da058707c12412aef939a5f2198","9339df295b9162e4c81adbb4da44b5939d27c1ef"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f5a9deac6e313e80a1f56468e14bb4c491b83d7","date":1523529596,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 17-Mar-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    // even replica2 joined election at the end of the queue, but it is the one with highest term\n    waitForState(\"Timeout waiting for new leader\", collectionName, new CollectionStatePredicate() {\n      @Override\n      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      }\n    });\n\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43ad790248d7f7daee5d9cced548c546f37c7218","date":1527269998,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      log.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      LOG.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      log.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      log.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderVoteWaitTimeoutTest#testMostInSyncReplicasCanWinElection().mjava","sourceNew":"  @Test\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    \n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 2);\n    \n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collectionName, 1, 3);\n    \n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    \n    \n    JettySolrRunner j = cluster.getJettySolrRunner(0);\n    j.stop();\n    cluster.waitForJettyToStop(j);\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        if (newLeader == null) {\n          return false;\n        }\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      log.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  @Test\n  //commented 2-Aug-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 21-May-2018\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 6-Sep-2018\n  public void testMostInSyncReplicasCanWinElection() throws Exception {\n    final String collectionName = \"collection1\";\n    CollectionAdminRequest.createCollection(collectionName, 1, 3)\n        .setCreateNodeSet(\"\")\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for shard leader\", collectionName, clusterShape(1, 1));\n    Replica leader = getCollectionState(collectionName).getSlice(\"shard1\").getLeader();\n\n    // this replica will ahead of election queue\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x2 collection\", collectionName, clusterShape(1, 2));\n    Replica replica1 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);\n\n    CollectionAdminRequest.addReplicaToShard(collectionName, \"shard1\")\n        .setNode(cluster.getJettySolrRunner(2).getNodeName())\n        .process(cluster.getSolrClient());\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    Replica replica2 = getCollectionState(collectionName).getSlice(\"shard1\")\n        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);\n\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n    cluster.getSolrClient().add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n    cluster.getSolrClient().commit(collectionName);\n\n    // replica in node1 won't be able to do recovery\n    proxies.get(cluster.getJettySolrRunner(0)).close();\n    // leader won't be able to send request to replica in node1\n    proxies.get(cluster.getJettySolrRunner(1)).close();\n\n    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(2)).close();\n    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));\n\n    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, \"shard1\", cluster.getZkClient())) {\n      assertEquals(3, zkShardTerms.getTerms().size());\n      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));\n      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));\n      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));\n    }\n\n    proxies.get(cluster.getJettySolrRunner(1)).reopen();\n    proxies.get(cluster.getJettySolrRunner(2)).reopen();\n    cluster.getJettySolrRunner(0).stop();\n\n    try {\n      // even replica2 joined election at the end of the queue, but it is the one with highest term\n      waitForState(\"Timeout waiting for new leader\", collectionName, (liveNodes, collectionState) -> {\n        Replica newLeader = collectionState.getSlice(\"shard1\").getLeader();\n        return newLeader.getName().equals(replica2.getName());\n      });\n    } catch (Exception e) {\n      List<String> children = zkClient().getChildren(\"/collections/\"+collectionName+\"/leader_elect/shard1/election\",\n          null, true);\n      log.info(\"{} election nodes:{}\", collectionName, children);\n      throw e;\n    }\n    cluster.getJettySolrRunner(0).start();\n    proxies.get(cluster.getJettySolrRunner(0)).reopen();\n\n    waitForState(\"Timeout waiting for 1x3 collection\", collectionName, clusterShape(1, 3));\n    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);\n    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());\n  }\n\n","bugFix":["9339df295b9162e4c81adbb4da44b5939d27c1ef","05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["43ad790248d7f7daee5d9cced548c546f37c7218"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["203e3fcf513c02ee2c07015f2ce277e26dc60907","849f0b604d62767ac71859248cb478428b39170c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0bfcbdfe07d46da058707c12412aef939a5f2198":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"849f0b604d62767ac71859248cb478428b39170c":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["9339df295b9162e4c81adbb4da44b5939d27c1ef","0bfcbdfe07d46da058707c12412aef939a5f2198"],"43ad790248d7f7daee5d9cced548c546f37c7218":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1f5a9deac6e313e80a1f56468e14bb4c491b83d7":["43ad790248d7f7daee5d9cced548c546f37c7218"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"849f0b604d62767ac71859248cb478428b39170c":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7"],"9339df295b9162e4c81adbb4da44b5939d27c1ef":["0bfcbdfe07d46da058707c12412aef939a5f2198","203e3fcf513c02ee2c07015f2ce277e26dc60907"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9339df295b9162e4c81adbb4da44b5939d27c1ef"],"0bfcbdfe07d46da058707c12412aef939a5f2198":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["1f5a9deac6e313e80a1f56468e14bb4c491b83d7","849f0b604d62767ac71859248cb478428b39170c"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"43ad790248d7f7daee5d9cced548c546f37c7218":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}