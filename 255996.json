{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // new overseer leader should be elected and run triggers\n    newNode = cluster.startJettySolrRunner();\n    // it should fire again but not complete yet\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = eventRef.get();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // new overseer leader should be elected and run triggers\n    newNode = cluster.startJettySolrRunner();\n    // it should fire again but not complete yet\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = eventRef.get();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // new overseer leader should be elected and run triggers\n    newNode = cluster.startJettySolrRunner();\n    // it should fire again but not complete yet\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = eventRef.get();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // new overseer leader should be elected and run triggers\n    newNode = cluster.startJettySolrRunner();\n    // it should fire again but not complete yet\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = eventRef.get();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1cb0cb0102dc8c1eb87fdc5a3d2410efb4981bb","date":1499216447,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aec8f98312f2f1d200bd57bae0ba420943315948","date":1507277195,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger1',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ebf2a4e9fec7a202108e0897879cc366c3da296","date":1522408355,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca5eaeddb09b39cefceaf853898ae6188400ae37","date":1522413426,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    eventQueueActionWait = 1;\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    cluster.stopJettySolrRunner(overseerLeaderIndex);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":["464244264804e3f981bf1fb4b732516d8d62dbc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d815fede7a7f5184fb54d235b3ecb95cadcf554c","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    boolean await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action did not start\", await);\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    await = actionInterrupted.await(3, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't interrupted\", await);\n    // it should fire again from enqueued event\n    await = actionStarted.await(60, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't started\", await);\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    await = actionCompleted.await(10, TimeUnit.SECONDS);\n    assertTrue(\"action wasn't completed\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445","date":1551718463,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // setup the trigger action to stall so we can test interupting it w/overseer change\n    // NOTE: we will never release this latch, instead we expect the interupt on overseer shutdown\n    TestEventQueueAction.stall = new CountDownLatch(1);\n    \n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    // event should be there\n    final TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertNotNull(nodeAddedEvent.getId());\n    assertNotNull(nodeAddedEvent.getEventType());\n    assertNotNull(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n\n    // we know the event action has started, so we can re-set state for the next instance\n    // that will run after the overseer change\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    TestEventQueueAction.stall = new CountDownLatch(0); // so replay won't wait\n    \n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    final TriggerEvent replayedEvent = events.iterator().next();\n    assertNotNull(replayedEvent);\n\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    \n    assertEquals(nodeAddedEvent.getId(), replayedEvent.getId());\n    assertEquals(nodeAddedEvent.getEventTime(), replayedEvent.getEventTime());\n    assertEquals(nodeAddedEvent.getEventType(), replayedEvent.getEventType());\n    assertEquals(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME),\n                 replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    assertEquals(Boolean.TRUE, replayedEvent.getProperty(TriggerEvent.REPLAYING));\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    eventQueueActionWait = 1;\n    // event should be there\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    TriggerEvent replayedEvent = events.iterator().next();\n    assertTrue(replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME) != null);\n    assertTrue(events + \"\\n\" + replayedEvent.toString(), replayedEvent.getProperty(TriggerEventQueue.DEQUEUE_TIME) != null);\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // setup the trigger action to stall so we can test interupting it w/overseer change\n    // NOTE: we will never release this latch, instead we expect the interupt on overseer shutdown\n    TestEventQueueAction.stall = new CountDownLatch(1);\n    \n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    // event should be there\n    final TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertNotNull(nodeAddedEvent.getId());\n    assertNotNull(nodeAddedEvent.getEventType());\n    assertNotNull(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n\n    // we know the event action has started, so we can re-set state for the next instance\n    // that will run after the overseer change\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    TestEventQueueAction.stall = new CountDownLatch(0); // so replay won't wait\n    \n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    final TriggerEvent replayedEvent = events.iterator().next();\n    assertNotNull(replayedEvent);\n\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    \n    assertEquals(nodeAddedEvent.getId(), replayedEvent.getId());\n    assertEquals(nodeAddedEvent.getEventTime(), replayedEvent.getEventTime());\n    assertEquals(nodeAddedEvent.getEventType(), replayedEvent.getEventType());\n    assertEquals(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME),\n                 replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    assertEquals(Boolean.TRUE, replayedEvent.getProperty(TriggerEvent.REPLAYING));\n  }\n\n","sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // setup the trigger action to stall so we can test interupting it w/overseer change\n    // NOTE: we will never release this latch, instead we expect the interupt on overseer shutdown\n    TestEventQueueAction.stall = new CountDownLatch(1);\n    \n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    // event should be there\n    final TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertNotNull(nodeAddedEvent.getId());\n    assertNotNull(nodeAddedEvent.getEventType());\n    assertNotNull(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n\n    // we know the event action has started, so we can re-set state for the next instance\n    // that will run after the overseer change\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    TestEventQueueAction.stall = new CountDownLatch(0); // so replay won't wait\n    \n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    final TriggerEvent replayedEvent = events.iterator().next();\n    assertNotNull(replayedEvent);\n\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    \n    assertEquals(nodeAddedEvent.getId(), replayedEvent.getId());\n    assertEquals(nodeAddedEvent.getEventTime(), replayedEvent.getEventTime());\n    assertEquals(nodeAddedEvent.getEventType(), replayedEvent.getEventType());\n    assertEquals(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME),\n                 replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    assertEquals(Boolean.TRUE, replayedEvent.getProperty(TriggerEvent.REPLAYING));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testEventQueue().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEventQueue() throws Exception {\n    waitForSeconds = 1;\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_triggerEQ',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestEventQueueAction.class.getName() + \"'}]\" +\n        \"}}\";\n    NamedList<Object> overSeerStatus = cluster.getSolrClient().request(CollectionAdminRequest.getOverseerStatus());\n    String overseerLeader = (String) overSeerStatus.get(\"leader\");\n    int overseerLeaderIndex = 0;\n    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n      JettySolrRunner jetty = cluster.getJettySolrRunner(i);\n      if (jetty.getNodeName().equals(overseerLeader)) {\n        overseerLeaderIndex = i;\n        break;\n      }\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // setup the trigger action to stall so we can test interupting it w/overseer change\n    // NOTE: we will never release this latch, instead we expect the interupt on overseer shutdown\n    TestEventQueueAction.stall = new CountDownLatch(1);\n    \n    // add node to generate the event\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    cluster.waitForAllNodes(30);\n    assertTrue(\"Action did not start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    // event should be there\n    final TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertNotNull(nodeAddedEvent.getId());\n    assertNotNull(nodeAddedEvent.getEventType());\n    assertNotNull(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n\n    // but action did not complete yet so the event is still enqueued\n    assertFalse(triggerFired.get());\n\n    // we know the event action has started, so we can re-set state for the next instance\n    // that will run after the overseer change\n    events.clear();\n    actionStarted = new CountDownLatch(1);\n    TestEventQueueAction.stall = new CountDownLatch(0); // so replay won't wait\n    \n    // kill overseer leader\n    JettySolrRunner j = cluster.stopJettySolrRunner(overseerLeaderIndex);\n    cluster.waitForJettyToStop(j);\n    Thread.sleep(5000);\n    // new overseer leader should be elected and run triggers\n    assertTrue(\"Action was not interupted even after await()ing an excessive amount of time\",\n               actionInterrupted.await(60, TimeUnit.SECONDS));\n    // it should fire again from enqueued event\n    assertTrue(\"Action did not (re-)start even after await()ing an excessive amount of time\",\n               actionStarted.await(60, TimeUnit.SECONDS));\n    \n    final TriggerEvent replayedEvent = events.iterator().next();\n    assertNotNull(replayedEvent);\n\n    assertTrue(\"Action did not complete even after await()ing an excessive amount of time\",\n               actionCompleted.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    \n    assertEquals(nodeAddedEvent.getId(), replayedEvent.getId());\n    assertEquals(nodeAddedEvent.getEventTime(), replayedEvent.getEventTime());\n    assertEquals(nodeAddedEvent.getEventType(), replayedEvent.getEventType());\n    assertEquals(nodeAddedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME),\n                 replayedEvent.getProperty(TriggerEventQueue.ENQUEUE_TIME));\n    assertEquals(Boolean.TRUE, replayedEvent.getProperty(TriggerEvent.REPLAYING));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aec8f98312f2f1d200bd57bae0ba420943315948":["560c18d71dad43d675158783c3840f8c80d6d39c"],"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e0d9c88546c1a130d50b56981790d87a308daffd"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ca5eaeddb09b39cefceaf853898ae6188400ae37"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["aec8f98312f2f1d200bd57bae0ba420943315948","d9ccfe45460d496c5e5e1b70396521dac842d966"],"ca5eaeddb09b39cefceaf853898ae6188400ae37":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","4ebf2a4e9fec7a202108e0897879cc366c3da296"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"4ebf2a4e9fec7a202108e0897879cc366c3da296":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["89948af0461fead48f44ba8fb7866f107ce83f22"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","e1cb0cb0102dc8c1eb87fdc5a3d2410efb4981bb"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e1cb0cb0102dc8c1eb87fdc5a3d2410efb4981bb":["2480cf60350a342e5e57439f3e71092fabc364a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["aec8f98312f2f1d200bd57bae0ba420943315948"]},"commit2Childs":{"aec8f98312f2f1d200bd57bae0ba420943315948":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"2480cf60350a342e5e57439f3e71092fabc364a2":["e1cb0cb0102dc8c1eb87fdc5a3d2410efb4981bb"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"ba6afbcc1d4884e6e28d624a8a9bc666c6a42445":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["ca5eaeddb09b39cefceaf853898ae6188400ae37","4ebf2a4e9fec7a202108e0897879cc366c3da296"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"ca5eaeddb09b39cefceaf853898ae6188400ae37":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"4ebf2a4e9fec7a202108e0897879cc366c3da296":["ca5eaeddb09b39cefceaf853898ae6188400ae37"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"d815fede7a7f5184fb54d235b3ecb95cadcf554c":["ba6afbcc1d4884e6e28d624a8a9bc666c6a42445"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"560c18d71dad43d675158783c3840f8c80d6d39c":["aec8f98312f2f1d200bd57bae0ba420943315948"],"e0d9c88546c1a130d50b56981790d87a308daffd":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"89948af0461fead48f44ba8fb7866f107ce83f22":["d815fede7a7f5184fb54d235b3ecb95cadcf554c"],"e1cb0cb0102dc8c1eb87fdc5a3d2410efb4981bb":["e0d9c88546c1a130d50b56981790d87a308daffd"],"664ff2b928393480d9655010aa700656b0fcade0":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}