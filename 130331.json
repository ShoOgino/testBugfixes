{"path":"src/java/org/apache/lucene/search/MultiSearcher#createDocFrequencyMap(Set[Term]).mjava","commits":[{"id":"15663e8ac5d62b8a3eccef533d0384f3b4c139ea","date":1260310472,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#createDocFrequencyMap(Set[Term]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Collects the document frequency for the given terms form all searchables\n   * @param terms term set used to collect the document frequency form all\n   *        searchables \n   * @return a map with a term as the key and the terms aggregated document\n   *         frequency as a value  \n   * @throws IOException if a searchable throws an {@link IOException}\n   */\n   Map<Term, Integer> createDocFrequencyMap(final Set<Term> terms) throws IOException  {\n    final Term[] allTermsArray = terms.toArray(new Term[terms.size()]);\n    final int[] aggregatedDfs = new int[allTermsArray.length];\n    for (Searchable searchable : searchables) {\n      final int[] dfs = searchable.docFreqs(allTermsArray); \n      for(int j=0; j<aggregatedDfs.length; j++){\n        aggregatedDfs[j] += dfs[j];\n      }\n    }\n    final HashMap<Term,Integer> dfMap = new HashMap<Term,Integer>();\n    for(int i=0; i<allTermsArray.length; i++) {\n      dfMap.put(allTermsArray[i], Integer.valueOf(aggregatedDfs[i]));\n    }\n    return dfMap;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiSearcher#createDocFrequencyMap(Set[Term]).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#createDocFrequencyMap(Set[Term]).mjava","sourceNew":"  /**\n   * Collects the document frequency for the given terms form all searchables\n   * @param terms term set used to collect the document frequency form all\n   *        searchables \n   * @return a map with a term as the key and the terms aggregated document\n   *         frequency as a value  \n   * @throws IOException if a searchable throws an {@link IOException}\n   */\n   Map<Term, Integer> createDocFrequencyMap(final Set<Term> terms) throws IOException  {\n    final Term[] allTermsArray = terms.toArray(new Term[terms.size()]);\n    final int[] aggregatedDfs = new int[allTermsArray.length];\n    for (Searchable searchable : searchables) {\n      final int[] dfs = searchable.docFreqs(allTermsArray); \n      for(int j=0; j<aggregatedDfs.length; j++){\n        aggregatedDfs[j] += dfs[j];\n      }\n    }\n    final HashMap<Term,Integer> dfMap = new HashMap<Term,Integer>();\n    for(int i=0; i<allTermsArray.length; i++) {\n      dfMap.put(allTermsArray[i], Integer.valueOf(aggregatedDfs[i]));\n    }\n    return dfMap;\n  }\n\n","sourceOld":"  /**\n   * Collects the document frequency for the given terms form all searchables\n   * @param terms term set used to collect the document frequency form all\n   *        searchables \n   * @return a map with a term as the key and the terms aggregated document\n   *         frequency as a value  \n   * @throws IOException if a searchable throws an {@link IOException}\n   */\n   Map<Term, Integer> createDocFrequencyMap(final Set<Term> terms) throws IOException  {\n    final Term[] allTermsArray = terms.toArray(new Term[terms.size()]);\n    final int[] aggregatedDfs = new int[allTermsArray.length];\n    for (Searchable searchable : searchables) {\n      final int[] dfs = searchable.docFreqs(allTermsArray); \n      for(int j=0; j<aggregatedDfs.length; j++){\n        aggregatedDfs[j] += dfs[j];\n      }\n    }\n    final HashMap<Term,Integer> dfMap = new HashMap<Term,Integer>();\n    for(int i=0; i<allTermsArray.length; i++) {\n      dfMap.put(allTermsArray[i], Integer.valueOf(aggregatedDfs[i]));\n    }\n    return dfMap;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15663e8ac5d62b8a3eccef533d0384f3b4c139ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["15663e8ac5d62b8a3eccef533d0384f3b4c139ea"]},"commit2Childs":{"15663e8ac5d62b8a3eccef533d0384f3b4c139ea":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15663e8ac5d62b8a3eccef533d0384f3b4c139ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}