{"path":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","commits":[{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","pathOld":"/dev/null","sourceNew":"  private void addCore(CoreContainer container, Map<String, String> seenDirs, Map<String, String> seenCores,\n                       File childFile, File propFile) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n\n    // It's bad to have two cores with the same name or same data dir.\n    if (! seenCores.containsKey(desc.getName()) && ! seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      coreDescriptorPlusMap.put(desc.getName(), plus);\n      // Use the full path to the prop file so we can unambiguously report the place the error is.\n      seenCores.put(desc.getName(), propFile.getAbsolutePath());\n      seenDirs.put(desc.getAbsoluteDataDir(), propFile.getAbsolutePath());\n      return;\n    }\n\n    // record the appropriate error\n    if (seenCores.containsKey(desc.getName())) {\n      String msg = String.format(Locale.ROOT, \"More than one core defined for core named '%s', paths are '%s' and '%s'  Removing both cores.\",\n          desc.getName(), propFile.getAbsolutePath(), seenCores.get(desc.getName()));\n      log.error(msg);\n      // Load up as many errors as there are.\n      if (badCores.containsKey(desc.getName())) msg += \" \" + badCores.get(desc.getName());\n      badCores.put(desc.getName(), msg);\n    }\n    // There's no reason both errors may not have occurred.\n    if (seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      String msg = String.format(Locale.ROOT, \"More than one core points to data dir '%s'. They are in '%s' and '%s'. Removing all offending cores.\",\n          desc.getAbsoluteDataDir(), propFile.getAbsolutePath(), seenDirs.get(desc.getAbsoluteDataDir()));\n      if (badCores.containsKey(desc.getName())) msg += \" \" + badCores.get(desc.getName());\n      log.error(msg);\n      badCores.put(desc.getName(), msg);\n\n      // find the core with this datadir and remove it\n      List<String> badNames = new ArrayList<String>();\n      for (Map.Entry<String, CoreDescriptorPlus> ent : coreDescriptorPlusMap.entrySet()) {\n        if (ent.getValue().getCoreDescriptor().getAbsoluteDataDir().equals(desc.getAbsoluteDataDir())) {\n          badNames.add(ent.getKey());\n          if (! badCores.containsKey(ent.getKey())) {\n            // Record that the first core is also a bad core.\n            badCores.put(ent.getKey(), msg);\n            log.error(msg);\n\n          }\n          break;\n        }\n      }\n      for (String badName : badNames) {\n        coreDescriptorPlusMap.remove(badName);\n      }\n    }\n    coreDescriptorPlusMap.remove(desc.getName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba8a535881bd36c93b6eb3ccce91f29f5fa20fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3278df77f7f499b55fdb79861c0641450444e7d0","date":1366238988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","sourceNew":"  private void addCore(CoreContainer container, Map<String, String> seenDirs, Map<String, String> seenCores,\n                       File childFile, File propFile) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n\n    // It's bad to have two cores with the same name or same data dir.\n    if (! seenCores.containsKey(desc.getName()) && ! seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      coreDescriptorPlusMap.put(desc.getName(), plus);\n      // Use the full path to the prop file so we can unambiguously report the place the error is.\n      seenCores.put(desc.getName(), propFile.getAbsolutePath());\n      seenDirs.put(desc.getAbsoluteDataDir(), propFile.getAbsolutePath());\n      return;\n    }\n\n    // record the appropriate error\n    if (seenCores.containsKey(desc.getName())) {\n      String msg = String.format(Locale.ROOT, \"More than one core defined for core named '%s', paths are '%s' and '%s'  Removing both cores.\",\n          desc.getName(), propFile.getAbsolutePath(), seenCores.get(desc.getName()));\n      log.error(msg);\n      // Load up as many errors as there are.\n      if (badConfigCores.containsKey(desc.getName())) msg += \" \" + badConfigCores.get(desc.getName());\n      badConfigCores.put(desc.getName(), msg);\n    }\n    // There's no reason both errors may not have occurred.\n    if (seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      String msg = String.format(Locale.ROOT, \"More than one core points to data dir '%s'. They are in '%s' and '%s'. Removing all offending cores.\",\n          desc.getAbsoluteDataDir(), propFile.getAbsolutePath(), seenDirs.get(desc.getAbsoluteDataDir()));\n      if (badConfigCores.containsKey(desc.getName())) msg += \" \" + badConfigCores.get(desc.getName());\n      log.warn(msg);\n    }\n    coreDescriptorPlusMap.remove(desc.getName());\n  }\n\n","sourceOld":"  private void addCore(CoreContainer container, Map<String, String> seenDirs, Map<String, String> seenCores,\n                       File childFile, File propFile) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n\n    // It's bad to have two cores with the same name or same data dir.\n    if (! seenCores.containsKey(desc.getName()) && ! seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      coreDescriptorPlusMap.put(desc.getName(), plus);\n      // Use the full path to the prop file so we can unambiguously report the place the error is.\n      seenCores.put(desc.getName(), propFile.getAbsolutePath());\n      seenDirs.put(desc.getAbsoluteDataDir(), propFile.getAbsolutePath());\n      return;\n    }\n\n    // record the appropriate error\n    if (seenCores.containsKey(desc.getName())) {\n      String msg = String.format(Locale.ROOT, \"More than one core defined for core named '%s', paths are '%s' and '%s'  Removing both cores.\",\n          desc.getName(), propFile.getAbsolutePath(), seenCores.get(desc.getName()));\n      log.error(msg);\n      // Load up as many errors as there are.\n      if (badCores.containsKey(desc.getName())) msg += \" \" + badCores.get(desc.getName());\n      badCores.put(desc.getName(), msg);\n    }\n    // There's no reason both errors may not have occurred.\n    if (seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      String msg = String.format(Locale.ROOT, \"More than one core points to data dir '%s'. They are in '%s' and '%s'. Removing all offending cores.\",\n          desc.getAbsoluteDataDir(), propFile.getAbsolutePath(), seenDirs.get(desc.getAbsoluteDataDir()));\n      if (badCores.containsKey(desc.getName())) msg += \" \" + badCores.get(desc.getName());\n      log.error(msg);\n      badCores.put(desc.getName(), msg);\n\n      // find the core with this datadir and remove it\n      List<String> badNames = new ArrayList<String>();\n      for (Map.Entry<String, CoreDescriptorPlus> ent : coreDescriptorPlusMap.entrySet()) {\n        if (ent.getValue().getCoreDescriptor().getAbsoluteDataDir().equals(desc.getAbsoluteDataDir())) {\n          badNames.add(ent.getKey());\n          if (! badCores.containsKey(ent.getKey())) {\n            // Record that the first core is also a bad core.\n            badCores.put(ent.getKey(), msg);\n            log.error(msg);\n\n          }\n          break;\n        }\n      }\n      for (String badName : badNames) {\n        coreDescriptorPlusMap.remove(badName);\n      }\n    }\n    coreDescriptorPlusMap.remove(desc.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","sourceNew":"  private void addCore(CoreContainer container, Map<String, String> seenDirs, Map<String, String> seenCores,\n                       File childFile, File propFile) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    coreDescriptorMap.put(desc.getName(), desc);\n\n  }\n\n","sourceOld":"  private void addCore(CoreContainer container, Map<String, String> seenDirs, Map<String, String> seenCores,\n                       File childFile, File propFile) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    CoreDescriptorPlus plus = new CoreDescriptorPlus(propFile.getAbsolutePath(), desc, propsOrig);\n\n    // It's bad to have two cores with the same name or same data dir.\n    if (! seenCores.containsKey(desc.getName()) && ! seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      coreDescriptorPlusMap.put(desc.getName(), plus);\n      // Use the full path to the prop file so we can unambiguously report the place the error is.\n      seenCores.put(desc.getName(), propFile.getAbsolutePath());\n      seenDirs.put(desc.getAbsoluteDataDir(), propFile.getAbsolutePath());\n      return;\n    }\n\n    // record the appropriate error\n    if (seenCores.containsKey(desc.getName())) {\n      String msg = String.format(Locale.ROOT, \"More than one core defined for core named '%s', paths are '%s' and '%s'  Removing both cores.\",\n          desc.getName(), propFile.getAbsolutePath(), seenCores.get(desc.getName()));\n      log.error(msg);\n      // Load up as many errors as there are.\n      if (badConfigCores.containsKey(desc.getName())) msg += \" \" + badConfigCores.get(desc.getName());\n      badConfigCores.put(desc.getName(), msg);\n    }\n    // There's no reason both errors may not have occurred.\n    if (seenDirs.containsKey(desc.getAbsoluteDataDir())) {\n      String msg = String.format(Locale.ROOT, \"More than one core points to data dir '%s'. They are in '%s' and '%s'. Removing all offending cores.\",\n          desc.getAbsoluteDataDir(), propFile.getAbsolutePath(), seenDirs.get(desc.getAbsoluteDataDir()));\n      if (badConfigCores.containsKey(desc.getName())) msg += \" \" + badConfigCores.get(desc.getName());\n      log.warn(msg);\n    }\n    coreDescriptorPlusMap.remove(desc.getName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCoreDiscoverer#addCore(CoreContainer,File,File,Map[String,CoreDescriptor]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ConfigSolrXml#addCore(CoreContainer,Map[String,String],Map[String,String],File,File).mjava","sourceNew":"  private void addCore(CoreContainer container, File childFile, File propFile, Map<String,CoreDescriptor> coreDescriptorMap) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    coreDescriptorMap.put(desc.getName(), desc);\n  }\n\n","sourceOld":"  private void addCore(CoreContainer container, Map<String, String> seenDirs, Map<String, String> seenCores,\n                       File childFile, File propFile) throws IOException {\n    log.info(\"Discovered properties file {}, adding to cores\", propFile.getAbsolutePath());\n    Properties propsOrig = new Properties();\n    InputStream is = new FileInputStream(propFile);\n    try {\n      propsOrig.load(is);\n    } finally {\n      IOUtils.closeQuietly(is);\n    }\n\n    Properties props = new Properties();\n    for (String prop : propsOrig.stringPropertyNames()) {\n      props.put(prop, PropertiesUtil.substituteProperty(propsOrig.getProperty(prop), null));\n    }\n\n    // Too much of the code depends on this value being here, but it is NOT supported in discovery mode, so\n    // ignore it if present in the core.properties file.\n    props.setProperty(CoreDescriptor.CORE_INSTDIR, childFile.getPath());\n\n    if (props.getProperty(CoreDescriptor.CORE_NAME) == null) {\n      // Should default to this directory\n      props.setProperty(CoreDescriptor.CORE_NAME, childFile.getName());\n    }\n    CoreDescriptor desc = new CoreDescriptor(container, props);\n    coreDescriptorMap.put(desc.getName(), desc);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["9409650933cc688e77e565092a25e58adfc2e18d"],"9409650933cc688e77e565092a25e58adfc2e18d":["3278df77f7f499b55fdb79861c0641450444e7d0"],"3278df77f7f499b55fdb79861c0641450444e7d0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e475642767c688ede5728d7918326f70b4e0bf3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b29abed5661c7911e4b45d5a3d79a186268e28c4"]},"commit2Childs":{"b29abed5661c7911e4b45d5a3d79a186268e28c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9409650933cc688e77e565092a25e58adfc2e18d":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"3278df77f7f499b55fdb79861c0641450444e7d0":["9409650933cc688e77e565092a25e58adfc2e18d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e475642767c688ede5728d7918326f70b4e0bf3a"],"e475642767c688ede5728d7918326f70b4e0bf3a":["3278df77f7f499b55fdb79861c0641450444e7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}