{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","commits":[{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3adc4d119a7deba35b2721853853464857d9d0a9","date":1594608068,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = Paths.get(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12cb2880d9de40cdf8dfb8398beedbe238e1b3f","date":1594861381,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    // Fails on Windows if you use nio Paths.get here\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = Paths.get(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = ZkMaintenanceUtils.getZkParent(leaderPath);\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    // Fails on Windows if you use nio Paths.get here\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":["d12cb2880d9de40cdf8dfb8398beedbe238e1b3f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3adc4d119a7deba35b2721853853464857d9d0a9":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["d12cb2880d9de40cdf8dfb8398beedbe238e1b3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"d12cb2880d9de40cdf8dfb8398beedbe238e1b3f":["3adc4d119a7deba35b2721853853464857d9d0a9"]},"commit2Childs":{"3adc4d119a7deba35b2721853853464857d9d0a9":["d12cb2880d9de40cdf8dfb8398beedbe238e1b3f"],"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["3adc4d119a7deba35b2721853853464857d9d0a9"],"d12cb2880d9de40cdf8dfb8398beedbe238e1b3f":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}