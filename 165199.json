{"path":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1ff81e8564552b996fd24bd03343ddd1548e8a5","date":1346104767,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @see #numericPrecisionStep()\n   */\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d","date":1346337224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   */\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @see #numericPrecisionStep()\n   */\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   */\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6894f49e4de2b5edd2e751ed3b7e235317ee668c","date":1450177689,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link DimensionalValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   */\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link DimensionalValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyFieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyFieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyFieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyFieldType#setNumericPrecisionStep(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#setNumericPrecisionStep(int).mjava","sourceNew":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","sourceOld":"  /**\n   * Sets the numeric precision step for the field.\n   * @param precisionStep numeric precision step for the field\n   * @throws IllegalArgumentException if precisionStep is less than 1. \n   * @throws IllegalStateException if this FieldType is frozen against\n   *         future modifications.\n   * @see #numericPrecisionStep()\n   *\n   * @deprecated Please switch to {@link org.apache.lucene.index.PointValues} instead\n   */\n  @Deprecated\n  public void setNumericPrecisionStep(int precisionStep) {\n    checkIfFrozen();\n    if (precisionStep < 1) {\n      throw new IllegalArgumentException(\"precisionStep must be >= 1 (got \" + precisionStep + \")\");\n    }\n    this.numericPrecisionStep = precisionStep;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["6894f49e4de2b5edd2e751ed3b7e235317ee668c"],"6894f49e4de2b5edd2e751ed3b7e235317ee668c":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"f1ff81e8564552b996fd24bd03343ddd1548e8a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["f1ff81e8564552b996fd24bd03343ddd1548e8a5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6894f49e4de2b5edd2e751ed3b7e235317ee668c":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f1ff81e8564552b996fd24bd03343ddd1548e8a5","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"f1ff81e8564552b996fd24bd03343ddd1548e8a5":["6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6a5eb62c0fdb59f00b9ef0d4762ff79827d9ca1d":["6894f49e4de2b5edd2e751ed3b7e235317ee668c","05a14b2611ead08655a2b2bdc61632eb31316e57"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}