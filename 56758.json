{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair(URL,URL).mjava","commits":[{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":0,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair(URL,URL).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Initialize an RSA key pair from previously saved keys. The formats listed below have been tested, other formats may\n     * also be acceptable but are not guaranteed to work.\n     * @param privateKeyResourceName path to private key file, encoded as a PKCS#8 in a PEM file\n     * @param publicKeyResourceName path to public key file, encoded as X509 in a DER file\n     * @throws IOException if an I/O error occurs reading either key file\n     * @throws InvalidKeySpecException if either key file is inappropriate for an RSA key\n     */\n    public RSAKeyPair(URL privateKeyResourceName, URL publicKeyResourceName) throws IOException, InvalidKeySpecException {\n      try (InputStream inPrivate = privateKeyResourceName.openStream()) {\n        String privateString = new String(inPrivate.readAllBytes(), StandardCharsets.UTF_8)\n            .replaceAll(\"-----[A-Z ]*-----\", \"\")\n            .replaceAll(\"\\\\n\", \"\");\n\n        PKCS8EncodedKeySpec privateSpec = new PKCS8EncodedKeySpec(Base64.base64ToByteArray(privateString));\n        KeyFactory rsaFactory = KeyFactory.getInstance(\"RSA\");\n        privateKey = rsaFactory.generatePrivate(privateSpec);\n      } catch (NoSuchAlgorithmException e) {\n        throw new AssertionError(\"JVM spec is required to support RSA\", e);\n      }\n\n      try (InputStream inPublic = publicKeyResourceName.openStream()) {\n        publicKey = getX509PublicKey(inPublic.readAllBytes());\n        pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["54ea0d0abe39d6da48b7cbdfcd39da2fa5fce762"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ea0d0abe39d6da48b7cbdfcd39da2fa5fce762","date":1583347800,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair(URL,URL).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys.RSAKeyPair#RSAKeyPair(URL,URL).mjava","sourceNew":"    /**\n     * Initialize an RSA key pair from previously saved keys. The formats listed below have been tested, other formats may\n     * also be acceptable but are not guaranteed to work.\n     * @param privateKeyResourceName path to private key file, encoded as a PKCS#8 in a PEM file\n     * @param publicKeyResourceName path to public key file, encoded as X509 in a DER file\n     * @throws IOException if an I/O error occurs reading either key file\n     * @throws InvalidKeySpecException if either key file is inappropriate for an RSA key\n     */\n    public RSAKeyPair(URL privateKeyResourceName, URL publicKeyResourceName) throws IOException, InvalidKeySpecException {\n      try (InputStream inPrivate = privateKeyResourceName.openStream()) {\n        String privateString = new String(inPrivate.readAllBytes(), StandardCharsets.UTF_8)\n            .replaceAll(\"-----(BEGIN|END) PRIVATE KEY-----\", \"\");\n\n        PKCS8EncodedKeySpec privateSpec = new PKCS8EncodedKeySpec(java.util.Base64.getMimeDecoder().decode(privateString));\n        KeyFactory rsaFactory = KeyFactory.getInstance(\"RSA\");\n        privateKey = rsaFactory.generatePrivate(privateSpec);\n      } catch (NoSuchAlgorithmException e) {\n        throw new AssertionError(\"JVM spec is required to support RSA\", e);\n      }\n\n      try (InputStream inPublic = publicKeyResourceName.openStream()) {\n        publicKey = getX509PublicKey(inPublic.readAllBytes());\n        pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());\n      }\n    }\n\n","sourceOld":"    /**\n     * Initialize an RSA key pair from previously saved keys. The formats listed below have been tested, other formats may\n     * also be acceptable but are not guaranteed to work.\n     * @param privateKeyResourceName path to private key file, encoded as a PKCS#8 in a PEM file\n     * @param publicKeyResourceName path to public key file, encoded as X509 in a DER file\n     * @throws IOException if an I/O error occurs reading either key file\n     * @throws InvalidKeySpecException if either key file is inappropriate for an RSA key\n     */\n    public RSAKeyPair(URL privateKeyResourceName, URL publicKeyResourceName) throws IOException, InvalidKeySpecException {\n      try (InputStream inPrivate = privateKeyResourceName.openStream()) {\n        String privateString = new String(inPrivate.readAllBytes(), StandardCharsets.UTF_8)\n            .replaceAll(\"-----[A-Z ]*-----\", \"\")\n            .replaceAll(\"\\\\n\", \"\");\n\n        PKCS8EncodedKeySpec privateSpec = new PKCS8EncodedKeySpec(Base64.base64ToByteArray(privateString));\n        KeyFactory rsaFactory = KeyFactory.getInstance(\"RSA\");\n        privateKey = rsaFactory.generatePrivate(privateSpec);\n      } catch (NoSuchAlgorithmException e) {\n        throw new AssertionError(\"JVM spec is required to support RSA\", e);\n      }\n\n      try (InputStream inPublic = publicKeyResourceName.openStream()) {\n        publicKey = getX509PublicKey(inPublic.readAllBytes());\n        pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());\n      }\n    }\n\n","bugFix":["b409047f69fb85704c506753bc23a37d7ad37b54"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b409047f69fb85704c506753bc23a37d7ad37b54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54ea0d0abe39d6da48b7cbdfcd39da2fa5fce762":["b409047f69fb85704c506753bc23a37d7ad37b54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54ea0d0abe39d6da48b7cbdfcd39da2fa5fce762"]},"commit2Childs":{"b409047f69fb85704c506753bc23a37d7ad37b54":["54ea0d0abe39d6da48b7cbdfcd39da2fa5fce762"],"54ea0d0abe39d6da48b7cbdfcd39da2fa5fce762":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b409047f69fb85704c506753bc23a37d7ad37b54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}