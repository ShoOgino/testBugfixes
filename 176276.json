{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testServerSideIncludes().mjava","commits":[{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testServerSideIncludes().mjava","pathOld":"/dev/null","sourceNew":"  public void testServerSideIncludes() throws Exception {\n    String test = \"one<img src=\\\"image.png\\\"\\n\"\n        + \" alt =  \\\"Alt: <!--#echo var='${IMAGE_CAPTION:<!--comment-->\\\\'Comment\\\\'}'  -->\\\"\\n\\n\"\n        + \" title=\\\"Title: <!--#echo var=\\\"IMAGE_CAPTION\\\"-->\\\">two\";\n    String gold = \"onetwo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertTrue(builder.toString() + \" is not equal to \" + gold, builder.toString().equals(gold));\n\n    test = \"one<script><!-- <!--#config comment=\\\"<!-- \\\\\\\"comment\\\\\\\"-->\\\"--> --></script>two\";\n    gold = \"one\\ntwo\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab081a78869a616f9c93e5b2f3ec2f99c2f7f741"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testServerSideIncludes().mjava","pathOld":"/dev/null","sourceNew":"  public void testServerSideIncludes() throws Exception {\n    String test = \"one<img src=\\\"image.png\\\"\\n\"\n        + \" alt =  \\\"Alt: <!--#echo var='${IMAGE_CAPTION:<!--comment-->\\\\'Comment\\\\'}'  -->\\\"\\n\\n\"\n        + \" title=\\\"Title: <!--#echo var=\\\"IMAGE_CAPTION\\\"-->\\\">two\";\n    String gold = \"onetwo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertTrue(builder.toString() + \" is not equal to \" + gold, builder.toString().equals(gold));\n\n    test = \"one<script><!-- <!--#config comment=\\\"<!-- \\\\\\\"comment\\\\\\\"-->\\\"--> --></script>two\";\n    gold = \"one\\ntwo\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testServerSideIncludes().mjava","pathOld":"/dev/null","sourceNew":"  public void testServerSideIncludes() throws Exception {\n    String test = \"one<img src=\\\"image.png\\\"\\n\"\n        + \" alt =  \\\"Alt: <!--#echo var='${IMAGE_CAPTION:<!--comment-->\\\\'Comment\\\\'}'  -->\\\"\\n\\n\"\n        + \" title=\\\"Title: <!--#echo var=\\\"IMAGE_CAPTION\\\"-->\\\">two\";\n    String gold = \"onetwo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertTrue(builder.toString() + \" is not equal to \" + gold, builder.toString().equals(gold));\n\n    test = \"one<script><!-- <!--#config comment=\\\"<!-- \\\\\\\"comment\\\\\\\"-->\\\"--> --></script>two\";\n    gold = \"one\\ntwo\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testServerSideIncludes().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/charfilter/HTMLStripCharFilterTest#testServerSideIncludes().mjava","sourceNew":"  public void testServerSideIncludes() throws Exception {\n    String test = \"one<img src=\\\"image.png\\\"\\n\"\n        + \" alt =  \\\"Alt: <!--#echo var='${IMAGE_CAPTION:<!--comment-->\\\\'Comment\\\\'}'  -->\\\"\\n\\n\"\n        + \" title=\\\"Title: <!--#echo var=\\\"IMAGE_CAPTION\\\"-->\\\">two\";\n    String gold = \"onetwo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertTrue(builder.toString() + \" is not equal to \" + gold, builder.toString().equals(gold));\n\n    test = \"one<script><!-- <!--#config comment=\\\"<!-- \\\\\\\"comment\\\\\\\"-->\\\"--> --></script>two\";\n    gold = \"one\\ntwo\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","sourceOld":"  public void testServerSideIncludes() throws Exception {\n    String test = \"one<img src=\\\"image.png\\\"\\n\"\n        + \" alt =  \\\"Alt: <!--#echo var='${IMAGE_CAPTION:<!--comment-->\\\\'Comment\\\\'}'  -->\\\"\\n\\n\"\n        + \" title=\\\"Title: <!--#echo var=\\\"IMAGE_CAPTION\\\"-->\\\">two\";\n    String gold = \"onetwo\";\n    Reader reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    int ch = 0;\n    StringBuilder builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertTrue(builder.toString() + \" is not equal to \" + gold, builder.toString().equals(gold));\n\n    test = \"one<script><!-- <!--#config comment=\\\"<!-- \\\\\\\"comment\\\\\\\"-->\\\"--> --></script>two\";\n    gold = \"one\\ntwo\";\n    reader = new HTMLStripCharFilter(CharReader.get(new StringReader(test)));\n    ch = 0;\n    builder = new StringBuilder();\n    try {\n      while ((ch = reader.read()) != -1){\n        builder.append((char)ch);\n      }\n    } finally {\n      // System.out.println(\"String: \" + builder.toString());\n    }\n    assertEquals(\"'\" + builder.toString() + \"' is not equal to '\" + gold + \"'\",\n                 gold, builder.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","579dc30b5d3235c34cda518b2b6018d71a61879c"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c"],"579dc30b5d3235c34cda518b2b6018d71a61879c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}