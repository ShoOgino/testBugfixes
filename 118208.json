{"path":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","sourceNew":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder());\n    \n    // cover negative numbers;\n    IntEncoder enc = new VInt8IntEncoder();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    enc.reInit(baos);\n    enc.encode(-1);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    dec.reInit(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(-1, dec.decode());\n  }\n\n","sourceOld":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder());\n    \n    // cover negative numbers;\n    IntEncoder enc = new VInt8IntEncoder();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    enc.reInit(baos);\n    enc.encode(-1);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    dec.reInit(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(-1, dec.decode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","sourceNew":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder(), data, data);\n    \n    // cover negative numbers;\n    BytesRef bytes = new BytesRef(5);\n    IntEncoder enc = new VInt8IntEncoder();\n    IntsRef values = new IntsRef(1);\n    values.ints[values.length++] = -1;\n    enc.encode(values, bytes);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    values.length = 0;\n    dec.decode(bytes, values);\n    assertEquals(1, values.length);\n    assertEquals(-1, values.ints[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder());\n    \n    // cover negative numbers;\n    IntEncoder enc = new VInt8IntEncoder();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    enc.reInit(baos);\n    enc.encode(-1);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    dec.reInit(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(-1, dec.decode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","sourceNew":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder(), data, data);\n    \n    // cover negative numbers;\n    BytesRef bytes = new BytesRef(5);\n    IntEncoder enc = new VInt8IntEncoder();\n    IntsRef values = new IntsRef(1);\n    values.ints[values.length++] = -1;\n    enc.encode(values, bytes);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    values.length = 0;\n    dec.decode(bytes, values);\n    assertEquals(1, values.length);\n    assertEquals(-1, values.ints[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder());\n    \n    // cover negative numbers;\n    IntEncoder enc = new VInt8IntEncoder();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    enc.reInit(baos);\n    enc.encode(-1);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    dec.reInit(new ByteArrayInputStream(baos.toByteArray()));\n    assertEquals(-1, dec.decode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#testVInt8().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#testVInt8().mjava","sourceNew":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder(), data, data);\n    \n    // cover negative numbers;\n    BytesRef bytes = new BytesRef(5);\n    IntEncoder enc = new VInt8IntEncoder();\n    IntsRef values = new IntsRef(1);\n    values.ints[values.length++] = -1;\n    enc.encode(values, bytes);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    values.length = 0;\n    dec.decode(bytes, values);\n    assertEquals(1, values.length);\n    assertEquals(-1, values.ints[0]);\n  }\n\n","sourceOld":"  @Test\n  public void testVInt8() throws Exception {\n    encoderTest(new VInt8IntEncoder(), data, data);\n    \n    // cover negative numbers;\n    BytesRef bytes = new BytesRef(5);\n    IntEncoder enc = new VInt8IntEncoder();\n    IntsRef values = new IntsRef(1);\n    values.ints[values.length++] = -1;\n    enc.encode(values, bytes);\n    \n    IntDecoder dec = enc.createMatchingDecoder();\n    values.length = 0;\n    dec.decode(bytes, values);\n    assertEquals(1, values.length);\n    assertEquals(-1, values.ints[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["607428da722dcb3e86bbd11c63de8986e6275c36","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}