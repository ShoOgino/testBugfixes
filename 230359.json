{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5626bd803178375ddd3b1d121587f4e5d1bcbd8c","date":1350997809,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n        termState.docStartFP = 0;\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP = in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP += in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n        termState.docStartFP = 0;\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP = in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP += in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      termState.docStartFP = in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      termState.docStartFP += in.readVLong();\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n        termState.docStartFP = 0;\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP = in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP += in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState)\n    throws IOException {\n    final IntBlockTermState termState = (IntBlockTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    final boolean fieldHasPositions = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n    final boolean fieldHasOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n    final boolean fieldHasPayloads = fieldInfo.hasPayloads();\n\n    final DataInput in = termState.bytesReader;\n    if (isFirstTerm) {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n        termState.docStartFP = 0;\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP = in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP = in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          termState.payStartFP = in.readVLong();\n        } else {\n          termState.payStartFP = -1;\n        }\n      }\n    } else {\n      if (termState.docFreq == 1) {\n        termState.singletonDocID = in.readVInt();\n      } else {\n        termState.singletonDocID = -1;\n        termState.docStartFP += in.readVLong();\n      }\n      if (fieldHasPositions) {\n        termState.posStartFP += in.readVLong();\n        if (termState.totalTermFreq > BLOCK_SIZE) {\n          termState.lastPosBlockOffset = in.readVLong();\n        } else {\n          termState.lastPosBlockOffset = -1;\n        }\n        if ((fieldHasPayloads || fieldHasOffsets) && termState.totalTermFreq >= BLOCK_SIZE) {\n          long delta = in.readVLong();\n          if (termState.payStartFP == -1) {\n            termState.payStartFP = delta;\n          } else {\n            termState.payStartFP += delta;\n          }\n        }\n      }\n    }\n\n    if (termState.docFreq > BLOCK_SIZE) {\n      termState.skipOffset = in.readVLong();\n    } else {\n      termState.skipOffset = -1;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["5626bd803178375ddd3b1d121587f4e5d1bcbd8c"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"5626bd803178375ddd3b1d121587f4e5d1bcbd8c":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","5626bd803178375ddd3b1d121587f4e5d1bcbd8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5626bd803178375ddd3b1d121587f4e5d1bcbd8c","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f948dd442d23baa6cbb28daf77c8db78b351329"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["5626bd803178375ddd3b1d121587f4e5d1bcbd8c","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"5626bd803178375ddd3b1d121587f4e5d1bcbd8c":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","62e52115b56781006682fd92c6938efaf174304d","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}