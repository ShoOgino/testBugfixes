{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCosineSimilarity().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCosineSimilarity().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCosineSimilarity().mjava","sourceNew":"  @Test\n  public void testCosineSimilarity() throws Exception {\n    String cexpr = \"cosineSimilarity(array(2,4,6,8),array(1,1,3,4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number cs = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(cs.doubleValue() == 0.9838197164968291);\n  }\n\n","sourceOld":"  @Test\n  public void testCosineSimilarity() throws Exception {\n    String cexpr = \"cosineSimilarity(array(2,4,6,8),array(1,1,3,4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number cs = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(cs.doubleValue() == 0.9838197164968291);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6331fb5344e3d737be63af3a7bd470ee133004a","date":1569798100,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCosineSimilarity().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCosineSimilarity().mjava","sourceNew":"  @Test\n  public void testCosineSimilarity() throws Exception {\n    String cexpr = \"cosineSimilarity(array(2,4,6,8),array(1,1,3,4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number cs = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(cs.doubleValue(),0.9838197164968291, .00000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCosineSimilarity() throws Exception {\n    String cexpr = \"cosineSimilarity(array(2,4,6,8),array(1,1,3,4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number cs = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(cs.doubleValue() == 0.9838197164968291);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCosineSimilarity().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCosineSimilarity().mjava","sourceNew":"  @Test\n  public void testCosineSimilarity() throws Exception {\n    String cexpr = \"cosineSimilarity(array(2,4,6,8),array(1,1,3,4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number cs = (Number)tuples.get(0).get(\"return-value\");\n    assertEquals(cs.doubleValue(),0.9838197164968291, .00000001);\n  }\n\n","sourceOld":"  @Test\n  public void testCosineSimilarity() throws Exception {\n    String cexpr = \"cosineSimilarity(array(2,4,6,8),array(1,1,3,4))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Number cs = (Number)tuples.get(0).get(\"return-value\");\n    assertTrue(cs.doubleValue() == 0.9838197164968291);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6331fb5344e3d737be63af3a7bd470ee133004a":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","b6331fb5344e3d737be63af3a7bd470ee133004a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6331fb5344e3d737be63af3a7bd470ee133004a"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"b6331fb5344e3d737be63af3a7bd470ee133004a":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b6331fb5344e3d737be63af3a7bd470ee133004a","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}