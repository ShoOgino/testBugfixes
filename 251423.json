{"path":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","commits":[{"id":"d568d474b2c3c00dd89047135bcb6ff8bfa7b559","date":1176840521,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#flushBuffer(byte[],int,int).mjava","sourceNew":"    public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void flushBuffer(byte[] src, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.flushBuffer(src, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.flushBuffer(src, offset, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"    public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed\");\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed\");\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes\");\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMOutputStream#writeBytes(byte[],int,int).mjava","sourceNew":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeBytes(byte[] b, int offset, int len) throws IOException {\n    long freeSpace = dir.maxSize - dir.sizeInBytes();\n    long realUsage = 0;\n\n    // If MockRAMDir crashed since we were opened, then\n    // don't write anything:\n    if (dir.crashed)\n      throw new IOException(\"MockRAMDirectory was crashed; cannot write to \" + name);\n\n    // Enforce disk full:\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      // Compute the real disk free.  This will greatly slow\n      // down our test but makes it more accurate:\n      realUsage = dir.getRecomputedActualSizeInBytes();\n      freeSpace = dir.maxSize - realUsage;\n    }\n\n    if (dir.maxSize != 0 && freeSpace <= len) {\n      if (freeSpace > 0 && freeSpace < len) {\n        realUsage += freeSpace;\n        super.writeBytes(b, offset, (int) freeSpace);\n      }\n      if (realUsage > dir.maxUsedSize) {\n        dir.maxUsedSize = realUsage;\n      }\n      throw new IOException(\"fake disk full at \" + dir.getRecomputedActualSizeInBytes() + \" bytes when writing \" + name);\n    } else {\n      super.writeBytes(b, offset, len);\n    }\n\n    dir.maybeThrowDeterministicException();\n\n    if (first) {\n      // Maybe throw random exception; only do this on first\n      // write to a new file:\n      first = false;\n      dir.maybeThrowIOException();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"d568d474b2c3c00dd89047135bcb6ff8bfa7b559":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83bbb041887bbef07b8a98d08a0e1713ce137039":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["d568d474b2c3c00dd89047135bcb6ff8bfa7b559"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4ff8864209d2e972cb4393600c26082f9a6533d":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d568d474b2c3c00dd89047135bcb6ff8bfa7b559":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"83bbb041887bbef07b8a98d08a0e1713ce137039":["e82780afe6097066eb5befb86e9432f077667e3d"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d568d474b2c3c00dd89047135bcb6ff8bfa7b559"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e82780afe6097066eb5befb86e9432f077667e3d":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}