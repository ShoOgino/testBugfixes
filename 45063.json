{"path":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n    Collector wrappedCollectors;\n    if (collectors.isEmpty()) {\n      wrappedCollectors = null;\n    } else {\n      wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands]));\n    }\n\n    if (wrappedCollectors == null && needDocset) {\n      int maxDoc = searcher.maxDoc();\n      DocSetCollector docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n      searcher.search(query, luceneFilter, docSetCollector);\n      docSet = docSetCollector.getDocSet();\n    } else if (needDocset) {\n      int maxDoc = searcher.maxDoc();\n      DocSetCollector docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n      searcher.search(query, luceneFilter, docSetCollector);\n      docSet = docSetCollector.getDocSet();\n    } else {\n      searcher.search(query, luceneFilter, wrappedCollectors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2f8247163846f78e14d325499507cc0a7d5821e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0414a20d73ebe5c96a6e7e70e337083ec37f01fd","date":1316542523,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups && nrOfCommands > 0) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else {\n      searcher.search(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n    Collector wrappedCollectors;\n    if (collectors.isEmpty()) {\n      wrappedCollectors = null;\n    } else {\n      wrappedCollectors = MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands]));\n    }\n\n    if (wrappedCollectors == null && needDocset) {\n      int maxDoc = searcher.maxDoc();\n      DocSetCollector docSetCollector = new DocSetCollector(maxDoc >> 6, maxDoc);\n      searcher.search(query, luceneFilter, docSetCollector);\n      docSet = docSetCollector.getDocSet();\n    } else if (needDocset) {\n      int maxDoc = searcher.maxDoc();\n      DocSetCollector docSetCollector = new DocSetDelegateCollector(maxDoc >> 6, maxDoc, wrappedCollectors);\n      searcher.search(query, luceneFilter, docSetCollector);\n      docSet = docSetCollector.getDocSet();\n    } else {\n      searcher.search(query, luceneFilter, wrappedCollectors);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a250ecd3e83b1c6595bcae0474f5b258df42021b","2f8247163846f78e14d325499507cc0a7d5821e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a250ecd3e83b1c6595bcae0474f5b258df42021b","date":1330943490,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups && nrOfCommands > 0) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else {\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups && nrOfCommands > 0) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else {\n      searcher.search(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    }\n  }\n\n","bugFix":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"bugIntro":["2f8247163846f78e14d325499507cc0a7d5821e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups && nrOfCommands > 0) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else {\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups && nrOfCommands > 0) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else {\n      searcher.search(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, luceneFilter, null);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups && nrOfCommands > 0) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else {\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    }\n  }\n\n","bugFix":null,"bugIntro":["2f8247163846f78e14d325499507cc0a7d5821e2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f8247163846f78e14d325499507cc0a7d5821e2","date":1353984869,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, luceneFilter, null);\n    }\n  }\n\n","bugFix":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd","ccc08aa684aee4964baee0644a6ba047bfd70829","612521de57bdf68711c68b6d8565e4a80ca0d7f6","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    SolrIndexSearcher.ProcessedFilter pf = searcher.getProcessedFilter(\n        queryCommand.getFilter(), queryCommand.getFilterList()\n    );\n    Filter luceneFilter = pf.filter;\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, luceneFilter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, luceneFilter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, luceneFilter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, luceneFilter, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<Collector>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n\n    for (Command command : commands) {\n      command.postCollect(searcher);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/CommandHandler#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<>(nrOfCommands);\n    for (@SuppressWarnings({\"rawtypes\"})Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n\n    for (@SuppressWarnings({\"rawtypes\"})Command command : commands) {\n      command.postCollect(searcher);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() throws IOException {\n    final int nrOfCommands = commands.size();\n    List<Collector> collectors = new ArrayList<>(nrOfCommands);\n    for (Command command : commands) {\n      collectors.addAll(command.create());\n    }\n\n    ProcessedFilter filter = searcher.getProcessedFilter\n      (queryCommand.getFilter(), queryCommand.getFilterList());\n    Query query = QueryUtils.makeQueryable(queryCommand.getQuery());\n\n    if (truncateGroups) {\n      docSet = computeGroupedDocSet(query, filter, collectors);\n    } else if (needDocset) {\n      docSet = computeDocSet(query, filter, collectors);\n    } else if (!collectors.isEmpty()) {\n      searchWithTimeLimiter(query, filter, MultiCollector.wrap(collectors.toArray(new Collector[nrOfCommands])));\n    } else {\n      searchWithTimeLimiter(query, filter, null);\n    }\n\n    for (Command command : commands) {\n      command.postCollect(searcher);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0414a20d73ebe5c96a6e7e70e337083ec37f01fd":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f8247163846f78e14d325499507cc0a7d5821e2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["612521de57bdf68711c68b6d8565e4a80ca0d7f6","2f8247163846f78e14d325499507cc0a7d5821e2"],"2f8247163846f78e14d325499507cc0a7d5821e2":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"0414a20d73ebe5c96a6e7e70e337083ec37f01fd":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2f8247163846f78e14d325499507cc0a7d5821e2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","407687e67faf6e1f02a211ca078d8e3eed631027"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["407687e67faf6e1f02a211ca078d8e3eed631027","2f8247163846f78e14d325499507cc0a7d5821e2"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}