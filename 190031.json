{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","commits":[{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader().getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> shards = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : shards.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n//      System.out.println(\"state:\"\n//          + state\n//          + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n//          + \" live: \"\n//          + clusterState.liveNodesContain(shard.getValue().get(\n//              ZkStateReader.NODE_NAME_PROP)));\n      if ((state.equals(ZkStateReader.ACTIVE))\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n          ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlices(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    Slice slice = slices.get(shardId);\n    if (!slice.getState().equals(Slice.ACTIVE)) {\n      //Return false if the Slice is not active yet.\n      return false;\n    }\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    Slice slice = slices.get(shardId);\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cef9edf6786c51f767f53339f5be3ccb5e1a491","date":1397590125,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContext[ElectionContext]#areAnyOtherReplicasActive(ZkController,ZkNodeProps,String,String).mjava","sourceNew":null,"sourceOld":"  private boolean areAnyOtherReplicasActive(ZkController zkController,\n      ZkNodeProps leaderProps, String collection, String shardId) {\n    ClusterState clusterState = zkController.getZkStateReader()\n        .getClusterState();\n    Map<String,Slice> slices = clusterState.getSlicesMap(collection);\n    Slice slice = slices.get(shardId);\n    if (!slice.getState().equals(Slice.ACTIVE)) {\n      //Return false if the Slice is not active yet.\n      return false;\n    }\n    Map<String,Replica> replicasMap = slice.getReplicasMap();\n    for (Map.Entry<String,Replica> shard : replicasMap.entrySet()) {\n      String state = shard.getValue().getStr(ZkStateReader.STATE_PROP);\n      // System.out.println(\"state:\"\n      // + state\n      // + shard.getValue().get(ZkStateReader.NODE_NAME_PROP)\n      // + \" live: \"\n      // + clusterState.liveNodesContain(shard.getValue().get(\n      // ZkStateReader.NODE_NAME_PROP)));\n      if (state.equals(ZkStateReader.ACTIVE)\n          && clusterState.liveNodesContain(shard.getValue().getStr(\n              ZkStateReader.NODE_NAME_PROP))\n          && !new ZkCoreNodeProps(shard.getValue()).getCoreUrl().equals(\n              new ZkCoreNodeProps(leaderProps).getCoreUrl())) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6378064655e76cd7b908b1cab4ce425b384b508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5a558d54519c651068ddb202f03befefb1514a7":["a6378064655e76cd7b908b1cab4ce425b384b508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a6378064655e76cd7b908b1cab4ce425b384b508","c5a558d54519c651068ddb202f03befefb1514a7"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9cef9edf6786c51f767f53339f5be3ccb5e1a491"],"9cef9edf6786c51f767f53339f5be3ccb5e1a491":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"]},"commit2Childs":{"a6378064655e76cd7b908b1cab4ce425b384b508":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6378064655e76cd7b908b1cab4ce425b384b508"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["9cef9edf6786c51f767f53339f5be3ccb5e1a491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9cef9edf6786c51f767f53339f5be3ccb5e1a491":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}