{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","commits":[{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      return state.copyWith(colls);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      return state.copyWith(colls);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":"      private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n        for (Entry<String, DocCollection> e : colls.entrySet()) {\n          DocCollection c = e.getValue();\n          if (c == null) {\n            isClusterStateModified = true;\n            state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));\n            continue;\n          }\n\n          if (c.isExternal()) {\n            state.getStateReader().updateExternCollection(c);\n            updateNodes.put(ZkStateReader.getCollectionPath(c.getName()), new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c), state.getStateReader()));\n          } else {\n            isClusterStateModified = true;\n            state = state.copyWith(singletonMap(e.getKey(), c));\n          }\n        }\n        return state;\n      }\n\n","sourceOld":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      return state.copyWith(colls);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":"      private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n        return state.copyWith(colls);\n      }\n\n","sourceOld":"      private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n        for (Entry<String, DocCollection> e : colls.entrySet()) {\n          DocCollection c = e.getValue();\n          if (c == null) {\n            isClusterStateModified = true;\n            state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));\n            continue;\n          }\n\n          if (c.isExternal()) {\n            state.getStateReader().updateExternCollection(c);\n            updateNodes.put(ZkStateReader.getCollectionPath(c.getName()), new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c), state.getStateReader()));\n          } else {\n            isClusterStateModified = true;\n            state = state.copyWith(singletonMap(e.getKey(), c));\n          }\n        }\n        return state;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      for (Entry<String, DocCollection> e : colls.entrySet()) {\n        DocCollection c = e.getValue();\n        if (c == null) {\n          isClusterStateModified = true;\n          state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));\n          continue;\n        }\n\n        if (c.getStateFormat() >1) {\n          state.getStateReader().updateWatchedCollection(c);\n          updateNodes.put(ZkStateReader.getCollectionPath(c.getName()), new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c), state.getStateReader()));\n        } else {\n          isClusterStateModified = true;\n          state = state.copyWith(singletonMap(e.getKey(), c));\n        }\n      }\n      return state;\n    }\n\n","sourceOld":"      private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n        return state.copyWith(colls);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":"      private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n        return state.copyWith(colls);\n      }\n\n","sourceOld":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      for (Entry<String, DocCollection> e : colls.entrySet()) {\n        DocCollection c = e.getValue();\n        if (c == null) {\n          isClusterStateModified = true;\n          state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));\n          continue;\n        }\n\n        if (c.getStateFormat() >1) {\n          state.getStateReader().updateWatchedCollection(c);\n          updateNodes.put(ZkStateReader.getCollectionPath(c.getName()), new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c), state.getStateReader()));\n        } else {\n          isClusterStateModified = true;\n          state = state.copyWith(singletonMap(e.getKey(), c));\n        }\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      for (Entry<String, DocCollection> e : colls.entrySet()) {\n        DocCollection c = e.getValue();\n        if (c == null) {\n          isClusterStateModified = true;\n          state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));\n          updateNodes.put(ZkStateReader.getCollectionPath(e.getKey()) ,null);\n          continue;\n        }\n\n        if (c.getStateFormat() > 1) {\n          updateNodes.put(ZkStateReader.getCollectionPath(c.getName()),\n              new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c)));\n        } else {\n          isClusterStateModified = true;\n        }\n        state = state.copyWith(singletonMap(e.getKey(), c));\n\n      }\n      return state;\n    }\n\n","sourceOld":"      private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n        return state.copyWith(colls);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3717889cd0547a234e5fb8db6934848a727cdf19","date":1417289098,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      for (Entry<String, DocCollection> e : colls.entrySet()) {\n        DocCollection c = e.getValue();\n        if (c == null) {\n          isClusterStateModified = true;\n          state = state.copyWith(e.getKey(), null);\n          updateNodes.put(ZkStateReader.getCollectionPath(e.getKey()) ,null);\n          continue;\n        }\n\n        if (c.getStateFormat() > 1) {\n          updateNodes.put(ZkStateReader.getCollectionPath(c.getName()),\n              new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c)));\n        } else {\n          isClusterStateModified = true;\n        }\n        state = state.copyWith(e.getKey(), c);\n\n      }\n      return state;\n    }\n\n","sourceOld":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      for (Entry<String, DocCollection> e : colls.entrySet()) {\n        DocCollection c = e.getValue();\n        if (c == null) {\n          isClusterStateModified = true;\n          state = state.copyWith(singletonMap(e.getKey(), (DocCollection) null));\n          updateNodes.put(ZkStateReader.getCollectionPath(e.getKey()) ,null);\n          continue;\n        }\n\n        if (c.getStateFormat() > 1) {\n          updateNodes.put(ZkStateReader.getCollectionPath(c.getName()),\n              new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c)));\n        } else {\n          isClusterStateModified = true;\n        }\n        state = state.copyWith(singletonMap(e.getKey(), c));\n\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"584c1ee8712b5af28075d98028ccab111d6eeda2","date":1417444624,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#newState(ClusterState,Map[String,DocCollection]).mjava","sourceNew":null,"sourceOld":"    private ClusterState newState(ClusterState state, Map<String, DocCollection> colls) {\n      for (Entry<String, DocCollection> e : colls.entrySet()) {\n        DocCollection c = e.getValue();\n        if (c == null) {\n          isClusterStateModified = true;\n          state = state.copyWith(e.getKey(), null);\n          updateNodes.put(ZkStateReader.getCollectionPath(e.getKey()) ,null);\n          continue;\n        }\n\n        if (c.getStateFormat() > 1) {\n          updateNodes.put(ZkStateReader.getCollectionPath(c.getName()),\n              new ClusterState(-1, Collections.<String>emptySet(), singletonMap(c.getName(), c)));\n        } else {\n          isClusterStateModified = true;\n        }\n        state = state.copyWith(e.getKey(), c);\n\n      }\n      return state;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["3717889cd0547a234e5fb8db6934848a727cdf19"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"3717889cd0547a234e5fb8db6934848a727cdf19":["9279b175e5e66258442d2123a50f052219a9cc1b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"]},"commit2Childs":{"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"584c1ee8712b5af28075d98028ccab111d6eeda2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"3717889cd0547a234e5fb8db6934848a727cdf19":["584c1ee8712b5af28075d98028ccab111d6eeda2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["3717889cd0547a234e5fb8db6934848a727cdf19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}