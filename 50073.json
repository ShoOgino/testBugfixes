{"path":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","commits":[{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private static void runConfigCommand(RestTestHarness harness, String uri,  String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri,  String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n  }\n\n","sourceOld":"  private static void runConfigCommand(RestTestHarness harness, String uri,  String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2f5be890d26585d438eba0b9cc7d3c0a9775be","date":1427387954,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri,  String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri,  String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response,  map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","date":1456309391,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: \", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: \", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String response = harness.post(uri, SolrTestCaseJ4.json(payload));\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559","date":1468819763,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: \", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: \", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2238da841c6da38e6ed909d35da8f4c0ea3147b","date":1499346175,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  public static Map runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n    return map;\n  }\n\n","sourceOld":"  public static void runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrConfigHandler#runConfigCommand(RestTestHarness,String,String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public static Map runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n    return map;\n  }\n\n","sourceOld":"  public static Map runConfigCommand(RestTestHarness harness, String uri, String payload) throws IOException {\n    String json = SolrTestCaseJ4.json(payload);\n    log.info(\"going to send config command. path {} , payload: {}\", uri, payload);\n    String response = harness.post(uri, json);\n    Map map = (Map) Utils.fromJSONString(response);\n    assertNull(response, map.get(\"errorMessages\"));\n    assertNull(response, map.get(\"errors\")); // Will this ever be returned?\n    return map;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"627e70d5711ab39d080a080f089685268525f54d":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e2238da841c6da38e6ed909d35da8f4c0ea3147b"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559"],"e98520789adb1d5ad05afb4956eca0944a929688":["627e70d5711ab39d080a080f089685268525f54d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"95e8420b0cad2ed6c40e0a272a1ca1b314303fe3":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559":["95e8420b0cad2ed6c40e0a272a1ca1b314303fe3"],"e73d8d559120669b47658108d818b637df5456ea":["b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559","e2238da841c6da38e6ed909d35da8f4c0ea3147b"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","95e8420b0cad2ed6c40e0a272a1ca1b314303fe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"627e70d5711ab39d080a080f089685268525f54d":["e98520789adb1d5ad05afb4956eca0944a929688"],"e2238da841c6da38e6ed909d35da8f4c0ea3147b":["3714bcf66a68a1600e9dd11442fc1b33b62ef088","e73d8d559120669b47658108d818b637df5456ea"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["627e70d5711ab39d080a080f089685268525f54d"],"ae2f5be890d26585d438eba0b9cc7d3c0a9775be":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","95e8420b0cad2ed6c40e0a272a1ca1b314303fe3","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["ae2f5be890d26585d438eba0b9cc7d3c0a9775be","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"95e8420b0cad2ed6c40e0a272a1ca1b314303fe3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"b0b6855d177d7bf3e5e510568ed5e8b8bbfb8559":["e2238da841c6da38e6ed909d35da8f4c0ea3147b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e73d8d559120669b47658108d818b637df5456ea"],"e73d8d559120669b47658108d818b637df5456ea":[],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e73d8d559120669b47658108d818b637df5456ea","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}