{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method,ClassLoader).mjava","commits":[{"id":"39912125a86f1322163a6c630f07eb6fc3ffe3f5","date":1379190712,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method,ClassLoader).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method).mjava","sourceNew":"  private static void checkFunction(Method method, ClassLoader parent) {\n    // We can only call the function if the given parent class loader of our compiled class has access to the method:\n    final ClassLoader functionClassloader = method.getDeclaringClass().getClassLoader();\n    if (functionClassloader != null) { // it is a system class iff null!\n      boolean found = false;\n      while (parent != null) {\n        if (parent == functionClassloader) {\n          found = true;\n          break;\n        }\n        parent = parent.getParent();\n      }\n      if (!found) {\n        throw new IllegalArgumentException(method + \" is not declared by a class which is accessible by the given parent ClassLoader.\");\n      }\n    }\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":"  /* do some checks if the signature is \"compatible\" */\n  private static void checkFunction(Method method) {\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0e44787cffbb978aa2182761e3f9b184545a1e","date":1379265303,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method,ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkFunction(Method method, ClassLoader parent) {\n    // We can only call the function if the given parent class loader of our compiled class has access to the method:\n    final ClassLoader functionClassloader = method.getDeclaringClass().getClassLoader();\n    if (functionClassloader != null) { // it is a system class iff null!\n      boolean found = false;\n      while (parent != null) {\n        if (parent == functionClassloader) {\n          found = true;\n          break;\n        }\n        parent = parent.getParent();\n      }\n      if (!found) {\n        throw new IllegalArgumentException(method + \" is not declared by a class which is accessible by the given parent ClassLoader.\");\n      }\n    }\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce","date":1449313441,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler#checkFunction(Method,ClassLoader).mjava","sourceNew":null,"sourceOld":"  private static void checkFunction(Method method, ClassLoader parent) {\n    // We can only call the function if the given parent class loader of our compiled class has access to the method:\n    final ClassLoader functionClassloader = method.getDeclaringClass().getClassLoader();\n    if (functionClassloader != null) { // it is a system class iff null!\n      boolean found = false;\n      while (parent != null) {\n        if (parent == functionClassloader) {\n          found = true;\n          break;\n        }\n        parent = parent.getParent();\n      }\n      if (!found) {\n        throw new IllegalArgumentException(method + \" is not declared by a class which is accessible by the given parent ClassLoader.\");\n      }\n    }\n    // do some checks if the signature is \"compatible\":\n    if (!Modifier.isStatic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not static.\");\n    }\n    if (!Modifier.isPublic(method.getModifiers())) {\n      throw new IllegalArgumentException(method + \" is not public.\");\n    }\n    if (!Modifier.isPublic(method.getDeclaringClass().getModifiers())) {\n      throw new IllegalArgumentException(method.getDeclaringClass().getName() + \" is not public.\");\n    }\n    for (Class<?> clazz : method.getParameterTypes()) {\n      if (!clazz.equals(double.class)) {\n        throw new IllegalArgumentException(method + \" must take only double parameters\");\n      }\n    }\n    if (method.getReturnType() != double.class) {\n      throw new IllegalArgumentException(method + \" does not return a double.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"39912125a86f1322163a6c630f07eb6fc3ffe3f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81b6a3d49aba985c5fd89deb83f9959ecf17a0ce"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39912125a86f1322163a6c630f07eb6fc3ffe3f5"]},"commit2Childs":{"81b6a3d49aba985c5fd89deb83f9959ecf17a0ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39912125a86f1322163a6c630f07eb6fc3ffe3f5":["5f0e44787cffbb978aa2182761e3f9b184545a1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39912125a86f1322163a6c630f07eb6fc3ffe3f5","5f0e44787cffbb978aa2182761e3f9b184545a1e"],"5f0e44787cffbb978aa2182761e3f9b184545a1e":["81b6a3d49aba985c5fd89deb83f9959ecf17a0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}