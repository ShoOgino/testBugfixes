{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchSysProps(Set[String]).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#fetchSysProps(Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodesSysPropsCacher#fetchSysProps(Set[String]).mjava","sourceNew":"  private void fetchSysProps(Set<String> newLiveNodes) {\n    if (isRunning.get()) {\n      int fetchRound = fetchCounting.incrementAndGet();\n      //TODO smarter keeping caching entries by relying on Stat.cversion\n      cache.clear();\n      for (String node: newLiveNodes) {\n        // this might takes some times to finish, therefore if there are a latter change in listener\n        // triggering this method, skipping the old runner\n        if (isClosed && fetchRound != fetchCounting.get())\n          return;\n\n        if (currentNode.equals(node)) {\n          Map<String, String> props = new HashMap<>();\n          for (String tag : tags) {\n            String propName = tag.substring(SYSPROP.length());\n            if (additionalProps != null && additionalProps.containsKey(propName)) {\n              props.put(tag, additionalProps.get(propName));\n            } else {\n              props.put(tag, System.getProperty(propName));\n            }\n          }\n          cache.put(node, Collections.unmodifiableMap(props));\n        } else {\n          fetchRemoteProps(node, fetchRound);\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  private void fetchSysProps(Set<String> newLiveNodes) {\n    if (isRunning.get()) {\n      int fetchRound = fetchCounting.incrementAndGet();\n      //TODO smarter keeping caching entries by relying on Stat.cversion\n      cache.clear();\n      for (String node: newLiveNodes) {\n        // this might takes some times to finish, therefore if there are a latter change in listener\n        // triggering this method, skipping the old runner\n        if (isClosed && fetchRound != fetchCounting.get())\n          return;\n\n        if (currentNode.equals(node)) {\n          Map<String, String> props = new HashMap<>();\n          for (String tag : tags) {\n            String propName = tag.substring(SYSPROP.length());\n            if (additionalProps != null && additionalProps.containsKey(propName)) {\n              props.put(tag, additionalProps.get(propName));\n            } else {\n              props.put(tag, System.getProperty(propName));\n            }\n          }\n          cache.put(node, Collections.unmodifiableMap(props));\n        } else {\n          fetchRemoteProps(node, fetchRound);\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}