{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter#bits(IndexReader).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter#bits(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.numDocs();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    \n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n      if (d < distance){\n        bits.set(i);\n      }\n      \n    }\n    \n    return bits;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter#bits(IndexReader).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter#bits(IndexReader).mjava","sourceNew":"\t@Override\n\tpublic abstract BitSet bits(IndexReader reader) throws IOException;\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader) throws IOException {\n\n    /* Create a BitSet to store the result */\n    int maxdocs = reader.numDocs();\n    BitSet bits = new BitSet(maxdocs);\n    \n    setPrecision(maxdocs);\n    // create an intermediate cache to avoid recomputing\n    //   distances for the same point \n    //   TODO: Why is this a WeakHashMap? \n    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);\n    \n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(maxdocs);\n    for (int i = 0 ; i < maxdocs; i++) {\n      \n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n  \n      double x = NumberUtils.SortableStr2double(sx);\n      double y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n      \n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      \n      \n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      distances.put(i, d);\n      \n      if (d < distance){\n        bits.set(i);\n      }\n      \n    }\n    \n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceFilter#bits(IndexReader).mjava","sourceNew":null,"sourceOld":"\t@Override\n\tpublic abstract BitSet bits(IndexReader reader) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["0584ee2be458044f19041ac184df00c69c632b4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["04a4a94db1eb59c8583adb166acfe686a031bedc"]},"commit2Childs":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["0584ee2be458044f19041ac184df00c69c632b4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0584ee2be458044f19041ac184df00c69c632b4d":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}