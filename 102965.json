{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","commits":[{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      String collectionName,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return Assign.getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1735d662b62f98976dc6cccfe9d327c5e7b22dff","date":1498984143,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null && autoScalingJson.get(Policy.CLUSTER_POLICY) == null) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null && autoScalingJson.get(Policy.CLUSTER_POLICY) == null) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217314a66df11e4013ff43c4027a4d64b6931148","date":1502866906,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null && autoScalingJson.get(Policy.CLUSTER_POLICY) == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null && autoScalingJson.get(Policy.CLUSTER_POLICY) == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n\n    if (rulesMap == null && policyName == null && autoScalingJson.get(Policy.CLUSTER_POLICY) == null) {\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames) {\n\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else {\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, policyName, zkStateReader, nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["217314a66df11e4013ff43c4027a4d64b6931148","bccf7971a36bd151490117582a0a1a695081ead3"],"217314a66df11e4013ff43c4027a4d64b6931148":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bccf7971a36bd151490117582a0a1a695081ead3":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"560c18d71dad43d675158783c3840f8c80d6d39c":["217314a66df11e4013ff43c4027a4d64b6931148","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"217314a66df11e4013ff43c4027a4d64b6931148":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["217314a66df11e4013ff43c4027a4d64b6931148"],"bccf7971a36bd151490117582a0a1a695081ead3":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["969718c368b28ed1b2335ea2deb275c696cddb4f","0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["bccf7971a36bd151490117582a0a1a695081ead3"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}