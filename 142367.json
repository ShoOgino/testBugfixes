{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14975dba6846360ff627c6797726fa4899a3413d","date":1295174738,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new CrashingFilter(fieldName, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", Field.Store.YES,\n                      Field.Index.ANALYZED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", Field.Store.YES,\n                           Field.Index.ANALYZED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53ae89cd75b0acbdfb8890710c6742f3fb80e65d","date":1315806626,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new CrashingFilter(fieldName, tokenizer);\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new ReusableAnalyzerBase(new ReusableAnalyzerBase.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionJustBeforeFlush().mjava","sourceNew":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1208\n  public void testExceptionJustBeforeFlush() throws IOException {\n    Directory dir = newDirectory();\n    MockIndexWriter w = new MockIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a field\", TextField.TYPE_STORED));\n    w.addDocument(doc);\n\n    Analyzer analyzer = new Analyzer(new Analyzer.PerFieldReuseStrategy()) {\n      @Override\n      public TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        MockTokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        tokenizer.setEnableChecks(false); // disable workflow checking as we forcefully close() in exceptional cases.\n        return new TokenStreamComponents(tokenizer, new CrashingFilter(fieldName, tokenizer));\n      }\n    };\n\n    Document crashDoc = new Document();\n    crashDoc.add(newField(\"crash\", \"do it on token 4\", TextField.TYPE_STORED));\n    try {\n      w.addDocument(crashDoc, analyzer);\n      fail(\"did not hit expected exception\");\n    } catch (IOException ioe) {\n      // expected\n    }\n    w.addDocument(doc);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["2f49143da0a5d278a72f741432047fcfa6da996e"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","962d04139994fce5193143ef35615499a9a96d78"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85a883878c0af761245ab048babc63d099f835f3","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"962d04139994fce5193143ef35615499a9a96d78":["14975dba6846360ff627c6797726fa4899a3413d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f49143da0a5d278a72f741432047fcfa6da996e":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"14975dba6846360ff627c6797726fa4899a3413d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"85a883878c0af761245ab048babc63d099f835f3":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"962d04139994fce5193143ef35615499a9a96d78":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["14975dba6846360ff627c6797726fa4899a3413d"],"53ae89cd75b0acbdfb8890710c6742f3fb80e65d":["2f49143da0a5d278a72f741432047fcfa6da996e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","962d04139994fce5193143ef35615499a9a96d78"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","85a883878c0af761245ab048babc63d099f835f3"],"2f49143da0a5d278a72f741432047fcfa6da996e":["06584e6e98d592b34e1329b384182f368d2025e8"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"14975dba6846360ff627c6797726fa4899a3413d":["962d04139994fce5193143ef35615499a9a96d78"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["53ae89cd75b0acbdfb8890710c6742f3fb80e65d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}