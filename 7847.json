{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsWriter#merge(MergeState).mjava","sourceNew":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","sourceOld":"  @Override\n  public final int merge(MergeState mergeState) throws IOException {\n    // Used for bulk-reading raw bytes for term vectors\n    int rawDocLengths[] = new int[MAX_RAW_MERGE_DOCS];\n    int rawDocLengths2[] = new int[MAX_RAW_MERGE_DOCS];\n\n    int idx = 0;\n    int numDocs = 0;\n    for (final MergeState.IndexReaderAndLiveDocs reader : mergeState.readers) {\n      final SegmentReader matchingSegmentReader = mergeState.matchingSegmentReaders[idx++];\n      Lucene40TermVectorsReader matchingVectorsReader = null;\n      if (matchingSegmentReader != null) {\n        TermVectorsReader vectorsReader = matchingSegmentReader.getTermVectorsReader();\n\n        if (vectorsReader != null && vectorsReader instanceof Lucene40TermVectorsReader) {\n          // If the TV* files are an older format then they cannot read raw docs:\n          if (((Lucene40TermVectorsReader)vectorsReader).canReadRawDocs()) {\n            matchingVectorsReader = (Lucene40TermVectorsReader) vectorsReader;\n          }\n        }\n      }\n      if (reader.liveDocs != null) {\n        numDocs += copyVectorsWithDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      } else {\n        numDocs += copyVectorsNoDeletions(mergeState, matchingVectorsReader, reader, rawDocLengths, rawDocLengths2);\n      }\n    }\n    finish(numDocs);\n    return numDocs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}