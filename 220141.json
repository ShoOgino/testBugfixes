{"path":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","commits":[{"id":"e475642767c688ede5728d7918326f70b4e0bf3a","date":1366072489,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscover().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"adminPath no longer allowed in solr.xml\", cc.getAdminPath());\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscover() throws Exception {\n    setMeUp();\n    addSolrXml();\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false));\n\n    CoreContainer cc = init();\n    try {\n      Properties props = cc.containerProperties;\n\n      assertEquals(\"/admin/cores\", cc.getAdminPath());\n      assertEquals(\"defcore\", cc.getDefaultCoreName());\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"stuffandnonsense\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3278df77f7f499b55fdb79861c0641450444e7d0","date":1366238988,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"adminPath no longer allowed in solr.xml\", cc.getAdminPath());\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.zkSys.getHost());\n      assertEquals(\"6000\", cc.zkSys.getHostPort());\n      assertEquals(\"solrprop\", cc.zkSys.getHostContext());\n      assertEquals(20, cc.zkSys.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.getHost());\n      assertEquals(\"6000\", cc.getHostPort());\n      assertEquals(\"solrprop\", cc.getHostContext());\n      assertEquals(20, cc.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aff95548e98887da066e6b1f625edf80658ea345","date":1366679225,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      assertEquals(\"222.333.444.555\", cc.zkSys.getHost());\n      assertEquals(\"6000\", cc.zkSys.getHostPort());\n      assertEquals(\"solrprop\", cc.zkSys.getHostContext());\n      assertEquals(20, cc.zkSys.getZkClientTimeout());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f5d1cc8d16a148260af030c38f50f1873f02e11d","date":1368062450,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertNull(\"defaultCore no longer allowed in solr.xml\", cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":["e475642767c688ede5728d7918326f70b4e0bf3a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c8b96bb5b688807272bd6bee7051c5168e1a10","date":1368203207,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.name\"));\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getProperty(\"solr.core.instanceDir\").contains(\"totallybogus\"));\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getProperty(\"solr.core.instanceDir\"));\n\n      assertEquals(\"core1\", desc.getProperty(\"solr.core.dataDir\"));\n      assertEquals(\"solrconfig-minimal.xml\", desc.getProperty(\"solr.core.configName\"));\n      assertEquals(\"schema-tiny.xml\", desc.getProperty(\"solr.core.schemaName\"));\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92a4da96826f502cf1a56a096929b37ce73e523a","date":1374584011,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(ConfigSolrXmlOld.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(ConfigSolrXmlOld.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(CoreContainer.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(ConfigSolrXmlOld.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        // Prove we're ignoring this even though it's set in the properties file\n        assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(ConfigSolrXmlOld.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      SolrCore core1 = cc.getCore(\"core1\");\n\n      // Let's assert we did the right thing for implicit properties too.\n      CoreDescriptor desc = core1.getCoreDescriptor();\n      assertEquals(\"core1\", desc.getName());\n\n      // This is too long and ugly to put in. Besides, it varies.\n      assertNotNull(desc.getInstanceDir());\n\n      // Prove we're ignoring this even though it's set in the properties file\n      assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n      assertEquals(\"core1\", desc.getDataDir());\n      assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n      assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n      SolrCore core2 = cc.getCore(\"core2\");\n      SolrCore lazy1 = cc.getCore(\"lazy1\");\n      TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      core1.close();\n      core2.close();\n      lazy1.close();\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        // Prove we're ignoring this even though it's set in the properties file\n        assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n      assertEquals(ConfigSolrXmlOld.DEFAULT_DEFAULT_CORE_NAME,\n                   cc.getDefaultCoreName());\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        // Prove we're ignoring this even though it's set in the properties file\n        assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        // Prove we're ignoring this even though it's set in the properties file\n        assertFalse(\"InstanceDir should be ignored\", desc.getInstanceDir().contains(\"totallybogus\"));\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9435d55e3ea95c5d94406d3affc36f9505b6a736","date":1491251232,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6a4b585aed7660a589375f6a09b90efd29c961","date":1491296430,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\", \"collection1\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7871f9c286dce2a9370bcf517a3e7d12e3bd9602","date":1498708934,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, \"lazy1\", \"core2\");\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7a2b4785d366164d3cd69f9948de6ff34d23a1","date":1500527874,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCoreProperties(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n        // Can we persist an existing core's properties?\n\n        // Insure we can persist a new properties file if we want.\n        CoreDescriptor cd1 = core1.getCoreDescriptor();\n        Properties persistable = cd1.getPersistableUserProperties();\n        persistable.setProperty(\"bogusprop\", \"bogusval\");\n        cc.getCoresLocator().persist(cc, cd1);\n        File propFile = new File(new File(solrHomeDirectory.toFile(), \"core1\"), CorePropertiesLocator.PROPERTIES_FILENAME);\n        Properties newProps = new Properties();\n        try (InputStreamReader is = new InputStreamReader(new FileInputStream(propFile), StandardCharsets.UTF_8)) {\n          newProps.load(is);\n        }\n        // is it there?\n        assertEquals(\"Should have persisted bogusprop to disk\", \"bogusval\", newProps.getProperty(\"bogusprop\"));\n        // is it in the user properties?\n        CorePropertiesLocator cpl = new CorePropertiesLocator(solrHomeDirectory);\n        List<CoreDescriptor> cores = cpl.discover(cc);\n        boolean found = false;\n        for (CoreDescriptor cd : cores) {\n          if (cd.getName().equals(\"core1\")) {\n            found = true;\n            assertEquals(\"Should have persisted bogusprop to disk in user properties\",\n                \"bogusval\",\n                cd.getPersistableUserProperties().getProperty(\"bogusprop\"));\n            break;\n          }\n        }\n        assertTrue(\"Should have found core descriptor for core1\", found);\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d301cb76d81de80d07b44735622a04d49ed938eb","date":1500536382,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCoreProperties(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n        // Can we persist an existing core's properties?\n\n        // Insure we can persist a new properties file if we want.\n        CoreDescriptor cd1 = core1.getCoreDescriptor();\n        Properties persistable = cd1.getPersistableUserProperties();\n        persistable.setProperty(\"bogusprop\", \"bogusval\");\n        cc.getCoresLocator().persist(cc, cd1);\n        File propFile = new File(new File(solrHomeDirectory.toFile(), \"core1\"), CorePropertiesLocator.PROPERTIES_FILENAME);\n        Properties newProps = new Properties();\n        try (InputStreamReader is = new InputStreamReader(new FileInputStream(propFile), StandardCharsets.UTF_8)) {\n          newProps.load(is);\n        }\n        // is it there?\n        assertEquals(\"Should have persisted bogusprop to disk\", \"bogusval\", newProps.getProperty(\"bogusprop\"));\n        // is it in the user properties?\n        CorePropertiesLocator cpl = new CorePropertiesLocator(solrHomeDirectory);\n        List<CoreDescriptor> cores = cpl.discover(cc);\n        boolean found = false;\n        for (CoreDescriptor cd : cores) {\n          if (cd.getName().equals(\"core1\")) {\n            found = true;\n            assertEquals(\"Should have persisted bogusprop to disk in user properties\",\n                \"bogusval\",\n                cd.getPersistableUserProperties().getProperty(\"bogusprop\"));\n            break;\n          }\n        }\n        assertTrue(\"Should have found core descriptor for core1\", found);\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCoreProperties(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n        // Can we persist an existing core's properties?\n\n        // Insure we can persist a new properties file if we want.\n        CoreDescriptor cd1 = core1.getCoreDescriptor();\n        Properties persistable = cd1.getPersistableUserProperties();\n        persistable.setProperty(\"bogusprop\", \"bogusval\");\n        cc.getCoresLocator().persist(cc, cd1);\n        File propFile = new File(new File(solrHomeDirectory.toFile(), \"core1\"), CorePropertiesLocator.PROPERTIES_FILENAME);\n        Properties newProps = new Properties();\n        try (InputStreamReader is = new InputStreamReader(new FileInputStream(propFile), StandardCharsets.UTF_8)) {\n          newProps.load(is);\n        }\n        // is it there?\n        assertEquals(\"Should have persisted bogusprop to disk\", \"bogusval\", newProps.getProperty(\"bogusprop\"));\n        // is it in the user properties?\n        CorePropertiesLocator cpl = new CorePropertiesLocator(solrHomeDirectory);\n        List<CoreDescriptor> cores = cpl.discover(cc);\n        boolean found = false;\n        for (CoreDescriptor cd : cores) {\n          if (cd.getName().equals(\"core1\")) {\n            found = true;\n            assertEquals(\"Should have persisted bogusprop to disk in user properties\",\n                \"bogusval\",\n                cd.getPersistableUserProperties().getProperty(\"bogusprop\"));\n            break;\n          }\n        }\n        assertTrue(\"Should have found core descriptor for core1\", found);\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCorePropFile(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCorePropFile(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCorePropFile(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCoreDiscovery#testDiscovery().mjava","sourceNew":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  @SuppressWarnings({\"try\"})\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCoreProperties(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n        // Can we persist an existing core's properties?\n\n        // Insure we can persist a new properties file if we want.\n        CoreDescriptor cd1 = core1.getCoreDescriptor();\n        Properties persistable = cd1.getPersistableUserProperties();\n        persistable.setProperty(\"bogusprop\", \"bogusval\");\n        cc.getCoresLocator().persist(cc, cd1);\n        File propFile = new File(new File(solrHomeDirectory.toFile(), \"core1\"), CorePropertiesLocator.PROPERTIES_FILENAME);\n        Properties newProps = new Properties();\n        try (InputStreamReader is = new InputStreamReader(new FileInputStream(propFile), StandardCharsets.UTF_8)) {\n          newProps.load(is);\n        }\n        // is it there?\n        assertEquals(\"Should have persisted bogusprop to disk\", \"bogusval\", newProps.getProperty(\"bogusprop\"));\n        // is it in the user properties?\n        CorePropertiesLocator cpl = new CorePropertiesLocator(solrHomeDirectory);\n        List<CoreDescriptor> cores = cpl.discover(cc);\n        boolean found = false;\n        for (CoreDescriptor cd : cores) {\n          if (cd.getName().equals(\"core1\")) {\n            found = true;\n            assertEquals(\"Should have persisted bogusprop to disk in user properties\",\n                \"bogusval\",\n                cd.getPersistableUserProperties().getProperty(\"bogusprop\"));\n            break;\n          }\n        }\n        assertTrue(\"Should have found core descriptor for core1\", found);\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","sourceOld":"  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores\n  // set and insure that we find all the cores and can load them.\n  @Test\n  public void testDiscovery() throws Exception {\n    setMeUp();\n\n    // name, isLazy, loadOnStartup\n    addCoreWithProps(\"core1\", makeCoreProperties(\"core1\", false, true, \"dataDir=core1\"));\n    addCoreWithProps(\"core2\", makeCoreProperties(\"core2\", false, false, \"dataDir=core2\"));\n\n    // I suspect what we're adding in here is a \"configset\" rather than a schema or solrconfig.\n    //\n    addCoreWithProps(\"lazy1\", makeCoreProperties(\"lazy1\", true, false, \"dataDir=lazy1\"));\n\n    CoreContainer cc = init();\n    try {\n\n      TestLazyCores.checkInCores(cc, \"core1\");\n      TestLazyCores.checkNotInCores(cc, Arrays.asList(\"lazy1\", \"core2\"));\n\n      // force loading of core2 and lazy1 by getting them from the CoreContainer\n      try (SolrCore core1 = cc.getCore(\"core1\");\n           SolrCore core2 = cc.getCore(\"core2\");\n           SolrCore lazy1 = cc.getCore(\"lazy1\")) {\n\n        // Let's assert we did the right thing for implicit properties too.\n        CoreDescriptor desc = core1.getCoreDescriptor();\n        assertEquals(\"core1\", desc.getName());\n\n        // This is too long and ugly to put in. Besides, it varies.\n        assertNotNull(desc.getInstanceDir());\n\n        assertEquals(\"core1\", desc.getDataDir());\n        assertEquals(\"solrconfig-minimal.xml\", desc.getConfigName());\n        assertEquals(\"schema-tiny.xml\", desc.getSchemaName());\n\n        TestLazyCores.checkInCores(cc, \"core1\", \"core2\", \"lazy1\");\n        // Can we persist an existing core's properties?\n\n        // Insure we can persist a new properties file if we want.\n        CoreDescriptor cd1 = core1.getCoreDescriptor();\n        Properties persistable = cd1.getPersistableUserProperties();\n        persistable.setProperty(\"bogusprop\", \"bogusval\");\n        cc.getCoresLocator().persist(cc, cd1);\n        File propFile = new File(new File(solrHomeDirectory.toFile(), \"core1\"), CorePropertiesLocator.PROPERTIES_FILENAME);\n        Properties newProps = new Properties();\n        try (InputStreamReader is = new InputStreamReader(new FileInputStream(propFile), StandardCharsets.UTF_8)) {\n          newProps.load(is);\n        }\n        // is it there?\n        assertEquals(\"Should have persisted bogusprop to disk\", \"bogusval\", newProps.getProperty(\"bogusprop\"));\n        // is it in the user properties?\n        CorePropertiesLocator cpl = new CorePropertiesLocator(solrHomeDirectory);\n        List<CoreDescriptor> cores = cpl.discover(cc);\n        boolean found = false;\n        for (CoreDescriptor cd : cores) {\n          if (cd.getName().equals(\"core1\")) {\n            found = true;\n            assertEquals(\"Should have persisted bogusprop to disk in user properties\",\n                \"bogusval\",\n                cd.getPersistableUserProperties().getProperty(\"bogusprop\"));\n            break;\n          }\n        }\n        assertTrue(\"Should have found core descriptor for core1\", found);\n      }\n\n    } finally {\n      cc.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"f5d1cc8d16a148260af030c38f50f1873f02e11d":["aff95548e98887da066e6b1f625edf80658ea345"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["16c8b96bb5b688807272bd6bee7051c5168e1a10","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"92a4da96826f502cf1a56a096929b37ce73e523a":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"e475642767c688ede5728d7918326f70b4e0bf3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["9435d55e3ea95c5d94406d3affc36f9505b6a736"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["30c8e5574b55d57947e989443dfde611646530ee","d301cb76d81de80d07b44735622a04d49ed938eb"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"30c8e5574b55d57947e989443dfde611646530ee":["8b6a4b585aed7660a589375f6a09b90efd29c961","28288370235ed02234a64753cdbf0c6ec096304a"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"28288370235ed02234a64753cdbf0c6ec096304a":["9435d55e3ea95c5d94406d3affc36f9505b6a736","7871f9c286dce2a9370bcf517a3e7d12e3bd9602"],"e98520789adb1d5ad05afb4956eca0944a929688":["d301cb76d81de80d07b44735622a04d49ed938eb"],"16c8b96bb5b688807272bd6bee7051c5168e1a10":["f5d1cc8d16a148260af030c38f50f1873f02e11d"],"d301cb76d81de80d07b44735622a04d49ed938eb":["28288370235ed02234a64753cdbf0c6ec096304a","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["3278df77f7f499b55fdb79861c0641450444e7d0"],"aff95548e98887da066e6b1f625edf80658ea345":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"3278df77f7f499b55fdb79861c0641450444e7d0":["e475642767c688ede5728d7918326f70b4e0bf3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["92a4da96826f502cf1a56a096929b37ce73e523a"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["16c8b96bb5b688807272bd6bee7051c5168e1a10"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"9435d55e3ea95c5d94406d3affc36f9505b6a736":["7871f9c286dce2a9370bcf517a3e7d12e3bd9602","28288370235ed02234a64753cdbf0c6ec096304a"],"f5d1cc8d16a148260af030c38f50f1873f02e11d":["16c8b96bb5b688807272bd6bee7051c5168e1a10"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"92a4da96826f502cf1a56a096929b37ce73e523a":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","e332392bbbdd01cb69ad6a89051f483cda38e15e"],"e475642767c688ede5728d7918326f70b4e0bf3a":["3278df77f7f499b55fdb79861c0641450444e7d0"],"7871f9c286dce2a9370bcf517a3e7d12e3bd9602":["28288370235ed02234a64753cdbf0c6ec096304a"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"30c8e5574b55d57947e989443dfde611646530ee":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"8b6a4b585aed7660a589375f6a09b90efd29c961":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","d301cb76d81de80d07b44735622a04d49ed938eb","bd7a2b4785d366164d3cd69f9948de6ff34d23a1"],"16c8b96bb5b688807272bd6bee7051c5168e1a10":["37a0f60745e53927c4c876cfe5b5a58170f0646c","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d301cb76d81de80d07b44735622a04d49ed938eb":["936cdd5882761db3b844afd6f84ab81cbb011a75","e98520789adb1d5ad05afb4956eca0944a929688"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["9435d55e3ea95c5d94406d3affc36f9505b6a736","8b6a4b585aed7660a589375f6a09b90efd29c961"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["aff95548e98887da066e6b1f625edf80658ea345"],"aff95548e98887da066e6b1f625edf80658ea345":["f5d1cc8d16a148260af030c38f50f1873f02e11d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e475642767c688ede5728d7918326f70b4e0bf3a"],"3278df77f7f499b55fdb79861c0641450444e7d0":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","92a4da96826f502cf1a56a096929b37ce73e523a"],"bd7a2b4785d366164d3cd69f9948de6ff34d23a1":["d301cb76d81de80d07b44735622a04d49ed938eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}