{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLon, minLat);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLon, maxLat);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":["03bffb520caf6e9833c4b9a82ac67d19a1f3fc97","03bffb520caf6e9833c4b9a82ac67d19a1f3fc97"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":5,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointMultiTermQuery#GeoPointMultiTermQuery(String,TermEncoding,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointTermQuery#GeoPointTermQuery(String,double,double,double,double).mjava","sourceNew":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointMultiTermQuery(String field, final TermEncoding termEncoding, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n\n    final long minHash = GeoEncodingUtils.mortonHash(minLon, minLat);\n    final long maxHash = GeoEncodingUtils.mortonHash(maxLon, maxLat);\n    this.minLon = GeoEncodingUtils.mortonUnhashLon(minHash);\n    this.minLat = GeoEncodingUtils.mortonUnhashLat(minHash);\n    this.maxLon = GeoEncodingUtils.mortonUnhashLon(maxHash);\n    this.maxLat = GeoEncodingUtils.mortonUnhashLat(maxHash);\n\n    this.maxShift = computeMaxShift();\n    this.termEncoding = termEncoding;\n    this.cellComparator = newCellComparator();\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","sourceOld":"  /**\n   * Constructs a query matching terms that cannot be represented with a single\n   * Term.\n   */\n  public GeoPointTermQuery(String field, final double minLon, final double minLat, final double maxLon, final double maxLat) {\n    super(field);\n\n    if (GeoUtils.isValidLon(minLon) == false) {\n      throw new IllegalArgumentException(\"invalid minLon \" + minLon);\n    }\n    if (GeoUtils.isValidLon(maxLon) == false) {\n      throw new IllegalArgumentException(\"invalid maxLon \" + maxLon);\n    }\n    if (GeoUtils.isValidLat(minLat) == false) {\n      throw new IllegalArgumentException(\"invalid minLat \" + minLat);\n    }\n    if (GeoUtils.isValidLat(maxLat) == false) {\n      throw new IllegalArgumentException(\"invalid maxLat \" + maxLat);\n    }\n    this.minLon = minLon;\n    this.minLat = minLat;\n    this.maxLon = maxLon;\n    this.maxLat = maxLat;\n\n    this.rewriteMethod = GEO_CONSTANT_SCORE_REWRITE;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["937923083e4d137932336fc80f3d78758ff698a6","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62cc423073d23f01208c6cf85844dedd80011121":["937923083e4d137932336fc80f3d78758ff698a6"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["937923083e4d137932336fc80f3d78758ff698a6"],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e"],"937923083e4d137932336fc80f3d78758ff698a6":["5a207d19eac354d649c3f0e2cce070017c78125e","62cc423073d23f01208c6cf85844dedd80011121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}