{"path":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"/dev/null","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba540f2bbd05538ead776efa6ccbabd725c68b2","date":1331205650,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#compareChildHits(IndexReader,IndexReader,TopDocs,TopDocs).mjava","sourceNew":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","sourceOld":"  private void compareChildHits(IndexReader r, IndexReader joinR, TopDocs results, TopDocs joinResults) throws Exception {\n    assertEquals(results.totalHits, joinResults.totalHits);\n    assertEquals(results.scoreDocs.length, joinResults.scoreDocs.length);\n    for(int hitCount=0;hitCount<results.scoreDocs.length;hitCount++) {\n      ScoreDoc hit = results.scoreDocs[hitCount];\n      ScoreDoc joinHit = joinResults.scoreDocs[hitCount];\n      Document doc1 = r.document(hit.doc);\n      Document doc2 = joinR.document(joinHit.doc);\n      assertEquals(\"hit \" + hitCount + \" differs\",\n                   doc1.get(\"childID\"), doc2.get(\"childID\"));\n      // don't compare scores -- they are expected to differ\n\n\n      assertTrue(hit instanceof FieldDoc);\n      assertTrue(joinHit instanceof FieldDoc);\n\n      FieldDoc hit0 = (FieldDoc) hit;\n      FieldDoc joinHit0 = (FieldDoc) joinHit;\n      assertArrayEquals(hit0.fields, joinHit0.fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["6bd4a7478aca8c3880512b730b28bf3239340635","aba540f2bbd05538ead776efa6ccbabd725c68b2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba540f2bbd05538ead776efa6ccbabd725c68b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aba540f2bbd05538ead776efa6ccbabd725c68b2":["6bd4a7478aca8c3880512b730b28bf3239340635"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["38e3b736c7ca086d61b7dbb841c905ee115490da","aba540f2bbd05538ead776efa6ccbabd725c68b2"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"aba540f2bbd05538ead776efa6ccbabd725c68b2":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}