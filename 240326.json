{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","commits":[{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":1,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Properties> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Properties> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","pathOld":"/dev/null","sourceNew":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4804614e0358954d5d9f51128fcf3cd79e6e25b","date":1352831451,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]],PropertyWriter).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di,\n      List<Map<String,String>> functions, Script script,\n      Map<String,Map<String,String>> dataSources, PropertyWriter pw) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n    this.propertyWriter = pw;\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","sourceNew":null,"sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["5101aff20e65c9a285c274627ec956eb5409d253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5101aff20e65c9a285c274627ec956eb5409d253","b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5101aff20e65c9a285c274627ec956eb5409d253"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4804614e0358954d5d9f51128fcf3cd79e6e25b"],"5101aff20e65c9a285c274627ec956eb5409d253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b4804614e0358954d5d9f51128fcf3cd79e6e25b":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"5101aff20e65c9a285c274627ec956eb5409d253":["b4804614e0358954d5d9f51128fcf3cd79e6e25b","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}