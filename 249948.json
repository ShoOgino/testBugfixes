{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","commits":[{"id":"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","date":1497937593,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (isV2Api) {\n        Object err = rsp.get(\"error\");\n        if (err != null) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n        }\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (isV2Api) {\n        Object err = rsp.get(\"error\");\n        if (err != null) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n        }\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (isV2Api) {\n        Object err = rsp.get(\"error\");\n        if (err != null) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n        }\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afde616cab4149eba221511fd7ff21d460cded7c","date":1501855890,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      if (isV2Api) {\n        Object err = rsp.get(\"error\");\n        if (err != null) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n        }\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":5,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,Principal,ResponseParser,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#executeMethod(HttpRequestBase,ResponseParser,boolean).mjava","sourceNew":"  protected NamedList<Object> executeMethod(HttpRequestBase method, Principal userPrincipal, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      if (userPrincipal != null) {\n        // Normally the context contains a static userToken to enable reuse resources.\n        // However, if a personal Principal object exists, we use that instead, also as a means\n        // to transfer authentication information to Auth plugins that wish to intercept the request later\n        httpClientRequestContext.setUserToken(userPrincipal);\n      }\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","sourceOld":"  protected NamedList<Object> executeMethod(HttpRequestBase method, final ResponseParser processor, final boolean isV2Api) throws SolrServerException {\n    method.addHeader(\"User-Agent\", AGENT);\n \n    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();\n    if (soTimeout != null) {\n      requestConfigBuilder.setSocketTimeout(soTimeout);\n    }\n    if (connectionTimeout != null) {\n      requestConfigBuilder.setConnectTimeout(connectionTimeout);\n    }\n    if (followRedirects != null) {\n      requestConfigBuilder.setRedirectsEnabled(followRedirects);\n    }\n\n    method.setConfig(requestConfigBuilder.build());\n    \n    HttpEntity entity = null;\n    InputStream respBody = null;\n    boolean shouldClose = true;\n    try {\n      // Execute the method.\n      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();\n      final HttpResponse response = httpClient.execute(method, httpClientRequestContext);\n\n      int httpStatus = response.getStatusLine().getStatusCode();\n      \n      // Read the contents\n      entity = response.getEntity();\n      respBody = entity.getContent();\n      Header ctHeader = response.getLastHeader(\"content-type\");\n      String contentType;\n      if (ctHeader != null) {\n        contentType = ctHeader.getValue();\n      } else {\n        contentType = \"\";\n      }\n      \n      // handle some http level checks before trying to parse the response\n      switch (httpStatus) {\n        case HttpStatus.SC_OK:\n        case HttpStatus.SC_BAD_REQUEST:\n        case HttpStatus.SC_CONFLICT:  // 409\n          break;\n        case HttpStatus.SC_MOVED_PERMANENTLY:\n        case HttpStatus.SC_MOVED_TEMPORARILY:\n          if (!followRedirects) {\n            throw new SolrServerException(\"Server at \" + getBaseURL()\n                + \" sent back a redirect (\" + httpStatus + \").\");\n          }\n          break;\n        default:\n          if (processor == null || \"\".equals(contentType)) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"non ok status: \" + httpStatus\n                + \", message:\" + response.getStatusLine().getReasonPhrase(),\n                null);\n          }\n      }\n      if (processor == null || processor instanceof InputStreamResponseParser) {\n        \n        // no processor specified, return raw stream\n        NamedList<Object> rsp = new NamedList<>();\n        rsp.add(\"stream\", respBody);\n        rsp.add(\"closeableResponse\", response);\n        // Only case where stream should not be closed\n        shouldClose = false;\n        return rsp;\n      }\n      \n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        String procMimeType = ContentType.parse(procCt).getMimeType().trim().toLowerCase(Locale.ROOT);\n        String mimeType = ContentType.parse(contentType).getMimeType().trim().toLowerCase(Locale.ROOT);\n        if (!procMimeType.equals(mimeType)) {\n          // unexpected mime type\n          String msg = \"Expected mime type \" + procMimeType + \" but got \" + mimeType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(baseUrl, httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          throw new RemoteSolrException(baseUrl, httpStatus, msg, null);\n        }\n      }\n      \n      NamedList<Object> rsp = null;\n      String charset = EntityUtils.getContentCharSet(response.getEntity());\n      try {\n        rsp = processor.processResponse(respBody, charset);\n      } catch (Exception e) {\n        throw new RemoteSolrException(baseUrl, httpStatus, e.getMessage(), e);\n      }\n      Object error = rsp == null ? null : rsp.get(\"error\");\n      if (error != null && (isV2Api || String.valueOf(getObjectByPath(error, true, errPath)).endsWith(\"ExceptionWithErrObject\"))) {\n          throw RemoteExecutionException.create(baseUrl, rsp);\n      }\n      if (httpStatus != HttpStatus.SC_OK && !isV2Api) {\n        NamedList<String> metadata = null;\n        String reason = null;\n        try {\n          NamedList err = (NamedList) rsp.get(\"error\");\n          if (err != null) {\n            reason = (String) err.get(\"msg\");\n            if(reason == null) {\n              reason = (String) err.get(\"trace\");\n            }\n            metadata = (NamedList<String>)err.get(\"metadata\");\n          }\n        } catch (Exception ex) {}\n        if (reason == null) {\n          StringBuilder msg = new StringBuilder();\n          msg.append(response.getStatusLine().getReasonPhrase())\n            .append(\"\\n\\n\")\n            .append(\"request: \")\n            .append(method.getURI());\n          reason = java.net.URLDecoder.decode(msg.toString(), UTF_8);\n        }\n        RemoteSolrException rss = new RemoteSolrException(baseUrl, httpStatus, reason, null);\n        if (metadata != null) rss.setMetadata(metadata);\n        throw rss;\n      }\n      return rsp;\n    } catch (ConnectException e) {\n      throw new SolrServerException(\"Server refused connection at: \"\n          + getBaseURL(), e);\n    } catch (SocketTimeoutException e) {\n      throw new SolrServerException(\n          \"Timeout occured while waiting response from server at: \"\n              + getBaseURL(), e);\n    } catch (IOException e) {\n      throw new SolrServerException(\n          \"IOException occured when talking to server at: \" + getBaseURL(), e);\n    } finally {\n      if (shouldClose) {\n        Utils.consumeFully(entity);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["afde616cab4149eba221511fd7ff21d460cded7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afde616cab4149eba221511fd7ff21d460cded7c":["28288370235ed02234a64753cdbf0c6ec096304a"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"e3590d254d013266ac3849fae45974e747f7f576":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4bb519c79b76e52145e37b6681a7012525ed5f4b"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"afde616cab4149eba221511fd7ff21d460cded7c":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e3590d254d013266ac3849fae45974e747f7f576"],"28288370235ed02234a64753cdbf0c6ec096304a":["afde616cab4149eba221511fd7ff21d460cded7c"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"e3590d254d013266ac3849fae45974e747f7f576":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3590d254d013266ac3849fae45974e747f7f576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}