{"path":"src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","commits":[{"id":"52df4540d5cd0c887f5e56ef0f387d7489f5d44f","date":1243099614,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","pathOld":"src/test/org/apache/solr/search/TestSearchPerf#doListGen(int,Query,List[Query],boolean,boolean).mjava","sourceNew":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","sourceOld":"  int doListGen(int iter, Query q, List<Query> filt, boolean cacheQuery, boolean cacheFilt) throws Exception {\n    SolrQueryRequest req = lrf.makeRequest();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    long start = System.currentTimeMillis();\n\n    // These aren't public in SolrIndexSearcher\n    int NO_CHECK_QCACHE       = 0x80000000;\n    int GET_DOCSET            = 0x40000000;\n    int NO_CHECK_FILTERCACHE  = 0x20000000;\n    int GET_SCORES            = 0x01;\n\n    int ret = 0;\n    for (int i=0; i<iter; i++) {\n      DocList l = searcher.getDocList(q, filt, (Sort)null, 0, 10, (cacheQuery?0:NO_CHECK_QCACHE)|(cacheFilt?0:NO_CHECK_FILTERCACHE) );\n      ret += l.matches();\n    }\n\n    long end = System.currentTimeMillis();\n    System.out.println(\"ret=\"+ret+ \" time=\"+(end-start)+\" throughput=\"+iter*1000/(end-start+1));\n\n    req.close();\n    assertTrue(ret>0);  // make sure we did some work\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"52df4540d5cd0c887f5e56ef0f387d7489f5d44f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["52df4540d5cd0c887f5e56ef0f387d7489f5d44f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"52df4540d5cd0c887f5e56ef0f387d7489f5d44f":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["52df4540d5cd0c887f5e56ef0f387d7489f5d44f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}