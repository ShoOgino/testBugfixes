{"path":"solr/solrj/src/test/org/apache/solr/common/params/ModifiableSolrParamsTest#testOf().mjava","commits":[{"id":"4f1419e485bb88470060faffcb9306d9be64421e","date":1490248665,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/ModifiableSolrParamsTest#testOf().mjava","pathOld":"/dev/null","sourceNew":"  public void testOf() throws Exception\n  {\n    String key = \"key\";\n    String value = \"value\";\n\n    // input is not of type ModifiableSolrParams\n    Map<String, String> values = new HashMap<>();\n    values.put(key, value);\n    SolrParams mapParams = new MapSolrParams(values);\n    ModifiableSolrParams result = ModifiableSolrParams.of(mapParams);\n    assertNotSame(mapParams, result);\n    assertEquals(value, result.get(key));\n\n    // input is of type ModifiableSolrParams\n    modifiable.add(key, value);\n    result = ModifiableSolrParams.of(modifiable);\n    assertSame(result, modifiable);\n\n    // input is null\n    result = ModifiableSolrParams.of(null);\n    assertNotNull(result);\n    assertEquals(0, result.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1028c212ed2a92ad62a30b5997a097097e856005","date":1490280013,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/params/ModifiableSolrParamsTest#testOf().mjava","pathOld":"/dev/null","sourceNew":"  public void testOf() throws Exception\n  {\n    String key = \"key\";\n    String value = \"value\";\n\n    // input is not of type ModifiableSolrParams\n    Map<String, String> values = new HashMap<>();\n    values.put(key, value);\n    SolrParams mapParams = new MapSolrParams(values);\n    ModifiableSolrParams result = ModifiableSolrParams.of(mapParams);\n    assertNotSame(mapParams, result);\n    assertEquals(value, result.get(key));\n\n    // input is of type ModifiableSolrParams\n    modifiable.add(key, value);\n    result = ModifiableSolrParams.of(modifiable);\n    assertSame(result, modifiable);\n\n    // input is null\n    result = ModifiableSolrParams.of(null);\n    assertNotNull(result);\n    assertEquals(0, result.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1028c212ed2a92ad62a30b5997a097097e856005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f1419e485bb88470060faffcb9306d9be64421e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f1419e485bb88470060faffcb9306d9be64421e"]},"commit2Childs":{"1028c212ed2a92ad62a30b5997a097097e856005":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1028c212ed2a92ad62a30b5997a097097e856005","4f1419e485bb88470060faffcb9306d9be64421e"],"4f1419e485bb88470060faffcb9306d9be64421e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1028c212ed2a92ad62a30b5997a097097e856005","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}