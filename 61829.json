{"path":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","commits":[{"id":"30f70d129bbedda8b627b5ab0a20303ebb3bab66","date":1347551186,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","pathOld":"/dev/null","sourceNew":"  /** make sure we downgrade positions and payloads correctly */\n  public void testMixing() throws Exception {\n    // no positions\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      if (i < 19 && random().nextBoolean()) {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new TextField(\"foo\", \"i have positions\", Field.Store.NO));\n        }\n      } else {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new Field(\"foo\", \"i have no positions\", ft));\n        }\n      }\n      iw.addDocument(doc);\n      iw.commit();\n    }\n    \n    if (random().nextBoolean()) {\n      iw.forceMerge(1);\n    }\n    \n    DirectoryReader ir = iw.getReader();\n    FieldInfos fis = MultiFields.getMergedFieldInfos(ir);\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo(\"foo\").getIndexOptions());\n    assertFalse(fis.fieldInfo(\"foo\").hasPayloads());\n    iw.close();\n    ir.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","sourceNew":"  /** make sure we downgrade positions and payloads correctly */\n  public void testMixing() throws Exception {\n    // no positions\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      if (i < 19 && random().nextBoolean()) {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new TextField(\"foo\", \"i have positions\", Field.Store.NO));\n        }\n      } else {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new Field(\"foo\", \"i have no positions\", ft));\n        }\n      }\n      iw.addDocument(doc);\n      iw.commit();\n    }\n    \n    if (random().nextBoolean()) {\n      iw.forceMerge(1);\n    }\n    \n    DirectoryReader ir = iw.getReader();\n    FieldInfos fis = MultiFields.getMergedFieldInfos(ir);\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo(\"foo\").getIndexOptions());\n    assertFalse(fis.fieldInfo(\"foo\").hasPayloads());\n    iw.shutdown();\n    ir.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** make sure we downgrade positions and payloads correctly */\n  public void testMixing() throws Exception {\n    // no positions\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      if (i < 19 && random().nextBoolean()) {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new TextField(\"foo\", \"i have positions\", Field.Store.NO));\n        }\n      } else {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new Field(\"foo\", \"i have no positions\", ft));\n        }\n      }\n      iw.addDocument(doc);\n      iw.commit();\n    }\n    \n    if (random().nextBoolean()) {\n      iw.forceMerge(1);\n    }\n    \n    DirectoryReader ir = iw.getReader();\n    FieldInfos fis = MultiFields.getMergedFieldInfos(ir);\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo(\"foo\").getIndexOptions());\n    assertFalse(fis.fieldInfo(\"foo\").hasPayloads());\n    iw.close();\n    ir.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","sourceNew":"  /** make sure we downgrade positions and payloads correctly */\n  public void testMixing() throws Exception {\n    // no positions\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      if (i < 19 && random().nextBoolean()) {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new TextField(\"foo\", \"i have positions\", Field.Store.NO));\n        }\n      } else {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new Field(\"foo\", \"i have no positions\", ft));\n        }\n      }\n      iw.addDocument(doc);\n      iw.commit();\n    }\n    \n    if (random().nextBoolean()) {\n      iw.forceMerge(1);\n    }\n    \n    DirectoryReader ir = iw.getReader();\n    FieldInfos fis = MultiFields.getMergedFieldInfos(ir);\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo(\"foo\").getIndexOptions());\n    assertFalse(fis.fieldInfo(\"foo\").hasPayloads());\n    iw.close();\n    ir.close();\n    dir.close(); // checkindex\n  }\n\n","sourceOld":"  /** make sure we downgrade positions and payloads correctly */\n  public void testMixing() throws Exception {\n    // no positions\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      if (i < 19 && random().nextBoolean()) {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new TextField(\"foo\", \"i have positions\", Field.Store.NO));\n        }\n      } else {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new Field(\"foo\", \"i have no positions\", ft));\n        }\n      }\n      iw.addDocument(doc);\n      iw.commit();\n    }\n    \n    if (random().nextBoolean()) {\n      iw.forceMerge(1);\n    }\n    \n    DirectoryReader ir = iw.getReader();\n    FieldInfos fis = MultiFields.getMergedFieldInfos(ir);\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo(\"foo\").getIndexOptions());\n    assertFalse(fis.fieldInfo(\"foo\").hasPayloads());\n    iw.shutdown();\n    ir.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitPositions#testMixing().mjava","sourceNew":null,"sourceOld":"  /** make sure we downgrade positions and payloads correctly */\n  public void testMixing() throws Exception {\n    // no positions\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      if (i < 19 && random().nextBoolean()) {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new TextField(\"foo\", \"i have positions\", Field.Store.NO));\n        }\n      } else {\n        for (int j = 0; j < 50; j++) {\n          doc.add(new Field(\"foo\", \"i have no positions\", ft));\n        }\n      }\n      iw.addDocument(doc);\n      iw.commit();\n    }\n    \n    if (random().nextBoolean()) {\n      iw.forceMerge(1);\n    }\n    \n    DirectoryReader ir = iw.getReader();\n    FieldInfos fis = MultiFields.getMergedFieldInfos(ir);\n    assertEquals(IndexOptions.DOCS_AND_FREQS, fis.fieldInfo(\"foo\").getIndexOptions());\n    assertFalse(fis.fieldInfo(\"foo\").hasPayloads());\n    iw.close();\n    ir.close();\n    dir.close(); // checkindex\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c905a42bedc7c7d1acb37b177498306b7e866":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"30f70d129bbedda8b627b5ab0a20303ebb3bab66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["30f70d129bbedda8b627b5ab0a20303ebb3bab66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["165c905a42bedc7c7d1acb37b177498306b7e866"]},"commit2Childs":{"165c905a42bedc7c7d1acb37b177498306b7e866":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30f70d129bbedda8b627b5ab0a20303ebb3bab66":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30f70d129bbedda8b627b5ab0a20303ebb3bab66"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["165c905a42bedc7c7d1acb37b177498306b7e866"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}