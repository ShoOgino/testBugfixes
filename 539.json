{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'not-existing-field:\"+FIELD_VALUE_FEATURE_DEFAULT_VAL+\"'}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'not-existing-field:\"+FIELD_VALUE_FEATURE_DEFAULT_VAL+\"'}\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fa1f8f009c5147b03311c7e6e6469fa7b677186","date":1482164570,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","sourceNew":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'\"+FeatureLoggerTestUtils.toFeatureVector(\"not-existing-field\",Float.toString(FIELD_VALUE_FEATURE_DEFAULT_VAL))+\"'}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'not-existing-field:\"+FIELD_VALUE_FEATURE_DEFAULT_VAL+\"'}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","sourceNew":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'\"+FeatureLoggerTestUtils.toFeatureVector(\"not-existing-field\",Float.toString(FIELD_VALUE_FEATURE_DEFAULT_VAL))+\"'}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'not-existing-field:\"+FIELD_VALUE_FEATURE_DEFAULT_VAL+\"'}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","sourceNew":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'\"+FeatureLoggerTestUtils.toFeatureVector(\"not-existing-field\",Float.toString(FIELD_VALUE_FEATURE_DEFAULT_VAL))+\"'}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'\"+FeatureLoggerTestUtils.toFeatureVector(\"not-existing-field\",Float.toString(FIELD_VALUE_FEATURE_DEFAULT_VAL))+\"'}\");\n\n  }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/feature/TestFieldValueFeature#testThatIfaFieldDoesNotExistDefaultValueIsReturned().mjava","sourceNew":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'\"+FeatureLoggerTestUtils.toFeatureVector(\"not-existing-field\",Float.toString(FIELD_VALUE_FEATURE_DEFAULT_VAL))+\"'}\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testThatIfaFieldDoesNotExistDefaultValueIsReturned() throws Exception {\n    // using a different fstore to avoid a clash with the other tests\n    final String fstore = \"testThatIfaFieldDoesNotExistDefaultValueIsReturned\";\n    loadFeature(\"not-existing-field\", FieldValueFeature.class.getCanonicalName(), fstore,\n            \"{\\\"field\\\":\\\"cowabunga\\\"}\");\n\n    loadModel(\"not-existing-field-model\", LinearModel.class.getCanonicalName(),\n            new String[] {\"not-existing-field\"}, fstore, \"{\\\"weights\\\":{\\\"not-existing-field\\\":1.0}}\");\n\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"id:42\");\n    query.add(\"rq\", \"{!ltr model=not-existing-field-model reRankDocs=4}\");\n    query.add(\"fl\", \"[fv]\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/numFound/==1\");\n    assertJQ(\"/query\" + query.toQueryString(),\n            \"/response/docs/[0]/=={'[fv]':'\"+FeatureLoggerTestUtils.toFeatureVector(\"not-existing-field\",Float.toString(FIELD_VALUE_FEATURE_DEFAULT_VAL))+\"'}\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9720b151fde2073f4e401450f4574e5f31c2d0ff","8fa1f8f009c5147b03311c7e6e6469fa7b677186"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"8fa1f8f009c5147b03311c7e6e6469fa7b677186":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","3f906c3206e7eb174774f938416460e39170d819"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["8fa1f8f009c5147b03311c7e6e6469fa7b677186","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}