{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","commits":[{"id":"d2ed1b9b7b46829fe3199afe9a8bc203f201b175","date":1301491807,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      threadState.resetWriter(new DocumentsWriterPerThread(dwpt, infos));\n    } else {\n      threadState.resetWriter(null);\n    }\n    clearThreadBindings(threadState); // TODO - do we need to clear ThreadBindings here  since we swap DWPT this is not necessary\n    return dwpt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a14804b9a6af0e91d3c979f2a531bd324c421157","date":1301661727,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      threadState.resetWriter(new DocumentsWriterPerThread(dwpt, infos));\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      threadState.resetWriter(new DocumentsWriterPerThread(dwpt, infos));\n    } else {\n      threadState.resetWriter(null);\n    }\n    clearThreadBindings(threadState); // TODO - do we need to clear ThreadBindings here  since we swap DWPT this is not necessary\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      threadState.resetWriter(new DocumentsWriterPerThread(dwpt, infos));\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap);\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = globalFieldMap.newFieldInfos(SegmentCodecsBuilder.create(codecProvider));\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterPerThreadPool#replaceForFlush(ThreadState,boolean).mjava","sourceNew":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap);\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","sourceOld":"  protected DocumentsWriterPerThread replaceForFlush(ThreadState threadState, boolean closed) {\n    assert threadState.isHeldByCurrentThread();\n    final DocumentsWriterPerThread dwpt = threadState.perThread;\n    if (!closed) {\n      final FieldInfos infos = new FieldInfos(globalFieldMap);\n      final DocumentsWriterPerThread newDwpt = new DocumentsWriterPerThread(dwpt, infos);\n      newDwpt.initialize();\n      threadState.resetWriter(newDwpt);\n    } else {\n      threadState.resetWriter(null);\n    }\n    return dwpt;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a14804b9a6af0e91d3c979f2a531bd324c421157"],"a14804b9a6af0e91d3c979f2a531bd324c421157":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d2ed1b9b7b46829fe3199afe9a8bc203f201b175":["a14804b9a6af0e91d3c979f2a531bd324c421157"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2ed1b9b7b46829fe3199afe9a8bc203f201b175","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a14804b9a6af0e91d3c979f2a531bd324c421157":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}