{"path":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testFloatRange(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /** we fake a float test using int2float conversion of NumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq=NumericRangeQuery.newFloatRange(field, precisionStep,\n      NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newFloatRange(field, precisionStep,\n      NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testFloatRange(int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testFloatRange(int).mjava","sourceNew":"  /** we fake a float test using int2float conversion of NumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq=NumericRangeQuery.newFloatRange(field, precisionStep,\n      NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newFloatRange(field, precisionStep,\n      NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","sourceOld":"  /** we fake a float test using int2float conversion of NumericUtils */\n  private void testFloatRange(int precisionStep) throws Exception {\n    final String field=\"ascfield\"+precisionStep;\n    final int lower=-1000, upper=+2000;\n    \n    Query tq=NumericRangeQuery.newFloatRange(field, precisionStep,\n      NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    TopDocs tTopDocs = searcher.search(tq, 1);\n    assertEquals(\"Returned count of range query must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n    \n    Filter tf=NumericRangeFilter.newFloatRange(field, precisionStep,\n      NumericUtils.sortableIntToFloat(lower), NumericUtils.sortableIntToFloat(upper), true, true);\n    tTopDocs = searcher.search(new MatchAllDocsQuery(), tf, 1);\n    assertEquals(\"Returned count of range filter must be equal to inclusive range length\", upper-lower+1, tTopDocs.totalHits );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}