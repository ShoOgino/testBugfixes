{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"/dev/null","sourceNew":"  // extract properties to array, e.g. for \"true.true.false\" return booleab[]{true,false,false}. \r\n  private boolean[] propToBooleanArray (String s) {\r\n    if (s.indexOf(\":\")<0) {\r\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\r\n    }\r\n    \r\n    ArrayList a = new ArrayList();\r\n    StringTokenizer st = new StringTokenizer(s,\":\");\r\n    while (st.hasMoreTokens()) {\r\n      String t = st.nextToken();\r\n      a.add(new Boolean(t));\r\n    }\r\n    boolean res[] = new boolean[a.size()]; \r\n    for (int i=0; i<a.size(); i++) {\r\n      res[i] = ((Boolean) a.get(i)).booleanValue();\r\n    }\r\n    return res;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true.true.false\" return booleab[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Boolean) a.get(i)).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true.true.false\" return booleab[]{true,false,false}. \r\n  private boolean[] propToBooleanArray (String s) {\r\n    if (s.indexOf(\":\")<0) {\r\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\r\n    }\r\n    \r\n    ArrayList a = new ArrayList();\r\n    StringTokenizer st = new StringTokenizer(s,\":\");\r\n    while (st.hasMoreTokens()) {\r\n      String t = st.nextToken();\r\n      a.add(new Boolean(t));\r\n    }\r\n    boolean res[] = new boolean[a.size()]; \r\n    for (int i=0; i<a.size(); i++) {\r\n      res[i] = ((Boolean) a.get(i)).booleanValue();\r\n    }\r\n    return res;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Boolean) a.get(i)).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true.true.false\" return booleab[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Boolean) a.get(i)).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList<Boolean> a = new ArrayList<Boolean>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList a = new ArrayList();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = ((Boolean) a.get(i)).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList<Boolean> a = new ArrayList<Boolean>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray (String s) {\n    if (s.indexOf(\":\")<0) {\n      return new boolean [] { Boolean.valueOf(s).booleanValue() };\n    }\n    \n    ArrayList<Boolean> a = new ArrayList<Boolean>();\n    StringTokenizer st = new StringTokenizer(s,\":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()]; \n    for (int i=0; i<a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}