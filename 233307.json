{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newField(\"content\", contents, TextField.TYPE_UNSTORED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.shutdown();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // make sure an aborting exception closes the writer:\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    writer.addDocument(doc);\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n      // only one flush should fail:\n      assertFalse(hitError);\n      hitError = true;\n      assertTrue(writer.deleter.isClosed());\n      assertTrue(writer.isClosed());\n    }\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = DirectoryReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // make sure an aborting exception closes the writer:\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    writer.addDocument(doc);\n\n    expectThrows(IOException.class, () -> {\n      writer.addDocument(doc);\n    });\n\n    // only one flush should fail:\n    assertFalse(hitError);\n    hitError = true;\n    assertTrue(writer.deleter.isClosed());\n    assertTrue(writer.isClosed());\n    assertFalse(DirectoryReader.indexExists(dir));\n\n    dir.close();\n  }\n\n","sourceOld":"  // make sure an aborting exception closes the writer:\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    writer.addDocument(doc);\n    try {\n      writer.addDocument(doc);\n      fail(\"did not hit exception\");\n    } catch (IOException ioe) {\n      // only one flush should fail:\n      assertFalse(hitError);\n      hitError = true;\n      assertTrue(writer.deleter.isClosed());\n      assertTrue(writer.isClosed());\n    }\n    assertFalse(DirectoryReader.indexExists(dir));\n    dir.close();\n  }\n\n","bugFix":["9299079153fd7895bf3cf6835cf7019af2ba89b3","8560794cda5bcd510c60e38ed553e9c5a6204983"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testDocumentsWriterAbort().mjava","sourceNew":"  // make sure an aborting exception closes the writer:\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    writer.addDocument(doc);\n\n    expectThrows(IOException.class, () -> {\n      writer.addDocument(doc);\n    });\n\n    // only one flush should fail:\n    assertFalse(hitError);\n    hitError = true;\n    assertTrue(writer.isDeleterClosed());\n    assertTrue(writer.isClosed());\n    assertFalse(DirectoryReader.indexExists(dir));\n\n    dir.close();\n  }\n\n","sourceOld":"  // make sure an aborting exception closes the writer:\n  public void testDocumentsWriterAbort() throws IOException {\n    MockDirectoryWrapper dir = newMockDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                .setMaxBufferedDocs(2));\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(newTextField(\"content\", contents, Field.Store.NO));\n    boolean hitError = false;\n    writer.addDocument(doc);\n\n    expectThrows(IOException.class, () -> {\n      writer.addDocument(doc);\n    });\n\n    // only one flush should fail:\n    assertFalse(hitError);\n    hitError = true;\n    assertTrue(writer.deleter.isClosed());\n    assertTrue(writer.isClosed());\n    assertFalse(DirectoryReader.indexExists(dir));\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05fe562aa248790944d43cdd478f512572835ba0":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"aba371508186796cc6151d8223a5b4e16d02e26e":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["05fe562aa248790944d43cdd478f512572835ba0"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["04f07771a2a7dd3a395700665ed839c3dae2def2","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"05fe562aa248790944d43cdd478f512572835ba0":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["05fe562aa248790944d43cdd478f512572835ba0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}