{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  public CategoryPath getPath(int ordinal) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","sourceOld":"  public CategoryPath getPath(int ordinal) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","sourceOld":"  public CategoryPath getPath(int ordinal) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","sourceOld":"  public CategoryPath getPath(int ordinal) throws CorruptIndexException, IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e3613d9274c0d98ca67d976e415c82e9f9cf46","date":1352285414,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","sourceOld":"  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1","date":1353511594,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return null;\n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return null;\n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label==null) {\n      return null;  \n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      CategoryPath res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(ordinal, loader);\n    CategoryPath ret = new CategoryPath(loader.getFullPath(), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return null;\n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      CategoryPath res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(ordinal, loader);\n    CategoryPath ret = new CategoryPath(loader.getFullPath(), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    // TODO (Facet): Currently, the LRU cache we use (getCategoryCache) holds\n    // strings with delimiters, not CategoryPath objects, so even if\n    // we have a cache hit, we need to process the string and build a new\n    // CategoryPath object every time. What is preventing us from putting\n    // the actual CategoryPath object in the cache is the fact that these\n    // objects are mutable. So we should create an immutable (read-only)\n    // interface that CategoryPath implements, and this method should\n    // return this interface, not the writable CategoryPath.\n    String label = getLabel(ordinal);\n    if (label == null) {\n      return null;\n    }\n    return new CategoryPath(label, delimiter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12684b6419c4f658dfacf43c20e8dc560b346de8","date":1360490843,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      CategoryPath res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    CategoryPath ret = new CategoryPath(doc.get(Consts.FULL), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      CategoryPath res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    final LoadFullPathOnly loader = new LoadFullPathOnly();\n    indexReader.document(ordinal, loader);\n    CategoryPath ret = new CategoryPath(loader.getFullPath(), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public FacetLabel getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      FacetLabel res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    FacetLabel ret = new FacetLabel(doc.get(Consts.FULL), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      CategoryPath res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    CategoryPath ret = new CategoryPath(doc.get(Consts.FULL), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe9946d3cd818d329255e4c325597ac3480503e","date":1385580921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public FacetLabel getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      FacetLabel res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public FacetLabel getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      FacetLabel res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    FacetLabel ret = new FacetLabel(doc.get(Consts.FULL), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public FacetLabel getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      FacetLabel res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public CategoryPath getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      CategoryPath res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    CategoryPath ret = new CategoryPath(doc.get(Consts.FULL), delimiter);\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getPath(int).mjava","sourceNew":"  @Override\n  public FacetLabel getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      FacetLabel res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    Document doc = indexReader.document(ordinal);\n    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","sourceOld":"  @Override\n  public FacetLabel getPath(int ordinal) throws IOException {\n    ensureOpen();\n    \n    // Since the cache is shared with DTR instances allocated from\n    // doOpenIfChanged, we need to ensure that the ordinal is one that this DTR\n    // instance recognizes. Therefore we do this check up front, before we hit\n    // the cache.\n    if (ordinal < 0 || ordinal >= indexReader.maxDoc()) {\n      return null;\n    }\n    \n    // TODO: can we use an int-based hash impl, such as IntToObjectMap,\n    // wrapped as LRU?\n    Integer catIDInteger = Integer.valueOf(ordinal);\n    synchronized (categoryCache) {\n      FacetLabel res = categoryCache.get(catIDInteger);\n      if (res != null) {\n        return res;\n      }\n    }\n    \n    StoredDocument doc = indexReader.document(ordinal);\n    FacetLabel ret = new FacetLabel(FacetsConfig.stringToPath(doc.get(Consts.FULL)));\n    synchronized (categoryCache) {\n      categoryCache.put(catIDInteger, ret);\n    }\n    \n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"407687e67faf6e1f02a211ca078d8e3eed631027":["78e3613d9274c0d98ca67d976e415c82e9f9cf46","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"12684b6419c4f658dfacf43c20e8dc560b346de8":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["12684b6419c4f658dfacf43c20e8dc560b346de8"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["12684b6419c4f658dfacf43c20e8dc560b346de8","bbe9946d3cd818d329255e4c325597ac3480503e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"bbe9946d3cd818d329255e4c325597ac3480503e":["c190847801a50f4dd20fd639bdc29b54ea3b288b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"219dcddcdf2fc13f6271d9e5836bd19c53a4abf1":["407687e67faf6e1f02a211ca078d8e3eed631027","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"12684b6419c4f658dfacf43c20e8dc560b346de8":["c190847801a50f4dd20fd639bdc29b54ea3b288b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["bbe9946d3cd818d329255e4c325597ac3480503e"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","12684b6419c4f658dfacf43c20e8dc560b346de8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"78e3613d9274c0d98ca67d976e415c82e9f9cf46":["407687e67faf6e1f02a211ca078d8e3eed631027","219dcddcdf2fc13f6271d9e5836bd19c53a4abf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","78e3613d9274c0d98ca67d976e415c82e9f9cf46"],"bbe9946d3cd818d329255e4c325597ac3480503e":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}