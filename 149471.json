{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#SignificantTermsStream(StreamExpression,StreamFactory).mjava","commits":[{"id":"f67c3a1123a063e580a2e6ec51b9eb7c273666ce","date":1487877483,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#SignificantTermsStream(StreamExpression,StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  public SignificantTermsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for SignificantTermsStream\");\n    }\n\n    String numTermsParam = params.get(\"limit\");\n    int numTerms = 20;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"limit\");\n    }\n\n    String minTermLengthParam = params.get(\"minTermLength\");\n    int minTermLength = 4;\n    if(minTermLengthParam != null) {\n      minTermLength = Integer.parseInt(minTermLengthParam);\n      params.remove(\"minTermLength\");\n    }\n\n\n    String minDocFreqParam = params.get(\"minDocFreq\");\n    float minDocFreq = 5.0F;\n    if(minDocFreqParam != null) {\n      minDocFreq = Float.parseFloat(minDocFreqParam);\n      params.remove(\"minDocFreq\");\n    }\n\n    String maxDocFreqParam = params.get(\"maxDocFreq\");\n    float maxDocFreq = .3F;\n    if(maxDocFreqParam != null) {\n      maxDocFreq = Float.parseFloat(maxDocFreqParam);\n      params.remove(\"maxDocFreq\");\n    }\n\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, params, fieldParam, minDocFreq, maxDocFreq, minTermLength, numTerms);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e5922fb6b9f0e49b31ce0436420a7f4392031c4","date":1489025486,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#SignificantTermsStream(StreamExpression,StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SignificantTermsStream#SignificantTermsStream(StreamExpression,StreamFactory).mjava","sourceNew":"  public SignificantTermsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for SignificantTermsStream\");\n    }\n\n    String numTermsParam = params.get(\"limit\");\n    int numTerms = 20;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"limit\");\n    }\n\n    String minTermLengthParam = params.get(\"minTermLength\");\n    int minTermLength = 4;\n    if(minTermLengthParam != null) {\n      minTermLength = Integer.parseInt(minTermLengthParam);\n      params.remove(\"minTermLength\");\n    }\n\n\n    String minDocFreqParam = params.get(\"minDocFreq\");\n    float minDocFreq = 5.0F;\n    if(minDocFreqParam != null) {\n      minDocFreq = Float.parseFloat(minDocFreqParam);\n      params.remove(\"minDocFreq\");\n    }\n\n    String maxDocFreqParam = params.get(\"maxDocFreq\");\n    float maxDocFreq = .3F;\n    if(maxDocFreqParam != null) {\n      maxDocFreq = Float.parseFloat(maxDocFreqParam);\n      params.remove(\"maxDocFreq\");\n    }\n\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue) {\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    if(zkHost == null){\n      zkHost = factory.getDefaultZkHost();\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, params, fieldParam, minDocFreq, maxDocFreq, minTermLength, numTerms);\n  }\n\n","sourceOld":"  public SignificantTermsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    // grab all parameters out\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    // Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice\n    if(expression.getParameters().size() != 1 + namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    // Collection Name\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    // Named parameters - passed directly to solr as solrparams\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    Map<String,String> params = new HashMap<String,String>();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")) {\n        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    String fieldParam = params.get(\"field\");\n    if(fieldParam != null) {\n      params.remove(\"field\");\n    } else {\n      throw new IOException(\"field param cannot be null for SignificantTermsStream\");\n    }\n\n    String numTermsParam = params.get(\"limit\");\n    int numTerms = 20;\n    if(numTermsParam != null) {\n      numTerms = Integer.parseInt(numTermsParam);\n      params.remove(\"limit\");\n    }\n\n    String minTermLengthParam = params.get(\"minTermLength\");\n    int minTermLength = 4;\n    if(minTermLengthParam != null) {\n      minTermLength = Integer.parseInt(minTermLengthParam);\n      params.remove(\"minTermLength\");\n    }\n\n\n    String minDocFreqParam = params.get(\"minDocFreq\");\n    float minDocFreq = 5.0F;\n    if(minDocFreqParam != null) {\n      minDocFreq = Float.parseFloat(minDocFreqParam);\n      params.remove(\"minDocFreq\");\n    }\n\n    String maxDocFreqParam = params.get(\"maxDocFreq\");\n    float maxDocFreq = .3F;\n    if(maxDocFreqParam != null) {\n      maxDocFreq = Float.parseFloat(maxDocFreqParam);\n      params.remove(\"maxDocFreq\");\n    }\n\n\n    // zkHost, optional - if not provided then will look into factory list to get\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    // We've got all the required items\n    init(collectionName, zkHost, params, fieldParam, minDocFreq, maxDocFreq, minTermLength, numTerms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"]},"commit2Childs":{"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f67c3a1123a063e580a2e6ec51b9eb7c273666ce"],"f67c3a1123a063e580a2e6ec51b9eb7c273666ce":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}