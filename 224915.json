{"path":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = Rectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = ShapeTestUtil.nextFloat(random);\n      float ay = ShapeTestUtil.nextFloat(random);\n      float bx = ShapeTestUtil.nextFloat(random);\n      float by = ShapeTestUtil.nextFloat(random);\n      float cx = ShapeTestUtil.nextFloat(random);\n      float cy = ShapeTestUtil.nextFloat(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Rectangle rectangle = GeoTestUtil.nextBox();\n    while(rectangle.crossesDateline()) {\n      rectangle = GeoTestUtil.nextBox();\n    }\n    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);\n\n    for (int i =0; i < 100; i++) {\n      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());\n      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());\n\n      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n      byte[] triangle = new byte[4 * BYTES];\n      NumericUtils.intToSortableBytes(tMinY, triangle, 0);\n      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);\n      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);\n      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);\n\n      PointValues.Relation r;\n      if (random().nextBoolean()) {\n        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      } else {\n        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);\n      }\n\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      } else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true) !=  Component2D.WithinRelation.CANDIDATE);\n      } else if (rectangle2D.withinTriangle(ax, ay, true, bx, by , true, cx, cy, true) ==  Component2D.WithinRelation.CANDIDATE) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c568a1e2a5125c2245150eebb030a81baa158b31","date":1587403489,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/geo/TestRectangle2D#testRandomTriangles().mjava","sourceNew":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = Rectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = ShapeTestUtil.nextFloat(random);\n      float ay = ShapeTestUtil.nextFloat(random);\n      float bx = ShapeTestUtil.nextFloat(random);\n      float by = ShapeTestUtil.nextFloat(random);\n      float cx = ShapeTestUtil.nextFloat(random);\n      float cy = ShapeTestUtil.nextFloat(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by, cx, cy));\n        assertFalse(rectangle2D.intersectsLine(ax, ay, bx, by));\n        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertFalse(rectangle2D.containsLine(ax, ay, bx, by));\n        assertEquals(Component2D.WithinRelation.DISJOINT, rectangle2D.withinTriangle(ax, ay, true, bx, by, true, cx, cy, true));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by, cx, cy));\n        assertTrue(rectangle2D.intersectsLine(ax, ay, bx, by));\n        assertTrue(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));\n        assertTrue(rectangle2D.containsLine(ax, ay, bx, by));\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandomTriangles() {\n    Random random = random();\n    XYRectangle rectangle = ShapeTestUtil.nextBox(random);\n    Component2D rectangle2D = Rectangle2D.create(rectangle);\n    for (int i =0; i < 100; i++) {\n      float ax = ShapeTestUtil.nextFloat(random);\n      float ay = ShapeTestUtil.nextFloat(random);\n      float bx = ShapeTestUtil.nextFloat(random);\n      float by = ShapeTestUtil.nextFloat(random);\n      float cx = ShapeTestUtil.nextFloat(random);\n      float cy = ShapeTestUtil.nextFloat(random);\n\n      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n\n\n      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);\n      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {\n        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"c568a1e2a5125c2245150eebb030a81baa158b31":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c568a1e2a5125c2245150eebb030a81baa158b31"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["c568a1e2a5125c2245150eebb030a81baa158b31"],"c568a1e2a5125c2245150eebb030a81baa158b31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}