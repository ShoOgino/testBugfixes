{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#createAndSetNewDefaultCollection().mjava","commits":[{"id":"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b","date":1576537086,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#createAndSetNewDefaultCollection().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new 2x2 collection using a unique name, blocking until it's state is fully active, \n   * and sets that collection as the default on the cluster's default CloudSolrClient.\n   * \n   * @return the name of the new collection\n   */\n  public static String createAndSetNewDefaultCollection() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    final String name = \"test_collection_\" + NAME_COUNTER.getAndIncrement();\n    assertEquals(RequestStatusState.COMPLETED,\n                 CollectionAdminRequest.createCollection(name, \"_default\", 2, 2)\n                 .processAndWait(cloudClient, DEFAULT_TIMEOUT));\n    cloudClient.waitForState(name, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n                             (n, c) -> DocCollection.isFullyActive(n, c, 2, 2));\n    cloudClient.setDefaultCollection(name);\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b945b8f5bba0303382bc69d60c0c287714f23328","date":1576586294,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudDistribCmdsTest#createAndSetNewDefaultCollection().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new 2x2 collection using a unique name, blocking until it's state is fully active, \n   * and sets that collection as the default on the cluster's default CloudSolrClient.\n   * \n   * @return the name of the new collection\n   */\n  public static String createAndSetNewDefaultCollection() throws Exception {\n    final CloudSolrClient cloudClient = cluster.getSolrClient();\n    final String name = \"test_collection_\" + NAME_COUNTER.getAndIncrement();\n    assertEquals(RequestStatusState.COMPLETED,\n                 CollectionAdminRequest.createCollection(name, \"_default\", 2, 2)\n                 .processAndWait(cloudClient, DEFAULT_TIMEOUT));\n    cloudClient.waitForState(name, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n                             (n, c) -> DocCollection.isFullyActive(n, c, 2, 2));\n    cloudClient.setDefaultCollection(name);\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b945b8f5bba0303382bc69d60c0c287714f23328":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b945b8f5bba0303382bc69d60c0c287714f23328","0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b"],"b945b8f5bba0303382bc69d60c0c287714f23328":[],"0a29b6e8b148762c68adf55b9d2c2aa5ae411a5b":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b945b8f5bba0303382bc69d60c0c287714f23328","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}