{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","commits":[{"id":"579fab47a447cb68f742b3ea201e3398f84daaef","date":1489485666,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","date":1489651910,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl)\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build()) {\n      log.debug(\"create url={}\", createUrl);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","sourceNew":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl)\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build()) {\n      log.debug(\"create url={}\", createUrl);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl).build()) {\n      log.debug(\"create url={}\", createUrl);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl)\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build()) {\n      log.debug(\"create url={}\", createUrl);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl)\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build()) {\n      log.debug(\"create url={}\", createUrl);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#createSolrCore(String,String,String,String,String,String,String).mjava","sourceNew":null,"sourceOld":"  private boolean createSolrCore(final String collection,\n      final String createUrl, final String dataDir, final String ulogDir,\n      final String coreNodeName, final String coreName, final String shardId) {\n\n    try (HttpSolrClient client = new HttpSolrClient.Builder(createUrl)\n        .withConnectionTimeout(30000)\n        .withSocketTimeout(60000)\n        .build()) {\n      log.debug(\"create url={}\", createUrl);\n      Create createCmd = new Create();\n      createCmd.setCollection(collection);\n      createCmd.setCoreNodeName(coreNodeName);\n      // TODO: how do we ensure unique coreName\n      // for now, the collections API will use unique names\n      createCmd.setShardId(shardId);\n      createCmd.setCoreName(coreName);\n      createCmd.setDataDir(dataDir);\n      createCmd.setUlogDir(ulogDir.substring(0, ulogDir.length() - \"/tlog\".length()));\n      client.request(createCmd);\n    } catch (Exception e) {\n      SolrException.log(log, \"Exception trying to create new replica on \" + createUrl, e);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43d1e498704edd2bba13548a189eed4dfccff11b":["579fab47a447cb68f742b3ea201e3398f84daaef"],"579fab47a447cb68f742b3ea201e3398f84daaef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["43d1e498704edd2bba13548a189eed4dfccff11b","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["ab68488225b6a6c357dda72ed11dedca9914a192","43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["43d1e498704edd2bba13548a189eed4dfccff11b","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"43d1e498704edd2bba13548a189eed4dfccff11b":["c304e97e7c1d472bc70e801b35ee78583916c6cd","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","560c18d71dad43d675158783c3840f8c80d6d39c"],"579fab47a447cb68f742b3ea201e3398f84daaef":["43d1e498704edd2bba13548a189eed4dfccff11b"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"6ae3ad2b3d171060b5f8d2780f38b1dae608e02d":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["579fab47a447cb68f742b3ea201e3398f84daaef","6ae3ad2b3d171060b5f8d2780f38b1dae608e02d","ab68488225b6a6c357dda72ed11dedca9914a192"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}