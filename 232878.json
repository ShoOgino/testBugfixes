{"path":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","commits":[{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b6d39099fdb84d195208fae92dd8feca29d77366","c83d6c4335f31cae14f625a222bc842f20073dcd","782ed6a4b4ba50ec19734fc8db4e570ee193d627","ebd748c27c397d7a0310bf98d57110e777d24381"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ebd748c27c397d7a0310bf98d57110e777d24381","date":1363369216,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","bugFix":["f15795b2193a8dd132f374975d4243687bee9351"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, part);\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","bugFix":["f15795b2193a8dd132f374975d4243687bee9351"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, part);\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, new StringReader(part));\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return BytesRef.deepCopyOf(bytes);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    TokenStream source;\n    try {\n      source = analyzerIn.tokenStream(field, part);\n      source.reset();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unable to initialize TokenStream to analyze multiTerm term: \" + part, e);\n    }\n\n    TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n\n    try {\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n\n    try {\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      throw new RuntimeException(\"Unable to end & close TokenStream after analyzing multiTerm term: \" + part, e);\n    }\n\n    return BytesRef.deepCopyOf(bytes);\n  }\n\n","bugFix":["f15795b2193a8dd132f374975d4243687bee9351","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      BytesRef bytes = BytesRef.deepCopyOf(termAtt.getBytesRef());\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return bytes;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n      BytesRef bytes = termAtt.getBytesRef();\n\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      termAtt.fillBytesRef();\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return BytesRef.deepCopyOf(bytes);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6d39099fdb84d195208fae92dd8feca29d77366","date":1578667620,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Analyzes a text part using the provided {@link Analyzer} for a multi-term query.\n   * <p>\n   * Expects a single token to be used as multi-term term. This single token might also be filtered out\n   * so zero token is supported and null is returned in this case.\n   *\n   * @return The multi-term term bytes; or null if there is no multi-term terms.\n   * @throws SolrException If the {@link Analyzer} tokenizes more than one token;\n   * or if an underlying {@link IOException} occurs.\n   */\n  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n\n      if (!source.incrementToken()) {\n        // Accept no tokens because it may have been filtered out by a StopFilter for example.\n        return null;\n      }\n      BytesRef bytes = BytesRef.deepCopyOf(termAtt.getBytesRef());\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return bytes;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      BytesRef bytes = BytesRef.deepCopyOf(termAtt.getBytesRef());\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return bytes;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","bugFix":["f15795b2193a8dd132f374975d4243687bee9351"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","date":1578901035,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TextField#analyzeMultiTerm(String,String,Analyzer).mjava","sourceNew":"  /**\n   * Analyzes a text part using the provided {@link Analyzer} for a multi-term query.\n   * <p>\n   * Expects a single token to be used as multi-term term. This single token might also be filtered out\n   * so zero token is supported and null is returned in this case.\n   *\n   * @return The multi-term term bytes; or null if there is no multi-term terms.\n   * @throws SolrException If the {@link Analyzer} tokenizes more than one token;\n   * or if an underlying {@link IOException} occurs.\n   */\n  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n\n      if (!source.incrementToken()) {\n        // Accept no tokens because it may have been filtered out by a StopFilter for example.\n        return null;\n      }\n      BytesRef bytes = BytesRef.deepCopyOf(termAtt.getBytesRef());\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return bytes;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","sourceOld":"  public static BytesRef analyzeMultiTerm(String field, String part, Analyzer analyzerIn) {\n    if (part == null || analyzerIn == null) return null;\n\n    try (TokenStream source = analyzerIn.tokenStream(field, part)){\n      source.reset();\n\n      TermToBytesRefAttribute termAtt = source.getAttribute(TermToBytesRefAttribute.class);\n\n      if (!source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned no terms for multiTerm term: \" + part);\n      BytesRef bytes = BytesRef.deepCopyOf(termAtt.getBytesRef());\n      if (source.incrementToken())\n        throw  new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"analyzer returned too many terms for multiTerm term: \" + part);\n\n      source.end();\n      return bytes;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"error analyzing range part: \" + part, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":["804b857d1066ab5185b3b9101bde41b0b71426ec","b6d39099fdb84d195208fae92dd8feca29d77366"],"b6d39099fdb84d195208fae92dd8feca29d77366":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ebd748c27c397d7a0310bf98d57110e777d24381","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["ebd748c27c397d7a0310bf98d57110e777d24381"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"ebd748c27c397d7a0310bf98d57110e777d24381":["f15795b2193a8dd132f374975d4243687bee9351"],"f15795b2193a8dd132f374975d4243687bee9351":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6d39099fdb84d195208fae92dd8feca29d77366"]},"commit2Childs":{"804b857d1066ab5185b3b9101bde41b0b71426ec":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","b6d39099fdb84d195208fae92dd8feca29d77366"],"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":[],"b6d39099fdb84d195208fae92dd8feca29d77366":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f15795b2193a8dd132f374975d4243687bee9351"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"ebd748c27c397d7a0310bf98d57110e777d24381":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"f15795b2193a8dd132f374975d4243687bee9351":["ebd748c27c397d7a0310bf98d57110e777d24381"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}