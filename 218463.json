{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final Iterator<ThreadState> allActiveThreads = perThreadPool\n          .getActivePerThreadsIterator();\n      while (allActiveThreads.hasNext() && numPending > 0) {\n        ThreadState next = allActiveThreads.next();\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e38f40562eb7c165ae08ab2367a031883138354","date":1340287338,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        updateStallState();\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        updateStallState();\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        stallControl.updateStalled(this);\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        updateStallState();\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadStateCount();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        updateStallState();\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadState();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl#nextPendingFlush().mjava","sourceNew":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        updateStallState();\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && fullFlush == false) { // don't check if we are doing a full flush\n      for (final DocumentsWriterPerThread next : perThreadPool) {\n        if (next.isFlushPending()) {\n          if (next.tryLock()) {\n            try {\n              if (perThreadPool.isRegistered(next)) {\n                return checkOutForFlush(next);\n              }\n            } finally {\n              next.unlock();\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  DocumentsWriterPerThread nextPendingFlush() {\n    int numPending;\n    boolean fullFlush;\n    synchronized (this) {\n      final DocumentsWriterPerThread poll;\n      if ((poll = flushQueue.poll()) != null) {\n        updateStallState();\n        return poll;\n      }\n      fullFlush = this.fullFlush;\n      numPending = this.numPending;\n    }\n    if (numPending > 0 && !fullFlush) { // don't check if we are doing a full flush\n      final int limit = perThreadPool.getActiveThreadStateCount();\n      for (int i = 0; i < limit && numPending > 0; i++) {\n        final ThreadState next = perThreadPool.getThreadState(i);\n        if (next.flushPending) {\n          final DocumentsWriterPerThread dwpt = tryCheckoutForFlush(next);\n          if (dwpt != null) {\n            return dwpt;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"5e38f40562eb7c165ae08ab2367a031883138354":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","5e38f40562eb7c165ae08ab2367a031883138354"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["5e38f40562eb7c165ae08ab2367a031883138354"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5e38f40562eb7c165ae08ab2367a031883138354":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c02b804ab16489b95429791a2d8fb0e0728354d4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["5e38f40562eb7c165ae08ab2367a031883138354","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}