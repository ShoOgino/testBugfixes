{"path":"src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","commits":[{"id":"1919b234a992d6438a59ccbb02bd0656162e602e","date":1242941438,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      boolean nexta = ia.next();\n      boolean nextb = ib.next();\n      assertEquals(nexta, nextb);\n      if (!nexta) break;\n      assertEquals(ia.doc(), ib.doc());\n\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        boolean nexta,nextb;\n        if (rand.nextBoolean()) {\n          nexta = ia.next();\n          nextb = ib.next();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          nexta = ia.skipTo(target);\n          nextb = ib.skipTo(target);\n        }\n\n        assertEquals(nexta, nextb);        \n        if (!nexta) break;\n        doc = ia.doc();\n        assertEquals(doc, ib.doc());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19a6a2b00bd8d0dbd9684de00bb3018e4664a1e5","date":1247703137,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","sourceNew":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","sourceOld":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      boolean nexta = ia.next();\n      boolean nextb = ib.next();\n      assertEquals(nexta, nextb);\n      if (!nexta) break;\n      assertEquals(ia.doc(), ib.doc());\n\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        boolean nexta,nextb;\n        if (rand.nextBoolean()) {\n          nexta = ia.next();\n          nextb = ib.next();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          nexta = ia.skipTo(target);\n          nextb = ib.skipTo(target);\n        }\n\n        assertEquals(nexta, nextb);        \n        if (!nexta) break;\n        doc = ia.doc();\n        assertEquals(doc, ib.doc());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","pathOld":"src/test/org/apache/solr/search/TestDocSet#doTestIteratorEqual(DocIdSet,DocIdSet).mjava","sourceNew":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","sourceOld":"  public void doTestIteratorEqual(DocIdSet a, DocIdSet b) throws IOException {\n    DocIdSetIterator ia = a.iterator();\n    DocIdSetIterator ib = b.iterator();\n\n    // test for next() equivalence\n    for(;;) {\n      int da = ia.nextDoc();\n      int db = ib.nextDoc();\n      assertEquals(da, db);\n      assertEquals(ia.docID(), ib.docID());\n      if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n    }\n\n    for (int i=0; i<10; i++) {\n      // test random skipTo() and next()\n      ia = a.iterator();\n      ib = b.iterator();\n      int doc = -1;\n      for (;;) {\n        int da,db;\n        if (rand.nextBoolean()) {\n          da = ia.nextDoc();\n          db = ib.nextDoc();\n        } else {\n          int target = doc + rand.nextInt(10) + 1;  // keep in mind future edge cases like probing (increase if necessary)\n          da = ia.advance(target);\n          db = ib.advance(target);\n        }\n\n        assertEquals(da, db);\n        assertEquals(ia.docID(), ib.docID());\n        if (da==DocIdSetIterator.NO_MORE_DOCS) break;\n        doc = da;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1919b234a992d6438a59ccbb02bd0656162e602e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["19a6a2b00bd8d0dbd9684de00bb3018e4664a1e5"],"19a6a2b00bd8d0dbd9684de00bb3018e4664a1e5":["1919b234a992d6438a59ccbb02bd0656162e602e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1919b234a992d6438a59ccbb02bd0656162e602e":["19a6a2b00bd8d0dbd9684de00bb3018e4664a1e5"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1919b234a992d6438a59ccbb02bd0656162e602e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"19a6a2b00bd8d0dbd9684de00bb3018e4664a1e5":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}