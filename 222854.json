{"path":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","commits":[{"id":"03298305b51c91a6b0221a7b134ba26578934d39","date":1418532926,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"/dev/null","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = trieDateField.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateFormatUtil.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = trieDateField.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateFormatUtil.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) { //  ? but not if Z is last char ?   Ehh, whatever.\n      //use Solr standard date format parsing rules:\n      //TODO add DMP utility to return ZonedDateTime alternative, then set cal fields manually, which is faster?\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","bugFix":["03298305b51c91a6b0221a7b134ba26578934d39"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) { //  ? but not if Z is last char ?   Ehh, whatever.\n      //use Solr standard date format parsing rules:\n      //TODO add DMP utility to return ZonedDateTime alternative, then set cal fields manually, which is faster?\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) { //  ? but not if Z is last char ?   Ehh, whatever.\n      //use Solr standard date format parsing rules:\n      //TODO add DMP utility to return ZonedDateTime alternative, then set cal fields manually, which is faster?\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/DateRangeField#parseCalendar(String).mjava","sourceNew":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) { //  ? but not if Z is last char ?   Ehh, whatever.\n      //use Solr standard date format parsing rules:\n      //TODO add DMP utility to return ZonedDateTime alternative, then set cal fields manually, which is faster?\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","sourceOld":"  private Calendar parseCalendar(String str) {\n    if (str.startsWith(\"NOW\") || str.lastIndexOf('Z') >= 0) {\n      //use Solr standard date format parsing rules.\n      //TODO parse a Calendar instead of a Date, rounded according to DateMath syntax.\n      Date date = DateMathParser.parseMath(null, str);\n      Calendar cal = tree.newCal();\n      cal.setTime(date);\n      return cal;\n    } else {\n      try {\n        return tree.parseCalendar(str);\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Couldn't parse date because: \"+ e.getMessage(), e);\n      }\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"03298305b51c91a6b0221a7b134ba26578934d39":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["d3f6c7717a0f1decd1668144537943efcc70cd95","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d3f6c7717a0f1decd1668144537943efcc70cd95","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["03298305b51c91a6b0221a7b134ba26578934d39"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d3f6c7717a0f1decd1668144537943efcc70cd95","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"d3f6c7717a0f1decd1668144537943efcc70cd95":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"03298305b51c91a6b0221a7b134ba26578934d39":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03298305b51c91a6b0221a7b134ba26578934d39"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}