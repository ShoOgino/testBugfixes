{"path":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","commits":[{"id":"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f","date":1215042831,"type":0,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    Token token = new Token(); // for debug use only\n\n\n    TokenStream ts;\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(new Token(\"please\", 0, 6));\n    tokens.add(new Token(\"divide\", 7, 13));\n    tokens.add(new Token(\"this\", 14, 18));\n    tokens.add(new Token(\"sentence\", 19, 27));\n    tokens.add(new Token(\"into\", 28, 32));\n    tokens.add(new Token(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertNext(ts, \"please\", 0, 6);\n    assertNext(ts, \"please divide\", 0, 13);\n    assertNext(ts, \"divide\", 7, 13);\n    assertNext(ts, \"divide this\", 7, 18);\n    assertNext(ts, \"this\", 14, 18);\n    assertNext(ts, \"this sentence\", 14, 27);\n    assertNext(ts, \"sentence\", 19, 27);\n    assertNext(ts, \"sentence into\", 19, 32);\n    assertNext(ts, \"into\", 28, 32);\n    assertNext(ts, \"into shingles\", 28, 39);\n    assertNext(ts, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["360d15dc189fb48153cb62234f7d20819e4e292e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"32dccb0e1a1e6f0673086f4d0b95e14419730e6a","date":1215389321,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    Token token = new Token(); // for debug use only\n\n\n\n\n    TokenStream ts;\n\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next());\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(new Token(\"please\", 0, 6));\n    tokens.add(new Token(\"divide\", 7, 13));\n    tokens.add(new Token(\"this\", 14, 18));\n    tokens.add(new Token(\"sentence\", 19, 27));\n    tokens.add(new Token(\"into\", 28, 32));\n    tokens.add(new Token(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertNext(ts, \"please\", 0, 6);\n    assertNext(ts, \"please divide\", 0, 13);\n    assertNext(ts, \"divide\", 7, 13);\n    assertNext(ts, \"divide this\", 7, 18);\n    assertNext(ts, \"this\", 14, 18);\n    assertNext(ts, \"this sentence\", 14, 27);\n    assertNext(ts, \"sentence\", 19, 27);\n    assertNext(ts, \"sentence into\", 19, 32);\n    assertNext(ts, \"into\", 28, 32);\n    assertNext(ts, \"into shingles\", 28, 39);\n    assertNext(ts, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next());\n\n  }\n\n","sourceOld":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    Token token = new Token(); // for debug use only\n\n\n    TokenStream ts;\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(new Token(\"please\", 0, 6));\n    tokens.add(new Token(\"divide\", 7, 13));\n    tokens.add(new Token(\"this\", 14, 18));\n    tokens.add(new Token(\"sentence\", 19, 27));\n    tokens.add(new Token(\"into\", 28, 32));\n    tokens.add(new Token(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertNext(ts, \"please\", 0, 6);\n    assertNext(ts, \"please divide\", 0, 13);\n    assertNext(ts, \"divide\", 7, 13);\n    assertNext(ts, \"divide this\", 7, 18);\n    assertNext(ts, \"this\", 14, 18);\n    assertNext(ts, \"this sentence\", 14, 27);\n    assertNext(ts, \"sentence\", 19, 27);\n    assertNext(ts, \"sentence into\", 19, 32);\n    assertNext(ts, \"into\", 28, 32);\n    assertNext(ts, \"into shingles\", 28, 39);\n    assertNext(ts, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next(new Token()));\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    Token reusableToken = new Token();\n\n    assertNext(ts, reusableToken, \"please\", 0, 6);\n    assertNext(ts, reusableToken, \"please divide\", 0, 13);\n    assertNext(ts, reusableToken, \"divide\", 7, 13);\n    assertNext(ts, reusableToken, \"divide this\", 7, 18);\n    assertNext(ts, reusableToken, \"this\", 14, 18);\n    assertNext(ts, reusableToken, \"this sentence\", 14, 27);\n    assertNext(ts, reusableToken, \"sentence\", 19, 27);\n    assertNext(ts, reusableToken, \"sentence into\", 19, 32);\n    assertNext(ts, reusableToken, \"into\", 28, 32);\n    assertNext(ts, reusableToken, \"into shingles\", 28, 39);\n    assertNext(ts, reusableToken, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","sourceOld":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    Token token = new Token(); // for debug use only\n\n\n\n\n    TokenStream ts;\n\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next());\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms tranlated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(new Token(\"please\", 0, 6));\n    tokens.add(new Token(\"divide\", 7, 13));\n    tokens.add(new Token(\"this\", 14, 18));\n    tokens.add(new Token(\"sentence\", 19, 27));\n    tokens.add(new Token(\"into\", 28, 32));\n    tokens.add(new Token(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    assertNext(ts, \"please\", 0, 6);\n    assertNext(ts, \"please divide\", 0, 13);\n    assertNext(ts, \"divide\", 7, 13);\n    assertNext(ts, \"divide this\", 7, 18);\n    assertNext(ts, \"this\", 14, 18);\n    assertNext(ts, \"this sentence\", 14, 27);\n    assertNext(ts, \"sentence\", 19, 27);\n    assertNext(ts, \"sentence into\", 19, 32);\n    assertNext(ts, \"into\", 28, 32);\n    assertNext(ts, \"into shingles\", 28, 39);\n    assertNext(ts, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next());\n\n  }\n\n","bugFix":null,"bugIntro":["360d15dc189fb48153cb62234f7d20819e4e292e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56","date":1221157398,"type":3,"author":"Karl-Johan Wettin","isMerge":false,"pathNew":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next(new Token()));\n\n    TokenListStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    Token reusableToken = new Token();\n\n    assertNext(ts, reusableToken, \"please\", 0, 6);\n    assertNext(ts, reusableToken, \"please divide\", 0, 13);\n    assertNext(ts, reusableToken, \"divide\", 7, 13);\n    assertNext(ts, reusableToken, \"divide this\", 7, 18);\n    assertNext(ts, reusableToken, \"this\", 14, 18);\n    assertNext(ts, reusableToken, \"this sentence\", 14, 27);\n    assertNext(ts, reusableToken, \"sentence\", 19, 27);\n    assertNext(ts, reusableToken, \"sentence into\", 19, 32);\n    assertNext(ts, reusableToken, \"into\", 28, 32);\n    assertNext(ts, reusableToken, \"into shingles\", 28, 39);\n    assertNext(ts, reusableToken, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","sourceOld":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next(new Token()));\n\n    TokenListStream tls;\n    LinkedList<Token> tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList<Token>();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, ' ', false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    Token reusableToken = new Token();\n\n    assertNext(ts, reusableToken, \"please\", 0, 6);\n    assertNext(ts, reusableToken, \"please divide\", 0, 13);\n    assertNext(ts, reusableToken, \"divide\", 7, 13);\n    assertNext(ts, reusableToken, \"divide this\", 7, 18);\n    assertNext(ts, reusableToken, \"this\", 14, 18);\n    assertNext(ts, reusableToken, \"this sentence\", 14, 27);\n    assertNext(ts, reusableToken, \"sentence\", 19, 27);\n    assertNext(ts, reusableToken, \"sentence into\", 19, 32);\n    assertNext(ts, reusableToken, \"into\", 28, 32);\n    assertNext(ts, reusableToken, \"into shingles\", 28, 39);\n    assertNext(ts, reusableToken, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/TestShingleMatrixFilter#testBehavingAsShingleFilter().mjava","sourceNew":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next(new Token()));\n\n    TokenListStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    Token reusableToken = new Token();\n\n    assertNext(ts, reusableToken, \"please\", 0, 6);\n    assertNext(ts, reusableToken, \"please divide\", 0, 13);\n    assertNext(ts, reusableToken, \"divide\", 7, 13);\n    assertNext(ts, reusableToken, \"divide this\", 7, 18);\n    assertNext(ts, reusableToken, \"this\", 14, 18);\n    assertNext(ts, reusableToken, \"this sentence\", 14, 27);\n    assertNext(ts, reusableToken, \"sentence\", 19, 27);\n    assertNext(ts, reusableToken, \"sentence into\", 19, 32);\n    assertNext(ts, reusableToken, \"into\", 28, 32);\n    assertNext(ts, reusableToken, \"into shingles\", 28, 39);\n    assertNext(ts, reusableToken, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","sourceOld":"  public void testBehavingAsShingleFilter() throws IOException {\n\n    ShingleMatrixFilter.defaultSettingsCodec = null;\n\n    TokenStream ts;\n\n    ts = new ShingleMatrixFilter(new EmptyTokenStream(), 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n    assertNull(ts.next(new Token()));\n\n    TokenListStream tls;\n    LinkedList tokens;\n\n    // test a plain old token stream with synonyms translated to rows.\n\n    tokens = new LinkedList();\n    tokens.add(createToken(\"please\", 0, 6));\n    tokens.add(createToken(\"divide\", 7, 13));\n    tokens.add(createToken(\"this\", 14, 18));\n    tokens.add(createToken(\"sentence\", 19, 27));\n    tokens.add(createToken(\"into\", 28, 32));\n    tokens.add(createToken(\"shingles\", 33, 39));\n\n    tls = new TokenListStream(tokens);\n\n    // bi-grams\n\n    ts = new ShingleMatrixFilter(tls, 1, 2, new Character(' '), false, new ShingleMatrixFilter.OneDimensionalNonWeightedTokenSettingsCodec());\n\n    Token reusableToken = new Token();\n\n    assertNext(ts, reusableToken, \"please\", 0, 6);\n    assertNext(ts, reusableToken, \"please divide\", 0, 13);\n    assertNext(ts, reusableToken, \"divide\", 7, 13);\n    assertNext(ts, reusableToken, \"divide this\", 7, 18);\n    assertNext(ts, reusableToken, \"this\", 14, 18);\n    assertNext(ts, reusableToken, \"this sentence\", 14, 27);\n    assertNext(ts, reusableToken, \"sentence\", 19, 27);\n    assertNext(ts, reusableToken, \"sentence into\", 19, 32);\n    assertNext(ts, reusableToken, \"into\", 28, 32);\n    assertNext(ts, reusableToken, \"into shingles\", 28, 39);\n    assertNext(ts, reusableToken, \"shingles\", 33, 39);\n\n\n    assertNull(ts.next(reusableToken));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["32dccb0e1a1e6f0673086f4d0b95e14419730e6a"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"32dccb0e1a1e6f0673086f4d0b95e14419730e6a":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["660fdd379b3fe276cd3a63d9c5852cef6dd5d54f"],"660fdd379b3fe276cd3a63d9c5852cef6dd5d54f":["32dccb0e1a1e6f0673086f4d0b95e14419730e6a"],"cbf0bdceb2051d3f9cb24580a849c9cd8b17ea56":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"32dccb0e1a1e6f0673086f4d0b95e14419730e6a":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}