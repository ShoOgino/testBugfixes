{"path":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","commits":[{"id":"0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2","date":1084028779,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    // rq = rq.rewrite(searcher.reader) // makes the test pass\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b70d0580d17e1ff8352e38b9bea0e745ea9d05b","date":1084417905,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /** \n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n  }\n\n","sourceOld":"  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    // rq = rq.rewrite(searcher.reader) // makes the test pass\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6329521c7a95e30bf022b87125c01cbdd71c190","date":1084442052,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n  }\n\n","sourceOld":"  /** \n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    Hits hits = searcher.search(filteredquery);\n    assertEquals(2, hits.length());\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    RangeQuery rq = new RangeQuery(\n        new Term(\"sorter\", \"b\"), new Term(\"sorter\", \"d\"), true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#testRangeQuery().mjava","sourceNew":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","sourceOld":"  /**\n   * This tests FilteredQuery's rewrite correctness\n   */\n  public void testRangeQuery() throws Exception {\n    TermRangeQuery rq = new TermRangeQuery(\n        \"sorter\", \"b\", \"d\", true, true);\n\n    Query filteredquery = new FilteredQuery(rq, filter);\n    ScoreDoc[] hits = searcher.search(filteredquery, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n    QueryUtils.check(filteredquery,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"8b70d0580d17e1ff8352e38b9bea0e745ea9d05b":["0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"a6329521c7a95e30bf022b87125c01cbdd71c190":["8b70d0580d17e1ff8352e38b9bea0e745ea9d05b"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["a6329521c7a95e30bf022b87125c01cbdd71c190"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f612096ab5275c4821d05f126bf45a89f4782b8"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8b70d0580d17e1ff8352e38b9bea0e745ea9d05b":["a6329521c7a95e30bf022b87125c01cbdd71c190"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2"],"0a34021dd0c4b38be8f3ebc47e94d48ba0736ac2":["8b70d0580d17e1ff8352e38b9bea0e745ea9d05b"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a6329521c7a95e30bf022b87125c01cbdd71c190":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}