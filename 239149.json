{"path":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","commits":[{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeImpl#reflectWith(AttributeReflector).mjava","sourceNew":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * This method is for introspection of attributes, it should simply\n   * add the key/values this attribute holds to the given {@link AttributeReflector}.\n   *\n   * <p>The default implementation calls {@link AttributeReflector#reflect} for all\n   * non-static fields from the implementing class, using the field name as key\n   * and the field value as value. The Attribute class is also determined by reflection.\n   * Please note that the default implementation can only handle single-Attribute\n   * implementations.\n   *\n   * <p>Custom implementations look like this (e.g. for a combined attribute implementation):\n   * <pre>\n   *   public void reflectWith(AttributeReflector reflector) {\n   *     reflector.reflect(CharTermAttribute.class, \"term\", term());\n   *     reflector.reflect(PositionIncrementAttribute.class, \"positionIncrement\", getPositionIncrement());\n   *   }\n   * </pre>\n   *\n   * <p>If you implement this method, make sure that for each invocation, the same set of {@link Attribute}\n   * interfaces and keys are passed to {@link AttributeReflector#reflect} in the same order, but possibly\n   * different values. So don't automatically exclude e.g. {@code null} properties!\n   *\n   * @see #reflectAsString(boolean)\n   */\n  public void reflectWith(AttributeReflector reflector) {\n    final Class<? extends AttributeImpl> clazz = this.getClass();\n    final LinkedList<WeakReference<Class<? extends Attribute>>> interfaces = AttributeSource.getAttributeInterfaces(clazz);\n    if (interfaces.size() != 1) {\n      throw new UnsupportedOperationException(clazz.getName() +\n        \" implements more than one Attribute interface, the default reflectWith() implementation cannot handle this.\");\n    }\n    final Class<? extends Attribute> interf = interfaces.getFirst().get();\n    final Field[] fields = clazz.getDeclaredFields();\n    try {\n      for (int i = 0; i < fields.length; i++) {\n        final Field f = fields[i];\n        if (Modifier.isStatic(f.getModifiers())) continue;\n        f.setAccessible(true);\n        reflector.reflect(interf, f.getName(), f.get(this));\n      }\n    } catch (IllegalAccessException e) {\n      // this should never happen, because we're just accessing fields\n      // from 'this'\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","ec58fb7921964848d01bea54f8ec4a2ac813eaeb","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}