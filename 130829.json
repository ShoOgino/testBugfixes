{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","commits":[{"id":"3747a28ce6c262c1e27f7c7b30a827bc1a17260b","date":1428529761,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLive(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLive(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = null;\n        if (collection != null) {\n          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));\n        } else {\n          collections = clusterState.getCollectionsMap();\n        }\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = null;\n        if (collection != null) {\n          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));\n        } else {\n          collections = clusterState.getCollectionsMap();\n        }\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = null;\n        if (collection != null) {\n          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));\n        } else {\n          collections = clusterState.getCollectionsMap();\n        }\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterStateUtil#waitForAllActiveAndLiveReplicas(ZkStateReader,String,int).mjava","sourceNew":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Map<String, DocCollection> collections = null;\n        if (collection != null) {\n          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));\n        } else {\n          collections = clusterState.getCollectionsMap();\n        }\n        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {\n          DocCollection docCollection = entry.getValue();\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  /**\n   * Wait to see *all* cores live and active.\n   * \n   * @param zkStateReader\n   *          to use for ClusterState\n   * @param collection to look at\n   * @param timeoutInMs\n   *          how long to wait before giving up\n   * @return false if timed out\n   */\n  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,\n      int timeoutInMs) {\n    long timeout = System.nanoTime()\n        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);\n    boolean success = false;\n    while (!success && System.nanoTime() < timeout) {\n      success = true;\n      ClusterState clusterState = zkStateReader.getClusterState();\n      if (clusterState != null) {\n        Set<String> collections;\n        if (collection != null) {\n          collections = Collections.singleton(collection);\n        } else {\n          collections = clusterState.getCollections();\n        }\n        for (String coll : collections) {\n          DocCollection docCollection = clusterState.getCollection(coll);\n          Collection<Slice> slices = docCollection.getSlices();\n          for (Slice slice : slices) {\n            // only look at active shards\n            if (slice.getState() == Slice.State.ACTIVE) {\n              Collection<Replica> replicas = slice.getReplicas();\n              for (Replica replica : replicas) {\n                // on a live node?\n                final boolean live = clusterState.liveNodesContain(replica.getNodeName());\n                final boolean isActive = replica.getState() == Replica.State.ACTIVE;\n                if (!live || !isActive) {\n                  // fail\n                  success = false;\n                }\n              }\n            }\n          }\n        }\n        if (!success) {\n          try {\n            Thread.sleep(TIMEOUT_POLL_MS);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new SolrException(ErrorCode.SERVER_ERROR, \"Interrupted\");\n          }\n        }\n      }\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73450c0955930295d34703e7ddbfc6973b7a121a":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73450c0955930295d34703e7ddbfc6973b7a121a"]},"commit2Childs":{"73450c0955930295d34703e7ddbfc6973b7a121a":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":[],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3747a28ce6c262c1e27f7c7b30a827bc1a17260b"],"3747a28ce6c262c1e27f7c7b30a827bc1a17260b":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}