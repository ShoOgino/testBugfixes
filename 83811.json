{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":null,"sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"conditions:[\" +\n        \"{nodeRole:'!overseer', strict:false},\" +\n        \"{replica:'<1',node:node3},\" +\n        \"{replica:'<2',node:'#ANY', shard:'#EACH'},\" +\n        \"{replica:'<3',shard:'#EACH', rack:'#ANY' }\" +\n        \"],\" +\n        \" preferences:[\" +\n        \"{minimize:cores , precision:2},\" +\n        \"{maximize:freedisk, precision:50}, \" +\n        \"{minimize:heap, precision:1000}]}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"070f4513c7b9fb42b83f9c863b917c96c58397f2","date":1494234201,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heap','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session =  policy.createSession(cdp);\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.get(\"node\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heap','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session =  policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heap','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session =  policy.createSession(cdp);\n\n    Map op = session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.get(\"node\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d06843c166c033fc611df4ce71e33731bc1ad1","date":1495531684,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session =  policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heap','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session =  policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag(){\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{'nodeRole':'!overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session =  policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"/dev/null","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testOtherTag().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testOtherTag().mjava","sourceNew":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","sourceOld":"  public void testOtherTag() {\n    String rules = \"{\" +\n        \"'cluster-preferences':[\" +\n        \"{'minimize':'cores','precision':2},\" +\n        \"{'maximize':'freedisk','precision':50},\" +\n        \"{'minimize':'heapUsage','precision':1000}\" +\n        \"],\" +\n        \"'cluster-policy':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'}\" +\n        \"],\" +\n        \"'policies':{\" +\n        \"'p1':[\" +\n        \"{replica:0, 'nodeRole':'overseer','strict':false},\" +\n        \"{'replica':'<1','node':'node3'},\" +\n        \"{'replica':'<2','node':'#ANY','shard':'#EACH'},\" +\n        \"{'replica':'<3','shard':'#EACH','sysprop.rack':'#ANY'}\" +\n        \"]\" +\n        \"}\" +\n        \"}\";\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},\" +\n        \"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},\" +\n        \"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},\" +\n        \"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, sysprop.rack: rack1}\" +\n        \"}\");\n    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));\n    ClusterDataProvider clusterDataProvider = getClusterDataProvider(nodeValues, clusterState);\n    ClusterDataProvider cdp = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n        return clusterDataProvider.getNodeValues(node, tags);\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return clusterDataProvider.getReplicaInfo(node, keys);\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return clusterDataProvider.getNodes();\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return \"p1\";\n      }\n    };\n    Policy.Session session = policy.createSession(cdp);\n\n    CollectionAdminRequest.AddReplica op = (CollectionAdminRequest.AddReplica) session\n        .getSuggester(ADDREPLICA)\n        .hint(Hint.COLL, \"newColl\")\n        .hint(Hint.SHARD, \"s1\").getOperation();\n    assertNotNull(op);\n    assertEquals(\"node2\", op.getNode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"070f4513c7b9fb42b83f9c863b917c96c58397f2":["86fff6c123a5a1d38adb665dd045347219798da9"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"86fff6c123a5a1d38adb665dd045347219798da9":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"070f4513c7b9fb42b83f9c863b917c96c58397f2":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["09d06843c166c033fc611df4ce71e33731bc1ad1"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"86fff6c123a5a1d38adb665dd045347219798da9":["070f4513c7b9fb42b83f9c863b917c96c58397f2"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"09d06843c166c033fc611df4ce71e33731bc1ad1":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["86fff6c123a5a1d38adb665dd045347219798da9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}