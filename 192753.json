{"path":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","commits":[{"id":"0a04035855bf53c50aaef580f2ec794acf73029e","date":1253578101,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"/dev/null","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(hits.id(i));\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = (float) ((miles - distance) / miles );\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(hits.id(i));\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = new Float((miles - distance) / miles ).floatValue();\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(hits.id(i));\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = (float) ((miles - distance) / miles );\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(hits.id(i));\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = (float) ((miles - distance) / miles );\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(hits.id(i));\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = (float) ((miles - distance) / miles );\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = (float) ((miles - distance) / miles );\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    Hits hits = searcher.search(customScore,null,sort);\n\n    int results = hits.length();\n\n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = hits.doc(i);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(hits.id(i));\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"affefdda19991b74568e601456baad0c8e5c2f65","date":1266776825,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      public float customScore(int doc, float subQueryScore, float valSrcScore){\n        System.out.println(doc);\n        if (dq.distanceFilter.getDistance(doc) == null)\n          return 0;\n\n        double distance = dq.distanceFilter.getDistance(doc);\n        // boost score shouldn't exceed 1\n        if (distance < 1.0d)\n          distance = 1.0d;\n        //boost by distance is invertly proportional to\n        // to distance from center point to location\n        float score = (float) ((miles - distance) / miles );\n        return score * subQueryScore;\n      }\n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    System.out.println(\"Distance Filter filtered: \" + distances.size());\n    System.out.println(\"Results: \" + results);\n    System.out.println(\"=============================\");\n    System.out.println(\"Distances should be 2 \"+ distances.size());\n    System.out.println(\"Results should be 2 \"+ results);\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#testAntiM().mjava","sourceNew":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","sourceOld":"  public void testAntiM() throws IOException, InvalidGeoException {\n    searcher = new IndexSearcher(directory, true);\n\n    final double miles = 2800.0;\n        // Hawaii\n        // 2300 miles to Marshall Island Airfield\n    lat = 21.6032207;\n    lng = -158.0;\n\n    if (VERBOSE) System.out.println(\"testAntiM\");\n    // create a distance query\n    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,\n        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true);\n\n    if (VERBOSE) System.out.println(dq);\n    //create a term query to search against all documents\n    Query tq = new TermQuery(new Term(\"metafile\", \"doc\"));\n\n    FieldScoreQuery fsQuery = new FieldScoreQuery(\"geo_distance\", Type.FLOAT);\n\n    CustomScoreQuery customScore = new CustomScoreQuery(dq.getQuery(tq),fsQuery){\n\n      @Override\n      protected CustomScoreProvider getCustomScoreProvider(IndexReader reader) {\n        return new CustomScoreProvider(reader) {\n          @Override // TODO: broken, as reader is not used!\n          public float customScore(int doc, float subQueryScore, float valSrcScore){\n            if (VERBOSE) System.out.println(doc);\n            if (dq.distanceFilter.getDistance(doc) == null)\n              return 0;\n\n            double distance = dq.distanceFilter.getDistance(doc);\n            // boost score shouldn't exceed 1\n            if (distance < 1.0d)\n              distance = 1.0d;\n            //boost by distance is invertly proportional to\n            // to distance from center point to location\n            float score = (float) ((miles - distance) / miles );\n            return score * subQueryScore;\n          }\n        };\n      }\n      \n    };\n    // Create a distance sort\n    // As the radius filter has performed the distance calculations\n    // already, pass in the filter to reuse the results.\n    //\n    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);\n    Sort sort = new Sort(new SortField(\"foo\", dsort,false));\n\n    // Perform the search, using the term query, the serial chain filter, and the\n    // distance sort\n    TopDocs hits = searcher.search(customScore.createWeight(searcher),null, 1000, sort);\n    int results = hits.totalHits;\n    ScoreDoc[] scoreDocs = hits.scoreDocs; \n    \n    // Get a list of distances\n    Map<Integer,Double> distances = dq.distanceFilter.getDistances();\n\n    // distances calculated from filter first pass must be less than total\n    // docs, from the above test of 20 items, 12 will come from the boundary box\n    // filter, but only 5 are actually in the radius of the results.\n\n    // Note Boundary Box filtering, is not accurate enough for most systems.\n\n\n    if (VERBOSE) {\n      System.out.println(\"Distance Filter filtered: \" + distances.size());\n      System.out.println(\"Results: \" + results);\n      System.out.println(\"=============================\");\n      System.out.println(\"Distances should be 2 \"+ distances.size());\n      System.out.println(\"Results should be 2 \"+ results);\n    }\n\n    assertEquals(2, distances.size()); // fixed a store of only needed distances\n    assertEquals(2, results);\n    double lastDistance = 0;\n    for(int i =0 ; i < results; i++){\n      Document d = searcher.doc(scoreDocs[i].doc);\n\n      String name = d.get(\"name\");\n      double rsLat = NumericUtils.prefixCodedToDouble(d.get(latField));\n      double rsLng = NumericUtils.prefixCodedToDouble(d.get(lngField));\n      Double geo_distance = distances.get(scoreDocs[i].doc);\n\n      double distance = DistanceUtils.getInstance().getDistanceMi(lat, lng, rsLat, rsLng);\n      double llm = DistanceUtils.getInstance().getLLMDistance(lat, lng, rsLat, rsLng);\n      if (VERBOSE) System.out.println(\"Name: \"+ name +\", Distance \"+ distance); //(res, ortho, harvesine):\"+ distance +\" |\"+ geo_distance +\"|\"+ llm +\" | score \"+ hits.score(i));\n      assertTrue(Math.abs((distance - llm)) < 1);\n      assertTrue((distance < miles ));\n      assertTrue(geo_distance >= lastDistance);\n      lastDistance = geo_distance;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["0a04035855bf53c50aaef580f2ec794acf73029e"],"0a04035855bf53c50aaef580f2ec794acf73029e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["affefdda19991b74568e601456baad0c8e5c2f65"],"affefdda19991b74568e601456baad0c8e5c2f65":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4256bc1b3c94786287ccdfc751230374521843cf"],"0a04035855bf53c50aaef580f2ec794acf73029e":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a04035855bf53c50aaef580f2ec794acf73029e"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"affefdda19991b74568e601456baad0c8e5c2f65":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["affefdda19991b74568e601456baad0c8e5c2f65"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}