{"path":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","commits":[{"id":"6d0fc107895562138b4cc92eccac979d28579b98","date":1371594707,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.0D);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e10d5539266ae943f9fa6befa6ac3481a2419c8","date":1371692194,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(true, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), true);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.0D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33ef255480d446ae7aa03506be85d0356a9850f","date":1371880818,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(expectCFS ? 1.0D : 0.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(true, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(1.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(expectCFS ? 1.0D : 0.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(expectCFS ? 1.0D : 0.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore().getLatestSchema());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(expectCFS ? 1.0D : 0.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d","date":1432150334,"type":3,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n    assertEquals(expectCFS ? 1.0D : 0.0D, tieredMP.getNoCFSRatio(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS \n      = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class,\n                                               iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(10, tieredMP.getMaxMergeAtOnce());\n    assertEquals(10.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(10, tieredMP.getMaxMergeAtOnce());\n    assertEquals(10.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestMergePolicyConfig#testLegacyMergePolicyConfig().mjava","sourceNew":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(10, tieredMP.getMaxMergeAtOnce());\n    assertEquals(10.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","sourceOld":"  public void testLegacyMergePolicyConfig() throws Exception {\n    final boolean expectCFS = Boolean.parseBoolean(System.getProperty(\"useCompoundFile\"));\n\n    initCore(\"solrconfig-mergepolicy-legacy.xml\",\"schema-minimal.xml\");\n    IndexWriterConfig iwc = solrConfig.indexConfig.toIndexWriterConfig(h.getCore());\n    assertEquals(expectCFS, iwc.getUseCompoundFile());\n\n    TieredMergePolicy tieredMP = assertAndCast(TieredMergePolicy.class, iwc.getMergePolicy());\n\n    assertEquals(7, tieredMP.getMaxMergeAtOnce());\n    assertEquals(7.0D, tieredMP.getSegmentsPerTier(), 0.0D);\n\n    assertCommitSomeNewDocs();\n    assertCompoundSegments(h.getCore(), expectCFS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"f33ef255480d446ae7aa03506be85d0356a9850f":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"6d0fc107895562138b4cc92eccac979d28579b98":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f33ef255480d446ae7aa03506be85d0356a9850f"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["6d0fc107895562138b4cc92eccac979d28579b98"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"28288370235ed02234a64753cdbf0c6ec096304a":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["f33ef255480d446ae7aa03506be85d0356a9850f"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"f33ef255480d446ae7aa03506be85d0356a9850f":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"6d0fc107895562138b4cc92eccac979d28579b98":["0e10d5539266ae943f9fa6befa6ac3481a2419c8"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["e9017cf144952056066919f1ebc7897ff9bd71b1","70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d0fc107895562138b4cc92eccac979d28579b98","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"0e10d5539266ae943f9fa6befa6ac3481a2419c8":["f33ef255480d446ae7aa03506be85d0356a9850f"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["d02cd5e26c3667f84cdedfc0e6f9e92f381a9b5d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}