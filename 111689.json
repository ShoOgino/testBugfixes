{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}