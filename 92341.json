{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","commits":[{"id":"75a271f2fe211a2c88163284dab039557d434ae9","date":1010977359,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a z]\", null, \"[a-z]\");\n    assertQueryEquals(\"[ a z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a z}) \", null, \"(bar blar {a-z})\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d3dec2223c4ab37942f127cae43fbf1cd28731","date":1011232809,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a z]\", null, \"[a-z]\");\n    assert(getQuery(\"[ a z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a z}) \", null, \"bar blar {a-z}\");\n    assertQueryEquals(\"gack ( bar blar { a z}) \", null, \"gack (bar blar {a-z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a z]\", null, \"[a-z]\");\n    assertQueryEquals(\"[ a z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a z}) \", null, \"(bar blar {a-z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea","date":1012249521,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a z]\", null, \"[a-z]\");\n    assertTrue(getQuery(\"[ a z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a z}) \", null, \"bar blar {a-z}\");\n    assertQueryEquals(\"gack ( bar blar { a z}) \", null, \"gack (bar blar {a-z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a z]\", null, \"[a-z]\");\n    assert(getQuery(\"[ a z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a z}) \", null, \"bar blar {a-z}\");\n    assertQueryEquals(\"gack ( bar blar { a z}) \", null, \"gack (bar blar {a-z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ffda7a1ecb465d19f368d81bd4737bcf4fd087","date":1024963531,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a-z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a-z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a-z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a z]\", null, \"[a-z]\");\n    assertTrue(getQuery(\"[ a z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a z}) \", null, \"bar blar {a-z}\");\n    assertQueryEquals(\"gack ( bar blar { a z}) \", null, \"gack (bar blar {a-z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"    public void testRange() throws Exception {\n\tassertQueryEquals(\"[ a TO z]\", null, \"[a-z]\");\n\tassertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n\tassertQueryEquals(\"[ a TO z ]\", null, \"[a-z]\");\n\tassertQueryEquals(\"{ a TO z}\", null, \"{a-z}\");\n\tassertQueryEquals(\"{ a TO z }\", null, \"{a-z}\");\n\tassertQueryEquals(\"{ a TO z }^2.0\", null, \"{a-z}^2.0\");\n\tassertQueryEquals(\"[ a TO z] OR bar\", null, \"[a-z] bar\");\n\tassertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a-z] +bar\");\n\tassertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a-z}\");\n\tassertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a-z})\");\n    }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a-z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a-z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a-z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a-z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a-z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a-z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a-z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a-z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a946a1d011debaca507664c0571ac25f38c62eae","date":1051580040,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"    public void testRange() throws Exception {\n\tassertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n\tassertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n\tassertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n\tassertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n\tassertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n\tassertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n\tassertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n\tassertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n\tassertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n\tassertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n    }\n\n","sourceOld":"    public void testRange() throws Exception {\n\tassertQueryEquals(\"[ a TO z]\", null, \"[a-z]\");\n\tassertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n\tassertQueryEquals(\"[ a TO z ]\", null, \"[a-z]\");\n\tassertQueryEquals(\"{ a TO z}\", null, \"{a-z}\");\n\tassertQueryEquals(\"{ a TO z }\", null, \"{a-z}\");\n\tassertQueryEquals(\"{ a TO z }^2.0\", null, \"{a-z}^2.0\");\n\tassertQueryEquals(\"[ a TO z] OR bar\", null, \"[a-z] bar\");\n\tassertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a-z] +bar\");\n\tassertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a-z}\");\n\tassertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a-z})\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"    public void testRange() throws Exception {\n\tassertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n\tassertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n\tassertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n\tassertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n\tassertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n\tassertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n\tassertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n\tassertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n\tassertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n\tassertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe05d78659c647b5665db68d3848e0c081c1d167","date":1163625969,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof ConstantScoreRangeQuery);\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n\tqp.setUseOldRangeQuery(true);\n    assertTrue(qp.parse(\"[ a TO z]\") instanceof RangeQuery);\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof RangeQuery);\n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(((RangeQuery)getQuery(\"[ a TO z]\", null)).getConstantScoreRewrite());\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n\t  qp.setConstantScoreRewrite(false);\n    assertFalse(((RangeQuery)qp.parse(\"[ a TO z]\")).getConstantScoreRewrite());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof ConstantScoreRangeQuery);\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n\tqp.setUseOldRangeQuery(true);\n    assertTrue(qp.parse(\"[ a TO z]\") instanceof RangeQuery);\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getConstantScoreRewrite());\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n\t  qp.setConstantScoreRewrite(false);\n    assertFalse(((TermRangeQuery)qp.parse(\"[ a TO z]\")).getConstantScoreRewrite());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(((RangeQuery)getQuery(\"[ a TO z]\", null)).getConstantScoreRewrite());\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n\t  qp.setConstantScoreRewrite(false);\n    assertFalse(((RangeQuery)qp.parse(\"[ a TO z]\")).getConstantScoreRewrite());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertTrue(((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getConstantScoreRewrite());\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n\t  qp.setConstantScoreRewrite(false);\n    assertFalse(((TermRangeQuery)qp.parse(\"[ a TO z]\")).getConstantScoreRewrite());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(\"field\", new SimpleAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer(Version.LUCENE_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer());\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(Version.LUCENE_CURRENT, \"field\", new SimpleAnalyzer(Version.LUCENE_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testRange().mjava","sourceNew":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","sourceOld":"  public void testRange() throws Exception {\n    assertQueryEquals(\"[ a TO z]\", null, \"[a TO z]\");\n    assertEquals(MultiTermQuery.CONSTANT_SCORE_AUTO_REWRITE_DEFAULT, ((TermRangeQuery)getQuery(\"[ a TO z]\", null)).getRewriteMethod());\n\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    qp.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertEquals(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE,((TermRangeQuery)qp.parse(\"[ a TO z]\")).getRewriteMethod());\n    \n    assertQueryEquals(\"[ a TO z ]\", null, \"[a TO z]\");\n    assertQueryEquals(\"{ a TO z}\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }\", null, \"{a TO z}\");\n    assertQueryEquals(\"{ a TO z }^2.0\", null, \"{a TO z}^2.0\");\n    assertQueryEquals(\"[ a TO z] OR bar\", null, \"[a TO z] bar\");\n    assertQueryEquals(\"[ a TO z] AND bar\", null, \"+[a TO z] +bar\");\n    assertQueryEquals(\"( bar blar { a TO z}) \", null, \"bar blar {a TO z}\");\n    assertQueryEquals(\"gack ( bar blar { a TO z}) \", null, \"gack (bar blar {a TO z})\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fe05d78659c647b5665db68d3848e0c081c1d167":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"75a271f2fe211a2c88163284dab039557d434ae9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"e2ffda7a1ecb465d19f368d81bd4737bcf4fd087":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"ba1116b3450a9c1642c89445d131b37344055245":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["fe05d78659c647b5665db68d3848e0c081c1d167"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ba1116b3450a9c1642c89445d131b37344055245"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a946a1d011debaca507664c0571ac25f38c62eae":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["75a271f2fe211a2c88163284dab039557d434ae9"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["a946a1d011debaca507664c0571ac25f38c62eae"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["e2ffda7a1ecb465d19f368d81bd4737bcf4fd087"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"fe05d78659c647b5665db68d3848e0c081c1d167":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"75a271f2fe211a2c88163284dab039557d434ae9":["d4d3dec2223c4ab37942f127cae43fbf1cd28731"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e2ffda7a1ecb465d19f368d81bd4737bcf4fd087":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["ba1116b3450a9c1642c89445d131b37344055245"],"6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea":["e2ffda7a1ecb465d19f368d81bd4737bcf4fd087"],"ba1116b3450a9c1642c89445d131b37344055245":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75a271f2fe211a2c88163284dab039557d434ae9"],"d4d3dec2223c4ab37942f127cae43fbf1cd28731":["6d7a7bb0ac9416dfc61a5eb87324bf688920c3ea"],"a946a1d011debaca507664c0571ac25f38c62eae":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["fe05d78659c647b5665db68d3848e0c081c1d167"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["a946a1d011debaca507664c0571ac25f38c62eae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}