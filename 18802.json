{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","commits":[{"id":"81573e29e6e5db648330b225c60d44b1c3eb388e","date":1174927593,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","pathOld":"/dev/null","sourceNew":"  private Date parseDate(String dateStr) {\r\n    Date date = null;\r\n    for (int i=0; i<dateFormat.length; i++) {\r\n      try {\r\n        date = dateFormat[i].parse(dateStr.trim());\r\n        return date;\r\n      } catch (ParseException e) {\r\n      }\r\n    }\r\n    // do not fail test just because a date could not be parsed\r\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\r\n    date = new Date(); // now \r\n    return date;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","sourceNew":"  private Date parseDate(String dateStr) {\n    Date date = null;\n    for (int i=0; i<dateFormat.length; i++) {\n      try {\n        date = dateFormat[i].parse(dateStr.trim());\n        return date;\n      } catch (ParseException e) {\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\n    date = new Date(); // now \n    return date;\n  }\n\n","sourceOld":"  private Date parseDate(String dateStr) {\r\n    Date date = null;\r\n    for (int i=0; i<dateFormat.length; i++) {\r\n      try {\r\n        date = dateFormat[i].parse(dateStr.trim());\r\n        return date;\r\n      } catch (ParseException e) {\r\n      }\r\n    }\r\n    // do not fail test just because a date could not be parsed\r\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\r\n    date = new Date(); // now \r\n    return date;\r\n  }\r\n\n","bugFix":null,"bugIntro":["87c64a12419171222386231ce507096ac851b3cd","f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c64a12419171222386231ce507096ac851b3cd","date":1182882441,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","sourceNew":"  private Date parseDate(String dateStr) {\n    Date date = null;\n    for (int i=0; i<DATE_FORMATS.length; i++) {\n      try {\n        date = getDateFormat(i).parse(dateStr.trim());\n        return date;\n      } catch (ParseException e) {\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\n    date = new Date(); // now \n    return date;\n  }\n\n","sourceOld":"  private Date parseDate(String dateStr) {\n    Date date = null;\n    for (int i=0; i<dateFormat.length; i++) {\n      try {\n        date = dateFormat[i].parse(dateStr.trim());\n        return date;\n      } catch (ParseException e) {\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\n    date = new Date(); // now \n    return date;\n  }\n\n","bugFix":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"bugIntro":["f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6eeda7231e55f9169d1f3d85af46d79460dffe08","date":1201723419,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","sourceNew":"  protected Date parseDate(String dateStr) {\n    Date date = null;\n    for (int i=0; i<DATE_FORMATS.length; i++) {\n      try {\n        date = getDateFormat(i).parse(dateStr.trim());\n        return date;\n      } catch (ParseException e) {\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\n    date = new Date(); // now \n    return date;\n  }\n\n","sourceOld":"  private Date parseDate(String dateStr) {\n    Date date = null;\n    for (int i=0; i<DATE_FORMATS.length; i++) {\n      try {\n        date = getDateFormat(i).parse(dateStr.trim());\n        return date;\n      } catch (ParseException e) {\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\n    date = new Date(); // now \n    return date;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e","date":1231760243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","sourceNew":"  protected Date parseDate(String dateStr) {\n    for (int i = 0; i < DATE_FORMATS.length; i++) {\n      try {\n        return getDateFormat(i).parse(dateStr.trim());\n      } catch (ParseException e) {}\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'null') for: \"+dateStr);\n    return null;\n  }\n\n","sourceOld":"  protected Date parseDate(String dateStr) {\n    Date date = null;\n    for (int i=0; i<DATE_FORMATS.length; i++) {\n      try {\n        date = getDateFormat(i).parse(dateStr.trim());\n        return date;\n      } catch (ParseException e) {\n      }\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'now') for: \"+dateStr);\n    date = new Date(); // now \n    return date;\n  }\n\n","bugFix":["87c64a12419171222386231ce507096ac851b3cd","3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecDocMaker#parseDate(String).mjava","sourceNew":null,"sourceOld":"  protected Date parseDate(String dateStr) {\n    for (int i = 0; i < DATE_FORMATS.length; i++) {\n      try {\n        return getDateFormat(i).parse(dateStr.trim());\n      } catch (ParseException e) {}\n    }\n    // do not fail test just because a date could not be parsed\n    System.out.println(\"ignoring date parse exception (assigning 'null') for: \"+dateStr);\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"87c64a12419171222386231ce507096ac851b3cd":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e"],"6eeda7231e55f9169d1f3d85af46d79460dffe08":["87c64a12419171222386231ce507096ac851b3cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e":["6eeda7231e55f9169d1f3d85af46d79460dffe08"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"]},"commit2Childs":{"87c64a12419171222386231ce507096ac851b3cd":["6eeda7231e55f9169d1f3d85af46d79460dffe08"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eeda7231e55f9169d1f3d85af46d79460dffe08":["f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["87c64a12419171222386231ce507096ac851b3cd"],"f58dbed2db5b1fe7e0910a67b4d5640eb60dfe4e":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}