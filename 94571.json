{"path":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","commits":[{"id":"498626195354975ac543d575087c90185d80c813","date":1359301262,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","sourceNew":null,"sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","498626195354975ac543d575087c90185d80c813"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"498626195354975ac543d575087c90185d80c813":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","498626195354975ac543d575087c90185d80c813"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"498626195354975ac543d575087c90185d80c813":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}