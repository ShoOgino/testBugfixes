{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","commits":[{"id":"e7b27dde701ae80df8bea8eb554d31e4e8bc6126","date":1354814363,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    return mean + flip * pivotResult;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["af8a06d7082c629e900745715c845cd322673aa0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    return mean + flip * pivotResult;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af8a06d7082c629e900745715c845cd322673aa0","date":1453005630,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","sourceNew":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    double result = mean + flip * pivotResult;\n    return (result < 0 || result > max) ? mean : result; // due this due to computational numerical precision\n  }\n\n","sourceOld":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    return mean + flip * pivotResult;\n  }\n\n","bugFix":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","sourceNew":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    double result = mean + flip * pivotResult;\n    return (result < 0 || result > max) ? mean : result; // due this due to computational numerical precision\n  }\n\n","sourceOld":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    double result = mean + flip * pivotResult;\n    return (result < 0 || result > max) ? mean : result; // due this due to computational numerical precision\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/SpatialTestCase#randomGaussianMeanMax(double,double).mjava","sourceNew":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    double result = mean + flip * pivotResult;\n    return (result < 0 || result > max) ? mean : result; // due this due to computational numerical precision\n  }\n\n","sourceOld":"  /**\n   * Within one standard deviation (68% of the time) the result is \"close\" to\n   * mean. By \"close\": when greater than mean, it's the lesser of 2*mean or half\n   * way to max, when lesser than mean, it's the greater of max-2*mean or half\n   * way to 0. The other 32% of the time it's in the rest of the range, touching\n   * either 0 or max but never exceeding.\n   */\n  private double randomGaussianMeanMax(double mean, double max) {\n    // DWS: I verified the results empirically\n    assert mean <= max && mean >= 0;\n    double g = randomGaussian();\n    double mean2 = mean;\n    double flip = 1;\n    if (g < 0) {\n      mean2 = max - mean;\n      flip = -1;\n      g *= -1;\n    }\n    // pivot is the distance from mean2 towards max where the boundary of\n    // 1 standard deviation alters the calculation\n    double pivotMax = max - mean2;\n    double pivot = Math.min(mean2, pivotMax / 2);//from 0 to max-mean2\n    assert pivot >= 0 && pivotMax >= pivot && g >= 0;\n    double pivotResult;\n    if (g <= 1)\n      pivotResult = pivot * g;\n    else\n      pivotResult = Math.min(pivotMax, (g - 1) * (pivotMax - pivot) + pivot);\n\n    double result = mean + flip * pivotResult;\n    return (result < 0 || result > max) ? mean : result; // due this due to computational numerical precision\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af2638813028b254a88b418ebeafb541afb49653":["af8a06d7082c629e900745715c845cd322673aa0","112d77ac8d3e10a362516ad834c9a11d35c94234"],"af8a06d7082c629e900745715c845cd322673aa0":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7b27dde701ae80df8bea8eb554d31e4e8bc6126"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af8a06d7082c629e900745715c845cd322673aa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"e7b27dde701ae80df8bea8eb554d31e4e8bc6126":["af8a06d7082c629e900745715c845cd322673aa0","407687e67faf6e1f02a211ca078d8e3eed631027"],"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af8a06d7082c629e900745715c845cd322673aa0":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7b27dde701ae80df8bea8eb554d31e4e8bc6126","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}