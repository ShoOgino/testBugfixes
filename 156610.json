{"path":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","commits":[{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#getConfName(String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private void getConfName(String collection, String collectionPath,\n                           Map<String, Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n  InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n\n      // check if there's a config set with the same name as the collection\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n      // if _default exists, use that\n      if (configNames != null && configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n        log.info(\n            \"Could not find explicit collection configName, but found _default config set - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n        break;\n      }\n      // if there is only one conf, use that\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n  InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n\n      // check if there's a config set with the same name as the collection\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n      // if _default exists, use that\n      if (configNames != null && configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n        log.info(\n            \"Could not find explicit collection configName, but found _default config set - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n        break;\n      }\n      // if there is only one conf, use that\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n  InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n\n      // check if there's a config set with the same name as the collection\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n      // if _default exists, use that\n      if (configNames != null && configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n        log.info(\n            \"Could not find explicit collection configName, but found _default config set - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n        break;\n      }\n      // if there is only one conf, use that\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n      InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n    \n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      // if there is only one conf, use that\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(DistribStateManager,String,String,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/CreateCollectionCmd#getConfName(SolrZkClient,String,String,Map[String,Object]).mjava","sourceNew":"  private static void getConfName(DistribStateManager stateManager, String collection, String collectionPath, Map<String,Object> collectionProps) throws IOException,\n      KeeperException, InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (stateManager.hasData(collectionPath)) {\n        VersionedData data = stateManager.getData(collectionPath);\n        ZkNodeProps cProps = ZkNodeProps.load(data.getData());\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      try {\n        configNames = stateManager.listData(ZkConfigManager.CONFIGS_ZKNODE);\n      } catch (NoSuchElementException | NoNodeException e) {\n        // just keep trying\n      }\n\n      // check if there's a config set with the same name as the collection\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n      // if _default exists, use that\n      if (configNames != null && configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n        log.info(\n            \"Could not find explicit collection configName, but found _default config set - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n        break;\n      }\n      // if there is only one conf, use that\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","sourceOld":"  private static void getConfName(SolrZkClient zkClient, String collection, String collectionPath, Map<String,Object> collectionProps) throws KeeperException,\n  InterruptedException {\n    // check for configName\n    log.debug(\"Looking for collection configName\");\n    if (collectionProps.containsKey(\"configName\")) {\n      log.info(\"configName was passed as a param {}\", collectionProps.get(\"configName\"));\n      return;\n    }\n\n    List<String> configNames = null;\n    int retry = 1;\n    int retryLimt = 6;\n    for (; retry < retryLimt; retry++) {\n      if (zkClient.exists(collectionPath, true)) {\n        ZkNodeProps cProps = ZkNodeProps.load(zkClient.getData(collectionPath, null, null, true));\n        if (cProps.containsKey(ZkController.CONFIGNAME_PROP)) {\n          break;\n        }\n      }\n\n      try {\n        configNames = zkClient.getChildren(ZkConfigManager.CONFIGS_ZKNODE, null,\n            true);\n      } catch (NoNodeException e) {\n        // just keep trying\n      }\n\n      // check if there's a config set with the same name as the collection\n      if (configNames != null && configNames.contains(collection)) {\n        log.info(\n            \"Could not find explicit collection configName, but found config name matching collection name - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, collection);\n        break;\n      }\n      // if _default exists, use that\n      if (configNames != null && configNames.contains(ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME)) {\n        log.info(\n            \"Could not find explicit collection configName, but found _default config set - using that set.\");\n        collectionProps.put(ZkController.CONFIGNAME_PROP, ConfigSetsHandlerApi.DEFAULT_CONFIGSET_NAME);\n        break;\n      }\n      // if there is only one conf, use that\n      if (configNames != null && configNames.size() == 1) {\n        // no config set named, but there is only 1 - use it\n        log.info(\"Only one config set found in zk - using it:\" + configNames.get(0));\n        collectionProps.put(ZkController.CONFIGNAME_PROP, configNames.get(0));\n        break;\n      }\n\n      log.info(\"Could not find collection configName - pausing for 3 seconds and trying again - try: \" + retry);\n      Thread.sleep(3000);\n    }\n    if (retry == retryLimt) {\n      log.error(\"Could not find configName for collection \" + collection);\n      throw new ZooKeeperException(\n          SolrException.ErrorCode.SERVER_ERROR,\n          \"Could not find configName for collection \" + collection + \" found:\" + configNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"197bbedf08450ade98a11f4a0001448059666bec":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","197bbedf08450ade98a11f4a0001448059666bec"],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","197bbedf08450ade98a11f4a0001448059666bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["197bbedf08450ade98a11f4a0001448059666bec","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","9856095f7afb5a607bf5e65077615ed91273508c","28288370235ed02234a64753cdbf0c6ec096304a"],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"9856095f7afb5a607bf5e65077615ed91273508c":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}