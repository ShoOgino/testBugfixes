{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(SlowMultiReaderWrapper.wrap(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(searcher.getIndexReader());\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans = snq.getSpans(new SlowMultiReaderWrapper(searcher.getIndexReader()));\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpans#testSpanNearUnOrdered().mjava","sourceNew":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","sourceOld":"  public void testSpanNearUnOrdered() throws Exception {\n\n    //See http://www.gossamer-threads.com/lists/lucene/java-dev/52270 for discussion about this test\n    SpanNearQuery snq;\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\") },\n                              0,\n                              false);\n    Spans spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n    assertTrue(\"Has next and it shouldn't: \" + spans.doc(), spans.next() == false);\n\n    SpanNearQuery u1u2 = new SpanNearQuery(new SpanQuery[]{makeSpanTermQuery(\"u1\"),\n                                makeSpanTermQuery(\"u2\")}, 0, false);\n    snq = new SpanNearQuery(\n                              new SpanQuery[] {\n                                u1u2,\n                                makeSpanTermQuery(\"u2\")\n                              },\n                              1,\n                              false);\n    spans =  MultiSpansWrapper.wrap(searcher.getTopReaderContext(), snq);\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    //unordered spans can be subsets\n    assertEquals(\"doc\", 4, spans.doc());\n    assertEquals(\"start\", 1, spans.start());\n    assertEquals(\"end\", 3, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 5, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 8, spans.doc());\n    assertEquals(\"start\", 2, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 9, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 4, spans.end());\n\n    assertTrue(\"Does not have next and it should\", spans.next());\n    assertEquals(\"doc\", 10, spans.doc());\n    assertEquals(\"start\", 0, spans.start());\n    assertEquals(\"end\", 2, spans.end());\n\n    assertTrue(\"Has next and it shouldn't\", spans.next() == false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["51c34a3639838887e7997850b6be80f838a4d6f7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c8323d210478d76a02372693d254b69aac614689"],"51c34a3639838887e7997850b6be80f838a4d6f7":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","51c34a3639838887e7997850b6be80f838a4d6f7"],"3bb13258feba31ab676502787ab2e1779f129b7a":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","51c34a3639838887e7997850b6be80f838a4d6f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"51c34a3639838887e7997850b6be80f838a4d6f7":["c8323d210478d76a02372693d254b69aac614689","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["51c34a3639838887e7997850b6be80f838a4d6f7","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}