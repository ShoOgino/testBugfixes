{"path":"src/java/org/apache/solr/common/util/StrUtils#splitWS(String,boolean).mjava","commits":[{"id":"f9a06d6dd4713420efafb5bd917f8bd789482920","date":1181839199,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/StrUtils#splitWS(String,boolean).mjava","pathOld":"src/java/org/apache/solr/util/StrUtils#splitWS(String,boolean).mjava","sourceNew":"  public static List<String> splitWS(String s, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      char ch = s.charAt(pos++);\n      if (Character.isWhitespace(ch)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        continue;\n      }\n\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public static List<String> splitWS(String s, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      char ch = s.charAt(pos++);\n      if (Character.isWhitespace(ch)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        continue;\n      }\n\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/StrUtils#splitWS(String,boolean).mjava","pathOld":"src/java/org/apache/solr/common/util/StrUtils#splitWS(String,boolean).mjava","sourceNew":"  public static List<String> splitWS(String s, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      char ch = s.charAt(pos++);\n      if (Character.isWhitespace(ch)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        continue;\n      }\n\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","sourceOld":"  public static List<String> splitWS(String s, boolean decode) {\n    ArrayList<String> lst = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      char ch = s.charAt(pos++);\n      if (Character.isWhitespace(ch)) {\n        if (sb.length() > 0) {\n          lst.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        continue;\n      }\n\n      if (ch=='\\\\') {\n        if (!decode) sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n        if (decode) {\n          switch(ch) {\n            case 'n' : ch='\\n'; break;\n            case 't' : ch='\\t'; break;\n            case 'r' : ch='\\r'; break;\n            case 'b' : ch='\\b'; break;\n            case 'f' : ch='\\f'; break;\n          }\n        }\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      lst.add(sb.toString());\n    }\n\n    return lst;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f9a06d6dd4713420efafb5bd917f8bd789482920"],"f9a06d6dd4713420efafb5bd917f8bd789482920":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}