{"path":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91425189981f3694858ce3b8637bc8aa0502e79a","date":1272950709,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      if (!path.delete())\n        throw new LockReleaseFailedException(\"failed to delete \" + path);\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/NativeFSLock[NativeFSLockFactory]#release().mjava","sourceNew":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void release() throws IOException {\n    if (lockExists()) {\n      try {\n        lock.release();\n      } finally {\n        lock = null;\n        try {\n          channel.close();\n        } finally {\n          channel = null;\n          try {\n            f.close();\n          } finally {\n            f = null;\n            synchronized(LOCK_HELD) {\n              LOCK_HELD.remove(path.getCanonicalPath());\n            }\n          }\n        }\n      }\n      // LUCENE-2421: we don't care anymore if the file cannot be deleted\n      // because it's held up by another process (e.g. AntiVirus). NativeFSLock\n      // does not depend on the existence/absence of the lock file\n      path.delete();\n    } else {\n      // if we don't hold the lock, and somebody still called release(), for\n      // example as a result of calling IndexWriter.unlock(), we should attempt\n      // to obtain the lock and release it. If the obtain fails, it means the\n      // lock cannot be released, and we should throw a proper exception rather\n      // than silently failing/not doing anything.\n      boolean obtained = false;\n      try {\n        if (!(obtained = obtain())) {\n          throw new LockReleaseFailedException(\n              \"Cannot forcefully unlock a NativeFSLock which is held by another indexer component: \"\n                  + path);\n        }\n      } finally {\n        if (obtained) {\n          release();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["91425189981f3694858ce3b8637bc8aa0502e79a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91425189981f3694858ce3b8637bc8aa0502e79a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"91425189981f3694858ce3b8637bc8aa0502e79a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["91425189981f3694858ce3b8637bc8aa0502e79a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}