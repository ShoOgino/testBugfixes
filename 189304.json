{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTranspose().mjava","commits":[{"id":"144ca7fb3ae89fdca80610b02273885f1e43dba0","date":1509382753,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTranspose().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTranspose().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testTranspose().mjava","sourceNew":"  @Test\n  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testTranspose() throws Exception {\n    String cexpr = \"let(a=matrix(array(1,2,3), array(4,5,6)), b=transpose(a))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"b\");\n    assertEquals(out.size(), 3);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 2);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 4.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 2);\n    assertEquals(array2.get(0).doubleValue(), 2.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n\n    List<Number> array3 = out.get(2);\n    assertEquals(array3.size(), 2);\n    assertEquals(array3.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(array3.get(1).doubleValue(), 6.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["144ca7fb3ae89fdca80610b02273885f1e43dba0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["144ca7fb3ae89fdca80610b02273885f1e43dba0"],"144ca7fb3ae89fdca80610b02273885f1e43dba0":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}