{"path":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","commits":[{"id":"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0","date":1096997448,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","pathOld":"/dev/null","sourceNew":"  public Collection getIndexedFieldNames (Field.TermVector tvSpec){\n    boolean storedTermVector;\n    boolean storePositionWithTermVector;\n    boolean storeOffsetWithTermVector;\n    \n    if(tvSpec == Field.TermVector.NO){\n      storedTermVector = false;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.YES){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = true;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = true;\n    }\n    else{\n      throw new IllegalArgumentException(\"unknown termVector parameter \" + tvSpec);\n    }\n    \n    // maintain a unique set of field names\n    Set fieldSet = new HashSet();\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && fi.storeTermVector == storedTermVector && \n          fi.storePositionWithTermVector == storePositionWithTermVector && \n          fi.storeOffsetWithTermVector == storeOffsetWithTermVector){\n        fieldSet.add(fi.name);\n      }\n    }\n    return fieldSet;    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c687c6cd32bfdceab8fd653a483592265774d97","date":1104356145,"type":3,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","sourceNew":"  /**\n   * @see IndexReader#getIndexedFieldNames(Field.TermVector tvSpec)\n   * @deprecated  Replaced by {@link #getFieldNames (IndexReader.FieldOption fldOption)}\n   */\n  public Collection getIndexedFieldNames (Field.TermVector tvSpec){\n    boolean storedTermVector;\n    boolean storePositionWithTermVector;\n    boolean storeOffsetWithTermVector;\n    \n    if(tvSpec == Field.TermVector.NO){\n      storedTermVector = false;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.YES){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = true;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = true;\n    }\n    else{\n      throw new IllegalArgumentException(\"unknown termVector parameter \" + tvSpec);\n    }\n    \n    // maintain a unique set of field names\n    Set fieldSet = new HashSet();\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && fi.storeTermVector == storedTermVector && \n          fi.storePositionWithTermVector == storePositionWithTermVector && \n          fi.storeOffsetWithTermVector == storeOffsetWithTermVector){\n        fieldSet.add(fi.name);\n      }\n    }\n    return fieldSet;    \n  }\n\n","sourceOld":"  public Collection getIndexedFieldNames (Field.TermVector tvSpec){\n    boolean storedTermVector;\n    boolean storePositionWithTermVector;\n    boolean storeOffsetWithTermVector;\n    \n    if(tvSpec == Field.TermVector.NO){\n      storedTermVector = false;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.YES){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = true;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = true;\n    }\n    else{\n      throw new IllegalArgumentException(\"unknown termVector parameter \" + tvSpec);\n    }\n    \n    // maintain a unique set of field names\n    Set fieldSet = new HashSet();\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && fi.storeTermVector == storedTermVector && \n          fi.storePositionWithTermVector == storePositionWithTermVector && \n          fi.storeOffsetWithTermVector == storeOffsetWithTermVector){\n        fieldSet.add(fi.name);\n      }\n    }\n    return fieldSet;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","sourceNew":"  /**\n   * @see IndexReader#getIndexedFieldNames(Field.TermVector tvSpec)\n   * @deprecated  Replaced by {@link #getFieldNames (IndexReader.FieldOption fldOption)}\n   */\n  public Collection getIndexedFieldNames (Field.TermVector tvSpec){\n    boolean storedTermVector;\n    boolean storePositionWithTermVector;\n    boolean storeOffsetWithTermVector;\n\n    if(tvSpec == Field.TermVector.NO){\n      storedTermVector = false;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.YES){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = true;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = true;\n    }\n    else{\n      throw new IllegalArgumentException(\"unknown termVector parameter \" + tvSpec);\n    }\n\n    // maintain a unique set of field names\n    Set fieldSet = new HashSet();\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && fi.storeTermVector == storedTermVector &&\n          fi.storePositionWithTermVector == storePositionWithTermVector &&\n          fi.storeOffsetWithTermVector == storeOffsetWithTermVector){\n        fieldSet.add(fi.name);\n      }\n    }\n    return fieldSet;\n  }\n\n","sourceOld":"  /**\n   * @see IndexReader#getIndexedFieldNames(Field.TermVector tvSpec)\n   * @deprecated  Replaced by {@link #getFieldNames (IndexReader.FieldOption fldOption)}\n   */\n  public Collection getIndexedFieldNames (Field.TermVector tvSpec){\n    boolean storedTermVector;\n    boolean storePositionWithTermVector;\n    boolean storeOffsetWithTermVector;\n    \n    if(tvSpec == Field.TermVector.NO){\n      storedTermVector = false;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.YES){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = true;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = true;\n    }\n    else{\n      throw new IllegalArgumentException(\"unknown termVector parameter \" + tvSpec);\n    }\n    \n    // maintain a unique set of field names\n    Set fieldSet = new HashSet();\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && fi.storeTermVector == storedTermVector && \n          fi.storePositionWithTermVector == storePositionWithTermVector && \n          fi.storeOffsetWithTermVector == storeOffsetWithTermVector){\n        fieldSet.add(fi.name);\n      }\n    }\n    return fieldSet;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/SegmentReader#getIndexedFieldNames(Field.TermVector).mjava","sourceNew":null,"sourceOld":"  /**\n   * @see IndexReader#getIndexedFieldNames(Field.TermVector tvSpec)\n   * @deprecated  Replaced by {@link #getFieldNames (IndexReader.FieldOption fldOption)}\n   */\n  public Collection getIndexedFieldNames (Field.TermVector tvSpec){\n    boolean storedTermVector;\n    boolean storePositionWithTermVector;\n    boolean storeOffsetWithTermVector;\n\n    if(tvSpec == Field.TermVector.NO){\n      storedTermVector = false;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.YES){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = false;\n    }\n    else if(tvSpec == Field.TermVector.WITH_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = false;\n      storeOffsetWithTermVector = true;\n    }\n    else if(tvSpec == Field.TermVector.WITH_POSITIONS_OFFSETS){\n      storedTermVector = true;\n      storePositionWithTermVector = true;\n      storeOffsetWithTermVector = true;\n    }\n    else{\n      throw new IllegalArgumentException(\"unknown termVector parameter \" + tvSpec);\n    }\n\n    // maintain a unique set of field names\n    Set fieldSet = new HashSet();\n    for (int i = 0; i < fieldInfos.size(); i++) {\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      if (fi.isIndexed && fi.storeTermVector == storedTermVector &&\n          fi.storePositionWithTermVector == storePositionWithTermVector &&\n          fi.storeOffsetWithTermVector == storeOffsetWithTermVector){\n        fieldSet.add(fi.name);\n      }\n    }\n    return fieldSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"950f3c7592cb559e2534e5089c78833250e156a3":["7c687c6cd32bfdceab8fd653a483592265774d97"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["950f3c7592cb559e2534e5089c78833250e156a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"7c687c6cd32bfdceab8fd653a483592265774d97":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"]},"commit2Childs":{"950f3c7592cb559e2534e5089c78833250e156a3":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6177f0f28ace66d1538b1e6ac5f1773e5449a0b0"],"6177f0f28ace66d1538b1e6ac5f1773e5449a0b0":["7c687c6cd32bfdceab8fd653a483592265774d97"],"7c687c6cd32bfdceab8fd653a483592265774d97":["950f3c7592cb559e2534e5089c78833250e156a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}