{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62cc423073d23f01208c6cf85844dedd80011121","date":1454731549,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/geopoint/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["937923083e4d137932336fc80f3d78758ff698a6","62cc423073d23f01208c6cf85844dedd80011121"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","62cc423073d23f01208c6cf85844dedd80011121"],"62cc423073d23f01208c6cf85844dedd80011121":["937923083e4d137932336fc80f3d78758ff698a6"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["5a207d19eac354d649c3f0e2cce070017c78125e"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a093d23e938d132b81b5f2de3d6b168afe3608e"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"62cc423073d23f01208c6cf85844dedd80011121":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["5a207d19eac354d649c3f0e2cce070017c78125e","62cc423073d23f01208c6cf85844dedd80011121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}