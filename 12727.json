{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_shortestPaths(FST[T],FST.Arc[T],Comparator[T],int).mjava","commits":[{"id":"2a6ee6c302710254b6c2474ccd2755f9f2323ee3","date":1330700384,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_shortestPaths(FST[T],FST.Arc[T],Comparator[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#shortestPaths(FST[Long],FST.Arc[Long],int).mjava","sourceNew":"  /** Starting from node, find the top N min cost \n   * completions to a final node.\n   *\n   *  <p>NOTE: you must share the outputs when you build the\n   *  FST (pass doShare=true to {@link\n   *  PositiveIntOutputs#getSingleton}). */\n\n  public static <T> MinResult<T>[] shortestPaths(FST<T> fst, FST.Arc<T> fromNode, Comparator<T> comparator, int topN) throws IOException {\n    return new TopNSearcher<T>(fst, fromNode, topN, comparator).search();\n  } \n\n","sourceOld":"  /** Starting from node, find the top N min cost (Long\n   *  output) completions to a final node.\n   *\n   *  <p>NOTE: you must share the outputs when you build the\n   *  FST (pass doShare=true to {@link\n   *  PositiveIntOutputs#getSingleton}). */\n\n  public static MinResult[] shortestPaths(FST<Long> fst, FST.Arc<Long> fromNode, int topN) throws IOException {\n    return new TopNSearcher(fst, fromNode, topN).search();\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_shortestPaths(FST[T],FST.Arc[T],Comparator[T],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Starting from node, find the top N min cost \n   * completions to a final node.\n   *\n   *  <p>NOTE: you must share the outputs when you build the\n   *  FST (pass doShare=true to {@link\n   *  PositiveIntOutputs#getSingleton}). */\n\n  public static <T> MinResult<T>[] shortestPaths(FST<T> fst, FST.Arc<T> fromNode, Comparator<T> comparator, int topN) throws IOException {\n    return new TopNSearcher<T>(fst, fromNode, topN, comparator).search();\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce825e9276493231308229152c48f755ce1a0a5","date":1348871483,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_shortestPaths(FST[T],FST.Arc[T],T,Comparator[T],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_shortestPaths(FST[T],FST.Arc[T],Comparator[T],int).mjava","sourceNew":"  /** Starting from node, find the top N min cost \n   *  completions to a final node.\n   *\n   *  <p>NOTE: you must share the outputs when you build the\n   *  FST (pass doShare=true to {@link\n   *  PositiveIntOutputs#getSingleton}). */\n  public static <T> MinResult<T>[] shortestPaths(FST<T> fst, FST.Arc<T> fromNode, T startOutput, Comparator<T> comparator, int topN,\n                                                 boolean allowEmptyString) throws IOException {\n    TopNSearcher<T> searcher = new TopNSearcher<T>(fst, topN, comparator);\n\n    // since this search is initialized with a single start node \n    // it is okay to start with an empty input path here\n    searcher.addStartPaths(fromNode, startOutput, allowEmptyString, new IntsRef());\n    return searcher.search();\n  } \n\n","sourceOld":"  /** Starting from node, find the top N min cost \n   * completions to a final node.\n   *\n   *  <p>NOTE: you must share the outputs when you build the\n   *  FST (pass doShare=true to {@link\n   *  PositiveIntOutputs#getSingleton}). */\n\n  public static <T> MinResult<T>[] shortestPaths(FST<T> fst, FST.Arc<T> fromNode, Comparator<T> comparator, int topN) throws IOException {\n    return new TopNSearcher<T>(fst, fromNode, topN, comparator).search();\n  } \n\n","bugFix":null,"bugIntro":["414aae1db83a83d247caa9514e383e4ca3d43da5","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ce825e9276493231308229152c48f755ce1a0a5":["2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"2a6ee6c302710254b6c2474ccd2755f9f2323ee3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6ce825e9276493231308229152c48f755ce1a0a5"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","2a6ee6c302710254b6c2474ccd2755f9f2323ee3"],"6ce825e9276493231308229152c48f755ce1a0a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a6ee6c302710254b6c2474ccd2755f9f2323ee3":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ce825e9276493231308229152c48f755ce1a0a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}