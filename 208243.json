{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"modules/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","sourceOld":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"  /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s) {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n          limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","sourceOld":"    /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n    protected int replace_s(int c_bra, int c_ket, CharSequence s)\n    {\n\tfinal int adjustment = s.length() - (c_ket - c_bra);\n\tfinal int newLength = limit + adjustment;\n\t//resize if necessary\n\tif (newLength > current.length) {\n\t  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n\t  System.arraycopy(current, 0, newBuffer, 0, limit);\n\t  current = newBuffer;\n\t}\n\t// if the substring being replaced is longer or shorter than the\n\t// replacement, need to shift things around\n\tif (adjustment != 0 && c_ket < limit) {\n\t  System.arraycopy(current, c_ket, current, c_bra + s.length(), \n\t      limit - c_ket);\n\t}\n\t// insert the replacement text\n\t// Note, faster is s.getChars(0, s.length(), current, c_bra);\n\t// but would have to duplicate this method for both String and StringBuilder\n\tfor (int i = 0; i < s.length(); i++)\n\t  current[c_bra + i] = s.charAt(i);\n\t\n\tlimit += adjustment;\n\tif (cursor >= c_ket) cursor += adjustment;\n\telse if (cursor > c_bra) cursor = c_bra;\n\treturn adjustment;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"  /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s) {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[ArrayUtil.oversize(newLength, Character.BYTES)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n          limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","sourceOld":"  /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s) {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n          limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"  /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s) {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[ArrayUtil.oversize(newLength, Character.BYTES)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n          limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","sourceOld":"  /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s) {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n          limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram#replace_s(int,int,CharSequence).mjava","sourceNew":"  /* to replace chars between c_bra and c_ket in current by the\n   * chars in s.\n   */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s)\n  {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[oversize(newLength)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n        limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","sourceOld":"  /* to replace chars between c_bra and c_ket in current by the\n     * chars in s.\n     */\n  protected int replace_s(int c_bra, int c_ket, CharSequence s) {\n    final int adjustment = s.length() - (c_ket - c_bra);\n    final int newLength = limit + adjustment;\n    //resize if necessary\n    if (newLength > current.length) {\n      char newBuffer[] = new char[ArrayUtil.oversize(newLength, Character.BYTES)];\n      System.arraycopy(current, 0, newBuffer, 0, limit);\n      current = newBuffer;\n    }\n    // if the substring being replaced is longer or shorter than the\n    // replacement, need to shift things around\n    if (adjustment != 0 && c_ket < limit) {\n      System.arraycopy(current, c_ket, current, c_bra + s.length(),\n          limit - c_ket);\n    }\n    // insert the replacement text\n    // Note, faster is s.getChars(0, s.length(), current, c_bra);\n    // but would have to duplicate this method for both String and StringBuilder\n    for (int i = 0; i < s.length(); i++)\n      current[c_bra + i] = s.charAt(i);\n\n    limit += adjustment;\n    if (cursor >= c_ket) cursor += adjustment;\n    else if (cursor > c_bra) cursor = c_bra;\n    return adjustment;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["419a8f52c6635419beb951255cacbbb281044c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"419a8f52c6635419beb951255cacbbb281044c57":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}