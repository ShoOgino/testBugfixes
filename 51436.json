{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"/dev/null","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"/dev/null","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"/dev/null","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66a31a416e3550794ff2e245570885b7193952b6","date":1298453724,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"692804e172a5810620fac3194db7b7616a21ad3d","date":1298513499,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41a7130051d507b3a37c0b9f41f5937dfed6a88e","date":1302628279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n        final boolean isFinal = node.isFinal;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/Builder#compilePrevTail(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/Builder#compilePrevTail(int).mjava","sourceNew":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void compilePrevTail(int prefixLenPlus1) throws IOException {\n    assert prefixLenPlus1 >= 1;\n    //System.out.println(\"  compileTail \" + prefixLenPlus1);\n    for(int idx=lastInput.length; idx >= prefixLenPlus1; idx--) {\n      boolean doPrune = false;\n      boolean doCompile = false;\n\n      final UnCompiledNode<T> node = frontier[idx];\n      final UnCompiledNode<T> parent = frontier[idx-1];\n\n      if (node.inputCount < minSuffixCount1) {\n        doPrune = true;\n        doCompile = true;\n      } else if (idx > prefixLenPlus1) {\n        // prune if parent's inputCount is less than suffixMinCount2\n        if (parent.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && parent.inputCount == 1) {\n          // my parent, about to be compiled, doesn't make the cut, so\n          // I'm definitely pruned \n\n          // if pruneCount2 is 1, we keep only up\n          // until the 'distinguished edge', ie we keep only the\n          // 'divergent' part of the FST. if my parent, about to be\n          // compiled, has inputCount 1 then we are already past the\n          // distinguished edge.  NOTE: this only works if\n          // the FST outputs are not \"compressible\" (simple\n          // ords ARE compressible).\n          doPrune = true;\n        } else {\n          // my parent, about to be compiled, does make the cut, so\n          // I'm definitely not pruned \n          doPrune = false;\n        }\n        doCompile = true;\n      } else {\n        // if pruning is disabled (count is 0) we can always\n        // compile current node\n        doCompile = minSuffixCount2 == 0;\n      }\n\n      //System.out.println(\"    label=\" + ((char) lastInput.ints[lastInput.offset+idx-1]) + \" idx=\" + idx + \" inputCount=\" + frontier[idx].inputCount + \" doCompile=\" + doCompile + \" doPrune=\" + doPrune);\n\n      if (node.inputCount < minSuffixCount2 || minSuffixCount2 == 1 && node.inputCount == 1) {\n        // drop all arcs\n        for(int arcIdx=0;arcIdx<node.numArcs;arcIdx++) {\n          @SuppressWarnings(\"unchecked\") final UnCompiledNode<T> target = (UnCompiledNode<T>) node.arcs[arcIdx].target;\n          target.clear();\n        }\n        node.numArcs = 0;\n      }\n\n      if (doPrune) {\n        // this node doesn't make it -- deref it\n        node.clear();\n        parent.deleteLast(lastInput.ints[lastInput.offset+idx-1], node);\n      } else {\n\n        if (minSuffixCount2 != 0) {\n          compileAllTargets(node);\n        }\n        final T nextFinalOutput = node.output;\n\n        // We \"fake\" the node as being final if it has no\n        // outgoing arcs; in theory we could leave it\n        // as non-final (the FST can represent this), but\n        // FSTEnum, Util, etc., have trouble w/ non-final\n        // dead-end states:\n        final boolean isFinal = node.isFinal || node.numArcs == 0;\n\n        if (doCompile) {\n          // this node makes it and we now compile it.  first,\n          // compile any targets that were previously\n          // undecided:\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             compileNode(node),\n                             nextFinalOutput,\n                             isFinal);\n        } else {\n          // replaceLast just to install\n          // nextFinalOutput/isFinal onto the arc\n          parent.replaceLast(lastInput.ints[lastInput.offset + idx-1],\n                             node,\n                             nextFinalOutput,\n                             isFinal);\n          // this node will stay in play for now, since we are\n          // undecided on whether to prune it.  later, it\n          // will be either compiled or pruned, so we must\n          // allocate a new node:\n          frontier[idx] = new UnCompiledNode<T>(this, idx);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"962d04139994fce5193143ef35615499a9a96d78":["692804e172a5810620fac3194db7b7616a21ad3d","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["66a31a416e3550794ff2e245570885b7193952b6"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"692804e172a5810620fac3194db7b7616a21ad3d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","66a31a416e3550794ff2e245570885b7193952b6"],"66a31a416e3550794ff2e245570885b7193952b6":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","66a31a416e3550794ff2e245570885b7193952b6"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a3776dccca01c11e7046323cfad46a3b4a471233":["66a31a416e3550794ff2e245570885b7193952b6","41a7130051d507b3a37c0b9f41f5937dfed6a88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["692804e172a5810620fac3194db7b7616a21ad3d"],"41a7130051d507b3a37c0b9f41f5937dfed6a88e":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","66a31a416e3550794ff2e245570885b7193952b6"],"692804e172a5810620fac3194db7b7616a21ad3d":["962d04139994fce5193143ef35615499a9a96d78"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"66a31a416e3550794ff2e245570885b7193952b6":["41a7130051d507b3a37c0b9f41f5937dfed6a88e","692804e172a5810620fac3194db7b7616a21ad3d","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}