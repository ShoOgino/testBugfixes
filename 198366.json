{"path":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","commits":[{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterAtomicReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(reader);\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    IndexReader reader = new TestReader(DirectoryReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","82eadba6520ccc12cf924caeab2390501879f631"],"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","505bff044e47a553f461b6f4484d1d08faf4ac85"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(reader);\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(MultiFields.getLiveDocs(reader), null, PostingsEnum.FLAG_ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader), null);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(MultiFields.getLiveDocs(reader), null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(MultiFields.getLiveDocs(reader), null, PostingsEnum.FLAG_ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(MultiFields.getLiveDocs(reader), null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(MultiFields.getLiveDocs(reader), null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(MultiFields.getLiveDocs(reader), null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(getOnlyLeafReader(DirectoryReader.open(directory)))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(DirectoryReader.open(directory))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","eafd816608011f66422f3052c37962973582d12a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFilterLeafReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(getOnlyLeafReader(DirectoryReader.open(directory)))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiTerms.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));\n\n    Document d1 = new Document();\n    d1.add(newTextField(\"default\", \"one two\", Field.Store.YES));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newTextField(\"default\", \"one three\", Field.Store.YES));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newTextField(\"default\", \"two four\", Field.Store.YES));\n    writer.addDocument(d3);\n    writer.forceMerge(1);\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((BaseDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(new MockAnalyzer(random())));\n    try (LeafReader reader = new TestReader(getOnlyLeafReader(DirectoryReader.open(directory)))) {\n      writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    }\n    writer.close();\n    IndexReader reader = DirectoryReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    PostingsEnum positions = terms.postings(null, PostingsEnum.ALL);\n    while (positions.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"51f5280f31484820499077f41fcdfe92d527d9dc":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}