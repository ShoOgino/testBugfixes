{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = MultiFields.getFields(reader);\n    BytesRef br = new BytesRef();\n    Bits delDocs = MultiFields.getDeletedDocs(reader);\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.text());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":["4107dd39b127d892359c5c1d67d0f14d92f1a9bf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = MultiFields.getFields(reader);\n    BytesRef br = new BytesRef();\n    Bits delDocs = MultiFields.getDeletedDocs(reader);\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = MultiFields.getFields(reader);\n    BytesRef br = new BytesRef();\n    Bits delDocs = MultiFields.getDeletedDocs(reader);\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.text());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = MultiFields.getFields(reader);\n    BytesRef br = new BytesRef();\n    Bits delDocs = MultiFields.getDeletedDocs(reader);\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n\t{\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n        TermDocs td = reader.termDocs();\n        try\n        {\n            for (Iterator<Term> iter = terms.iterator(); iter.hasNext();)\n            {\n                Term term = iter.next();\n                td.seek(term);\n                while (td.next())\n                {\n                    result.set(td.doc());\n                }\n            }\n        }\n        finally\n        {\n            td.close();\n        }\n        return result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d302ba328993a5b449c2e0b3b5e15ae53e45879","date":1281609097,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = MultiFields.getFields(reader);\n    BytesRef br = new BytesRef();\n    Bits delDocs = MultiFields.getDeletedDocs(reader);\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = MultiFields.getFields(reader);\n    BytesRef br = new BytesRef();\n    Bits delDocs = MultiFields.getDeletedDocs(reader);\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException {\n    IndexReader reader = context.reader;\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/TermsFilter#getDocIdSet(IndexReader).mjava","sourceNew":null,"sourceOld":"/* (non-Javadoc)\n   * @see org.apache.lucene.search.Filter#getDocIdSet(org.apache.lucene.index.IndexReader)\n\t */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    OpenBitSet result=new OpenBitSet(reader.maxDoc());\n    Fields fields = reader.fields();\n    BytesRef br = new BytesRef();\n    Bits delDocs = reader.getDeletedDocs();\n    if (fields != null) {\n      String lastField = null;\n      Terms termsC = null;\n      TermsEnum termsEnum = null;\n      DocsEnum docs = null;\n      for (Iterator<Term> iter = terms.iterator(); iter.hasNext();) {\n        Term term = iter.next();\n        if (term.field() != lastField) {\n          termsC = fields.terms(term.field());\n          termsEnum = termsC.iterator();\n          lastField = term.field();\n        }\n\n        if (terms != null) {\n          br.copy(term.bytes());\n          if (termsEnum.seek(br) == TermsEnum.SeekStatus.FOUND) {\n            docs = termsEnum.docs(delDocs, docs);\n            while(docs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n              result.set(docs.docID());\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","0d302ba328993a5b449c2e0b3b5e15ae53e45879"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["0d302ba328993a5b449c2e0b3b5e15ae53e45879","5f4e87790277826a2aea119328600dfb07761f32"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"0d302ba328993a5b449c2e0b3b5e15ae53e45879":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}