{"path":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","commits":[{"id":"d6d3ad4230a9094e97925f9395cf6db4729284d9","date":1335503918,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"/dev/null","sourceNew":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ENGLISH);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ROOT);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","sourceOld":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ENGLISH);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ROOT);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","sourceOld":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ENGLISH);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ROOT);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","sourceOld":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ENGLISH);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ROOT);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","sourceOld":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ENGLISH);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd330c9d05eacbd6e952fe0dea852e7ae037eb50","date":1398873035,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  public static Version parseLeniently(String version) {\n    final String parsedMatchVersion = version\n        .toUpperCase(Locale.ROOT)\n        .replaceFirst(\"^(\\\\d+)\\\\.(\\\\d+)$\", \"LUCENE_$1_$2\")\n        .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"LUCENE_$1_$2\");\n    return Version.valueOf(parsedMatchVersion);\n  }\n\n","sourceOld":"  public static Version parseLeniently(String version) {\n    String parsedMatchVersion = version.toUpperCase(Locale.ROOT);\n    return Version.valueOf(parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   */\n  public static Version parseLeniently(String version) {\n    if (version.equals(\"LATEST\") || version.equals(\"LUCENE_CURRENT\")) return LATEST;\n    final String parsedMatchVersion = version\n        .toUpperCase(Locale.ROOT)\n        .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n        .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n        .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n    return parse(parsedMatchVersion);\n  }\n\n","sourceOld":"  public static Version parseLeniently(String version) {\n    final String parsedMatchVersion = version\n        .toUpperCase(Locale.ROOT)\n        .replaceFirst(\"^(\\\\d+)\\\\.(\\\\d+)$\", \"LUCENE_$1_$2\")\n        .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"LUCENE_$1_$2\");\n    return Version.valueOf(parsedMatchVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a","date":1410373276,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   */\n  public static Version parseLeniently(String version) {\n    version = version.toUpperCase(Locale.ROOT);\n    switch (version) {\n      case \"LATEST\":\n      case \"LUCENE_CURRENT\":\n        return LATEST;\n      case \"LUCENE_4_0_0\":\n        return LUCENE_4_0_0;\n      case \"LUCENE_4_0_0_ALPHA\":\n        return LUCENE_4_0_0_ALPHA;\n      case \"LUCENE_4_0_0_BETA\":\n        return LUCENE_4_0_0_BETA;\n      default:\n        version = version\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n          .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n        return parse(version);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   */\n  public static Version parseLeniently(String version) {\n    if (version.equals(\"LATEST\") || version.equals(\"LUCENE_CURRENT\")) return LATEST;\n    final String parsedMatchVersion = version\n        .toUpperCase(Locale.ROOT)\n        .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n        .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n        .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n    return parse(parsedMatchVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ff533a28b45377dffc601931e60e19492e6384","date":1411292651,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   *\n   * @lucene.internal\n   */\n  public static Version parseLeniently(String version) throws ParseException {\n    String versionOrig = version;\n    version = version.toUpperCase(Locale.ROOT);\n    switch (version) {\n      case \"LATEST\":\n      case \"LUCENE_CURRENT\":\n        return LATEST;\n      case \"LUCENE_4_0_0\":\n        return LUCENE_4_0_0;\n      case \"LUCENE_4_0_0_ALPHA\":\n        return LUCENE_4_0_0_ALPHA;\n      case \"LUCENE_4_0_0_BETA\":\n        return LUCENE_4_0_0_BETA;\n      default:\n        version = version\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n          .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n        try {\n          return parse(version);\n        } catch (ParseException pe) {\n          ParseException pe2 = new ParseException(\"failed to parse lenient version string \\\"\" + versionOrig + \"\\\": \" + pe.getMessage(), 0);\n          pe2.initCause(pe);\n          throw pe2;\n        }\n    }\n  }\n\n","sourceOld":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   */\n  public static Version parseLeniently(String version) {\n    version = version.toUpperCase(Locale.ROOT);\n    switch (version) {\n      case \"LATEST\":\n      case \"LUCENE_CURRENT\":\n        return LATEST;\n      case \"LUCENE_4_0_0\":\n        return LUCENE_4_0_0;\n      case \"LUCENE_4_0_0_ALPHA\":\n        return LUCENE_4_0_0_ALPHA;\n      case \"LUCENE_4_0_0_BETA\":\n        return LUCENE_4_0_0_BETA;\n      default:\n        version = version\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n          .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n        return parse(version);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/Version#parseLeniently(String).mjava","sourceNew":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   *\n   * @lucene.internal\n   */\n  public static Version parseLeniently(String version) throws ParseException {\n    String versionOrig = version;\n    version = version.toUpperCase(Locale.ROOT);\n    switch (version) {\n      case \"LATEST\":\n      case \"LUCENE_CURRENT\":\n        return LATEST;\n      default:\n        version = version\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n          .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n        try {\n          return parse(version);\n        } catch (ParseException pe) {\n          ParseException pe2 = new ParseException(\"failed to parse lenient version string \\\"\" + versionOrig + \"\\\": \" + pe.getMessage(), 0);\n          pe2.initCause(pe);\n          throw pe2;\n        }\n    }\n  }\n\n","sourceOld":"  /**\n   * Parse the given version number as a constant or dot based version.\n   * <p>This method allows to use {@code \"LUCENE_X_Y\"} constant names,\n   * or version numbers in the format {@code \"x.y.z\"}.\n   *\n   * @lucene.internal\n   */\n  public static Version parseLeniently(String version) throws ParseException {\n    String versionOrig = version;\n    version = version.toUpperCase(Locale.ROOT);\n    switch (version) {\n      case \"LATEST\":\n      case \"LUCENE_CURRENT\":\n        return LATEST;\n      case \"LUCENE_4_0_0\":\n        return LUCENE_4_0_0;\n      case \"LUCENE_4_0_0_ALPHA\":\n        return LUCENE_4_0_0_ALPHA;\n      case \"LUCENE_4_0_0_BETA\":\n        return LUCENE_4_0_0_BETA;\n      default:\n        version = version\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)_(\\\\d+)$\", \"$1.$2.$3\")\n          .replaceFirst(\"^LUCENE_(\\\\d+)_(\\\\d+)$\", \"$1.$2.0\")\n          .replaceFirst(\"^LUCENE_(\\\\d)(\\\\d)$\", \"$1.$2.0\");\n        try {\n          return parse(version);\n        } catch (ParseException pe) {\n          ParseException pe2 = new ParseException(\"failed to parse lenient version string \\\"\" + versionOrig + \"\\\": \" + pe.getMessage(), 0);\n          pe2.initCause(pe);\n          throw pe2;\n        }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["057a1793765d068ea9302f1a29e21734ee58d41e"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d6d3ad4230a9094e97925f9395cf6db4729284d9","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["2acf500f78aa12b92e371fd89c719291986b6b90"],"46ff533a28b45377dffc601931e60e19492e6384":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"2acf500f78aa12b92e371fd89c719291986b6b90":["d6d3ad4230a9094e97925f9395cf6db4729284d9","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"057a1793765d068ea9302f1a29e21734ee58d41e":["dd330c9d05eacbd6e952fe0dea852e7ae037eb50"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["46ff533a28b45377dffc601931e60e19492e6384"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"46d8ada1fff8d18cb197c38c7983225162599948":["d6d3ad4230a9094e97925f9395cf6db4729284d9","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"5e2420f5fc81a6b19783f84250b5a5a3f19eb46a":["46ff533a28b45377dffc601931e60e19492e6384"],"d6d3ad4230a9094e97925f9395cf6db4729284d9":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6d3ad4230a9094e97925f9395cf6db4729284d9"],"dd330c9d05eacbd6e952fe0dea852e7ae037eb50":["057a1793765d068ea9302f1a29e21734ee58d41e"],"46ff533a28b45377dffc601931e60e19492e6384":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","dd330c9d05eacbd6e952fe0dea852e7ae037eb50","46d8ada1fff8d18cb197c38c7983225162599948"],"057a1793765d068ea9302f1a29e21734ee58d41e":["5e2420f5fc81a6b19783f84250b5a5a3f19eb46a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}