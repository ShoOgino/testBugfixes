{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db610e9e698f94982d7a1af15a21d6a30ef96b9d","date":1270586294,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n\n    IndexReader r2 = writer.getReader();\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory(random);\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3","date":1289732976,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012","c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriter writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    // test relies on no merges happening below:\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(new Field(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","date":1297938719,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer());\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), Store.YES, Index.NOT_ANALYZED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n    writer.setInfoStream(VERBOSE ? System.out : null);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean optimize = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!optimize, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1, true);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","date":1327857288,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    IndexReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    IndexReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    IndexReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testUpdateDocument().mjava","sourceNew":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","sourceOld":"  public void testUpdateDocument() throws Exception {\n    boolean doFullMerge = true;\n\n    Directory dir1 = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n    if (iwc.getMaxBufferedDocs() < 20) {\n      iwc.setMaxBufferedDocs(20);\n    }\n    // no merging\n    if (random.nextBoolean()) {\n      iwc.setMergePolicy(NoMergePolicy.NO_COMPOUND_FILES);\n    } else {\n      iwc.setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n    }\n    if (VERBOSE) {\n      System.out.println(\"TEST: make index\");\n    }\n    IndexWriter writer = new IndexWriter(dir1, iwc);\n\n    // create the index\n    createIndexNoClose(!doFullMerge, \"index1\", writer);\n\n    // writer.flush(false, true, true);\n\n    // get a reader\n    DirectoryReader r1 = writer.getReader();\n    assertTrue(r1.isCurrent());\n\n    String id10 = r1.document(10).getField(\"id\").stringValue();\n    \n    Document newDoc = r1.document(10);\n    newDoc.removeField(\"id\");\n    newDoc.add(newField(\"id\", Integer.toString(8000), StringField.TYPE_STORED));\n    writer.updateDocument(new Term(\"id\", id10), newDoc);\n    assertFalse(r1.isCurrent());\n\n    DirectoryReader r2 = writer.getReader();\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r2));\n    if (VERBOSE) {\n      System.out.println(\"TEST: verify id\");\n    }\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r2));\n    \n    r1.close();\n    writer.close();\n    assertTrue(r2.isCurrent());\n    \n    DirectoryReader r3 = IndexReader.open(dir1);\n    assertTrue(r3.isCurrent());\n    assertTrue(r2.isCurrent());\n    assertEquals(0, count(new Term(\"id\", id10), r3));\n    assertEquals(1, count(new Term(\"id\", Integer.toString(8000)), r3));\n\n    writer = new IndexWriter(dir1, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a b c\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    assertTrue(r2.isCurrent());\n    assertTrue(r3.isCurrent());\n\n    writer.close();\n\n    assertFalse(r2.isCurrent());\n    assertTrue(!r3.isCurrent());\n\n    r2.close();\n    r3.close();\n    \n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["3bb13258feba31ab676502787ab2e1779f129b7a","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["06584e6e98d592b34e1329b384182f368d2025e8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["132903c28af3aa6f67284b78de91c0f0a99488c2","c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762","3bb13258feba31ab676502787ab2e1779f129b7a"],"55c2bb1bcc0edd142e63b9230976dfc3e500dbe8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["db610e9e698f94982d7a1af15a21d6a30ef96b9d"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c2fba4d7635028ef0d3756854a7d3ec0f8c7c5c3":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["3bb13258feba31ab676502787ab2e1779f129b7a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"4fd64b6aa64934b0e35d9ec3e6c5a5c60ffc1762":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"06584e6e98d592b34e1329b384182f368d2025e8":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","55c2bb1bcc0edd142e63b9230976dfc3e500dbe8","5cab9a86bd67202d20b6adc463008c8e982b070a"],"db610e9e698f94982d7a1af15a21d6a30ef96b9d":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3bb13258feba31ab676502787ab2e1779f129b7a":["f1bdbf92da222965b46c0a942c3857ba56e5c638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}