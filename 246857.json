{"path":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71ef8a57fd983aa16ff74606fe28407492a0810b","date":1338919465,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getFactories().length );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getFactories()[0];\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory\",\n                 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items and configured the Log chain ok\n    assertEquals( 3, chained.getFactories().length );\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)chained.getFactories()[0];\n    assertEquals( 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9","date":1414167719,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getFactories().length );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getFactories()[0];\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getFactories().length );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getFactories()[0];\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory\",\n                 100, log.maxNumToLog );\n    \n    \n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getProcessors().size() );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getProcessors().get(0);\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getProcessors().get(0);\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getFactories().length );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getFactories()[0];\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getProcessors().size() );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getProcessors().get(0);\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getProcessors().get(0);\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getFactories().length );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getFactories()[0];\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getFactories()[0];\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a42da47d66be6c7cf5fba5e2234b3fd5da516859","date":1572336331,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/UpdateRequestProcessorFactoryTest#testConfiguration().mjava","sourceNew":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getProcessors().size() );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getProcessors().get(0);\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getProcessors().get(0);\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88, n9=99}}\", link.args.toString() );\n  }\n\n","sourceOld":"  public void testConfiguration() throws Exception \n  {\n    SolrCore core = h.getCore();\n\n    // make sure it loaded the factories\n    UpdateRequestProcessorChain chained = core.getUpdateProcessingChain( \"standard\" );\n    \n    // Make sure it got 3 items (4 configured, 1 is enable=false)\n    assertEquals(\"wrong number of (enabled) factories in chain\",\n                 3, chained.getProcessors().size() );\n\n    // first one should be log, and it should be configured properly\n    UpdateRequestProcessorFactory first = chained.getProcessors().get(0);\n    assertEquals(\"wrong factory at front of chain\",\n                 LogUpdateProcessorFactory.class, first.getClass());\n    LogUpdateProcessorFactory log = (LogUpdateProcessorFactory)first;\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.maxNumToLog\",\n                 100, log.maxNumToLog );\n    assertEquals(\"wrong config for LogUpdateProcessorFactory.slowUpdateThresholdMillis\",\n                 2000, log.slowUpdateThresholdMillis);\n\n\n    UpdateRequestProcessorChain custom = core.getUpdateProcessingChain( null );\n    CustomUpdateRequestProcessorFactory link = (CustomUpdateRequestProcessorFactory) custom.getProcessors().get(0);\n    \n    assertEquals( custom, core.getUpdateProcessingChain( \"\" ) );\n    assertEquals( custom, core.getUpdateProcessingChain( \"custom\" ) );\n    \n    // Make sure the NamedListArgs got through ok\n    assertEquals( \"{name={n8=88,n9=99}}\", link.args.toString() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9":["71ef8a57fd983aa16ff74606fe28407492a0810b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a42da47d66be6c7cf5fba5e2234b3fd5da516859":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"71ef8a57fd983aa16ff74606fe28407492a0810b":["c26f00b574427b55127e869b935845554afde1fa"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a42da47d66be6c7cf5fba5e2234b3fd5da516859"]},"commit2Childs":{"eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a42da47d66be6c7cf5fba5e2234b3fd5da516859":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c26f00b574427b55127e869b935845554afde1fa":["71ef8a57fd983aa16ff74606fe28407492a0810b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a42da47d66be6c7cf5fba5e2234b3fd5da516859"],"71ef8a57fd983aa16ff74606fe28407492a0810b":["eb55f6c347c48c2f7a9fb29b2e6dfe819b1a56f9"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}