{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","commits":[{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  private Arc<T> readArc(Arc<T> arc, BytesReader in) throws IOException {\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc() == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc();\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart());\n          in.skipBytes(arc.bytesPerArc() * arc.numArcs());\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc() > 0 && arc.arcIdx() == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","pathOld":"/dev/null","sourceNew":"  private Arc<T> readArc(Arc<T> arc, BytesReader in) throws IOException {\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc() == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc();\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart());\n          in.skipBytes(arc.bytesPerArc() * arc.numArcs());\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc() > 0 && arc.arcIdx() == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Reads an arc.\n   * <br>Precondition: The arc flags byte has already been read and set;\n   * the given BytesReader is positioned just after the arc flags byte.\n   */\n  private Arc<T> readArc(Arc<T> arc, BytesReader in) throws IOException {\n    if (arc.nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING) {\n      arc.label = arc.firstLabel() + arc.arcIdx();\n    } else {\n      arc.label = readLabel(in);\n    }\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition(); // Only useful for list.\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition(); // Only useful for list.\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          int numArcs = arc.nodeFlags == ARCS_FOR_DIRECT_ADDRESSING ? getNumArcsDirectAddressing(arc) : arc.numArcs();\n          in.setPosition(arc.posArcsStart() - arc.bytesPerArc() * numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      arc.nextArc = in.getPosition(); // Only useful for list.\n    }\n    return arc;\n  }\n\n","sourceOld":"  private Arc<T> readArc(Arc<T> arc, BytesReader in) throws IOException {\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc() == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc();\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart());\n          in.skipBytes(arc.bytesPerArc() * arc.numArcs());\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc() > 0 && arc.arcIdx() == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readArc(Arc[T],BytesReader).mjava","sourceNew":"  /**\n   * Reads an arc.\n   * <br>Precondition: The arc flags byte has already been read and set;\n   * the given BytesReader is positioned just after the arc flags byte.\n   */\n  private Arc<T> readArc(Arc<T> arc, BytesReader in) throws IOException {\n    if (arc.nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING) {\n      arc.label = arc.firstLabel() + arc.arcIdx();\n    } else {\n      arc.label = readLabel(in);\n    }\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition(); // Only useful for list.\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition(); // Only useful for list.\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          int numArcs = arc.nodeFlags == ARCS_FOR_DIRECT_ADDRESSING ? BitTable.countBits(arc, in) : arc.numArcs();\n          in.setPosition(arc.posArcsStart() - arc.bytesPerArc() * numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      arc.nextArc = in.getPosition(); // Only useful for list.\n    }\n    return arc;\n  }\n\n","sourceOld":"  /**\n   * Reads an arc.\n   * <br>Precondition: The arc flags byte has already been read and set;\n   * the given BytesReader is positioned just after the arc flags byte.\n   */\n  private Arc<T> readArc(Arc<T> arc, BytesReader in) throws IOException {\n    if (arc.nodeFlags() == ARCS_FOR_DIRECT_ADDRESSING) {\n      arc.label = arc.firstLabel() + arc.arcIdx();\n    } else {\n      arc.label = readLabel(in);\n    }\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition(); // Only useful for list.\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition(); // Only useful for list.\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          int numArcs = arc.nodeFlags == ARCS_FOR_DIRECT_ADDRESSING ? getNumArcsDirectAddressing(arc) : arc.numArcs();\n          in.setPosition(arc.posArcsStart() - arc.bytesPerArc() * numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      arc.nextArc = in.getPosition(); // Only useful for list.\n    }\n    return arc;\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71d31a7d5773508492505519bb5230b87c8937ad":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","f8061ddd97f3352007d927dae445884a6f3d857b"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}