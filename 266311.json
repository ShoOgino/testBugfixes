{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","commits":[{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/ConfigParseUtil#verifyWithSchema(DataImporter,Map[String,EntityField]).mjava","sourceNew":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyWithSchema(DataImporter di, Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (di.getSchema() == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = di.getSchema().getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG\n              .info(sf.getName()\n                  + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = di.getSchemaField(fld.getName());\n      if (field == null) {\n        LOG\n            .info(\"The field :\"\n                + fld.getName()\n                + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b604003611eabbb4d3f0fb1f89d3b6a017f8faa","date":1386079993,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","sourceNew":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","bugFix":["08970e5b8411182a29412c177eff67ec1110095b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","sourceNew":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","sourceNew":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          log.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        log.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          LOG.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        LOG.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","sourceNew":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} is a required field in SolrSchema . But not found in DataConfig\", sf.getName());\n          }\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        if (log.isInfoEnabled()) {\n          log.info(\"The field :{} present in DataConfig does not have a counterpart in Solr Schema\", fld.getName());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          log.info(sf.getName() + \" is a required field in SolrSchema . But not found in DataConfig\");\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        log.info(\"The field :\" + fld.getName() + \" present in DataConfig does not have a counterpart in Solr Schema\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#verifyWithSchema(Map[String,EntityField]).mjava","sourceNew":null,"sourceOld":"  private void verifyWithSchema(Map<String,EntityField> fields) {\n    Map<String,SchemaField> schemaFields = null;\n    if (schema == null) {\n      schemaFields = Collections.emptyMap();\n    } else {\n      schemaFields = schema.getFields();\n    }\n    for (Map.Entry<String,SchemaField> entry : schemaFields.entrySet()) {\n      SchemaField sf = entry.getValue();\n      if (!fields.containsKey(sf.getName())) {\n        if (sf.isRequired()) {\n          if (log.isInfoEnabled()) {\n            log.info(\"{} is a required field in SolrSchema . But not found in DataConfig\", sf.getName());\n          }\n        }\n      }\n    }\n    for (Map.Entry<String,EntityField> entry : fields.entrySet()) {\n      EntityField fld = entry.getValue();\n      SchemaField field = getSchemaField(fld.getName());\n      if (field == null && !isSpecialCommand(fld.getName())) {\n        if (log.isInfoEnabled()) {\n          log.info(\"The field :{} present in DataConfig does not have a counterpart in Solr Schema\", fld.getName());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b604003611eabbb4d3f0fb1f89d3b6a017f8faa":["08970e5b8411182a29412c177eff67ec1110095b"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["08970e5b8411182a29412c177eff67ec1110095b","1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa"],"08970e5b8411182a29412c177eff67ec1110095b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1b604003611eabbb4d3f0fb1f89d3b6a017f8faa":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08970e5b8411182a29412c177eff67ec1110095b"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"08970e5b8411182a29412c177eff67ec1110095b":["1b604003611eabbb4d3f0fb1f89d3b6a017f8faa","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}