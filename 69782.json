{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","commits":[{"id":"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05","date":1446751515,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"/dev/null","sourceNew":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().updateClusterState();\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getSlice(collection, SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","sourceNew":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getSlice(collection, SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().updateClusterState();\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getSlice(collection, SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","sourceNew":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getSlice(collection, SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","bugFix":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","sourceNew":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getSlice(collection, SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","sourceNew":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    getProxyForReplica(leader).reopen();\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23899910c6ea46c4aff96056cfae91d3e31b262a","date":1522788117,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","sourceNew":"  private void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    getProxyForReplica(leader).reopen();\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":"  protected void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    getProxyForReplica(leader).reopen();\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#bringBackOldLeaderAndSendDoc(String,Replica,List[Replica],int).mjava","sourceNew":"  private void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    getProxyForReplica(leader).reopen();\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    if (log.isInfoEnabled()) {\n      log.info(\"After bringing back leader: {}\", clusterState.getCollection(collection).getSlice(SHARD1));\n    }\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc {}...\", docid);\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc {} sent and commit issued\", docid);\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","sourceOld":"  private void bringBackOldLeaderAndSendDoc(String collection, Replica leader, List<Replica> notLeaders, int docid) throws Exception {\n    // Bring back the leader which was stopped\n    log.info(\"Bringing back originally killed leader...\");\n    JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));\n    getProxyForReplica(leader).reopen();\n    leaderJetty.start();\n    waitForRecoveriesToFinish(collection, cloudClient.getZkStateReader(), true);\n    cloudClient.getZkStateReader().forceUpdateCollection(collection);\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    log.info(\"After bringing back leader: \" + clusterState.getCollection(collection).getSlice(SHARD1));\n    int numActiveReplicas = getNumberOfActiveReplicas(clusterState, collection, SHARD1);\n    assertEquals(1+notLeaders.size(), numActiveReplicas);\n    log.info(\"Sending doc \"+docid+\"...\");\n    sendDoc(docid);\n    log.info(\"Committing...\");\n    cloudClient.commit();\n    log.info(\"Doc \"+docid+\" sent and commit issued\");\n    assertDocsExistInAllReplicas(notLeaders, collection, docid, docid);\n    assertDocsExistInAllReplicas(Collections.singletonList(leader), collection, docid, docid);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23899910c6ea46c4aff96056cfae91d3e31b262a":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["344b0840364d990b29b97467bfcc766ff8325d11"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","84f20f331d8001864545c7021812d8c6509c7593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05"],"23899910c6ea46c4aff96056cfae91d3e31b262a":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"84f20f331d8001864545c7021812d8c6509c7593":["23899910c6ea46c4aff96056cfae91d3e31b262a"],"55dd60b0ec28d5f9b8d178ab4d1cc3abb74c3e05":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}