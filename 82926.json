{"path":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","commits":[{"id":"eee9156bf08d7eaae5e8d8ab5f855ba61012e257","date":1285443157,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\r\n  {\r\n//    for( int i=0; i<NUM_DOCS; i++ ) {\r\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\r\n//    }\r\n    \r\n    int numDocs =0;\r\n    Set<Number> distinctTerms = new HashSet<Number>();\r\n    for( int i=0; i<NUM_DOCS; i++ ) {\r\n      Number v = tester.values[i];\r\n      boolean isValid = cachedVals.valid.get(i);\r\n      if( v != null ) {\r\n        numDocs++;\r\n        distinctTerms.add( v );\r\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \r\n      }\r\n      else {\r\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \r\n      }\r\n    }\r\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\r\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\r\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((OpenBitSet)cachedVals.valid).cardinality() );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","sourceNew":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\n  {\n//    for( int i=0; i<NUM_DOCS; i++ ) {\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\n//    }\n    \n    int numDocs =0;\n    Set<Number> distinctTerms = new HashSet<Number>();\n    for( int i=0; i<NUM_DOCS; i++ ) {\n      Number v = tester.values[i];\n      boolean isValid = cachedVals.valid.get(i);\n      if( v != null ) {\n        numDocs++;\n        distinctTerms.add( v );\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \n      }\n      else {\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \n      }\n    }\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((OpenBitSet)cachedVals.valid).cardinality() );\n  }\n\n","sourceOld":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\r\n  {\r\n//    for( int i=0; i<NUM_DOCS; i++ ) {\r\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\r\n//    }\r\n    \r\n    int numDocs =0;\r\n    Set<Number> distinctTerms = new HashSet<Number>();\r\n    for( int i=0; i<NUM_DOCS; i++ ) {\r\n      Number v = tester.values[i];\r\n      boolean isValid = cachedVals.valid.get(i);\r\n      if( v != null ) {\r\n        numDocs++;\r\n        distinctTerms.add( v );\r\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \r\n      }\r\n      else {\r\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \r\n      }\r\n    }\r\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\r\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\r\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((OpenBitSet)cachedVals.valid).cardinality() );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","pathOld":"/dev/null","sourceNew":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\n  {\n//    for( int i=0; i<NUM_DOCS; i++ ) {\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\n//    }\n    \n    int numDocs =0;\n    Set<Number> distinctTerms = new HashSet<Number>();\n    for( int i=0; i<NUM_DOCS; i++ ) {\n      Number v = tester.values[i];\n      boolean isValid = cachedVals.valid.get(i);\n      if( v != null ) {\n        numDocs++;\n        distinctTerms.add( v );\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \n      }\n      else {\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \n      }\n    }\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((OpenBitSet)cachedVals.valid).cardinality() );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f","date":1310403131,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","sourceNew":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\n  {\n//    for( int i=0; i<NUM_DOCS; i++ ) {\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\n//    }\n    \n    int numDocs =0;\n    Set<Number> distinctTerms = new HashSet<Number>();\n    for( int i=0; i<NUM_DOCS; i++ ) {\n      Number v = tester.values[i];\n      boolean isValid = cachedVals.valid.get(i);\n      if( v != null ) {\n        numDocs++;\n        distinctTerms.add( v );\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \n      }\n      else {\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \n      }\n    }\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((FixedBitSet)cachedVals.valid).cardinality() );\n  }\n\n","sourceOld":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\n  {\n//    for( int i=0; i<NUM_DOCS; i++ ) {\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\n//    }\n    \n    int numDocs =0;\n    Set<Number> distinctTerms = new HashSet<Number>();\n    for( int i=0; i<NUM_DOCS; i++ ) {\n      Number v = tester.values[i];\n      boolean isValid = cachedVals.valid.get(i);\n      if( v != null ) {\n        numDocs++;\n        distinctTerms.add( v );\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \n      }\n      else {\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \n      }\n    }\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((OpenBitSet)cachedVals.valid).cardinality() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/cache/TestEntryCreators#checkCachedArrayValuesAndBits(NumberTypeTester,CachedArray).mjava","sourceNew":null,"sourceOld":"  private void checkCachedArrayValuesAndBits( NumberTypeTester tester, CachedArray cachedVals )\n  {\n//    for( int i=0; i<NUM_DOCS; i++ ) {\n//      System.out.println( i + \"] \"+ tester.values[i] + \" :: \" + cachedVals.valid.get(i) );\n//    }\n    \n    int numDocs =0;\n    Set<Number> distinctTerms = new HashSet<Number>();\n    for( int i=0; i<NUM_DOCS; i++ ) {\n      Number v = tester.values[i];\n      boolean isValid = cachedVals.valid.get(i);\n      if( v != null ) {\n        numDocs++;\n        distinctTerms.add( v );\n        assertTrue( \"Valid bit should be true (\"+i+\"=\"+tester.values[i]+\") \"+tester, isValid );        \n      }\n      else {\n        assertFalse( \"Valid bit should be false (\"+i+\") \"+tester, isValid );        \n      }\n    }\n    assertEquals( \"Cached numTerms does not match : \"+tester, distinctTerms.size(), cachedVals.numTerms );\n    assertEquals( \"Cached numDocs does not match : \"+tester, numDocs, cachedVals.numDocs );\n    assertEquals( \"Ordinal should match numDocs : \"+tester, numDocs, ((FixedBitSet)cachedVals.valid).cardinality() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"382fe3a6ca9745891afebda9b9a57cc158305545":["c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["382fe3a6ca9745891afebda9b9a57cc158305545"]},"commit2Childs":{"eee9156bf08d7eaae5e8d8ab5f855ba61012e257":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eee9156bf08d7eaae5e8d8ab5f855ba61012e257","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0d520cd04d39f8caa0a53ed23e60beb30e8fb9f":["382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}