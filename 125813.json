{"path":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"a327ae471e79ed4301c7f8cad83f53eb246160e8","date":1316884647,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(\"dictionary\").split(\",\");\n    String affixFile = args.get(\"affix\");\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918","ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new SolrException(ErrorCode.UNKNOWN, \"Unknown value for \"+PARAM_IGNORE_CASE+\": \"+pic+\". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(\"dictionary\").split(\",\");\n    String affixFile = args.get(\"affix\");\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39d25aba1848c644c6d22b943d3d66f661445ac7","date":1335238294,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new SolrException(ErrorCode.UNKNOWN, \"Unknown value for \"+PARAM_IGNORE_CASE+\": \"+pic+\". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74fe524b3f952dcace4fd46ad5e69b16d5090c57","date":1338527592,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"558d0b2765fb22e5c20304b1e85c6cc7b9bba359","date":1342503992,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ba791bce8103c79e38f957e9c5a53a75871bd918","ba791bce8103c79e38f957e9c5a53a75871bd918"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryArg = args.get(PARAM_DICTIONARY);\n    if (dictionaryArg == null) {\n      throw new InitializationException(\"Parameter \" + PARAM_DICTIONARY + \" is mandatory.\");\n    }\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    try {\n      List<InputStream> dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      this.dictionary = new HunspellDictionary(loader.openResource(affixFile), dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/HunspellStemFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads the hunspell dictionary and affix files defined in the configuration\n   *  \n   * @param loader ResourceLoader used to load the files\n   */\n  public void inform(ResourceLoader loader) {\n    assureMatchVersion();\n    String dictionaryFiles[] = args.get(PARAM_DICTIONARY).split(\",\");\n    String affixFile = args.get(PARAM_AFFIX);\n    String pic = args.get(PARAM_IGNORE_CASE);\n    if(pic != null) {\n      if(pic.equalsIgnoreCase(TRUE)) ignoreCase = true;\n      else if(pic.equalsIgnoreCase(FALSE)) ignoreCase = false;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_IGNORE_CASE + \": \" + pic + \". Must be true or false\");\n    }\n\n    String strictAffixParsingParam = args.get(PARAM_STRICT_AFFIX_PARSING);\n    boolean strictAffixParsing = true;\n    if(strictAffixParsingParam != null) {\n      if(strictAffixParsingParam.equalsIgnoreCase(FALSE)) strictAffixParsing = false;\n      else if(strictAffixParsingParam.equalsIgnoreCase(TRUE)) strictAffixParsing = true;\n      else throw new InitializationException(\"Unknown value for \" + PARAM_STRICT_AFFIX_PARSING + \": \" + strictAffixParsingParam + \". Must be true or false\");\n    }\n\n    InputStream affix = null;\n    List<InputStream> dictionaries = new ArrayList<InputStream>();\n\n    try {\n      dictionaries = new ArrayList<InputStream>();\n      for (String file : dictionaryFiles) {\n        dictionaries.add(loader.openResource(file));\n      }\n      affix = loader.openResource(affixFile);\n\n      this.dictionary = new HunspellDictionary(affix, dictionaries, luceneMatchVersion, ignoreCase, strictAffixParsing);\n    } catch (Exception e) {\n      throw new InitializationException(\"Unable to load hunspell data! [dictionary=\" + args.get(\"dictionary\") + \",affix=\" + affixFile + \"]\", e);\n    } finally {\n      IOUtils.closeWhileHandlingException(affix);\n      IOUtils.closeWhileHandlingException(dictionaries);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a327ae471e79ed4301c7f8cad83f53eb246160e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","5a1a22b1ad88b436661458df567f3fdb446392a4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"39d25aba1848c644c6d22b943d3d66f661445ac7":["77d6144bb77983c683128c11b708057809173cff"],"77d6144bb77983c683128c11b708057809173cff":["a327ae471e79ed4301c7f8cad83f53eb246160e8"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["39d25aba1848c644c6d22b943d3d66f661445ac7"]},"commit2Childs":{"a327ae471e79ed4301c7f8cad83f53eb246160e8":["77d6144bb77983c683128c11b708057809173cff"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a327ae471e79ed4301c7f8cad83f53eb246160e8"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"39d25aba1848c644c6d22b943d3d66f661445ac7":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"77d6144bb77983c683128c11b708057809173cff":["39d25aba1848c644c6d22b943d3d66f661445ac7"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}