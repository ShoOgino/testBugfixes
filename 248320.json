{"path":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#next().mjava","commits":[{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":1,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#next().mjava","pathOld":"src/java/org/apache/lucene/index/SegmentsTermEnum[SegmentsReader]#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n    if (top == null) {\n      term = null;\n      return false;\n    }\n\n    term = top.term;\n    docFreq = 0;\n\n    while (top != null && term.compareTo(top.term) == 0) {\n      queue.pop();\n      docFreq += top.termEnum.docFreq();\t  // increment freq\n      if (top.next())\n\tqueue.put(top);\t\t\t\t  // restore queue\n      else\n\ttop.close();\t\t\t\t  // done with a segment\n      top = (SegmentMergeInfo)queue.top();\n    }\n    return true;\n  }\n\n","sourceOld":"  public final boolean next() throws IOException {\n    SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n    if (top == null) {\n      term = null;\n      return false;\n    }\n\n    term = top.term;\n    docFreq = 0;\n\n    while (top != null && term.compareTo(top.term) == 0) {\n      queue.pop();\n      docFreq += top.termEnum.docFreq();\t  // increment freq\n      if (top.next())\n\tqueue.put(top);\t\t\t\t  // restore queue\n      else\n\ttop.close();\t\t\t\t  // done with a segment\n      top = (SegmentMergeInfo)queue.top();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbe196f6406e5d96f401c346389b069dc7fd0e1","date":1084538986,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#next().mjava","pathOld":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n    if (top == null) {\n      term = null;\n      return false;\n    }\n\n    term = top.term;\n    docFreq = 0;\n\n    while (top != null && term.compareTo(top.term) == 0) {\n      queue.pop();\n      docFreq += top.termEnum.docFreq();    // increment freq\n      if (top.next())\n        queue.put(top);          // restore queue\n      else\n        top.close();          // done with a segment\n      top = (SegmentMergeInfo)queue.top();\n    }\n    return true;\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n    if (top == null) {\n      term = null;\n      return false;\n    }\n\n    term = top.term;\n    docFreq = 0;\n\n    while (top != null && term.compareTo(top.term) == 0) {\n      queue.pop();\n      docFreq += top.termEnum.docFreq();\t  // increment freq\n      if (top.next())\n\tqueue.put(top);\t\t\t\t  // restore queue\n      else\n\ttop.close();\t\t\t\t  // done with a segment\n      top = (SegmentMergeInfo)queue.top();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f2552b9f13037c62acd400d263d1e9262d6e4e","date":1185490328,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/MultiTermEnum[MultiReader]#next().mjava","sourceNew":null,"sourceOld":"  public boolean next() throws IOException {\n    SegmentMergeInfo top = (SegmentMergeInfo)queue.top();\n    if (top == null) {\n      term = null;\n      return false;\n    }\n\n    term = top.term;\n    docFreq = 0;\n\n    while (top != null && term.compareTo(top.term) == 0) {\n      queue.pop();\n      docFreq += top.termEnum.docFreq();    // increment freq\n      if (top.next())\n        queue.put(top);          // restore queue\n      else\n        top.close();          // done with a segment\n      top = (SegmentMergeInfo)queue.top();\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"]},"commit2Childs":{"ddbe196f6406e5d96f401c346389b069dc7fd0e1":["f7f2552b9f13037c62acd400d263d1e9262d6e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["ddbe196f6406e5d96f401c346389b069dc7fd0e1"],"f7f2552b9f13037c62acd400d263d1e9262d6e4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}