{"path":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","commits":[{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ChaosMonkeySafeLeaderTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c5e3cedf564c6d370670858e1b1edab16fcac","date":1343114420,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","pathOld":"/dev/null","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","sourceNew":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToClient.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","sourceNew":null,"sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","sourceNew":null,"sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/SyncSliceTest#waitForThingsToLevelOut().mjava","sourceNew":null,"sourceOld":"  private void waitForThingsToLevelOut() throws Exception {\n    int cnt = 0;\n    boolean retry = false;\n    do {\n      waitForRecoveriesToFinish(false);\n      \n      commit();\n      \n      updateMappingsFromZk(jettys, clients);\n      \n      Set<String> theShards = shardToJetty.keySet();\n      String failMessage = null;\n      for (String shard : theShards) {\n        failMessage = checkShardConsistency(shard, false);\n      }\n      \n      if (failMessage != null) {\n        retry = true;\n      } else {\n        retry = false;\n      }\n      \n      cnt++;\n      if (cnt > 10) break;\n      Thread.sleep(2000);\n    } while (retry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2c30e4c1cee08b3b229a77991882594fe7250b66"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","217c5e3cedf564c6d370670858e1b1edab16fcac"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","217c5e3cedf564c6d370670858e1b1edab16fcac"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","217c5e3cedf564c6d370670858e1b1edab16fcac"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["217c5e3cedf564c6d370670858e1b1edab16fcac"]},"commit2Childs":{"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["217c5e3cedf564c6d370670858e1b1edab16fcac","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"217c5e3cedf564c6d370670858e1b1edab16fcac":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}