{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (SpanOrQuery) this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery rewritten = new SpanOrQuery();\n    boolean actuallyRewritten = false;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      actuallyRewritten |= query != c;\n      rewritten.addClause(query);\n    }\n    if (actuallyRewritten) {\n      return rewritten;\n    }\n    return super.rewrite(reader);\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    SpanOrQuery clone = null;\n    for (int i = 0 ; i < clauses.size(); i++) {\n      SpanQuery c = clauses.get(i);\n      SpanQuery query = (SpanQuery) c.rewrite(reader);\n      if (query != c) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = this.clone();\n        clone.clauses.set(i,query);\n      }\n    }\n    if (clone != null) {\n      return clone;                        // some clauses rewrote\n    } else {\n      return this;                         // no clauses rewrote\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}