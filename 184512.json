{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","commits":[{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","date":1523453225,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletesToMerge(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletesToMerge(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,MergeContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, MergeContext mergeContext)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(mergeContext)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", mergeContext);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert mergeContext != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = mergeContext.numDeletesToMerge(info);\n      assert assertDelCount(delCount, info);\n      if (delCount > 0) {\n        if (verbose(mergeContext)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", mergeContext);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(mergeContext)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", mergeContext);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(mergeContext)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", mergeContext);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(mergeContext)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", mergeContext);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletesToMerge(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["027bee21e09164c9ee230395405076d1e0034b30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["027bee21e09164c9ee230395405076d1e0034b30","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"027bee21e09164c9ee230395405076d1e0034b30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["027bee21e09164c9ee230395405076d1e0034b30"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["1d28f215464f76024caf026606f8ea51a5319c53"],"027bee21e09164c9ee230395405076d1e0034b30":["9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}