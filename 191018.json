{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<String>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrClient#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrClient client = new LBHttpSolrClient(httpClient, s);\n    client.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = client.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] s = new String[solr.length];\n    for (int i = 0; i < solr.length; i++) {\n      s[i] = solr[i].getUrl();\n    }\n    LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(httpClient, s);\n    lbHttpSolrServer.setAliveCheckInterval(500);\n    SolrQuery solrQuery = new SolrQuery(\"*:*\");\n    Set<String> names = new HashSet<>();\n    QueryResponse resp = null;\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n\n    // Kill a server and test again\n    solr[1].jetty.stop();\n    solr[1].jetty = null;\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(2, names.size());\n    assertFalse(names.contains(\"solr1\"));\n\n    // Start the killed server once again\n    solr[1].startJetty();\n    // Wait for the alive check to complete\n    Thread.sleep(1200);\n    names.clear();\n    for (String value : s) {\n      resp = lbHttpSolrServer.query(solrQuery);\n      assertEquals(10, resp.getResults().getNumFound());\n      names.add(resp.getResults().get(0).getFieldValue(\"name\").toString());\n    }\n    assertEquals(3, names.size());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}