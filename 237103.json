{"path":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"5329de88aa243e3d3a980fb7807e92663b03a4d5","date":1343108485,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/MorfologikFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#MorfologikFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/morfologik/src/java/org/apache/lucene/analysis/morfologik/MorfologikFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new MorfologikFilterFactory */\n  public MorfologikFilterFactory(Map<String,String> args) {\n    super(args);\n    String dictionaryName = args.remove(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String dictionaryName = args.get(DICTIONARY_SCHEMA_ATTRIBUTE);\n    if (dictionaryName != null && !dictionaryName.isEmpty()) {\n      try {\n        DICTIONARY dictionary = DICTIONARY.valueOf(dictionaryName.toUpperCase(Locale.ROOT));\n        assert dictionary != null;\n        this.dictionary = dictionary;\n      } catch (IllegalArgumentException e) {\n        throw new IllegalArgumentException(\"The \" + DICTIONARY_SCHEMA_ATTRIBUTE + \" attribute accepts the \"\n            + \"following constants: \" + Arrays.toString(DICTIONARY.values()) + \", this value is invalid: \"  \n            + dictionaryName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"5329de88aa243e3d3a980fb7807e92663b03a4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5329de88aa243e3d3a980fb7807e92663b03a4d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"5329de88aa243e3d3a980fb7807e92663b03a4d5":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","5329de88aa243e3d3a980fb7807e92663b03a4d5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}