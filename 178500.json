{"path":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","commits":[{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ActiveReplicaWatcher watcher = null;\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), Collections.singletonList(replica.getName()), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.info(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.info(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ActiveReplicaWatcher watcher = null;\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), Collections.singletonList(replica.getName()), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c","date":1512481565,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.info(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.info(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":["ecb39e783dd104116a9502e8b0ab3df89f35ac19","67e503ef0f418bc92404ff5d55694087c23d48eb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    log.debug(\"props \" + props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher \" + watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2bcfee499548996a6e5448bbf93b8f276d010270":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["2bcfee499548996a6e5448bbf93b8f276d010270"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2bcfee499548996a6e5448bbf93b8f276d010270":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2bcfee499548996a6e5448bbf93b8f276d010270"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"65a78c7aebe6b174f02f7c7a1b4e8647ed5ed73c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}