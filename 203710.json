{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f45457a742a53533c348c4b990b1c579ff364467","date":1353197071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Shorts arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr.get(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr.get(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Shorts arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr.get(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr.get(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final short[] arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr[doc];\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr[doc];\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr[doc];\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr[doc];\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr[doc];\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr[doc];\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr[doc]);\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":["3f7e3e91f914e6265ed09a3208cc60c9ba2a477d","5ab232266b4f237481db6f2cf86893a18bf29ce1","61e20f33ce8ff701576366fdb03955eded5f209b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Shorts arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr.get(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr.get(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ShortFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final FieldCache.Shorts arr = cache.getShorts(readerContext.reader(), field, parser, false);\n    \n    return new FunctionValues() {\n      @Override\n      public byte byteVal(int doc) {\n        return (byte) arr.get(doc);\n      }\n\n      @Override\n      public short shortVal(int doc) {\n        return arr.get(doc);\n      }\n\n      @Override\n      public float floatVal(int doc) {\n        return (float) arr.get(doc);\n      }\n\n      @Override\n      public int intVal(int doc) {\n        return (int) arr.get(doc);\n      }\n\n      @Override\n      public long longVal(int doc) {\n        return (long) arr.get(doc);\n      }\n\n      @Override\n      public double doubleVal(int doc) {\n        return (double) arr.get(doc);\n      }\n\n      @Override\n      public String strVal(int doc) {\n        return Short.toString(arr.get(doc));\n      }\n\n      @Override\n      public String toString(int doc) {\n        return description() + '=' + shortVal(doc);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f45457a742a53533c348c4b990b1c579ff364467"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["d4d69c535930b5cce125cff868d40f6373dc27d4","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f45457a742a53533c348c4b990b1c579ff364467":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59a0020b413d44dd79d85d7a66ed5004265fb453"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","f45457a742a53533c348c4b990b1c579ff364467"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f45457a742a53533c348c4b990b1c579ff364467":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}