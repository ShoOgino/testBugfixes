{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","sourceNew":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","sourceOld":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","sourceNew":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","sourceOld":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","sourceNew":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","sourceOld":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FieldFacet#fillParams(ResponseBuilder,SolrParams,String).mjava","sourceNew":"    protected void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount == null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros != null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT,\n                                       (limit > 0 ? \n                                        FacetParams.FACET_SORT_COUNT\n                                        : FacetParams.FACET_SORT_INDEX));\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field, FacetParams.FACET_PREFIX);\n    }\n\n","sourceOld":"    private void fillParams(ResponseBuilder rb, SolrParams params, String field) {\n      this.field = field;\n      this.ftype = rb.req.getSchema().getFieldTypeNoEx(this.field);\n      this.offset = params.getFieldInt(field, FacetParams.FACET_OFFSET, 0);\n      this.limit = params.getFieldInt(field, FacetParams.FACET_LIMIT, 100);\n      Integer mincount = params.getFieldInt(field, FacetParams.FACET_MINCOUNT);\n      if (mincount==null) {\n        Boolean zeros = params.getFieldBool(field, FacetParams.FACET_ZEROS);\n        // mincount = (zeros!=null && zeros) ? 0 : 1;\n        mincount = (zeros!=null && !zeros) ? 1 : 0;\n        // current default is to include zeros.\n      }\n      this.minCount = mincount;\n      this.missing = params.getFieldBool(field, FacetParams.FACET_MISSING, false);\n      // default to sorting by count if there is a limit.\n      this.sort = params.getFieldParam(field, FacetParams.FACET_SORT, limit>0 ? FacetParams.FACET_SORT_COUNT : FacetParams.FACET_SORT_INDEX);\n      if (this.sort.equals(FacetParams.FACET_SORT_COUNT_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_COUNT;\n      } else if (this.sort.equals(FacetParams.FACET_SORT_INDEX_LEGACY)) {\n        this.sort = FacetParams.FACET_SORT_INDEX;\n      }\n      this.prefix = params.getFieldParam(field,FacetParams.FACET_PREFIX);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92751ba9273251eab6a2e379ec42a1697a32ff96"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}