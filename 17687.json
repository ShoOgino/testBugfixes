{"path":"lucene/src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","sourceNew":"      private static Class<? extends AttributeImpl> getClassForInterface(Class<? extends Attribute> attClass) {\n        synchronized(attClassImplMap) {\n          final WeakReference<Class<? extends AttributeImpl>> ref = attClassImplMap.get(attClass);\n          Class<? extends AttributeImpl> clazz = (ref == null) ? null : ref.get();\n          if (clazz == null) {\n            try {\n              attClassImplMap.put(attClass,\n                new WeakReference<Class<? extends AttributeImpl>>(\n                  clazz = Class.forName(attClass.getName() + \"Impl\", true, attClass.getClassLoader())\n                  .asSubclass(AttributeImpl.class)\n                )\n              );\n            } catch (ClassNotFoundException e) {\n              throw new IllegalArgumentException(\"Could not find implementing class for \" + attClass.getName());\n            }\n          }\n          return clazz;\n        }\n      }\n\n","sourceOld":"      private static Class<? extends AttributeImpl> getClassForInterface(Class<? extends Attribute> attClass) {\n        synchronized(attClassImplMap) {\n          final WeakReference<Class<? extends AttributeImpl>> ref = attClassImplMap.get(attClass);\n          Class<? extends AttributeImpl> clazz = (ref == null) ? null : ref.get();\n          if (clazz == null) {\n            try {\n              attClassImplMap.put(attClass,\n                new WeakReference<Class<? extends AttributeImpl>>(\n                  clazz = Class.forName(attClass.getName() + \"Impl\", true, attClass.getClassLoader())\n                  .asSubclass(AttributeImpl.class)\n                )\n              );\n            } catch (ClassNotFoundException e) {\n              throw new IllegalArgumentException(\"Could not find implementing class for \" + attClass.getName());\n            }\n          }\n          return clazz;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb1ee331628e5e48978d05663ce7cd8c8fe2a471","date":1324228266,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","sourceNew":"      private static Class<? extends AttributeImpl> getClassForInterface(Class<? extends Attribute> attClass) {\n        final WeakReference<Class<? extends AttributeImpl>> ref = attClassImplMap.get(attClass);\n        Class<? extends AttributeImpl> clazz = (ref == null) ? null : ref.get();\n        if (clazz == null) {\n          // we have the slight chance that another thread may do the same, but who cares?\n          try {\n            attClassImplMap.put(attClass,\n              new WeakReference<Class<? extends AttributeImpl>>(\n                clazz = Class.forName(attClass.getName() + \"Impl\", true, attClass.getClassLoader())\n                .asSubclass(AttributeImpl.class)\n              )\n            );\n          } catch (ClassNotFoundException e) {\n            throw new IllegalArgumentException(\"Could not find implementing class for \" + attClass.getName());\n          }\n        }\n        return clazz;\n      }\n\n","sourceOld":"      private static Class<? extends AttributeImpl> getClassForInterface(Class<? extends Attribute> attClass) {\n        synchronized(attClassImplMap) {\n          final WeakReference<Class<? extends AttributeImpl>> ref = attClassImplMap.get(attClass);\n          Class<? extends AttributeImpl> clazz = (ref == null) ? null : ref.get();\n          if (clazz == null) {\n            try {\n              attClassImplMap.put(attClass,\n                new WeakReference<Class<? extends AttributeImpl>>(\n                  clazz = Class.forName(attClass.getName() + \"Impl\", true, attClass.getClassLoader())\n                  .asSubclass(AttributeImpl.class)\n                )\n              );\n            } catch (ClassNotFoundException e) {\n              throw new IllegalArgumentException(\"Could not find implementing class for \" + attClass.getName());\n            }\n          }\n          return clazz;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/AttributeSource.AttributeFactory.DefaultAttributeFactory#getClassForInterface(Class[#-extends-Attribute]).mjava","sourceNew":"      private static Class<? extends AttributeImpl> getClassForInterface(Class<? extends Attribute> attClass) {\n        final WeakReference<Class<? extends AttributeImpl>> ref = attClassImplMap.get(attClass);\n        Class<? extends AttributeImpl> clazz = (ref == null) ? null : ref.get();\n        if (clazz == null) {\n          // we have the slight chance that another thread may do the same, but who cares?\n          try {\n            attClassImplMap.put(attClass,\n              new WeakReference<Class<? extends AttributeImpl>>(\n                clazz = Class.forName(attClass.getName() + \"Impl\", true, attClass.getClassLoader())\n                .asSubclass(AttributeImpl.class)\n              )\n            );\n          } catch (ClassNotFoundException e) {\n            throw new IllegalArgumentException(\"Could not find implementing class for \" + attClass.getName());\n          }\n        }\n        return clazz;\n      }\n\n","sourceOld":"      private static Class<? extends AttributeImpl> getClassForInterface(Class<? extends Attribute> attClass) {\n        final WeakReference<Class<? extends AttributeImpl>> ref = attClassImplMap.get(attClass);\n        Class<? extends AttributeImpl> clazz = (ref == null) ? null : ref.get();\n        if (clazz == null) {\n          // we have the slight chance that another thread may do the same, but who cares?\n          try {\n            attClassImplMap.put(attClass,\n              new WeakReference<Class<? extends AttributeImpl>>(\n                clazz = Class.forName(attClass.getName() + \"Impl\", true, attClass.getClassLoader())\n                .asSubclass(AttributeImpl.class)\n              )\n            );\n          } catch (ClassNotFoundException e) {\n            throw new IllegalArgumentException(\"Could not find implementing class for \" + attClass.getName());\n          }\n        }\n        return clazz;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fb1ee331628e5e48978d05663ce7cd8c8fe2a471"],"fb1ee331628e5e48978d05663ce7cd8c8fe2a471":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb1ee331628e5e48978d05663ce7cd8c8fe2a471":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb1ee331628e5e48978d05663ce7cd8c8fe2a471"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}