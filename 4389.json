{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","commits":[{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      try (InputStream is = entity.getEntity().getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    try {\n      HttpResponse entity = httpClient.execute(httpGet);\n      int statusCode = entity.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n      try (InputStream is = entity.getEntity().getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n    return b;\n  }\n\n","bugFix":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n    return fetchFromUrl(key, url);\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n\n    HttpClient httpClient = coreContainer.getUpdateShardHandler().getDefaultHttpClient();\n    HttpGet httpGet = new HttpGet(url);\n    ByteBuffer b;\n    HttpResponse response = null;\n    HttpEntity entity = null;\n    try {\n      response = httpClient.execute(httpGet);\n      entity = response.getEntity();\n      int statusCode = response.getStatusLine().getStatusCode();\n      if (statusCode != 200) {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n      }\n\n      try (InputStream is = entity.getContent()) {\n        b = SimplePostTool.inputStreamToByteArray(is);\n      }\n    } catch (Exception e) {\n      if (e instanceof SolrException) {\n        throw (SolrException) e;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n      }\n    } finally {\n      Utils.consumeFully(entity);\n    }\n    return b;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#fetchBlob(String).mjava","sourceNew":"  /**\n   * Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n    return fetchFromUrl(key, url);\n  }\n\n","sourceOld":"  /**\n   *  Package local for unit tests only please do not use elsewhere\n   */\n  ByteBuffer fetchBlob(String key) {\n    Replica replica = getSystemCollReplica();\n    String url = replica.getStr(BASE_URL_PROP) + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/blob/\" + key + \"?wt=filestream\";\n    return fetchFromUrl(key, url);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"627e70d5711ab39d080a080f089685268525f54d":["3646ead588297558973dbd1162e69791e822b944"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["713122036535651642e6d4fe57ce12b449e18473","55ed5a78f8a4b37108ac73a894a105db562d303e"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["713122036535651642e6d4fe57ce12b449e18473"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["627e70d5711ab39d080a080f089685268525f54d"],"3646ead588297558973dbd1162e69791e822b944":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["713122036535651642e6d4fe57ce12b449e18473","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"627e70d5711ab39d080a080f089685268525f54d":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"3646ead588297558973dbd1162e69791e822b944":["627e70d5711ab39d080a080f089685268525f54d"],"713122036535651642e6d4fe57ce12b449e18473":["c304e97e7c1d472bc70e801b35ee78583916c6cd","55ed5a78f8a4b37108ac73a894a105db562d303e","560c18d71dad43d675158783c3840f8c80d6d39c"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["3646ead588297558973dbd1162e69791e822b944"],"560c18d71dad43d675158783c3840f8c80d6d39c":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}