{"path":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","commits":[{"id":"d37a93776a91f5c653f7975d29bdb028d643790c","date":1107701519,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","pathOld":"contrib/ant/src/main/org/apache/lucene/ant/IndexTask#execute().mjava","sourceNew":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      clazz = Class.forName(analyzerClassName);\n      analyzer = (Analyzer) clazz.newInstance();\n    } catch (ClassNotFoundException cnfe) {\n      throw new BuildException(cnfe);\n    } catch (InstantiationException ie) {\n      throw new BuildException(ie);\n    } catch (IllegalAccessException iae) {\n      throw new BuildException(iae);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      clazz = Class.forName(analyzerClassName);\n      analyzer = (Analyzer) clazz.newInstance();\n    } catch (ClassNotFoundException cnfe) {\n      throw new BuildException(cnfe);\n    } catch (InstantiationException ie) {\n      throw new BuildException(ie);\n    } catch (IllegalAccessException iae) {\n      throw new BuildException(iae);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","pathOld":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","sourceNew":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      analyzer = this.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      clazz = Class.forName(analyzerClassName);\n      analyzer = (Analyzer) clazz.newInstance();\n    } catch (ClassNotFoundException cnfe) {\n      throw new BuildException(cnfe);\n    } catch (InstantiationException ie) {\n      throw new BuildException(ie);\n    } catch (IllegalAccessException iae) {\n      throw new BuildException(iae);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","pathOld":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","sourceNew":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  @Override\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      analyzer = this.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      analyzer = this.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","pathOld":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","sourceNew":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  @Override\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      handler = Class.forName(handlerClassName).asSubclass(DocumentHandler.class).newInstance();\n\n      analyzer = IndexTask.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  @Override\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      Class clazz = Class.forName(handlerClassName);\n      handler = (DocumentHandler) clazz.newInstance();\n\n      analyzer = this.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","pathOld":"contrib/ant/src/java/org/apache/lucene/ant/IndexTask#execute().mjava","sourceNew":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  @Override\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      handler = Class.forName(handlerClassName).asSubclass(DocumentHandler.class).newInstance();\n\n      analyzer = IndexTask.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   *  Begins the indexing\n   *\n   *@exception  BuildException  If an error occurs indexing the\n   *      fileset\n   */\n  @Override\n  public void execute() throws BuildException {\n\n    // construct handler and analyzer dynamically\n    try {\n      handler = Class.forName(handlerClassName).asSubclass(DocumentHandler.class).newInstance();\n\n      analyzer = IndexTask.createAnalyzer(analyzerClassName);\n    } catch (Exception e) {\n      throw new BuildException(e);\n    }\n\n    log(\"Document handler = \" + handler.getClass(), Project.MSG_VERBOSE);\n    log(\"Analyzer = \" + analyzer.getClass(), Project.MSG_VERBOSE);\n\n    if (handler instanceof ConfigurableDocumentHandler) {\n      ((ConfigurableDocumentHandler) handler).configure(handlerConfig.getProperties());\n    }\n\n    try {\n      indexDocs();\n    } catch (IOException e) {\n      throw new BuildException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["d37a93776a91f5c653f7975d29bdb028d643790c"],"d37a93776a91f5c653f7975d29bdb028d643790c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d37a93776a91f5c653f7975d29bdb028d643790c"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["60cdc0e643184821eb066795a8791cd82559f46e"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d37a93776a91f5c653f7975d29bdb028d643790c":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}