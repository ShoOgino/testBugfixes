{"path":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","commits":[{"id":"497366d9491b581aca93e5134d95505e501aa58d","date":1128546088,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"/dev/null","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n    Query q = MultiFieldQueryParser.parse(\"one\", fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(\"one two\", fields, flags, new StandardAnalyzer());\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      int[] flags2 = {MultiFieldQueryParser.REQUIRED_FIELD};\n      q = MultiFieldQueryParser.parse(\"blah\", fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n      MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n\n    Query q = MultiFieldQueryParser.parse(\"one\", fields, flags, new StandardAnalyzer());//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(\"one two\", fields, flags, new StandardAnalyzer());\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(\"blah\", fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n    Query q = MultiFieldQueryParser.parse(\"one\", fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(\"one two\", fields, flags, new StandardAnalyzer());\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      int[] flags2 = {MultiFieldQueryParser.REQUIRED_FIELD};\n      q = MultiFieldQueryParser.parse(\"blah\", fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n      MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    Query q = MultiFieldQueryParser.parse(\"one\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(\"one two\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(\"blah\", fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n      MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new StandardAnalyzer());\n\n    Query q = MultiFieldQueryParser.parse(\"one\", fields, flags, new StandardAnalyzer());//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(\"one two\", fields, flags, new StandardAnalyzer());\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(\"blah\", fields, flags2, new StandardAnalyzer());\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n      MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n      MultiFieldQueryParser parser = new MultiFieldQueryParser(fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    Query q = MultiFieldQueryParser.parse(\"one\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(\"one two\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(\"blah\", fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n      MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fields, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"one\", fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n\n    Query q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(Version.LUCENE_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestMultiFieldQueryParser#testStaticMethod2Old().mjava","sourceNew":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"one\", fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","sourceOld":"  public void testStaticMethod2Old() throws ParseException {\n    String[] fields = {\"b\", \"t\"};\n    //int[] flags = {MultiFieldQueryParser.REQUIRED_FIELD, MultiFieldQueryParser.PROHIBITED_FIELD};\n      BooleanClause.Occur[] flags = {BooleanClause.Occur.MUST, BooleanClause.Occur.MUST_NOT};\n\n    Query q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"one\", fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));//, fields, flags, new StandardAnalyzer());\n    assertEquals(\"+b:one -t:one\", q.toString());\n\n    q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"one two\", fields, flags, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(\"+(b:one b:two) -(t:one t:two)\", q.toString());\n\n    try {\n      BooleanClause.Occur[] flags2 = {BooleanClause.Occur.MUST};\n      q = MultiFieldQueryParser.parse(TEST_VERSION_CURRENT, \"blah\", fields, flags2, new StandardAnalyzer(TEST_VERSION_CURRENT));\n      fail();\n    } catch(IllegalArgumentException e) {\n      // expected exception, array length differs\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"497366d9491b581aca93e5134d95505e501aa58d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["497366d9491b581aca93e5134d95505e501aa58d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ba1116b3450a9c1642c89445d131b37344055245"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"]},"commit2Childs":{"497366d9491b581aca93e5134d95505e501aa58d":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["497366d9491b581aca93e5134d95505e501aa58d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"ba1116b3450a9c1642c89445d131b37344055245":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}