{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#injectLockFactory(Directory,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexWriter#getDirectory(String,DirectoryFactory,SolrIndexConfig).mjava","sourceNew":"  /**\n   * @param dir\n   * @param lockPath\n   * @param rawLockType\n   * @return\n   * @throws IOException\n   */\n  private static Directory injectLockFactory(Directory dir, String lockPath,\n      String rawLockType) throws IOException {\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + dir + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n    \n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      dir.setLockFactory(new SimpleFSLockFactory(lockPath));\n    } else if (\"native\".equals(lockType)) {\n      dir.setLockFactory(new NativeFSLockFactory(lockPath));\n    } else if (\"single\".equals(lockType)) {\n      if (!(dir.getLockFactory() instanceof SingleInstanceLockFactory)) dir\n          .setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + dir);\n      dir.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unrecognized lockType: \" + rawLockType);\n    }\n    return dir;\n  }\n\n","sourceOld":"  public static Directory getDirectory(String path, DirectoryFactory directoryFactory, SolrIndexConfig config) throws IOException {\n    \n    Directory d = directoryFactory.open(path);\n\n    String rawLockType = (null == config) ? null : config.lockType;\n    if (null == rawLockType) {\n      // we default to \"simple\" for backwards compatibility\n      log.warn(\"No lockType configured for \" + path + \" assuming 'simple'\");\n      rawLockType = \"simple\";\n    }\n    final String lockType = rawLockType.toLowerCase(Locale.ENGLISH).trim();\n\n    if (\"simple\".equals(lockType)) {\n      // multiple SimpleFSLockFactory instances should be OK\n      d.setLockFactory(new SimpleFSLockFactory(path));\n    } else if (\"native\".equals(lockType)) {\n      d.setLockFactory(new NativeFSLockFactory(path));\n    } else if (\"single\".equals(lockType)) {\n      if (!(d.getLockFactory() instanceof SingleInstanceLockFactory))\n        d.setLockFactory(new SingleInstanceLockFactory());\n    } else if (\"none\".equals(lockType)) {\n      // Recipe for disaster\n      log.error(\"CONFIGURATION WARNING: locks are disabled on \" + path);      \n      d.setLockFactory(NoLockFactory.getNoLockFactory());\n    } else {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Unrecognized lockType: \" + rawLockType);\n    }\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e22ffe8cc51a892ae103df018822d7873e901c2a"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e22ffe8cc51a892ae103df018822d7873e901c2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}