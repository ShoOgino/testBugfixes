{"path":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer());\n    \n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r instanceof MultiSegmentReader);\n    } else {\n      assertTrue(r instanceof SegmentReader);\n    }\n    r.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  private static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    \n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r instanceof MultiSegmentReader);\n    } else {\n      assertTrue(r instanceof SegmentReader);\n    }\n    r.close();\n  }\n\n","sourceOld":"  private static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer());\n    \n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r instanceof MultiSegmentReader);\n    } else {\n      assertTrue(r instanceof SegmentReader);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r instanceof MultiSegmentReader);\n    } else {\n      assertTrue(r instanceof SegmentReader);\n    }\n    r.close();\n  }\n\n","sourceOld":"  private static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    \n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r instanceof MultiSegmentReader);\n    } else {\n      assertTrue(r instanceof SegmentReader);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":["fafd23b8e49a461cdbc22b302dfdea2f2a08d953"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n    \n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r instanceof MultiSegmentReader);\n    } else {\n      assertTrue(r instanceof SegmentReader);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy());\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.flush();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderReopen#createIndex(Directory,boolean).mjava","sourceNew":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","sourceOld":"  public static void createIndex(Directory dir, boolean multiSegment) throws IOException {\n    IndexWriter.unlock(dir);\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    w.setMergePolicy(new LogDocMergePolicy(w));\n    \n    for (int i = 0; i < 100; i++) {\n      w.addDocument(createDocument(i, 4));\n      if (multiSegment && (i % 10) == 0) {\n        w.commit();\n      }\n    }\n    \n    if (!multiSegment) {\n      w.optimize();\n    }\n    \n    w.close();\n\n    IndexReader r = IndexReader.open(dir, false);\n    if (multiSegment) {\n      assertTrue(r.getSequentialSubReaders().length > 1);\n    } else {\n      assertTrue(r.getSequentialSubReaders().length == 1);\n    }\n    r.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["13eaef7d286f35b5c850a1c2eb7b337679aa6453","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}