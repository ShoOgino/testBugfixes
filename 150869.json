{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","pathOld":"/dev/null","sourceNew":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","pathOld":"/dev/null","sourceNew":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","pathOld":"/dev/null","sourceNew":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","sourceNew":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","sourceOld":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, (a,b) -> a && b, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","sourceNew":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    }\n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    }\n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","sourceOld":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/function/mapping/LogicFunction#createBitwiseFunction(String,TwoBoolInBoolOutLambda,AnalyticsValueStream...).mjava","sourceNew":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    }\n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    }\n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","sourceOld":"  private static BooleanValueStream createBitwiseFunction(String name, TwoBoolInBoolOutLambda comp, AnalyticsValueStream... params) {\n    if (params.length == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires parameters.\");\n    } \n    else if (params.length == 1) {\n      if (params[0] instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)params[0]);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters. Incorrect param: \"+params[0].getExpressionStr());\n    } \n    else if (params.length == 2) {\n      AnalyticsValueStream param1 = params[0];\n      AnalyticsValueStream param2 = params[1];\n      if (param1 instanceof BooleanValueStream && param2 instanceof BooleanValueStream) {\n        return LambdaFunction.createBooleanLambdaFunction(name, comp, (BooleanValueStream)param1, (BooleanValueStream)param2);\n      }\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires boolean parameters.\");\n    }\n    BooleanValue[] castedParams = new BooleanValue[params.length];\n    for (int i = 0; i < params.length; i++) {\n      if (params[i] instanceof BooleanValue) {\n        castedParams[i] = (BooleanValue) params[i];\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The \"+name+\" function requires that all parameters be single-valued if more than 2 are given.\");\n      }\n    }\n    return LambdaFunction.createBooleanLambdaFunction(name, comp, castedParams);\n  }\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}