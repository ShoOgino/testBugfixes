{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newStringField(\"theLong\", String.valueOf(theLong--), Field.Store.NO));\n      doc.add(newStringField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO));\n      doc.add(newStringField(\"theByte\", String.valueOf(theByte--), Field.Store.NO));\n      doc.add(newStringField(\"theShort\", String.valueOf(theShort--), Field.Store.NO));\n      doc.add(newStringField(\"theInt\", String.valueOf(theInt--), Field.Store.NO));\n      doc.add(newStringField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(newStringField(\"sparse\", String.valueOf(i), Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":["a78a90fc9701e511308346ea29f4f5e548bb39fe","1509f151d7692d84fae414b2b799ac06ba60fcb4","382fe3a6ca9745891afebda9b9a57cc158305545"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newStringField(\"theLong\", String.valueOf(theLong--), Field.Store.NO));\n      doc.add(newStringField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO));\n      doc.add(newStringField(\"theByte\", String.valueOf(theByte--), Field.Store.NO));\n      doc.add(newStringField(\"theShort\", String.valueOf(theShort--), Field.Store.NO));\n      doc.add(newStringField(\"theInt\", String.valueOf(theInt--), Field.Store.NO));\n      doc.add(newStringField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(newStringField(\"sparse\", String.valueOf(i), Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newStringField(\"theLong\", String.valueOf(theLong--), Field.Store.NO));\n      doc.add(newStringField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO));\n      doc.add(newStringField(\"theByte\", String.valueOf(theByte--), Field.Store.NO));\n      doc.add(newStringField(\"theShort\", String.valueOf(theShort--), Field.Store.NO));\n      doc.add(newStringField(\"theInt\", String.valueOf(theInt--), Field.Store.NO));\n      doc.add(newStringField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(newStringField(\"sparse\", String.valueOf(i), Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random(), directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new LongField(\"theLong\", theLong--, Field.Store.NO));\n      doc.add(new DoubleField(\"theDouble\", theDouble--, Field.Store.NO));\n      doc.add(new IntField(\"theInt\", theInt--, Field.Store.NO));\n      doc.add(new FloatField(\"theFloat\", theFloat--, Field.Store.NO));\n      if (i%2 == 0) {\n        doc.add(new IntField(\"sparse\", i, Field.Store.NO));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new IntField(\"numInt\", i, Field.Store.NO));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newStringField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES));\n      }\n\n      // sometimes skip the field:\n      if (random().nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newStringField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    IndexReader r = writer.getReader();\n    reader = SlowCompositeReaderWrapper.wrap(r);\n    writer.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["04f07771a2a7dd3a395700665ed839c3dae2def2","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}