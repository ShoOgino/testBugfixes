{"path":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeGeo(Object).mjava","commits":[{"id":"ba1c938737d199113ec96f0d8ce2c8791b61cd18","date":1458148009,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeGeo(Object).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeGeo(Object geo) throws IOException {\n    Shape shape = null;\n    String str = null;\n    if(geo instanceof Shape) {\n      shape = (Shape)geo;\n    }\n    else if(geo instanceof IndexableField) {\n      str = ((IndexableField)geo).stringValue();\n    }\n    else if(geo instanceof WriteableGeoJSON) {\n      shape = ((WriteableGeoJSON)geo).shape;\n    }\n    else {\n      str = geo.toString();\n    }\n    \n    if(str !=null) {\n      // Assume it is well formed JSON\n      if(str.startsWith(\"{\") && str.endsWith(\"}\")) {\n        writer.write(str);\n        return;\n      }\n      \n      if(formats==null) {\n        // The check is here and not in the constructor because we do not know if the\n        // *stored* values for the field look like JSON until we actually try to read them\n        throw new SolrException(ErrorCode.BAD_REQUEST, \n            \"GeoJSON unable to write field: '&\"+ GeoJSONResponseWriter.FIELD +\"=\"+geofield+\"' (\"+str+\")\");\n      }\n      shape = formats.read(str); \n    }\n    \n    if(geowriter==null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \n          \"GeoJSON unable to write field: '&\"+ GeoJSONResponseWriter.FIELD +\"=\"+geofield+\"'\");\n    }\n    \n    if(shape!=null) {\n      geowriter.write(writer, shape);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}