{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","commits":[{"id":"9dee311b2816356910363a8d15fc076caf6367eb","date":1392012517,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"/dev/null","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (!ALLOW_SSL) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (!ALLOW_SSL) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (!ALLOW_SSL) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd11e7960929492abc00f2eda654753532e95742","date":1393336203,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (!ALLOW_SSL) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (!ALLOW_SSL) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db474afed4ffdc5df350db03f966d41dfdf1a9b","date":1397776827,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = true;//random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd","date":1397789808,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = true;//random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a752aa6cb603e5d798f66520ec781b720e1d0ab2","date":1419173700,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    final boolean trySsl = random().nextBoolean();\n    boolean trySslClientAuth = random().nextBoolean();\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      trySslClientAuth = false;\n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl,\n        trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3beec0828e9973095a4de926b078ebc3bdbfd2aa","date":1464816871,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n             result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    return result;\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n             result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    return result;\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n             result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    return result;\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n             result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    return result;\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n             result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    return result;\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n    // test has been disabled\n    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressSSL.class)) {\n      return new SSLTestConfig();\n    }\n    \n    // we don't choose ssl that often because of SOLR-5776\n    final boolean trySsl = random().nextInt(10) < 2;\n    // NOTE: clientAuth is useless unless trySsl==true, but we randomize it independently\n    // just in case it might find bugs in our test/ssl client code (ie: attempting to use\n    // SSL w/client cert to non-ssl servers)\n    boolean trySslClientAuth = random().nextInt(10) < 2;\n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      trySslClientAuth = false; \n    }\n    \n    log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n    \n    return new SSLTestConfig(trySsl, trySslClientAuth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#buildSSLConfig().mjava","sourceNew":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    if (log.isInfoEnabled()) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n          result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    }\n    return result;\n  }\n\n","sourceOld":"  private static SSLTestConfig buildSSLConfig() {\n\n    SSLRandomizer sslRandomizer =\n      SSLRandomizer.getSSLRandomizerForClass(RandomizedContext.current().getTargetClass());\n    \n    if (Constants.MAC_OS_X) {\n      // see SOLR-9039\n      // If a solution is found to remove this, please make sure to also update\n      // TestMiniSolrCloudClusterSSL.testSslAndClientAuth as well.\n      sslRandomizer = new SSLRandomizer(sslRandomizer.ssl, 0.0D, (sslRandomizer.debug + \" w/ MAC_OS_X supressed clientAuth\"));\n    }\n\n    SSLTestConfig result = sslRandomizer.createSSLTestConfig();\n    log.info(\"Randomized ssl ({}) and clientAuth ({}) via: {}\",\n             result.isSSLMode(), result.isClientAuthMode(), sslRandomizer.debug);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd11e7960929492abc00f2eda654753532e95742":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"9dee311b2816356910363a8d15fc076caf6367eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a752aa6cb603e5d798f66520ec781b720e1d0ab2":["a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["9dee311b2816356910363a8d15fc076caf6367eb"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["1f69e96b07e265f3e18957be540909b01fae36f8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["81ec897f0eb789ef9536a8130d1cdb9337ef108a","dd11e7960929492abc00f2eda654753532e95742"],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a752aa6cb603e5d798f66520ec781b720e1d0ab2","e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd":["0db474afed4ffdc5df350db03f966d41dfdf1a9b"],"0db474afed4ffdc5df350db03f966d41dfdf1a9b":["dd11e7960929492abc00f2eda654753532e95742"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a752aa6cb603e5d798f66520ec781b720e1d0ab2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"dd11e7960929492abc00f2eda654753532e95742":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","0db474afed4ffdc5df350db03f966d41dfdf1a9b"],"9dee311b2816356910363a8d15fc076caf6367eb":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["dd11e7960929492abc00f2eda654753532e95742","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"a752aa6cb603e5d798f66520ec781b720e1d0ab2":["55b50463286869f584cf849d1587a0fcd54d1dfa","e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","1f69e96b07e265f3e18957be540909b01fae36f8"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd":["a752aa6cb603e5d798f66520ec781b720e1d0ab2"],"0db474afed4ffdc5df350db03f966d41dfdf1a9b":["a62ecbb7d4c5e8e9fb0b2d3dedb2d84a8d388efd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dee311b2816356910363a8d15fc076caf6367eb"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["5b8ee93140fd0efef7e101786e3ed5160a700b5f","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","3beec0828e9973095a4de926b078ebc3bdbfd2aa","55b50463286869f584cf849d1587a0fcd54d1dfa","1f69e96b07e265f3e18957be540909b01fae36f8"],"1f69e96b07e265f3e18957be540909b01fae36f8":["a966532d92cf9ba2856f15a8140151bb6b518e4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}