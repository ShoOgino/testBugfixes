{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","commits":[{"id":"9837f40c922407d857991971de6def18eda0857b","date":1529994497,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaZonesPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'west'\" +\n        \"    },\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'east'    \" +\n        \"    }}}\";\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<34%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'<67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData(dataproviderdata));\n\n    List<String> nodes = new ArrayList<>();\n\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaZonesPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'west'\" +\n        \"    },\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'east'    \" +\n        \"    }}}\";\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<34%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'<67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData(dataproviderdata));\n\n    List<String> nodes = new ArrayList<>();\n\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","pathOld":"/dev/null","sourceNew":"  public void testReplicaZonesPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'west'\" +\n        \"    },\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'east'    \" +\n        \"    }}}\";\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<34%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'<67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData(dataproviderdata));\n\n    List<String> nodes = new ArrayList<>();\n\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","sourceNew":"  public void testReplicaZonesPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'west'\" +\n        \"    },\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'east'    \" +\n        \"    }}}\";\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'33%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData(dataproviderdata));\n\n    List<String> nodes = new ArrayList<>();\n\n    int westCount = 0, eastCount = 0;\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (\"10.0.0.6:8983_solr\".equals(node)) eastCount++;\n      if (\"10.0.0.6:7574_solr\".equals(node)) westCount++;\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n    assertEquals(8, westCount);\n    assertEquals(4, eastCount);\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","sourceOld":"  public void testReplicaZonesPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'west'\" +\n        \"    },\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'east'    \" +\n        \"    }}}\";\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'<34%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'<67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData(dataproviderdata));\n\n    List<String> nodes = new ArrayList<>();\n\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","sourceNew":"  public void testReplicaZonesPercentage() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'33%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData((Map<String, Object>) loadFromResource(\"testReplicaZonesPercentage.json\")));\n\n    List<String> nodes = new ArrayList<>();\n\n    int westCount = 0, eastCount = 0;\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (\"10.0.0.6:8983_solr\".equals(node)) eastCount++;\n      if (\"10.0.0.6:7574_solr\".equals(node)) westCount++;\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n    assertEquals(8, westCount);\n    assertEquals(4, eastCount);\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","sourceOld":"  public void testReplicaZonesPercentage() {\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes':[\" +\n        \"    '10.0.0.6:7574_solr',\" +\n        \"    '10.0.0.6:8983_solr'],\" +\n        \"  'replicaInfo':{\" +\n        \"    '10.0.0.6:7574_solr':{},\" +\n        \"    '10.0.0.6:8983_solr':{}},\" +\n        \"  'nodeValues':{\" +\n        \"    '10.0.0.6:7574_solr':{\" +\n        \"      'node':'10.0.0.6:7574_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'west'\" +\n        \"    },\" +\n        \"    '10.0.0.6:8983_solr':{\" +\n        \"      'node':'10.0.0.6:8983_solr',\" +\n        \"      'cores':0,\" +\n        \"      'sysprop.az': 'east'    \" +\n        \"    }}}\";\n\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'33%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData(dataproviderdata));\n\n    List<String> nodes = new ArrayList<>();\n\n    int westCount = 0, eastCount = 0;\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (\"10.0.0.6:8983_solr\".equals(node)) eastCount++;\n      if (\"10.0.0.6:7574_solr\".equals(node)) westCount++;\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n    assertEquals(8, westCount);\n    assertEquals(4, eastCount);\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testReplicaZonesPercentage() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'33%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData((Map<String, Object>) loadFromResource(\"testReplicaZonesPercentage.json\")));\n\n    List<String> nodes = new ArrayList<>();\n\n    int westCount = 0, eastCount = 0;\n    for (int i = 0; i < 12; i++) {\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (\"10.0.0.6:8983_solr\".equals(node)) eastCount++;\n      if (\"10.0.0.6:7574_solr\".equals(node)) westCount++;\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n    assertEquals(8, westCount);\n    assertEquals(4, eastCount);\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","sourceOld":"  public void testReplicaZonesPercentage() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'33%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData((Map<String, Object>) loadFromResource(\"testReplicaZonesPercentage.json\")));\n\n    List<String> nodes = new ArrayList<>();\n\n    int westCount = 0, eastCount = 0;\n    for (int i = 0; i < 12; i++) {\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (\"10.0.0.6:8983_solr\".equals(node)) eastCount++;\n      if (\"10.0.0.6:7574_solr\".equals(node)) westCount++;\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n    assertEquals(8, westCount);\n    assertEquals(4, eastCount);\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testReplicaZonesPercentage().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testReplicaZonesPercentage() {\n    String autoScalingjson = \"  { cluster-policy:[\" +\n        \"    { replica :'33%', shard: '#EACH', sysprop.az : east},\" +\n        \"    { replica :'67%', shard: '#EACH', sysprop.az : west}\" +\n        \"    ],\" +\n        \"  cluster-preferences :[{ minimize : cores }]}\";\n\n    String COLL_NAME = \"percentColl\";\n    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n\n    Policy.Transaction txn = new Policy.Transaction(autoScalingConfig.getPolicy());\n    txn.open(cloudManagerWithData((Map<String, Object>) loadFromResource(\"testReplicaZonesPercentage.json\")));\n\n    List<String> nodes = new ArrayList<>();\n\n    int westCount = 0, eastCount = 0;\n    for (int i = 0; i < 12; i++) {\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest suggestion = txn.getCurrentSession()\n          .getSuggester(ADDREPLICA)\n          .hint(Hint.COLL_SHARD, new Pair<>(COLL_NAME, \"shard1\"))\n          .getSuggestion();\n      assertNotNull(suggestion);\n      String node = suggestion.getParams().get(\"node\");\n      nodes.add(node);\n      if (\"10.0.0.6:8983_solr\".equals(node)) eastCount++;\n      if (\"10.0.0.6:7574_solr\".equals(node)) westCount++;\n      if (i % 3 == 1) assertEquals(\"10.0.0.6:8983_solr\", node);\n      else assertEquals(\"10.0.0.6:7574_solr\", node);\n    }\n    assertEquals(8, westCount);\n    assertEquals(4, eastCount);\n\n    List<Violation> violations = txn.close();\n    assertTrue(violations.isEmpty());\n    Policy.Session latestSession = txn.getCurrentSession();\n    assertEquals(\"10.0.0.6:7574_solr\", latestSession.matrix.get(0).node);\n    AtomicInteger count = new AtomicInteger();\n    latestSession.matrix.get(0).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(8, count.get());\n\n    assertEquals(\"10.0.0.6:8983_solr\", latestSession.matrix.get(1).node);\n    count.set(0);\n    latestSession.matrix.get(1).forEachReplica(replicaInfo -> count.incrementAndGet());\n    assertEquals(4, count.get());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["f5a27e78e3d29dee02bab19ded25336471e96882"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9837f40c922407d857991971de6def18eda0857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a27e78e3d29dee02bab19ded25336471e96882":["16a22f8085bb46850c91784e94f7714345011404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"16a22f8085bb46850c91784e94f7714345011404":["9837f40c922407d857991971de6def18eda0857b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9837f40c922407d857991971de6def18eda0857b"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","9837f40c922407d857991971de6def18eda0857b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9837f40c922407d857991971de6def18eda0857b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","16a22f8085bb46850c91784e94f7714345011404","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f5a27e78e3d29dee02bab19ded25336471e96882":["9ba1b632c041956c93c41aa1143d16a567014891"],"16a22f8085bb46850c91784e94f7714345011404":["f5a27e78e3d29dee02bab19ded25336471e96882"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}