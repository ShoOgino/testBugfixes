{"path":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"/dev/null","sourceNew":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"163fe85a71d778fd2b7747f65ca27b54829e2e57","date":1279898785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    // nocommit\n    if (!codecs.containsKey(codec.name) || codec.name.equals(\"PreFlex\")) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97","date":1280158618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    // nocommit\n    if (!codecs.containsKey(codec.name) || codec.name.equals(\"PreFlex\")) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1e1d807860d59dc4157506e7c4073c5f5f0597c","date":1280408774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":"  public synchronized void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":"  public synchronized void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","sourceOld":"  public void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#register(Codec).mjava","sourceNew":null,"sourceOld":"  public synchronized void register(Codec codec) {\n    if (codec.name == null) {\n      throw new IllegalArgumentException(\"code.name is null\");\n    }\n    if (!codecs.containsKey(codec.name)) {\n      codecs.put(codec.name, codec);\n      codec.getExtensions(knownExtensions);\n    } else if (codecs.get(codec.name) != codec) {\n      throw new IllegalArgumentException(\"codec '\" + codec.name + \"' is already registered as a different codec instance\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["b1e1d807860d59dc4157506e7c4073c5f5f0597c"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","b1e1d807860d59dc4157506e7c4073c5f5f0597c"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["163fe85a71d778fd2b7747f65ca27b54829e2e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"b1e1d807860d59dc4157506e7c4073c5f5f0597c":["4b103252dee6afa1b6d7a622c773d178788eb85a"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["3242a09f703274d3b9283f2064a1a33064b53a1b","b1e1d807860d59dc4157506e7c4073c5f5f0597c"],"163fe85a71d778fd2b7747f65ca27b54829e2e57":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3242a09f703274d3b9283f2064a1a33064b53a1b","4b103252dee6afa1b6d7a622c773d178788eb85a","163fe85a71d778fd2b7747f65ca27b54829e2e57"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"b1e1d807860d59dc4157506e7c4073c5f5f0597c":["7b91922b55d15444d554721b352861d028eb8278","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}