{"path":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.HDFSSortedLogReader#next().mjava","commits":[{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.HDFSSortedLogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.HDFSSortedLogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.HDFSSortedLogReader#next().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.HDFSSortedLogReader#next().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.HDFSSortedLogReader#next().mjava","sourceNew":"    @Override\n    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n\n","sourceOld":"    @Override\n    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["be320990bdc77e643388fa801e75017f19289c42"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be320990bdc77e643388fa801e75017f19289c42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f996f8177b9204bdc92f7164460c6cefad9ac99a","be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192"],"be320990bdc77e643388fa801e75017f19289c42":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}