{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.subResults.size());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.subResults.size());\n    \n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.subResults.size());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.subResults.size());\n    \n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.getNumSubResults());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.getNumSubResults());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(true);\n    List<FacetResult> countResNoComplement = findFacets(false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.subResults.size());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.subResults.size());\n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    Query q = new MatchAllDocsQuery(); //new TermQuery(new Term(TEXT,\"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \"+q);\n    }\n    ScoredDocIdCollector dCollector = \n      ScoredDocIdCollector.create(indexReader.maxDoc(),false); // scoring is disabled\n    searcher.search(q, dCollector);\n    \n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(dCollector.getScoredDocIDs(), true);\n    List<FacetResult> countResNoComplement = findFacets(dCollector.getScoredDocIDs(), false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.subResults.size());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.subResults.size());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/complements/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetsAccumulatorWithComplement#doTestComplements().mjava","sourceNew":"  private void doTestComplements() throws Exception {\n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(true);\n    List<FacetResult> countResNoComplement = findFacets(false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.subResults.size());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.subResults.size());\n  }\n\n","sourceOld":"  private void doTestComplements() throws Exception {\n    // verify by facet values\n    List<FacetResult> countResWithComplement = findFacets(true);\n    List<FacetResult> countResNoComplement = findFacets(false);\n    \n    assertEquals(\"Wrong number of facet count results with complement!\",1,countResWithComplement.size());\n    assertEquals(\"Wrong number of facet count results no complement!\",1,countResNoComplement.size());\n    \n    FacetResultNode parentResWithComp = countResWithComplement.get(0).getFacetResultNode();\n    FacetResultNode parentResNoComp = countResWithComplement.get(0).getFacetResultNode();\n    \n    assertEquals(\"Wrong number of top count aggregated categories with complement!\",3,parentResWithComp.subResults.size());\n    assertEquals(\"Wrong number of top count aggregated categories no complement!\",3,parentResNoComp.subResults.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","811cdb4a80352766eb0c762e48972707a924e5cd"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["811cdb4a80352766eb0c762e48972707a924e5cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["07155cdd910937cdf6877e48884d5782845c8b8b","811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"811cdb4a80352766eb0c762e48972707a924e5cd":["07155cdd910937cdf6877e48884d5782845c8b8b","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}