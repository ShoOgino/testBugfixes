{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedFacetField(String,String,String[]).mjava","commits":[{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedFacetField(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedFacetField(String nonDocValuesField, String dvFieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, numbers[i], dvFieldName, numbers[i + 10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i + 10]));\n     if (rarely()) {\n       assertU(commit());\n     }\n    }\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[11] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[12] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1], dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='0']\"\n        );\n    \n    assertU(adoc(\"id\", \"10\")); // add missing values\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='1']\"\n        );\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.mincount\", \"3\"), \n        \"//*[@numFound='11']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=0\");\n    \n    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n    clearIndex();\n    assertU(commit());\n    \n    String smaller, larger;\n    try {\n      if (Long.parseLong(numbers[1]) < Long.parseLong(numbers[2])) {\n        smaller = numbers[1];\n        larger = numbers[2];\n      } else {\n        smaller = numbers[2];\n        larger = numbers[1];\n      }\n    } catch (NumberFormatException e) {\n      try {\n        if (Double.valueOf(numbers[1]) < Double.valueOf(numbers[2])) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      } catch (NumberFormatException e2) {\n        if (DateMathParser.parseMath(null, numbers[1]).getTime() < DateMathParser.parseMath(null, numbers[2]).getTime()) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      }\n    }\n    \n    assertU(adoc(\"id\", \"1\", dvFieldName, smaller, dvFieldName, larger));\n    assertU(adoc(\"id\", \"2\", dvFieldName, larger));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + larger + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.sort\", \"index\"), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller +\"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\"+ larger + \"'][.='2']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    clearIndex();\n    assertU(commit());\n\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedFacetField(String nonDocValuesField, String dvFieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, numbers[i], dvFieldName, numbers[i + 10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i + 10]));\n     if (rarely()) {\n       assertU(commit());\n     }\n    }\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[11] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[12] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1], dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='0']\"\n        );\n    \n    assertU(adoc(\"id\", \"10\")); // add missing values\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='1']\"\n        );\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.mincount\", \"3\"), \n        \"//*[@numFound='11']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=0\");\n    \n    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n    clearIndex();\n    assertU(commit());\n    \n    String smaller, larger;\n    try {\n      if (Long.parseLong(numbers[1]) < Long.parseLong(numbers[2])) {\n        smaller = numbers[1];\n        larger = numbers[2];\n      } else {\n        smaller = numbers[2];\n        larger = numbers[1];\n      }\n    } catch (NumberFormatException e) {\n      try {\n        if (Double.valueOf(numbers[1]) < Double.valueOf(numbers[2])) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      } catch (NumberFormatException e2) {\n        if (DateMathParser.parseMath(null, numbers[1]).getTime() < DateMathParser.parseMath(null, numbers[2]).getTime()) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      }\n    }\n    \n    assertU(adoc(\"id\", \"1\", dvFieldName, smaller, dvFieldName, larger));\n    assertU(adoc(\"id\", \"2\", dvFieldName, larger));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + larger + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.sort\", \"index\"), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller +\"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\"+ larger + \"'][.='2']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    clearIndex();\n    assertU(commit());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":1,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldMultiValuedFacetField(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldMultiValuedFacetField(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldMultiValuedFacetField(String nonDocValuesField, String dvFieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, numbers[i], dvFieldName, numbers[i + 10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i + 10]));\n     if (rarely()) {\n       assertU(commit());\n     }\n    }\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[11] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[12] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1], dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='0']\"\n        );\n    \n    assertU(adoc(\"id\", \"10\")); // add missing values\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='1']\"\n        );\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.mincount\", \"3\"), \n        \"//*[@numFound='11']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=0\");\n    \n    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n    clearIndex();\n    assertU(commit());\n    \n    String smaller, larger;\n    try {\n      if (Long.parseLong(numbers[1]) < Long.parseLong(numbers[2])) {\n        smaller = numbers[1];\n        larger = numbers[2];\n      } else {\n        smaller = numbers[2];\n        larger = numbers[1];\n      }\n    } catch (NumberFormatException e) {\n      try {\n        if (Double.valueOf(numbers[1]) < Double.valueOf(numbers[2])) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      } catch (NumberFormatException e2) {\n        if (DateMathParser.parseMath(null, numbers[1]).getTime() < DateMathParser.parseMath(null, numbers[2]).getTime()) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      }\n    }\n    \n    assertU(adoc(\"id\", \"1\", dvFieldName, smaller, dvFieldName, larger));\n    assertU(adoc(\"id\", \"2\", dvFieldName, larger));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + larger + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.sort\", \"index\"), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller +\"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\"+ larger + \"'][.='2']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    clearIndex();\n    assertU(commit());\n\n  }\n\n","sourceOld":"  private void testPointFieldMultiValuedFacetField(String nonDocValuesField, String dvFieldName, String[] numbers) throws Exception {\n    assert numbers != null && numbers.length == 20;\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).multiValued());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);\n    \n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), dvFieldName, numbers[i], dvFieldName, numbers[i + 10], \n          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i + 10]));\n     if (rarely()) {\n       assertU(commit());\n     }\n    }\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='10']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[11] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[12] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    \n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\");\n    \n    assertU(adoc(\"id\", \"10\", dvFieldName, numbers[1], nonDocValuesField, numbers[1], dvFieldName, numbers[1], nonDocValuesField, numbers[1]));\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='0']\"\n        );\n    \n    assertU(adoc(\"id\", \"10\")); // add missing values\n    assertU(commit());\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.missing\", \"true\"), \n        \"//*[@numFound='11']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[1] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[2] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[3] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[not(@name)][.='1']\"\n        );\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.mincount\", \"3\"), \n        \"//*[@numFound='11']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=0\");\n    \n    assertQ(req(\"q\", \"id:0\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[0] + \"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + numbers[10] + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());\n    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);\n    assertQEx(\"Expecting Exception\", \n        \"Can't facet on a PointField without docValues\", \n        req(\"q\", \"*:*\", \"fl\", \"id, \" + nonDocValuesField, \"facet\", \"true\", \"facet.field\", nonDocValuesField), \n        SolrException.ErrorCode.BAD_REQUEST);\n    clearIndex();\n    assertU(commit());\n    \n    String smaller, larger;\n    try {\n      if (Long.parseLong(numbers[1]) < Long.parseLong(numbers[2])) {\n        smaller = numbers[1];\n        larger = numbers[2];\n      } else {\n        smaller = numbers[2];\n        larger = numbers[1];\n      }\n    } catch (NumberFormatException e) {\n      try {\n        if (Double.valueOf(numbers[1]) < Double.valueOf(numbers[2])) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      } catch (NumberFormatException e2) {\n        if (DateMathParser.parseMath(null, numbers[1]).getTime() < DateMathParser.parseMath(null, numbers[2]).getTime()) {\n          smaller = numbers[1];\n          larger = numbers[2];\n        } else {\n          smaller = numbers[2];\n          larger = numbers[1];\n        }\n      }\n    }\n    \n    assertU(adoc(\"id\", \"1\", dvFieldName, smaller, dvFieldName, larger));\n    assertU(adoc(\"id\", \"2\", dvFieldName, larger));\n    assertU(commit());\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + larger + \"'][.='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller + \"'][.='1']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + dvFieldName, \"facet\", \"true\", \"facet.field\", dvFieldName, \"facet.sort\", \"index\"), \n        \"//*[@numFound='2']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\" + smaller +\"'][.='1']\",\n        \"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int[@name='\"+ larger + \"'][.='2']\",\n        \"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='\" + dvFieldName +\"']/int)=2\");\n    \n    clearIndex();\n    assertU(commit());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}