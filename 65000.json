{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","commits":[{"id":"c533b201163bd7b15aa8881f922f9289a7668187","date":1452268593,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"/dev/null","sourceNew":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    // Load solr data\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    // Load solr data\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    // Load solr data\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    // Load solr data\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  private void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    clearData();\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", zkServer.getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n    Statement statement = connection.createStatement();\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n    statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n    statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    statement.close();\n    connection.close();\n    \n    // Load solr data\n    indexr(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\");\n    indexr(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\");\n    indexr(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\");\n    indexr(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\");\n    indexr(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\");\n    indexr(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\");\n    indexr(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\");\n    indexr(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\");\n    indexr(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\");\n    indexr(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\");\n    commit();\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(collection1, fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e794861f10ef1c7b74759786b22acdfa13d9625b","date":1477605523,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=true),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb7c01f80e536140839f2b15359fe04106b0eced","date":1479265585,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test for no alias\n    expression =\n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test for alias\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\", get_column_name=true),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test for no alias\n    expression =\n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test for alias\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTION, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=true. In hsqldb if this value is set to true then the use of an \n    // as clause in a select will have no effect. As such even though we have PEOPLE.ID as PERSONID we will still expect the column\n    // name to come out as ID and not PERSONID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=true),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test\n    // the test here is the setting of the property get_column_name=false. In hsqldb if this value is set to false then the use of an \n    // as clause in a select will have effect. As such we have PEOPLE.ID as PERSONID we will still expect the column name to come out \n    // PERSONID and not ID\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTION + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\", get_column_name=false),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test for no alias\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n\n      // Basic test for alias\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n              + \"    PERSONID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test for no alias\n    expression =\n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test for alias\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/JDBCStreamTest#testJDBCSolrInnerJoinExpressionWithProperties().mjava","sourceNew":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      // Basic test for no alias\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n              + \"    ID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n\n      // Basic test for alias\n      expression =\n          \"innerJoin(\"\n              + \"  select(\"\n              + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n              + \"    personId_i as personId,\"\n              + \"    rating_f as rating\"\n              + \"  ),\"\n              + \"  select(\"\n              + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n              + \"    PERSONID as personId,\"\n              + \"    NAME as personName,\"\n              + \"    COUNTRY_NAME as country\"\n              + \"  ),\"\n              + \"  on=\\\"personId\\\"\"\n              + \")\";\n\n      stream = factory.constructStream(expression);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n\n      assertEquals(10, tuples.size());\n      assertOrderOf(tuples, \"personId\", 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n      assertOrderOf(tuples, \"rating\", 3.5d, 5d, 2.2d, 4.3d, 3.5d, 3d, 3d, 4d, 4.1d, 4.8d);\n      assertOrderOf(tuples, \"personName\", \"Emma\", \"Grace\", \"Hailey\", \"Isabella\", \"Lily\", \"Madison\", \"Mia\", \"Natalie\", \"Olivia\", \"Samantha\");\n      assertOrderOf(tuples, \"country\", \"Netherlands\", \"United States\", \"Netherlands\", \"Netherlands\", \"Netherlands\", \"United States\", \"United States\", \"Netherlands\", \"Netherlands\", \"United States\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testJDBCSolrInnerJoinExpressionWithProperties() throws Exception{\n    \n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(COLLECTIONORALIAS, cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"jdbc\", JDBCStream.class);\n    \n    // Load Database Data\n    try (Connection connection = DriverManager.getConnection(\"jdbc:hsqldb:mem:.\");\n         Statement statement = connection.createStatement()) {\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('US', 'United States')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NL', 'Netherlands')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NP', 'Nepal')\");\n      statement.executeUpdate(\"insert into COUNTRIES (CODE,COUNTRY_NAME) values ('NO', 'Norway')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (11,'Emma','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (12,'Grace','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (13,'Hailey','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (14,'Isabella','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (15,'Lily','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (16,'Madison','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (17,'Mia','US')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (18,'Natalie','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (19,'Olivia','NL')\");\n      statement.executeUpdate(\"insert into PEOPLE (ID, NAME, COUNTRY_CODE) values (20,'Samantha','US')\");\n    }\n    \n    // Load solr data\n    new UpdateRequest()\n        .add(id, \"1\", \"rating_f\", \"3.5\", \"personId_i\", \"11\")\n        .add(id, \"2\", \"rating_f\", \"5\", \"personId_i\", \"12\")\n        .add(id, \"3\", \"rating_f\", \"2.2\", \"personId_i\", \"13\")\n        .add(id, \"4\", \"rating_f\", \"4.3\", \"personId_i\", \"14\")\n        .add(id, \"5\", \"rating_f\", \"3.5\", \"personId_i\", \"15\")\n        .add(id, \"6\", \"rating_f\", \"3\", \"personId_i\", \"16\")\n        .add(id, \"7\", \"rating_f\", \"3\", \"personId_i\", \"17\")\n        .add(id, \"8\", \"rating_f\", \"4\", \"personId_i\", \"18\")\n        .add(id, \"9\", \"rating_f\", \"4.1\", \"personId_i\", \"19\")\n        .add(id, \"10\", \"rating_f\", \"4.8\", \"personId_i\", \"20\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expression;\n    TupleStream stream;\n    List<Tuple> tuples;\n    \n    // Basic test for no alias\n    expression =\n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\"),\"\n            + \"    ID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n    \n    // Basic test for alias\n    expression =   \n              \"innerJoin(\"\n            + \"  select(\"\n            + \"    search(\" + COLLECTIONORALIAS + \", fl=\\\"personId_i,rating_f\\\", q=\\\"rating_f:*\\\", sort=\\\"personId_i asc\\\"),\"\n            + \"    personId_i as personId,\"\n            + \"    rating_f as rating\"\n            + \"  ),\"\n            + \"  select(\"\n            + \"    jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID as PERSONID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"PERSONID asc\\\"),\"\n            + \"    PERSONID as personId,\"\n            + \"    NAME as personName,\"\n            + \"    COUNTRY_NAME as country\"\n            + \"  ),\"\n            + \"  on=\\\"personId\\\"\"\n            + \")\";\n\n    stream = factory.constructStream(expression);\n    tuples = getTuples(stream);\n    \n    assertEquals(10, tuples.size());\n    assertOrderOf(tuples, \"personId\", 11,12,13,14,15,16,17,18,19,20);\n    assertOrderOf(tuples, \"rating\", 3.5d,5d,2.2d,4.3d,3.5d,3d,3d,4d,4.1d,4.8d);\n    assertOrderOf(tuples, \"personName\", \"Emma\",\"Grace\",\"Hailey\",\"Isabella\",\"Lily\",\"Madison\",\"Mia\",\"Natalie\",\"Olivia\",\"Samantha\");\n    assertOrderOf(tuples, \"country\", \"Netherlands\",\"United States\",\"Netherlands\",\"Netherlands\",\"Netherlands\",\"United States\",\"United States\",\"Netherlands\",\"Netherlands\",\"United States\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["bb7c01f80e536140839f2b15359fe04106b0eced"],"73450c0955930295d34703e7ddbfc6973b7a121a":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"bb7c01f80e536140839f2b15359fe04106b0eced":["8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["bb7c01f80e536140839f2b15359fe04106b0eced"],"b940572a59da1b42b6c20ab5278155b12816807a":["c533b201163bd7b15aa8881f922f9289a7668187"],"e794861f10ef1c7b74759786b22acdfa13d9625b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["c533b201163bd7b15aa8881f922f9289a7668187","b940572a59da1b42b6c20ab5278155b12816807a"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["c533b201163bd7b15aa8881f922f9289a7668187","73450c0955930295d34703e7ddbfc6973b7a121a"],"c533b201163bd7b15aa8881f922f9289a7668187":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["e794861f10ef1c7b74759786b22acdfa13d9625b","bb7c01f80e536140839f2b15359fe04106b0eced"],"8c969f15cd04d31e520319c619a445ae21f02d72":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"73450c0955930295d34703e7ddbfc6973b7a121a":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","8c969f15cd04d31e520319c619a445ae21f02d72"],"bb7c01f80e536140839f2b15359fe04106b0eced":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c405288c4553ffb50ab8ca5adbdde9881bcec4e4","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"e794861f10ef1c7b74759786b22acdfa13d9625b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["e794861f10ef1c7b74759786b22acdfa13d9625b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"c533b201163bd7b15aa8881f922f9289a7668187":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c533b201163bd7b15aa8881f922f9289a7668187"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["bb7c01f80e536140839f2b15359fe04106b0eced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}