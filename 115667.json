{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","commits":[{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader).mjava","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"969718c368b28ed1b2335ea2deb275c696cddb4f","date":1498803580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.add(new ReplicaPosition(e.getKey(), i, Replica.Type.NRT, value.get(i)));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d92226151c91fb4bebcca6d18782d1c84aee2cd","date":1498804792,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.add(new ReplicaPosition(e.getKey(), i, Replica.Type.NRT, value.get(i)));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static Map<ReplicaAssigner.Position, String> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                                              String policyName, ZkStateReader zkStateReader,\n                                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      Map<ReplicaAssigner.Position, String> result = new HashMap<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.put(new ReplicaAssigner.Position(e.getKey(), i, Replica.Type.NRT), value.get(i));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1735d662b62f98976dc6cccfe9d327c5e7b22dff","date":1498984143,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,int,int,String,ZkStateReader,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","sourceNew":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames,\n                                                              int nrtReplicas,\n                                                              int tlogReplicas,\n                                                              int pullReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, String> kvMap = Collections.singletonMap(collName, policyName);\n      return PolicyHelper.getReplicaLocations(\n          collName,\n          autoScalingJson,\n          clientDataProvider,\n          kvMap,\n          shardNames,\n          nrtReplicas,\n          tlogReplicas,\n          pullReplicas,\n          nodesList);\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.add(new ReplicaPosition(e.getKey(), i, Replica.Type.NRT, value.get(i)));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.add(new ReplicaPosition(e.getKey(), i, Replica.Type.NRT, value.get(i)));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#getPositionsUsingPolicy(String,List[String],int,String,ZkStateReader,List[String]).mjava","sourceNew":null,"sourceOld":"  public static List<ReplicaPosition> getPositionsUsingPolicy(String collName, List<String> shardNames, int numReplicas,\n                                                              String policyName, ZkStateReader zkStateReader,\n                                                              List<String> nodesList) throws KeeperException, InterruptedException {\n    try (CloudSolrClient csc = new CloudSolrClient.Builder()\n        .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n        .build()) {\n      SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n      Map<String, Object> autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);\n      Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n          autoScalingJson,\n          clientDataProvider, singletonMap(collName, policyName), shardNames, numReplicas, nodesList);\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n        List<String> value = e.getValue();\n        for (int i = 0; i < value.size(); i++) {\n          result.add(new ReplicaPosition(e.getKey(), i, Replica.Type.NRT, value.get(i)));\n        }\n      }\n      return result;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing CloudSolrClient\",e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"25e4a4cddd699db6cce60282e747c7705897e821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["969718c368b28ed1b2335ea2deb275c696cddb4f","1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25e4a4cddd699db6cce60282e747c7705897e821"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["28288370235ed02234a64753cdbf0c6ec096304a"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["969718c368b28ed1b2335ea2deb275c696cddb4f","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"1735d662b62f98976dc6cccfe9d327c5e7b22dff":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["0d92226151c91fb4bebcca6d18782d1c84aee2cd"],"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"0d92226151c91fb4bebcca6d18782d1c84aee2cd":["1735d662b62f98976dc6cccfe9d327c5e7b22dff"],"969718c368b28ed1b2335ea2deb275c696cddb4f":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","25e4a4cddd699db6cce60282e747c7705897e821","74aea047dff7f7c38a2d766827bd20d356f98c6a","28288370235ed02234a64753cdbf0c6ec096304a"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["969718c368b28ed1b2335ea2deb275c696cddb4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}