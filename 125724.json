{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","commits":[{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor[FacetRequest]#process().mjava","sourceNew":"  public void process() throws IOException {\n    handleDomainChanges();\n  }\n\n","sourceOld":"  public void process() throws IOException {\n    handleDomainChanges();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23dfab8006bb57825127140eeff51baa06028cf7","date":1477767259,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","sourceNew":"  public void process() throws IOException {\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    handleFilters();\n    handleDomainChanges();\n    if (filter != null) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  public void process() throws IOException {\n    handleDomainChanges();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5","date":1477788234,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","sourceNew":"  public void process() throws IOException {\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n    boolean appliedFilters = handleDomainChanges();\n    if (filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  public void process() throws IOException {\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    handleFilters();\n    handleDomainChanges();\n    if (filter != null) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","sourceNew":"  public void process() throws IOException {\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n    boolean appliedFilters = handleDomainChanges();\n    if (filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","sourceOld":"  public void process() throws IOException {\n    handleDomainChanges();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12e7f5233d4a77959b66fda90df286dace8a9a0","date":1478016064,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","sourceNew":"  public void process() throws IOException {\n    handleDomainChanges();\n  }\n\n","sourceOld":"  public void process() throws IOException {\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n    boolean appliedFilters = handleDomainChanges();\n    if (filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetProcessor#process().mjava","sourceNew":"  public void process() throws IOException {\n    handleDomainChanges();\n  }\n\n","sourceOld":"  public void process() throws IOException {\n    // Check filters... if we do have filters they apply after domain changes.\n    // We still calculate them first because we can use it in a parent->child domain change.\n    evalFilters();\n    boolean appliedFilters = handleDomainChanges();\n    if (filter != null && !appliedFilters) {\n      fcontext.base = fcontext.base.intersection( filter );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["320888923ec13b91f53082558f01f4c9960dd226","d12e7f5233d4a77959b66fda90df286dace8a9a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23dfab8006bb57825127140eeff51baa06028cf7":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5":["23dfab8006bb57825127140eeff51baa06028cf7"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"320888923ec13b91f53082558f01f4c9960dd226":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d12e7f5233d4a77959b66fda90df286dace8a9a0"]},"commit2Childs":{"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["23dfab8006bb57825127140eeff51baa06028cf7","320888923ec13b91f53082558f01f4c9960dd226"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"23dfab8006bb57825127140eeff51baa06028cf7":["0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5"],"0a76ad9d8f2ff7e5969bcbf5962d4a4cc574f5c5":["d12e7f5233d4a77959b66fda90df286dace8a9a0","320888923ec13b91f53082558f01f4c9960dd226"],"320888923ec13b91f53082558f01f4c9960dd226":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"d12e7f5233d4a77959b66fda90df286dace8a9a0":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}