{"path":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testRangeQueryIdCollating().mjava","commits":[{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testRangeQueryIdCollating().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueryIdCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n        \n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n        \n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test id, bounded on both ends\n        \n    result = search.search(csrq(\"id\",minIP,maxIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\",minIP,maxIP,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(csrq(\"id\",minIP,maxIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(csrq(\"id\",minIP,maxIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(csrq(\"id\",medIP,maxIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(csrq(\"id\",minIP,medIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\",minIP,null,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\",null,maxIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\",minIP,null,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(csrq(\"id\",null,maxIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(csrq(\"id\",medIP,maxIP,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(csrq(\"id\",minIP,medIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\",minIP,minIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"id\",medIP,medIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"id\",maxIP,maxIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n                     \n    result = search.search(csrq(\"id\",minIP,minIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"id\",null,minIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"id\",maxIP,maxIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"id\",maxIP,null,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"id\",medIP,medIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestMultiTermConstantScore#testRangeQueryIdCollating().mjava","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testRangeQueryIdCollating().mjava","sourceNew":"  public void testRangeQueryIdCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n\n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n\n    int numDocs = reader.numDocs();\n\n    assertEquals(\"num of docs\", numDocs, 1 + maxId - minId);\n\n    ScoreDoc[] result;\n\n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test id, bounded on both ends\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", minIP, maxIP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs - 2, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1 + maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1 + medId - minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\", minIP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\", minIP, null, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", null, maxIP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs - 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, maxIP, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId - medId, result.length);\n\n    result = search.search(csrq(\"id\", minIP, medIP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId - minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\", minIP, minIP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"id\", medIP, medIP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"id\", maxIP, maxIP, F, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n\n    result = search.search(csrq(\"id\", minIP, minIP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"id\", null, minIP, F, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"id\", maxIP, maxIP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"id\", maxIP, null, T, F, c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"id\", medIP, medIP, T, T, c), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T,c\", 1, result.length);\n  }\n\n","sourceOld":"  public void testRangeQueryIdCollating() throws IOException {\n    // NOTE: uses index build in *super* setUp\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int medId = ((maxId - minId) / 2);\n        \n    String minIP = pad(minId);\n    String maxIP = pad(maxId);\n    String medIP = pad(medId);\n    \n    int numDocs = reader.numDocs();\n        \n    assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n    ScoreDoc[] result;\n        \n    Collator c = Collator.getInstance(Locale.ENGLISH);\n\n    // test id, bounded on both ends\n        \n    result = search.search(csrq(\"id\",minIP,maxIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\",minIP,maxIP,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"all but last\", numDocs-1, result.length);\n\n    result = search.search(csrq(\"id\",minIP,maxIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"all but first\", numDocs-1, result.length);\n        \n    result = search.search(csrq(\"id\",minIP,maxIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n    result = search.search(csrq(\"id\",medIP,maxIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n    result = search.search(csrq(\"id\",minIP,medIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n    // unbounded id\n\n    result = search.search(csrq(\"id\",minIP,null,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"min and up\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\",null,maxIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"max and down\", numDocs, result.length);\n\n    result = search.search(csrq(\"id\",minIP,null,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n    result = search.search(csrq(\"id\",null,maxIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n    result = search.search(csrq(\"id\",medIP,maxIP,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n    result = search.search(csrq(\"id\",minIP,medIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n    // very small sets\n\n    result = search.search(csrq(\"id\",minIP,minIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"id\",medIP,medIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,F,F,c\", 0, result.length);\n    result = search.search(csrq(\"id\",maxIP,maxIP,F,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,F,F,c\", 0, result.length);\n                     \n    result = search.search(csrq(\"id\",minIP,minIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"min,min,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"id\",null,minIP,F,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"nul,min,F,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"id\",maxIP,maxIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"max,max,T,T,c\", 1, result.length);\n    result = search.search(csrq(\"id\",maxIP,null,T,F,c), null, numDocs).scoreDocs;\n    assertEquals(\"max,nul,T,T,c\", 1, result.length);\n\n    result = search.search(csrq(\"id\",medIP,medIP,T,T,c), null, numDocs).scoreDocs;\n    assertEquals(\"med,med,T,T,c\", 1, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b33dc4652df2747e38f9782fde82bd426b77c538":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"]},"commit2Childs":{"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b33dc4652df2747e38f9782fde82bd426b77c538"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}