{"path":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessor.FirstErrTracker#annotate(List[ToleratedUpdateError]).mjava","commits":[{"id":"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef","date":1458928975,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessor.FirstErrTracker#annotate(List[ToleratedUpdateError]).mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Annotates the first exception (which may already have been thrown, or be thrown in the future) with \n     * the metadata from this update processor.  For use in {@link TolerantUpdateProcessor#finish}\n     */\n    public void annotate(List<ToleratedUpdateError> errors) {\n\n      if (null == first) {\n        return; // no exception to annotate\n      }\n      \n      assert null != errors : \"how do we have an exception to annotate w/o any errors?\";\n      \n      NamedList<String> firstErrMetadata = first.getMetadata();\n      if (null == firstErrMetadata) { // obnoxious\n        firstErrMetadata = new NamedList<String>();\n        first.setMetadata(firstErrMetadata);\n      } else {\n        // any existing metadata representing ToleratedUpdateErrors in this single exception needs removed\n        // so we can add *all* of the known ToleratedUpdateErrors (from this and other exceptions)\n        for (int i = 0; i < firstErrMetadata.size(); i++) {\n          if (null != ToleratedUpdateError.parseMetadataIfToleratedUpdateError\n              (firstErrMetadata.getName(i), firstErrMetadata.getVal(i))) {\n               \n            firstErrMetadata.remove(i);\n            // NOTE: post decrementing index so we don't miss anything as we remove items\n            i--;\n          }\n        }\n      }\n\n      for (ToleratedUpdateError te : errors) {\n        firstErrMetadata.add(te.getMetadataKey(), te.getMetadataValue());\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessor.FirstErrTracker#annotate(List[ToleratedUpdateError]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TolerantUpdateProcessor.FirstErrTracker#annotate(List[ToleratedUpdateError]).mjava","sourceNew":"    /** \n     * Annotates the first exception (which may already have been thrown, or be thrown in the future) with \n     * the metadata from this update processor.  For use in {@link TolerantUpdateProcessor#finish}\n     */\n    public void annotate(List<ToleratedUpdateError> errors) {\n\n      if (null == first) {\n        return; // no exception to annotate\n      }\n\n      assert null != errors : \"how do we have an exception to annotate w/o any errors?\";\n\n      NamedList<String> firstErrMetadata = first.getMetadata();\n      if (null == firstErrMetadata) { // obnoxious\n        firstErrMetadata = new NamedList<String>();\n        first.setMetadata(firstErrMetadata);\n      } else {\n        // any existing metadata representing ToleratedUpdateErrors in this single exception needs removed\n        // so we can add *all* of the known ToleratedUpdateErrors (from this and other exceptions)\n        for (int i = 0; i < firstErrMetadata.size(); i++) {\n          if (null != ToleratedUpdateError.parseMetadataIfToleratedUpdateError\n              (firstErrMetadata.getName(i), firstErrMetadata.getVal(i))) {\n               \n            firstErrMetadata.remove(i);\n            // NOTE: post decrementing index so we don't miss anything as we remove items\n            i--;\n          }\n        }\n      }\n\n      for (ToleratedUpdateError te : errors) {\n        firstErrMetadata.add(te.getMetadataKey(), te.getMetadataValue());\n      }\n    }\n\n","sourceOld":"    /** \n     * Annotates the first exception (which may already have been thrown, or be thrown in the future) with \n     * the metadata from this update processor.  For use in {@link TolerantUpdateProcessor#finish}\n     */\n    public void annotate(List<ToleratedUpdateError> errors) {\n\n      if (null == first) {\n        return; // no exception to annotate\n      }\n      \n      assert null != errors : \"how do we have an exception to annotate w/o any errors?\";\n      \n      NamedList<String> firstErrMetadata = first.getMetadata();\n      if (null == firstErrMetadata) { // obnoxious\n        firstErrMetadata = new NamedList<String>();\n        first.setMetadata(firstErrMetadata);\n      } else {\n        // any existing metadata representing ToleratedUpdateErrors in this single exception needs removed\n        // so we can add *all* of the known ToleratedUpdateErrors (from this and other exceptions)\n        for (int i = 0; i < firstErrMetadata.size(); i++) {\n          if (null != ToleratedUpdateError.parseMetadataIfToleratedUpdateError\n              (firstErrMetadata.getName(i), firstErrMetadata.getVal(i))) {\n               \n            firstErrMetadata.remove(i);\n            // NOTE: post decrementing index so we don't miss anything as we remove items\n            i--;\n          }\n        }\n      }\n\n      for (ToleratedUpdateError te : errors) {\n        firstErrMetadata.add(te.getMetadataKey(), te.getMetadataValue());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef"],"f57cf082c4d2ee975c6a2034fcf3c13f9514e6ef":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}