{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","sourceNew":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, storePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"  /** Adds a new doc in this term.  If this returns null\n   *  then we just skip consuming positions/payloads. */\n  @Override\n  public void startDoc(int docID, int termDocFreq) throws IOException {\n\n    final int delta = docID - lastDocID;\n    //System.out.println(\"SEPW: startDoc: write doc=\" + docID + \" delta=\" + delta + \" out.fp=\" + docOut);\n\n    if (docID < 0 || (df > 0 && delta <= 0)) {\n      throw new CorruptIndexException(\"docs out of order (\" + docID + \" <= \" + lastDocID + \" ) (docOut: \" + docOut + \")\");\n    }\n\n    if ((++df % skipInterval) == 0) {\n      // TODO: -- awkward we have to make these two\n      // separate calls to skipper\n      //System.out.println(\"    buffer skip lastDocID=\" + lastDocID);\n      skipListWriter.setSkipData(lastDocID, writePayloads, lastPayloadLength);\n      skipListWriter.bufferSkip(df);\n    }\n\n    lastDocID = docID;\n    docOut.write(delta);\n    if (indexOptions != IndexOptions.DOCS_ONLY) {\n      //System.out.println(\"    sepw startDoc: write freq=\" + termDocFreq);\n      freqOut.write(termDocFreq);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}