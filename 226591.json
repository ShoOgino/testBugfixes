{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","commits":[{"id":"f4924281697ed8ed3790f0f327be1fbde8160afc","date":1505151135,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    QueryCommand cmd = rb.getQueryCommand();\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    QueryCommand cmd = rb.getQueryCommand();\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"/dev/null","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1313c74c6d619d0d98d1284bc17513c9a4b40345","date":1562035273,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    SortSpec groupSortSpec = groupingSpec.getGroupSortSpec();\n    // use start and rows for group.format=simple and group.main=true\n    if (rb.getGroupingSpec().getResponseFormat() == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      // would this ever be negative, as shardRequest sets rows to offset+limit\n      int limit = groupSortSpec.getCount();\n      docsToCollect = limit >= 0? limit + groupSortSpec.getOffset() : Integer.MAX_VALUE;\n    }\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupSortSpec.getSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupingSpec.getGroupSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85bef26bbc598445704c1f9c6d7953f3942d5426","date":1562162588,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    SortSpec withinGroupSortSpec = groupingSpec.getWithinGroupSortSpec();\n    int docsToCollect = Grouping.getMax(withinGroupSortSpec.getOffset(), withinGroupSortSpec.getCount(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSortSpec().getSort())\n              .setSortWithinGroup(withinGroupSortSpec.getSort())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    SortSpec groupSortSpec = groupingSpec.getGroupSortSpec();\n    // use start and rows for group.format=simple and group.main=true\n    if (rb.getGroupingSpec().getResponseFormat() == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      // would this ever be negative, as shardRequest sets rows to offset+limit\n      int limit = groupSortSpec.getCount();\n      docsToCollect = limit >= 0? limit + groupSortSpec.getOffset() : Integer.MAX_VALUE;\n    }\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupSortSpec.getSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    int docsToCollect = Grouping.getMax(groupingSpec.getWithinGroupOffset(), groupingSpec.getWithinGroupLimit(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSort())\n              .setSortWithinGroup(groupingSpec.getSortWithinGroup())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    SortSpec groupSortSpec = groupingSpec.getGroupSortSpec();\n    // use start and rows for group.format=simple and group.main=true\n    if (rb.getGroupingSpec().getResponseFormat() == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      // would this ever be negative, as shardRequest sets rows to offset+limit\n      int limit = groupSortSpec.getCount();\n      docsToCollect = limit >= 0? limit + groupSortSpec.getOffset() : Integer.MAX_VALUE;\n    }\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupSortSpec.getSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2761c3f53e738e28c17c75124aa305e4e63c989d","date":1572337563,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder,QueryCommand,QueryResult).mjava","sourceNew":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    SortSpec withinGroupSortSpec = groupingSpec.getWithinGroupSortSpec();\n    int docsToCollect = Grouping.getMax(withinGroupSortSpec.getOffset(), withinGroupSortSpec.getCount(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSortSpec().getSort())\n              .setSortWithinGroup(withinGroupSortSpec.getSort())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    SortSpec groupSortSpec = groupingSpec.getGroupSortSpec();\n    // use start and rows for group.format=simple and group.main=true\n    if (rb.getGroupingSpec().getResponseFormat() == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      // would this ever be negative, as shardRequest sets rows to offset+limit\n      int limit = groupSortSpec.getCount();\n      docsToCollect = limit >= 0? limit + groupSortSpec.getOffset() : Integer.MAX_VALUE;\n    }\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupSortSpec.getSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .setMainQuery(rb.getQuery())\n          .setNeedScores(needScores)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","sourceOld":"  private void doProcessGroupedDistributedSearchSecondPhase(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n    IndexSchema schema = searcher.getSchema();\n\n    boolean needScores = (cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n\n    CommandHandler.Builder secondPhaseBuilder = new CommandHandler.Builder()\n        .setQueryCommand(cmd)\n        .setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0)\n        .setSearcher(searcher);\n\n    SortSpec withinGroupSortSpec = groupingSpec.getWithinGroupSortSpec();\n    int docsToCollect = Grouping.getMax(withinGroupSortSpec.getOffset(), withinGroupSortSpec.getCount(), searcher.maxDoc());\n    docsToCollect = Math.max(docsToCollect, 1);\n\n    for (String field : groupingSpec.getFields()) {\n      SchemaField schemaField = schema.getField(field);\n      String[] topGroupsParam = params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);\n      if (topGroupsParam == null) {\n        topGroupsParam = new String[0];\n      }\n\n      List<SearchGroup<BytesRef>> topGroups = new ArrayList<>(topGroupsParam.length);\n      for (String topGroup : topGroupsParam) {\n        SearchGroup<BytesRef> searchGroup = new SearchGroup<>();\n        if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {\n          BytesRefBuilder builder = new BytesRefBuilder();\n          schemaField.getType().readableToIndexed(topGroup, builder);\n          searchGroup.groupValue = builder.get();\n        }\n        topGroups.add(searchGroup);\n      }\n\n      secondPhaseBuilder.addCommandField(\n          new TopGroupsFieldCommand.Builder()\n              .setQuery(cmd.getQuery())\n              .setField(schemaField)\n              .setGroupSort(groupingSpec.getGroupSortSpec().getSort())\n              .setSortWithinGroup(withinGroupSortSpec.getSort())\n              .setFirstPhaseGroups(topGroups)\n              .setMaxDocPerGroup(docsToCollect)\n              .setNeedScores(needScores)\n              .setNeedMaxScore(needScores)\n              .build()\n      );\n    }\n\n    SortSpec groupSortSpec = groupingSpec.getGroupSortSpec();\n    // use start and rows for group.format=simple and group.main=true\n    if (rb.getGroupingSpec().getResponseFormat() == Grouping.Format.simple || rb.getGroupingSpec().isMain()) {\n      // would this ever be negative, as shardRequest sets rows to offset+limit\n      int limit = groupSortSpec.getCount();\n      docsToCollect = limit >= 0? limit + groupSortSpec.getOffset() : Integer.MAX_VALUE;\n    }\n    for (String query : groupingSpec.getQueries()) {\n      secondPhaseBuilder.addCommandField(new Builder()\n          .setDocsToCollect(docsToCollect)\n          .setSort(groupSortSpec.getSort())\n          .setQuery(query, rb.req)\n          .setDocSet(searcher)\n          .build()\n      );\n    }\n\n    CommandHandler commandHandler = secondPhaseBuilder.build();\n    commandHandler.execute();\n    TopGroupsResultTransformer serializer = new TopGroupsResultTransformer(rb);\n    rsp.add(\"secondPhase\", commandHandler.processResult(result, serializer));\n    rb.setResult(result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1313c74c6d619d0d98d1284bc17513c9a4b40345":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ffb85feece8645a035c02443a625f5af15e1106b"],"ffb85feece8645a035c02443a625f5af15e1106b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4924281697ed8ed3790f0f327be1fbde8160afc"],"f4924281697ed8ed3790f0f327be1fbde8160afc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2761c3f53e738e28c17c75124aa305e4e63c989d":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2761c3f53e738e28c17c75124aa305e4e63c989d"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"1313c74c6d619d0d98d1284bc17513c9a4b40345":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"ffb85feece8645a035c02443a625f5af15e1106b":["685bd38810c206c93e9058f3c2cfa9827c086c27","1d3f7ab1a502671bbdb03bcced21e764d2483221"],"f4924281697ed8ed3790f0f327be1fbde8160afc":["ffb85feece8645a035c02443a625f5af15e1106b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","ffb85feece8645a035c02443a625f5af15e1106b","f4924281697ed8ed3790f0f327be1fbde8160afc"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["2761c3f53e738e28c17c75124aa305e4e63c989d"],"2761c3f53e738e28c17c75124aa305e4e63c989d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["1313c74c6d619d0d98d1284bc17513c9a4b40345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}