{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testWhere().mjava","commits":[{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","sourceNew":"  @Test\n  public void testWhere() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams,baseUrl);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","sourceOld":"  private void testWhere() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexDoc(sdoc(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\"));\n    indexDoc(sdoc(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\"));\n    indexDoc(sdoc(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\"));\n    indexDoc(sdoc(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\"));\n    indexDoc(sdoc(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\"));\n    indexDoc(sdoc(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\"));\n    indexDoc(sdoc(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\"));\n    indexDoc(sdoc(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\"));\n    commit();\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testWhere().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testWhere().mjava","sourceNew":"  @Test\n  public void testWhere() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams,baseUrl);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testWhere() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"7\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"8\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"11\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"40\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    // Equals\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id = 1 order by id asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    Tuple tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Not Equals <>\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <> 1 order by id asc limit 10\");\n\n    tuples = getTuples(sParams,baseUrl);\n\n    assertEquals(7, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"2\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"3\", tuple.get(\"id\"));\n    tuple = tuples.get(2);\n    assertEquals(\"4\", tuple.get(\"id\"));\n    tuple = tuples.get(3);\n    assertEquals(\"5\", tuple.get(\"id\"));\n    tuple = tuples.get(4);\n    assertEquals(\"6\", tuple.get(\"id\"));\n    tuple = tuples.get(5);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(6);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // TODO requires different Calcite SQL conformance level\n    // Not Equals !=\n    // sParams = mapParams(CommonParams.QT, \"/sql\",\n    // \"stmt\", \"select id from collection1 where id != 1 order by id asc limit 10\");\n    //\n    // tuples = getTuples(sParams);\n    //\n    // assertEquals(7, tuples.size());\n    //\n    // tuple = tuples.get(0);\n    // assertEquals(2L, tuple.get(\"id\"));\n    // tuple = tuples.get(1);\n    // assertEquals(3L, tuple.get(\"id\"));\n    // tuple = tuples.get(2);\n    // assertEquals(4L, tuple.get(\"id\"));\n    // tuple = tuples.get(3);\n    // assertEquals(5L, tuple.get(\"id\"));\n    // tuple = tuples.get(4);\n    // assertEquals(6L, tuple.get(\"id\"));\n    // tuple = tuples.get(5);\n    // assertEquals(7L, tuple.get(\"id\"));\n    // tuple = tuples.get(6);\n    // assertEquals(8L, tuple.get(\"id\"));\n\n    // Less than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id < 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n\n    // Less than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id <= 2 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"1\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"2\", tuple.get(\"id\"));\n\n    // Greater than\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id > 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(1, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n    // Greater than equal\n    sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select id from collection1 where id >= 7 order by id asc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assertEquals(2, tuples.size());\n\n    tuple = tuples.get(0);\n    assertEquals(\"7\", tuple.get(\"id\"));\n    tuple = tuples.get(1);\n    assertEquals(\"8\", tuple.get(\"id\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}