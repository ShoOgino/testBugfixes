{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":"  public void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  public static void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":["3bbb741690cdafda7f1f7549c26351c912917a69"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69e6520a21709190413a63084ed135271aab1a7c","date":1556607462,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#sendShardRequest(String,ModifiableSolrParams,ShardHandler,String,Map[String,String],String,ZkStateReader).mjava","sourceNew":null,"sourceOld":"  public void sendShardRequest(String nodeName, ModifiableSolrParams params, ShardHandler shardHandler,\n                                      String asyncId, Map<String, String> requestMap, String adminPath,\n                                      ZkStateReader zkStateReader) {\n    if (asyncId != null) {\n      String coreAdminAsyncId = asyncId + Math.abs(System.nanoTime());\n      params.set(ASYNC, coreAdminAsyncId);\n      requestMap.put(nodeName, coreAdminAsyncId);\n    }\n\n    ShardRequest sreq = new ShardRequest();\n    params.set(\"qt\", adminPath);\n    sreq.purpose = 1;\n    String replica = zkStateReader.getBaseUrlForNodeName(nodeName);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.nodeName = nodeName;\n    sreq.params = params;\n\n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"69e6520a21709190413a63084ed135271aab1a7c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["69e6520a21709190413a63084ed135271aab1a7c"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"69e6520a21709190413a63084ed135271aab1a7c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["69e6520a21709190413a63084ed135271aab1a7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}