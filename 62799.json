{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","sourceNew":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","pathOld":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#load(String).mjava","sourceNew":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    Path serialObj = Paths.get(dctFileRoot + \"/coredict.mem\");\n\n    if (Files.exists(serialObj) && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Attempt to load dictionary from provided directory, first trying coredict.mem, failing back on coredict.dct\n   * \n   * @param dctFileRoot path to dictionary directory\n   */\n  public void load(String dctFileRoot) {\n    String dctFilePath = dctFileRoot + \"/coredict.dct\";\n    File serialObj = new File(dctFileRoot + \"/coredict.mem\");\n\n    if (serialObj.exists() && loadFromObj(serialObj)) {\n\n    } else {\n      try {\n        wordIndexTable = new short[PRIME_INDEX_LENGTH];\n        charIndexTable = new char[PRIME_INDEX_LENGTH];\n        for (int i = 0; i < PRIME_INDEX_LENGTH; i++) {\n          charIndexTable[i] = 0;\n          wordIndexTable[i] = -1;\n        }\n        wordItem_charArrayTable = new char[GB2312_CHAR_NUM][][];\n        wordItem_frequencyTable = new int[GB2312_CHAR_NUM][];\n        // int total =\n        loadMainDataFromFile(dctFilePath);\n        expandDelimiterData();\n        mergeSameWords();\n        sortEachItems();\n        // log.info(\"load dictionary: \" + dctFilePath + \" total:\" + total);\n      } catch (IOException e) {\n        throw new RuntimeException(e.getMessage());\n      }\n\n      saveToObj(serialObj);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}