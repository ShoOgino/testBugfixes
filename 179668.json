{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (setNorm, deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (setNorm, deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (setNorm, deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (setNorm, deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936f1eae75daf11568fe1480aec9e06d2ef55367","date":1323215013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (setNorm, deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * <p>\n   * NOTE: You should not try using sub-readers returned by this method to make\n   * any changes (setNorm, deleteDocument, etc.). While this might succeed for\n   * one composite reader (like MultiReader), it will most likely lead to index\n   * corruption for other readers (like DirectoryReader obtained through\n   * {@link #open}. Use the top-level context's reader directly.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link ReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link ReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract ReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#getTopReaderContext().mjava","sourceNew":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","sourceOld":"  /**\n   * Expert: Returns a the root {@link IndexReaderContext} for this\n   * {@link IndexReader}'s sub-reader tree. Iff this reader is composed of sub\n   * readers ,ie. this reader being a composite reader, this method returns a\n   * {@link CompositeReaderContext} holding the reader's direct children as well as a\n   * view of the reader tree's atomic leaf contexts. All sub-\n   * {@link IndexReaderContext} instances referenced from this readers top-level\n   * context are private to this reader and are not shared with another context\n   * tree. For example, IndexSearcher uses this API to drive searching by one\n   * atomic leaf reader at a time. If this reader is not composed of child\n   * readers, this method returns an {@link AtomicReaderContext}.\n   * <p>\n   * Note: Any of the sub-{@link CompositeReaderContext} instances reference from this\n   * top-level context holds a <code>null</code> {@link CompositeReaderContext#leaves}\n   * reference. Only the top-level context maintains the convenience leaf-view\n   * for performance reasons.\n   * \n   * @lucene.experimental\n   */\n  public abstract IndexReaderContext getTopReaderContext();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936f1eae75daf11568fe1480aec9e06d2ef55367":["4122a26e1fd0457a340616673a3d3aada370f713"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["2dadf0f3286a34a0fee6e788ffce88624bf2984e","936f1eae75daf11568fe1480aec9e06d2ef55367"],"4122a26e1fd0457a340616673a3d3aada370f713":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","8493985e6883b3fa8231d172694d2aa3a85cb182"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"936f1eae75daf11568fe1480aec9e06d2ef55367":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8493985e6883b3fa8231d172694d2aa3a85cb182","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a"],"4122a26e1fd0457a340616673a3d3aada370f713":["936f1eae75daf11568fe1480aec9e06d2ef55367"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}