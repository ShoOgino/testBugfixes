{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD,\"xx rr yy mm  pp\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD,\"xx rr yy mm  pp\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD,\"xx rr yy mm  pp\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD,\"xx rr yy mm  pp\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newField(PayloadHelper.FIELD,\"xx rr yy mm  pp\", TextField.TYPE_STORED));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9308f62fa74f41b5550acff64ae6a38aba6d97e","date":1341665282,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes, \"UTF-8\"));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes, \"UTF-8\"));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes, \"UTF-8\"));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes, \"UTF-8\"));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","date":1370803313,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, \"UTF-8\"));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE)\n      System.out.println(\"Num payloads:\" + payloads.size());\n    for (final byte [] bytes : payloads) {\n      if(VERBOSE)\n        System.out.println(new String(bytes, \"UTF-8\"));\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["e450c7d50c2fc84c963d0d7ade9d3217d868064d","42607aa380c892dc1ec0ab26e86a575c28e13618"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, \"UTF-8\"));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, \"UTF-8\"));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(TEST_VERSION_CURRENT, new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testPayloadSpanUtil().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testPayloadSpanUtil().mjava","sourceNew":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPayloadSpanUtil() throws Exception {\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"xx rr yy mm  pp\", Field.Store.YES));\n    writer.addDocument(doc);\n  \n    IndexReader reader = writer.getReader();\n    writer.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    PayloadSpanUtil psu = new PayloadSpanUtil(searcher.getTopReaderContext());\n    \n    Collection<byte[]> payloads = psu.getPayloadsForQuery(new TermQuery(new Term(PayloadHelper.FIELD, \"rr\")));\n    if(VERBOSE) {\n      System.out.println(\"Num payloads:\" + payloads.size());\n      for (final byte [] bytes : payloads) {\n        System.out.println(new String(bytes, StandardCharsets.UTF_8));\n      }\n    }\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","7d89d7e4e5101347833eea558851bf4209218619"],"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["04f07771a2a7dd3a395700665ed839c3dae2def2","b9308f62fa74f41b5550acff64ae6a38aba6d97e"],"7d89d7e4e5101347833eea558851bf4209218619":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"46d8ada1fff8d18cb197c38c7983225162599948":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["7d89d7e4e5101347833eea558851bf4209218619"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b9308f62fa74f41b5550acff64ae6a38aba6d97e":["2acf500f78aa12b92e371fd89c719291986b6b90"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"2acf500f78aa12b92e371fd89c719291986b6b90":["46d8ada1fff8d18cb197c38c7983225162599948","66d4c05d2724c63d6dcbdb32aab67299d77e3ca1","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"46d8ada1fff8d18cb197c38c7983225162599948":[],"04f07771a2a7dd3a395700665ed839c3dae2def2":["b9308f62fa74f41b5550acff64ae6a38aba6d97e","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"66d4c05d2724c63d6dcbdb32aab67299d77e3ca1":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}