{"path":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","commits":[{"id":"222ff577a0e1b2399d3151966bf561ecd7a0b7d0","date":1395575041,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation result = super.explain(searcher, firstPassExplanation, docID);\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    AtomicReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    for(String variable : expression.variables) {\n      result.addDetail(new Explanation((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation result = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    for(String variable : expression.variables) {\n      result.addDetail(new Explanation((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation result = super.explain(searcher, firstPassExplanation, docID);\n\n    List<AtomicReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    AtomicReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    for(String variable : expression.variables) {\n      result.addDetail(new Explanation((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      subs.add(Explanation.match((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation result = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    for(String variable : expression.variables) {\n      result.addDetail(new Explanation((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae1ad302fc92a61505409a38838f2b1a4a2b092","date":1483787106,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n\n    DoubleValues scores = scores(docIDInSegment, firstPassExplanation.getValue());\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      DoubleValues dv = bindings.getDoubleValuesSource(variable).getValues(readerContext, scores);\n      if (dv.advanceExact(docIDInSegment))\n        subs.add(Explanation.match((float) dv.doubleValue(), \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      subs.add(Explanation.match((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n\n    DoubleValues scores = scores(docIDInSegment, firstPassExplanation.getValue());\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      DoubleValues dv = bindings.getDoubleValuesSource(variable).getValues(readerContext, scores);\n      if (dv.advanceExact(docIDInSegment))\n        subs.add(Explanation.match((float) dv.doubleValue(), \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n    Map<String,Object> context = new HashMap<>();\n\n    FakeScorer fakeScorer = new FakeScorer();\n    fakeScorer.score = firstPassExplanation.getValue();\n    fakeScorer.doc = docIDInSegment;\n\n    context.put(\"scorer\", fakeScorer);\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      subs.add(Explanation.match((float) bindings.getValueSource(variable).getValues(context, readerContext).doubleVal(docIDInSegment),\n                                       \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"501fdb8d708778ae5368dd5c44879e1d46487e43","date":1494401395,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n\n    return expression.getDoubleValuesSource(bindings).explain(readerContext, docIDInSegment, superExpl);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n\n    DoubleValues scores = scores(docIDInSegment, firstPassExplanation.getValue());\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      DoubleValues dv = bindings.getDoubleValuesSource(variable).getValues(readerContext, scores);\n      if (dv.advanceExact(docIDInSegment))\n        subs.add(Explanation.match((float) dv.doubleValue(), \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","pathOld":"lucene/expressions/src/java/org/apache/lucene/expressions/ExpressionRescorer#explain(IndexSearcher,Explanation,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n\n    return expression.getDoubleValuesSource(bindings).explain(readerContext, docIDInSegment, superExpl);\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexSearcher searcher, Explanation firstPassExplanation, int docID) throws IOException {\n    Explanation superExpl = super.explain(searcher, firstPassExplanation, docID);\n\n    List<LeafReaderContext> leaves = searcher.getIndexReader().leaves();\n    int subReader = ReaderUtil.subIndex(docID, leaves);\n    LeafReaderContext readerContext = leaves.get(subReader);\n    int docIDInSegment = docID - readerContext.docBase;\n\n    DoubleValues scores = scores(docIDInSegment, firstPassExplanation.getValue());\n\n    List<Explanation> subs = new ArrayList<>(Arrays.asList(superExpl.getDetails()));\n    for(String variable : expression.variables) {\n      DoubleValues dv = bindings.getDoubleValuesSource(variable).getValues(readerContext, scores);\n      if (dv.advanceExact(docIDInSegment))\n        subs.add(Explanation.match((float) dv.doubleValue(), \"variable \\\"\" + variable + \"\\\"\"));\n    }\n\n    return Explanation.match(superExpl.getValue(), superExpl.getDescription(), subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","501fdb8d708778ae5368dd5c44879e1d46487e43"],"501fdb8d708778ae5368dd5c44879e1d46487e43":["7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","7ae1ad302fc92a61505409a38838f2b1a4a2b092"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["501fdb8d708778ae5368dd5c44879e1d46487e43"]},"commit2Childs":{"222ff577a0e1b2399d3151966bf561ecd7a0b7d0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"501fdb8d708778ae5368dd5c44879e1d46487e43":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["222ff577a0e1b2399d3151966bf561ecd7a0b7d0"],"7ae1ad302fc92a61505409a38838f2b1a4a2b092":["e9017cf144952056066919f1ebc7897ff9bd71b1","501fdb8d708778ae5368dd5c44879e1d46487e43","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["7ae1ad302fc92a61505409a38838f2b1a4a2b092","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}