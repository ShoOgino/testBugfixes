{"path":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","commits":[{"id":"fa122aa6bc90e14eb49c0efee7cda631a87d8574","date":1361636893,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<String>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<String>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<String>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<String>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<String>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<String>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3802d95c3a31be21ea2971945049b711d95ef8d5","date":1455055616,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c64189697927b548f74ba66dfa5051548662938","date":1455059336,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    assumeFalse(\"Test is only relevant when randomizing Trie fields\",\n                Boolean.getBoolean(NUMERIC_POINTS_SYSPROP));\n           \n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            final int num_constraints = (\"42\".equals(value)) ? 1 : 0;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"1\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=\"+num_constraints+\"]\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    assumeFalse(\"Test is only relevant when randomizing Trie fields\",\n                Boolean.getBoolean(NUMERIC_POINTS_SYSPROP));\n           \n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            final int num_constraints = (\"42\".equals(value)) ? 1 : 0;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"1\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=\"+num_constraints+\"]\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestFaceting#testTrieFields().mjava","sourceNew":"  @Test\n  public void testTrieFields() {\n    assumeFalse(\"Test is only relevant when randomizing Trie fields\",\n                Boolean.getBoolean(NUMERIC_POINTS_SYSPROP));\n           \n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            final int num_constraints = (\"42\".equals(value)) ? 1 : 0;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"1\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=\"+num_constraints+\"]\");\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrieFields() {\n    // make sure that terms are correctly filtered even for trie fields that index several\n    // terms for a single value\n    List<String> fields = new ArrayList<>();\n    fields.add(\"id\");\n    fields.add(\"7\");\n    final String[] suffixes = new String[] {\"ti\", \"tis\", \"tf\", \"tfs\", \"tl\", \"tls\", \"td\", \"tds\"};\n    for (String suffix : suffixes) {\n      fields.add(\"f_\" + suffix);\n      fields.add(\"42\");\n    }\n    assertU(adoc(fields.toArray(new String[0])));\n    assertU(commit());\n    for (String suffix : suffixes) {\n      for (String facetMethod : new String[] {FacetParams.FACET_METHOD_enum, FacetParams.FACET_METHOD_fc, FacetParams.FACET_METHOD_fcs, FacetParams.FACET_METHOD_uif}) {\n        for (String facetSort : new String[] {FacetParams.FACET_SORT_COUNT, FacetParams.FACET_SORT_INDEX}) {\n          for (String value : new String[] {\"42\", \"43\"}) { // match or not\n            final String field = \"f_\" + suffix;\n            assertQ(\"field=\" + field + \",method=\" + facetMethod + \",sort=\" + facetSort,\n                req(\"q\", field + \":\" + value, FacetParams.FACET, \"true\", FacetParams.FACET_FIELD, field, FacetParams.FACET_MINCOUNT, \"0\", FacetParams.FACET_SORT, facetSort, FacetParams.FACET_METHOD, facetMethod),\n                \"*[count(//lst[@name='\" + field + \"']/int)=1]\"); // exactly 1 facet count\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["3c64189697927b548f74ba66dfa5051548662938"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["fa122aa6bc90e14eb49c0efee7cda631a87d8574","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa122aa6bc90e14eb49c0efee7cda631a87d8574":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["fa122aa6bc90e14eb49c0efee7cda631a87d8574"],"3c64189697927b548f74ba66dfa5051548662938":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3802d95c3a31be21ea2971945049b711d95ef8d5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3c64189697927b548f74ba66dfa5051548662938","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["3c64189697927b548f74ba66dfa5051548662938","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3c64189697927b548f74ba66dfa5051548662938","3802d95c3a31be21ea2971945049b711d95ef8d5"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa122aa6bc90e14eb49c0efee7cda631a87d8574"],"fa122aa6bc90e14eb49c0efee7cda631a87d8574":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"3c64189697927b548f74ba66dfa5051548662938":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3802d95c3a31be21ea2971945049b711d95ef8d5":["3c64189697927b548f74ba66dfa5051548662938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}