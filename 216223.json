{"path":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#resizeTermBuffer(int).mjava","commits":[{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#resizeTermBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    char[] newCharBuffer = growTermBuffer(newSize);\n    if (termBuffer == null) {\n      // If there were termText, then preserve it.\n      // note that if termBuffer is null then newCharBuffer cannot be null\n      assert newCharBuffer != null;\n      termBuffer = newCharBuffer;\n    } else if (newCharBuffer != null) {\n      // Note: if newCharBuffer != null then termBuffer needs to grow.\n      // If there were a termBuffer, then preserve it\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;      \n    }\n    return termBuffer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#resizeTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize);\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    char[] newCharBuffer = growTermBuffer(newSize);\n    if (termBuffer == null) {\n      // If there were termText, then preserve it.\n      // note that if termBuffer is null then newCharBuffer cannot be null\n      assert newCharBuffer != null;\n      termBuffer = newCharBuffer;\n    } else if (newCharBuffer != null) {\n      // Note: if newCharBuffer != null then termBuffer needs to grow.\n      // If there were a termBuffer, then preserve it\n      System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n      termBuffer = newCharBuffer;      \n    }\n    return termBuffer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#resizeTermBuffer(int).mjava","pathOld":"src/java/org/apache/lucene/analysis/tokenattributes/TermAttribute#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize);\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}