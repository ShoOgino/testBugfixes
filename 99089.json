{"path":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest).mjava","sourceNew":"    @Override\n    public NamedList<Object> request(SolrRequest request, String collection)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw exception();\n        } else {\n          throw new SolrServerException(exception());\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","sourceOld":"    @Override\n    public NamedList<Object> request(SolrRequest request)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw exception();\n        } else {\n          throw new SolrServerException(exception());\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public NamedList<Object> request(SolrRequest request, String collection)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw exception();\n        } else {\n          throw new SolrServerException(exception());\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3","date":1533596209,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","sourceNew":"    @Override\n    public NamedList<Object> request(SolrRequest request, String collection)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        Exception e = exception();\n        if (e instanceof IOException) {\n          if (LuceneTestCase.random().nextBoolean()) {\n            throw (IOException)e;\n          } else {\n            throw new SolrServerException(e);\n          }\n        } else if (e instanceof SolrServerException) {\n          throw (SolrServerException)e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","sourceOld":"    @Override\n    public NamedList<Object> request(SolrRequest request, String collection)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        if (LuceneTestCase.random().nextBoolean()) {\n          throw exception();\n        } else {\n          throw new SolrServerException(exception());\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/MockStreamingSolrClients.MockSolrClient#request(SolrRequest,String).mjava","sourceNew":"    @Override\n    public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})SolrRequest request, String collection)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        Exception e = exception();\n        if (e instanceof IOException) {\n          if (LuceneTestCase.random().nextBoolean()) {\n            throw (IOException)e;\n          } else {\n            throw new SolrServerException(e);\n          }\n        } else if (e instanceof SolrServerException) {\n          throw (SolrServerException)e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","sourceOld":"    @Override\n    public NamedList<Object> request(SolrRequest request, String collection)\n        throws SolrServerException, IOException {\n      if (exp != null) {\n        Exception e = exception();\n        if (e instanceof IOException) {\n          if (LuceneTestCase.random().nextBoolean()) {\n            throw (IOException)e;\n          } else {\n            throw new SolrServerException(e);\n          }\n        } else if (e instanceof SolrServerException) {\n          throw (SolrServerException)e;\n        } else {\n          throw new SolrServerException(e);\n        }\n      }\n      \n      return solrClient.request(request);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c0cf9c2ec975506bab465b6b2be92cb9bffc84d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cf9c2ec975506bab465b6b2be92cb9bffc84d3":["e98520789adb1d5ad05afb4956eca0944a929688"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}