{"path":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","commits":[{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      final Field docValuesField = new SortedDocValuesField(field.getName(), bytes);\n      fields.add(docValuesField);\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      final Field docValuesField = new SortedDocValuesField(field.getName(), bytes);\n      fields.add(docValuesField);\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","date":1361894345,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        fields.add(new SortedSetDocValuesField(field.getName(), bytes));\n      } else {\n        fields.add(new SortedDocValuesField(field.getName(), bytes));\n      }\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      final Field docValuesField = new SortedDocValuesField(field.getName(), bytes);\n      fields.add(docValuesField);\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        fields.add(new SortedSetDocValuesField(field.getName(), bytes));\n      } else {\n        fields.add(new SortedDocValuesField(field.getName(), bytes));\n      }\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<StorableField>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        fields.add(new SortedSetDocValuesField(field.getName(), bytes));\n      } else {\n        fields.add(new SortedDocValuesField(field.getName(), bytes));\n      }\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<IndexableField> fields = new ArrayList<>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        fields.add(new SortedSetDocValuesField(field.getName(), bytes));\n      } else {\n        fields.add(new SortedDocValuesField(field.getName(), bytes));\n      }\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","sourceOld":"  @Override\n  public List<StorableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<StorableField> fields = new ArrayList<>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        fields.add(new SortedSetDocValuesField(field.getName(), bytes));\n      } else {\n        fields.add(new SortedDocValuesField(field.getName(), bytes));\n      }\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c","date":1458780235,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    IndexableField fval = createField(field, value, boost);\n\n    if (field.hasDocValues()) {\n      IndexableField docval;\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        docval = new SortedSetDocValuesField(field.getName(), bytes);\n      } else {\n        docval = new SortedDocValuesField(field.getName(), bytes);\n      }\n\n      // Only create a list of we have 2 values...\n      if (fval != null) {\n        List<IndexableField> fields = new ArrayList<>(2);\n        fields.add(fval);\n        fields.add(docval);\n        return fields;\n      }\n\n      fval = docval;\n    }\n    return Collections.singletonList(fval);\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value,\n      float boost) {\n    if (field.hasDocValues()) {\n      List<IndexableField> fields = new ArrayList<>();\n      fields.add(createField(field, value, boost));\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        fields.add(new SortedSetDocValuesField(field.getName(), bytes));\n      } else {\n        fields.add(new SortedDocValuesField(field.getName(), bytes));\n      }\n      return fields;\n    } else {\n      return Collections.singletonList(createField(field, value, boost));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/StrField#createFields(SchemaField,Object,float).mjava","sourceNew":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value) {\n    IndexableField fval = createField(field, value);\n\n    if (field.hasDocValues()) {\n      IndexableField docval;\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        docval = new SortedSetDocValuesField(field.getName(), bytes);\n      } else {\n        docval = new SortedDocValuesField(field.getName(), bytes);\n      }\n\n      // Only create a list of we have 2 values...\n      if (fval != null) {\n        List<IndexableField> fields = new ArrayList<>(2);\n        fields.add(fval);\n        fields.add(docval);\n        return fields;\n      }\n\n      fval = docval;\n    }\n    return Collections.singletonList(fval);\n  }\n\n","sourceOld":"  @Override\n  public List<IndexableField> createFields(SchemaField field, Object value, float boost) {\n    IndexableField fval = createField(field, value, boost);\n\n    if (field.hasDocValues()) {\n      IndexableField docval;\n      final BytesRef bytes = new BytesRef(value.toString());\n      if (field.multiValued()) {\n        docval = new SortedSetDocValuesField(field.getName(), bytes);\n      } else {\n        docval = new SortedDocValuesField(field.getName(), bytes);\n      }\n\n      // Only create a list of we have 2 values...\n      if (fval != null) {\n        List<IndexableField> fields = new ArrayList<>(2);\n        fields.add(fval);\n        fields.add(docval);\n        return fields;\n      }\n\n      fval = docval;\n    }\n    return Collections.singletonList(fval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["73bb5a57dc75b54a39494f99986599cae7dff417"],"7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acd9883560fd89e6448b2b447302fe543040cd4f":["7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acd9883560fd89e6448b2b447302fe543040cd4f"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c":["acd9883560fd89e6448b2b447302fe543040cd4f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"acd9883560fd89e6448b2b447302fe543040cd4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a9cc184ce59bfe09f739d9aaa34fdb28ddc738c3","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}