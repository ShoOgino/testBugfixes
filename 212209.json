{"path":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#parseCollections(String,Aliases,Supplier[SolrException]).mjava","commits":[{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#parseCollections(String,Aliases,Supplier[SolrException]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#doParseCollections(Aliases).mjava","sourceNew":"  /** Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st) */\n  public static List<Map.Entry<Instant,String>> parseCollections(String aliasName, Aliases aliases, Supplier<SolrException> aliasNotExist) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw aliasNotExist.get();\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","sourceOld":"  /** Parses the timestamp from the collection list and returns them in reverse sorted order (newest 1st) */\n  private List<Map.Entry<Instant,String>> doParseCollections(Aliases aliases) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw newAliasMustExistException();\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the head when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#parseCollections(String,Aliases,Supplier[SolrException]).mjava","pathOld":"/dev/null","sourceNew":"  /** Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st) */\n  public static List<Map.Entry<Instant,String>> parseCollections(String aliasName, Aliases aliases, Supplier<SolrException> aliasNotExist) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw aliasNotExist.get();\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/TimeRoutedAlias#parseCollections(Aliases,Supplier[SolrException]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessor#parseCollections(String,Aliases,Supplier[SolrException]).mjava","sourceNew":"  /** Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st) */\n  public List<Map.Entry<Instant,String>> parseCollections(Aliases aliases, Supplier<SolrException> aliasNotExist) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw aliasNotExist.get();\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","sourceOld":"  /** Parses the timestamp from the collection list and returns them in reverse sorted order (most recent 1st) */\n  public static List<Map.Entry<Instant,String>> parseCollections(String aliasName, Aliases aliases, Supplier<SolrException> aliasNotExist) {\n    final List<String> collections = aliases.getCollectionAliasListMap().get(aliasName);\n    if (collections == null) {\n      throw aliasNotExist.get();\n    }\n    // note: I considered TreeMap but didn't like the log(N) just to grab the most recent when we use it later\n    List<Map.Entry<Instant,String>> result = new ArrayList<>(collections.size());\n    for (String collection : collections) {\n      Instant colStartTime = parseInstantFromCollectionName(aliasName, collection);\n      result.add(new AbstractMap.SimpleImmutableEntry<>(colStartTime, collection));\n    }\n    result.sort((e1, e2) -> e2.getKey().compareTo(e1.getKey())); // reverse sort by key\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}