{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n    Assert.assertEquals(expectedDoc.getDocumentBoost(), \n                        actualDoc.getDocumentBoost());\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Assert.assertEquals(m + \": diff boosts for field: \" + s,\n                          expectedField.getBoost(), actualField.getBoost());\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m,\n                           SolrInputDocument expectedDoc,\n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  private void compareDocs(String m,\n                           SolrInputDocument expectedDoc,\n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m, \n                           SolrInputDocument expectedDoc, \n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n                          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#compareDocs(String,SolrInputDocument,SolrInputDocument).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void compareDocs(String m,\n                           SolrInputDocument expectedDoc,\n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n          expectedVal, actualVal);\n    }\n  }\n\n","sourceOld":"  private void compareDocs(String m,\n                           SolrInputDocument expectedDoc,\n                           SolrInputDocument actualDoc) {\n\n    for (String s : expectedDoc.getFieldNames()) {\n      SolrInputField expectedField = expectedDoc.getField(s);\n      SolrInputField actualField = actualDoc.getField(s);\n      Object expectedVal = expectedField.getValue();\n      Object actualVal = actualField.getValue();\n      if (expectedVal instanceof Set &&\n          actualVal instanceof Collection) {\n        // unmarshaled documents never contain Sets, they are just a \n        // List in an arbitrary order based on what the iterator of \n        // hte original Set returned, so we need a comparison that is \n        // order agnostic.\n        actualVal = new HashSet((Collection) actualVal);\n        m += \" (Set comparison)\";\n      }\n\n      Assert.assertEquals(m + \" diff values for field: \" + s,\n          expectedVal, actualVal);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["acd9883560fd89e6448b2b447302fe543040cd4f"],"acd9883560fd89e6448b2b447302fe543040cd4f":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"b0b597c65628ca9e73913a07e81691f8229bae35":["acd9883560fd89e6448b2b447302fe543040cd4f","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["9ba1b632c041956c93c41aa1143d16a567014891","b0b597c65628ca9e73913a07e81691f8229bae35"],"acd9883560fd89e6448b2b447302fe543040cd4f":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}