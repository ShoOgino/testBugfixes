{"path":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","commits":[{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"/dev/null","sourceNew":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testMergeOne().mjava","sourceNew":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","sourceOld":"  public void testMergeOne() {\n    Term t1 = new Term(\"foo\", \"a\");\n    PrefixCodedTerms.Builder b1 = new PrefixCodedTerms.Builder();\n    b1.add(t1);\n    PrefixCodedTerms pb1 = b1.finish();\n    \n    Term t2 = new Term(\"foo\", \"b\");\n    PrefixCodedTerms.Builder b2 = new PrefixCodedTerms.Builder();\n    b2.add(t2);\n    PrefixCodedTerms pb2 = b2.finish();\n    \n    List<Iterator<Term>> subs = new ArrayList<Iterator<Term>>();\n    subs.add(pb1.iterator());\n    subs.add(pb2.iterator());\n    \n    Iterator<Term> merged = CoalescedDeletes.mergedIterator(subs);\n    assertTrue(merged.hasNext());\n    assertEquals(t1, merged.next());\n    assertTrue(merged.hasNext());\n    assertEquals(t2, merged.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}