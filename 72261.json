{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#rebuildUserQuery(List[Clause],boolean).mjava","commits":[{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#rebuildUserQuery(List[Clause],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a query string from the raw clauses, uppercasing \n   * 'and' and 'or' as needed.\n   * @param clauses the clauses of the query string to be rebuilt\n   * @param lowercaseOperators if true, lowercase 'and' and 'or' clauses will \n   *        be recognized as operators and uppercased in the final query string.\n   * @return the generated query string.\n   */\n  protected String rebuildUserQuery(List<Clause> clauses, boolean lowercaseOperators) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<clauses.size(); i++) {\n      Clause clause = clauses.get(i);\n      String s = clause.raw;\n      // and and or won't be operators at the start or end\n      if (lowercaseOperators && i>0 && i+1<clauses.size()) {\n        if (\"AND\".equalsIgnoreCase(s)) {\n          s=\"AND\";\n        } else if (\"OR\".equalsIgnoreCase(s)) {\n          s=\"OR\";\n        }\n      }\n      sb.append(s);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser#rebuildUserQuery(List[Clause],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a query string from the raw clauses, uppercasing \n   * 'and' and 'or' as needed.\n   * @param clauses the clauses of the query string to be rebuilt\n   * @param lowercaseOperators if true, lowercase 'and' and 'or' clauses will \n   *        be recognized as operators and uppercased in the final query string.\n   * @return the generated query string.\n   */\n  protected String rebuildUserQuery(List<Clause> clauses, boolean lowercaseOperators) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<clauses.size(); i++) {\n      Clause clause = clauses.get(i);\n      String s = clause.raw;\n      // and and or won't be operators at the start or end\n      if (lowercaseOperators && i>0 && i+1<clauses.size()) {\n        if (\"AND\".equalsIgnoreCase(s)) {\n          s=\"AND\";\n        } else if (\"OR\".equalsIgnoreCase(s)) {\n          s=\"OR\";\n        }\n      }\n      sb.append(s);\n      sb.append(' ');\n    }\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7e79e31f55cbb444e3023d430a340658755aa31":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}