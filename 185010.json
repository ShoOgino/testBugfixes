{"path":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","commits":[{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"/dev/null","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      return;\n    }\n    \n    SolrServer solrServer = servers.getSolrServer(req);\n    try {\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    SolrServer solrServer = servers.getSolrServer(req);\n    try {\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      }\n      return;\n    }\n    \n    SolrServer solrServer = servers.getSolrServer(req);\n    try {\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85979dea410ef213dfe9ef1a4e99e4ae56a8173e","date":1382991076,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    SolrServer solrServer = servers.getSolrServer(req);\n    try {\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3fe387328658a75cc6147c6f4abc4d0ed978cd1","date":1385782467,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      NamedList<Object> rsp = solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b","date":1406573123,"type":6,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#doRequest(Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void doRequest(final Req req) {\n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d60283faa58f2df8b2f669b4452d4a0d7ffd25c6","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b","date":1406573123,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrCmdDistributor#submit(Req).mjava","sourceNew":"  private void submit(final Req req, boolean isCommit) {\n    if (req.synchronous) {\n      blockAndDoRetries();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    \n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    if (isCommit) {\n      // a commit using ConncurrentUpdateSolrServer is not async,\n      // so we make it async to prevent commits from happening\n      // serially across multiple nodes\n      pending.add(completionService.submit(new Callable<Object>() {\n        \n        @Override\n        public Object call() throws Exception {\n          doRequest(req);\n          return null;\n        }\n\n      }));\n    } else {\n      doRequest(req);\n    }\n  }\n\n","sourceOld":"  private void submit(Req req) {\n    if (req.synchronous) {\n      servers.blockUntilFinished();\n      doRetriesIfNeeded();\n      \n      HttpSolrServer server = new HttpSolrServer(req.node.getUrl(),\n          servers.getHttpClient());\n      try {\n        server.request(req.uReq);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Failed synchronous update on shard \" + req.node + \" update: \" + req.uReq , e);\n      } finally {\n        server.shutdown();\n      }\n      \n      return;\n    }\n    if (log.isDebugEnabled()) {\n      log.debug(\"sending update to \"\n          + req.node.getUrl() + \" retry:\"\n          + req.retries + \" \" + req.cmdString + \" params:\" + req.uReq.getParams());\n    }\n    \n    try {\n      SolrServer solrServer = servers.getSolrServer(req);\n      solrServer.request(req.uReq);\n    } catch (Exception e) {\n      SolrException.log(log, e);\n      Error error = new Error();\n      error.e = e;\n      error.req = req;\n      if (e instanceof SolrException) {\n        error.statusCode = ((SolrException) e).code();\n      }\n      errors.add(error);\n    }\n  }\n\n","bugFix":null,"bugIntro":["d60283faa58f2df8b2f669b4452d4a0d7ffd25c6","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f3fe387328658a75cc6147c6f4abc4d0ed978cd1":["85979dea410ef213dfe9ef1a4e99e4ae56a8173e"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85979dea410ef213dfe9ef1a4e99e4ae56a8173e":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["85979dea410ef213dfe9ef1a4e99e4ae56a8173e","f3fe387328658a75cc6147c6f4abc4d0ed978cd1"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["f3fe387328658a75cc6147c6f4abc4d0ed978cd1"],"b7605579001505896d48b07160075a5c8b8e128e":["14d5815ecbef89580f5c48990bcd433f04f8563a","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b"]},"commit2Childs":{"f3fe387328658a75cc6147c6f4abc4d0ed978cd1":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","14d5815ecbef89580f5c48990bcd433f04f8563a"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b","b7605579001505896d48b07160075a5c8b8e128e"],"e483b96a4c951399b8188cbf6a2e8c0d6b95ba6b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"85979dea410ef213dfe9ef1a4e99e4ae56a8173e":["f3fe387328658a75cc6147c6f4abc4d0ed978cd1","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["85979dea410ef213dfe9ef1a4e99e4ae56a8173e"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"14d5815ecbef89580f5c48990bcd433f04f8563a":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"b7605579001505896d48b07160075a5c8b8e128e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}