{"path":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","commits":[{"id":"ecb12132f7aef3ad5be4b300f3cea59aa03b6820","date":1339628268,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n    Object d = args.remove(DEST_PARAM);\n    if (null == d) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be specified\"); \n    } else if (! (d instanceof CharSequence) ) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be a string (ie: 'str')\");\n    }\n    dest = d.toString();\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    if (0 == sources.size()) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \"' must be specified\"); \n    } \n    if (1 == sources.size() && sources.get(0) instanceof NamedList) {\n      // nested set of selector options\n      NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n      srcInclusions = parseSelectorParams(selectorConfig);\n\n      List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n      for (Object excObj : excList) {\n        if (null == excObj) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' can not be null\"); \n        }\n        if (! (excObj instanceof NamedList) ) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' must be <lst/>\"); \n        }\n        NamedList exc = (NamedList) excObj;\n        srcExclusions.add(parseSelectorParams(exc));\n        if (0 < exc.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                  \"' has unexpected 'exclude' sub-param(s): '\" \n                                  + selectorConfig.getName(0) + \"'\");\n        }\n        // call once per instance\n        selectorConfig.remove(\"exclude\");\n      }\n\n      if (0 < selectorConfig.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                \"' contains unexpected child param(s): '\" + \n                                selectorConfig.getName(0) + \"'\");\n      }\n    } else {\n      // source better be one or more strings\n      srcInclusions.fieldName = new HashSet<String>\n        (FieldMutatingUpdateProcessorFactory.oneOrMany(args, \"source\"));\n    }\n\n    \n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n    Object d = args.remove(DEST_PARAM);\n    if (null == d) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be specified\"); \n    } else if (! (d instanceof CharSequence) ) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be a string (ie: 'str')\");\n    }\n    dest = d.toString();\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    if (0 == sources.size()) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \"' must be specified\"); \n    } \n    if (1 == sources.size() && sources.get(0) instanceof NamedList) {\n      // nested set of selector options\n      NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n      srcInclusions = parseSelectorParams(selectorConfig);\n\n      List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n      for (Object excObj : excList) {\n        if (null == excObj) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' can not be null\"); \n        }\n        if (! (excObj instanceof NamedList) ) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' must be <lst/>\"); \n        }\n        NamedList exc = (NamedList) excObj;\n        srcExclusions.add(parseSelectorParams(exc));\n        if (0 < exc.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                  \"' has unexpected 'exclude' sub-param(s): '\" \n                                  + selectorConfig.getName(0) + \"'\");\n        }\n        // call once per instance\n        selectorConfig.remove(\"exclude\");\n      }\n\n      if (0 < selectorConfig.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                \"' contains unexpected child param(s): '\" + \n                                selectorConfig.getName(0) + \"'\");\n      }\n    } else {\n      // source better be one or more strings\n      srcInclusions.fieldName = new HashSet<String>\n        (args.removeConfigArgs(\"source\"));\n    }\n\n    \n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n    Object d = args.remove(DEST_PARAM);\n    if (null == d) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be specified\"); \n    } else if (! (d instanceof CharSequence) ) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be a string (ie: 'str')\");\n    }\n    dest = d.toString();\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    if (0 == sources.size()) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \"' must be specified\"); \n    } \n    if (1 == sources.size() && sources.get(0) instanceof NamedList) {\n      // nested set of selector options\n      NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n      srcInclusions = parseSelectorParams(selectorConfig);\n\n      List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n      for (Object excObj : excList) {\n        if (null == excObj) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' can not be null\"); \n        }\n        if (! (excObj instanceof NamedList) ) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' must be <lst/>\"); \n        }\n        NamedList exc = (NamedList) excObj;\n        srcExclusions.add(parseSelectorParams(exc));\n        if (0 < exc.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                  \"' has unexpected 'exclude' sub-param(s): '\" \n                                  + selectorConfig.getName(0) + \"'\");\n        }\n        // call once per instance\n        selectorConfig.remove(\"exclude\");\n      }\n\n      if (0 < selectorConfig.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                \"' contains unexpected child param(s): '\" + \n                                selectorConfig.getName(0) + \"'\");\n      }\n    } else {\n      // source better be one or more strings\n      srcInclusions.fieldName = new HashSet<String>\n        (FieldMutatingUpdateProcessorFactory.oneOrMany(args, \"source\"));\n    }\n\n    \n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n    Object d = args.remove(DEST_PARAM);\n    if (null == d) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be specified\"); \n    } else if (! (d instanceof CharSequence) ) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be a string (ie: 'str')\");\n    }\n    dest = d.toString();\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    if (0 == sources.size()) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \"' must be specified\"); \n    } \n    if (1 == sources.size() && sources.get(0) instanceof NamedList) {\n      // nested set of selector options\n      NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n      srcInclusions = parseSelectorParams(selectorConfig);\n\n      List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n      for (Object excObj : excList) {\n        if (null == excObj) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' can not be null\"); \n        }\n        if (! (excObj instanceof NamedList) ) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' must be <lst/>\"); \n        }\n        NamedList exc = (NamedList) excObj;\n        srcExclusions.add(parseSelectorParams(exc));\n        if (0 < exc.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                  \"' has unexpected 'exclude' sub-param(s): '\" \n                                  + selectorConfig.getName(0) + \"'\");\n        }\n        // call once per instance\n        selectorConfig.remove(\"exclude\");\n      }\n\n      if (0 < selectorConfig.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                \"' contains unexpected child param(s): '\" + \n                                selectorConfig.getName(0) + \"'\");\n      }\n    } else {\n      // source better be one or more strings\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n\n    \n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n    Object d = args.remove(DEST_PARAM);\n    if (null == d) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be specified\"); \n    } else if (! (d instanceof CharSequence) ) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be a string (ie: 'str')\");\n    }\n    dest = d.toString();\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    if (0 == sources.size()) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \"' must be specified\"); \n    } \n    if (1 == sources.size() && sources.get(0) instanceof NamedList) {\n      // nested set of selector options\n      NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n      srcInclusions = parseSelectorParams(selectorConfig);\n\n      List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n      for (Object excObj : excList) {\n        if (null == excObj) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' can not be null\"); \n        }\n        if (! (excObj instanceof NamedList) ) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' must be <lst/>\"); \n        }\n        NamedList exc = (NamedList) excObj;\n        srcExclusions.add(parseSelectorParams(exc));\n        if (0 < exc.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                  \"' has unexpected 'exclude' sub-param(s): '\" \n                                  + selectorConfig.getName(0) + \"'\");\n        }\n        // call once per instance\n        selectorConfig.remove(\"exclude\");\n      }\n\n      if (0 < selectorConfig.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                \"' contains unexpected child param(s): '\" + \n                                selectorConfig.getName(0) + \"'\");\n      }\n    } else {\n      // source better be one or more strings\n      srcInclusions.fieldName = new HashSet<String>\n        (args.removeConfigArgs(\"source\"));\n    }\n\n    \n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0","date":1446511397,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    // high level (loose) check for which type of config we have.\n    // \n    // individual init methods do more strict syntax checking\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) && 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      initSourceSelectorSyntax(args);\n    } else if (0 <= args.indexOf(PATTERN_PARAM, 0) && 0 <= args.indexOf(REPLACEMENT_PARAM, 0)) {\n      initSimpleRegexReplacement(args);\n    } else {\n      throw new SolrException(SERVER_ERROR, \"A combination of either '\" + SOURCE_PARAM + \"' + '\"+\n                              DEST_PARAM + \"', or '\" + REPLACEMENT_PARAM + \"' + '\" +\n                              PATTERN_PARAM + \"' init params are mandatory\");\n    }\n    \n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR,\n          \"Unexpected init param(s): '\" +\n              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n    Object d = args.remove(DEST_PARAM);\n    if (null == d) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be specified\"); \n    } else if (! (d instanceof CharSequence) ) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + DEST_PARAM + \"' must be a string (ie: 'str')\");\n    }\n    dest = d.toString();\n\n    List<Object> sources = args.getAll(SOURCE_PARAM);\n    if (0 == sources.size()) {\n      throw new SolrException\n        (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \"' must be specified\"); \n    } \n    if (1 == sources.size() && sources.get(0) instanceof NamedList) {\n      // nested set of selector options\n      NamedList selectorConfig = (NamedList) args.remove(SOURCE_PARAM);\n\n      srcInclusions = parseSelectorParams(selectorConfig);\n\n      List<Object> excList = selectorConfig.getAll(\"exclude\");\n\n      for (Object excObj : excList) {\n        if (null == excObj) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' can not be null\"); \n        }\n        if (! (excObj instanceof NamedList) ) {\n          throw new SolrException\n            (SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n             \"' child 'exclude' must be <lst/>\"); \n        }\n        NamedList exc = (NamedList) excObj;\n        srcExclusions.add(parseSelectorParams(exc));\n        if (0 < exc.size()) {\n          throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                  \"' has unexpected 'exclude' sub-param(s): '\" \n                                  + selectorConfig.getName(0) + \"'\");\n        }\n        // call once per instance\n        selectorConfig.remove(\"exclude\");\n      }\n\n      if (0 < selectorConfig.size()) {\n        throw new SolrException(SERVER_ERROR, \"Init param '\" + SOURCE_PARAM + \n                                \"' contains unexpected child param(s): '\" + \n                                selectorConfig.getName(0) + \"'\");\n      }\n    } else {\n      // source better be one or more strings\n      srcInclusions.fieldName = new HashSet<>(args.removeConfigArgs(\"source\"));\n    }\n\n    \n\n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR, \n                              \"Unexpected init param(s): '\" + \n                              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/CloneFieldUpdateProcessorFactory#init(NamedList).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(@SuppressWarnings({\"rawtypes\"})NamedList args) {\n\n    // high level (loose) check for which type of config we have.\n    // \n    // individual init methods do more strict syntax checking\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) && 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      initSourceSelectorSyntax(args);\n    } else if (0 <= args.indexOf(PATTERN_PARAM, 0) && 0 <= args.indexOf(REPLACEMENT_PARAM, 0)) {\n      initSimpleRegexReplacement(args);\n    } else {\n      throw new SolrException(SERVER_ERROR, \"A combination of either '\" + SOURCE_PARAM + \"' + '\"+\n                              DEST_PARAM + \"', or '\" + REPLACEMENT_PARAM + \"' + '\" +\n                              PATTERN_PARAM + \"' init params are mandatory\");\n    }\n    \n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR,\n          \"Unexpected init param(s): '\" +\n              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Override\n  public void init(NamedList args) {\n\n    // high level (loose) check for which type of config we have.\n    // \n    // individual init methods do more strict syntax checking\n    if (0 <= args.indexOf(SOURCE_PARAM, 0) && 0 <= args.indexOf(DEST_PARAM, 0) ) {\n      initSourceSelectorSyntax(args);\n    } else if (0 <= args.indexOf(PATTERN_PARAM, 0) && 0 <= args.indexOf(REPLACEMENT_PARAM, 0)) {\n      initSimpleRegexReplacement(args);\n    } else {\n      throw new SolrException(SERVER_ERROR, \"A combination of either '\" + SOURCE_PARAM + \"' + '\"+\n                              DEST_PARAM + \"', or '\" + REPLACEMENT_PARAM + \"' + '\" +\n                              PATTERN_PARAM + \"' init params are mandatory\");\n    }\n    \n    if (0 < args.size()) {\n      throw new SolrException(SERVER_ERROR,\n          \"Unexpected init param(s): '\" +\n              args.getName(0) + \"'\");\n    }\n\n    super.init(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0"],"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a82f17a4aec53026c4ca0f2fa62ad8eaed017bb0":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}