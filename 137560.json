{"path":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","commits":[{"id":"6bd4a7478aca8c3880512b730b28bf3239340635","date":1326554224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/BlockJoinCollector#getTopGroups(BlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(BlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bfa39296944e5fddc334aa89243d91f9cbb8367","date":1330973284,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba540f2bbd05538ead776efa6ccbabd725c68b2","date":1331205650,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinCollector#getTopGroups(ToParentBlockJoinQuery,Sort,int,int,int,boolean).mjava","sourceNew":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","sourceOld":"  /** Return the TopGroups for the specified\n   *  BlockJoinQuery.  The groupValue of each GroupDocs will\n   *  be the parent docID for that group.  Note that the\n   *  {@link GroupDocs#totalHits}, which would be the\n   *  total number of child documents matching that parent,\n   *  is not computed (will always be 0).  Returns null if\n   *  no groups matched. */\n  @SuppressWarnings(\"unchecked\")\n  public TopGroups<Integer> getTopGroups(ToParentBlockJoinQuery query, Sort withinGroupSort, int offset, int maxDocsPerGroup, int withinGroupOffset, boolean fillSortFields) \n\n    throws IOException {\n\n    final Integer _slot = joinQueryID.get(query);\n    if (_slot == null) {\n      if (totalHitCount == 0) {\n        return null;\n      } else {\n        throw new IllegalArgumentException(\"the Query did not contain the provided BlockJoinQuery\");\n      }\n    }\n\n    // unbox once\n    final int slot = _slot;\n\n    if (sortedGroups == null) {\n      if (offset >= queue.size()) {\n        return null;\n      }\n      sortQueue();\n    } else if (offset > sortedGroups.length) {\n      return null;\n    }\n\n    int totalGroupedHitCount = 0;\n\n    final FakeScorer fakeScorer = new FakeScorer();\n\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<Integer>[] groups = new GroupDocs[sortedGroups.length - offset];\n\n    for(int groupIDX=offset;groupIDX<sortedGroups.length;groupIDX++) {\n      final OneGroup og = sortedGroups[groupIDX];\n\n      // At this point we hold all docs w/ in each group,\n      // unsorted; we now sort them:\n      final TopDocsCollector<?> collector;\n      if (withinGroupSort == null) {\n        // Sort by score\n        if (!trackScores) {\n          throw new IllegalArgumentException(\"cannot sort by relevance within group: trackScores=false\");\n        }\n        collector = TopScoreDocCollector.create(maxDocsPerGroup, true);\n      } else {\n        // Sort by fields\n        collector = TopFieldCollector.create(withinGroupSort, maxDocsPerGroup, fillSortFields, trackScores, trackMaxScore, true);\n      }\n\n      collector.setScorer(fakeScorer);\n      collector.setNextReader(og.readerContext);\n      final int numChildDocs = og.counts[slot];\n      for(int docIDX=0;docIDX<numChildDocs;docIDX++) {\n        final int doc = og.docs[slot][docIDX];\n        fakeScorer.doc = doc;\n        if (trackScores) {\n          fakeScorer.score = og.scores[slot][docIDX];\n        }\n        collector.collect(doc);\n      }\n      totalGroupedHitCount += numChildDocs;\n\n      final Object[] groupSortValues;\n\n      if (fillSortFields) {\n        groupSortValues = new Object[comparators.length];\n        for(int sortFieldIDX=0;sortFieldIDX<comparators.length;sortFieldIDX++) {\n          groupSortValues[sortFieldIDX] = comparators[sortFieldIDX].value(og.slot);\n        }\n      } else {\n        groupSortValues = null;\n      }\n\n      final TopDocs topDocs = collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n\n      groups[groupIDX-offset] = new GroupDocs<Integer>(topDocs.getMaxScore(),\n                                                       og.counts[slot],\n                                                       topDocs.scoreDocs,\n                                                       og.doc,\n                                                       groupSortValues);\n    }\n\n    return new TopGroups<Integer>(new TopGroups<Integer>(sort.getSort(),\n                                                         withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                                         0, totalGroupedHitCount, groups),\n                                  totalHitCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6bd4a7478aca8c3880512b730b28bf3239340635":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aba540f2bbd05538ead776efa6ccbabd725c68b2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba540f2bbd05538ead776efa6ccbabd725c68b2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["6bd4a7478aca8c3880512b730b28bf3239340635","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["6bd4a7478aca8c3880512b730b28bf3239340635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aba540f2bbd05538ead776efa6ccbabd725c68b2":["8bfa39296944e5fddc334aa89243d91f9cbb8367"]},"commit2Childs":{"6bd4a7478aca8c3880512b730b28bf3239340635":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8bfa39296944e5fddc334aa89243d91f9cbb8367"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["38e3b736c7ca086d61b7dbb841c905ee115490da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bd4a7478aca8c3880512b730b28bf3239340635"],"8bfa39296944e5fddc334aa89243d91f9cbb8367":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aba540f2bbd05538ead776efa6ccbabd725c68b2"],"aba540f2bbd05538ead776efa6ccbabd725c68b2":["38e3b736c7ca086d61b7dbb841c905ee115490da","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}