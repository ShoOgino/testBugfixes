{"path":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","commits":[{"id":"536f6911665ce844b868182b8d0ca107ea0eceab","date":1304957860,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final SegmentInfos newInfos = new SegmentInfos();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final SegmentInfos newInfos = new SegmentInfos();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09b6beb7329eb1b75a38c94b1c5ab4e840743c59","date":1308413204,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        for(SegmentInfo info : om.segments) {\n          oldSegments.remove(info);\n        }\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/UpgradeIndexMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final Map<SegmentInfo,Boolean> oldSegments = new HashMap<SegmentInfo,Boolean>();\n    for (final SegmentInfo si : segmentInfos) {\n      final Boolean v =segmentsToOptimize.get(si);\n      if (v != null && shouldUpgradeSegment(si)) {\n        oldSegments.put(si, v);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);\n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        for(SegmentInfo info : om.segments) {\n          oldSegments.remove(info);\n        }\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.containsKey(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {\n    // first find all old segments\n    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();\n    for (final SegmentInfo si : segmentInfos) {\n      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {\n        oldSegments.add(si);\n      }\n    }\n    \n    if (verbose()) message(\"findMergesForOptimize: segmentsToUpgrade=\" + oldSegments);\n      \n    if (oldSegments.isEmpty())\n      return null;\n\n    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    \n    \n    if (spec != null) {\n      // remove all segments that are in merge specification from oldSegments,\n      // the resulting set contains all segments that are left over\n      // and will be merged to one additional segment:\n      for (final OneMerge om : spec.merges) {\n        oldSegments.removeAll(om.segments);\n      }\n    }\n\n    if (!oldSegments.isEmpty()) {\n      if (verbose())\n        message(\"findMergesForOptimize: \" +  base.getClass().getSimpleName() +\n        \" does not want to merge all old segments, merge remaining ones into new segment: \" + oldSegments);\n      final List<SegmentInfo> newInfos = new ArrayList<SegmentInfo>();\n      for (final SegmentInfo si : segmentInfos) {\n        if (oldSegments.contains(si)) {\n          newInfos.add(si);\n        }\n      }\n      // add the final merge\n      if (spec == null) {\n        spec = new MergeSpecification();\n      }\n      spec.add(new OneMerge(newInfos));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a3776dccca01c11e7046323cfad46a3b4a471233","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["536f6911665ce844b868182b8d0ca107ea0eceab"],"536f6911665ce844b868182b8d0ca107ea0eceab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","536f6911665ce844b868182b8d0ca107ea0eceab"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","09b6beb7329eb1b75a38c94b1c5ab4e840743c59"],"536f6911665ce844b868182b8d0ca107ea0eceab":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"09b6beb7329eb1b75a38c94b1c5ab4e840743c59":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}