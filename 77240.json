{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int [] ints;\n    String [] strings;\n    byte [] bytes;\n\n    ints = cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    strings = cache.getStrings(readerX, \"theInt\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int [] ints;\n    String [] strings;\n    byte [] bytes;\n\n    ints = cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    strings = cache.getStrings(readerX, \"theInt\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":null,"sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int [] ints;\n    String [] strings;\n    byte [] bytes;\n\n    ints = cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER);\n    strings = cache.getStrings(readerX, \"theInt\");\n\n    // this one is ok\n    bytes = cache.getBytes(readerX, \"theByte\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}