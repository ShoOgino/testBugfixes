{"path":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#generateToken().mjava","commits":[{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#generateToken().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return Optional.empty();\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["16a1bbda4a49d74d4c9df2eba45b180565fffeab","c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16a1bbda4a49d74d4c9df2eba45b180565fffeab","date":1546677088,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#generateToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#generateToken().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return Optional.empty();\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return Optional.empty();\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c92ac83d1c2f8811300bb0df797465cca0aa8e92","date":1579710745,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#generateToken().mjava","pathOld":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin#generateToken().mjava","sourceNew":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"generateToken: principal is null\");\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        log.debug(\"generateToken: not a solr (server) thread\");\n        return Optional.empty();\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n    return Optional.of(base64Cipher);\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"Needs currentTimeMillis to set current time in header\")\n  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        //this had a request but not authenticated\n        //so we don't not need to set a principal\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        //if this is not running inside a Solr threadpool (as in testcases)\n        // then no need to add any header\n        return Optional.empty();\n      }\n      //this request seems to be originated from Solr itself\n      usr = \"$\"; //special name to denote the user is the node itself\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n\n","bugFix":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c92ac83d1c2f8811300bb0df797465cca0aa8e92":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"16a1bbda4a49d74d4c9df2eba45b180565fffeab":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"]},"commit2Childs":{"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["16a1bbda4a49d74d4c9df2eba45b180565fffeab"],"c92ac83d1c2f8811300bb0df797465cca0aa8e92":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"16a1bbda4a49d74d4c9df2eba45b180565fffeab":["c92ac83d1c2f8811300bb0df797465cca0aa8e92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}