{"path":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","commits":[{"id":"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1","date":1310609231,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new ByteArrayInputStream(likeText.getBytes()));\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new ByteArrayInputStream(likeText.getBytes()));\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae46d105c94ea6ceb5201189bf9611bdef91b1b4","date":1310997409,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new ByteArrayInputStream(likeText.getBytes()));\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","bugFix":["e141595402370bee958745de8b1c9de1fa182581"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThisQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    MoreLikeThis mlt = new MoreLikeThis(reader);\n\n    mlt.setFieldNames(moreLikeFields);\n    mlt.setAnalyzer(analyzer);\n    mlt.setMinTermFreq(minTermFrequency);\n    if (minDocFreq >= 0) {\n      mlt.setMinDocFreq(minDocFreq);\n    }\n    mlt.setMaxQueryTerms(maxQueryTerms);\n    mlt.setStopWords(stopWords);\n    BooleanQuery bq = (BooleanQuery) mlt.like(new StringReader(likeText), fieldName);\n    BooleanClause[] clauses = bq.getClauses();\n    //make at least half the terms match\n    bq.setMinimumNumberShouldMatch((int) (clauses.length * percentTermsToMatch));\n    return bq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1"],"ae46d105c94ea6ceb5201189bf9611bdef91b1b4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7bae1b88906b69dec0d80b1a7afc3c98ec50fa1":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}