{"path":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09cb2e0d073412dbf283b88292b70aaf62d55276","date":1445181245,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      sort = sort == null ? Sort.RELEVANCE : sort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(sort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FirstPassGroupingCollector<>(newSelector(), searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FirstPassGroupingCollector<>(newSelector(), searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FunctionFirstPassGroupingCollector(groupBy, context, searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FirstPassGroupingCollector<>(newSelector(), searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FirstPassGroupingCollector<>(newSelector(), searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/Grouping.CommandFunc#createFirstPassCollector().mjava","sourceNew":"    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FirstPassGroupingCollector<>(newSelector(), searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected Collector createFirstPassCollector() throws IOException {\n      // Ok we don't want groups, but do want a total count\n      if (actualGroupsToFind <= 0) {\n        fallBackCollector = new TotalHitCountCollector();\n        return fallBackCollector;\n      }\n\n      groupSort = groupSort == null ? Sort.RELEVANCE : groupSort;\n      firstPass = new FirstPassGroupingCollector<>(newSelector(), searcher.weightSort(groupSort), actualGroupsToFind);\n      return firstPass;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["09cb2e0d073412dbf283b88292b70aaf62d55276"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7ae958a739da1866696f442384393ba2f13e33e5","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["7ae958a739da1866696f442384393ba2f13e33e5"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"09cb2e0d073412dbf283b88292b70aaf62d55276":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7ae958a739da1866696f442384393ba2f13e33e5":["09cb2e0d073412dbf283b88292b70aaf62d55276"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","09cb2e0d073412dbf283b88292b70aaf62d55276"],"09cb2e0d073412dbf283b88292b70aaf62d55276":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"7ae958a739da1866696f442384393ba2f13e33e5":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}