{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() throws IOException {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return current.getValue();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() throws IOException {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return current.getValue();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() {\n          return current.getValue();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() throws IOException {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return current.getValue();\n        }\n      };\n    }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() {\n          return current.getValue();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() throws IOException {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() throws IOException {\n          return current.getValue();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new UnmodifiableIterator<String>(fields.keySet().iterator());\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() {\n          return current.getValue();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new UnmodifiableIterator<String>(fields.keySet().iterator());\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() {\n          return current.getValue();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return new UnmodifiableIterator<String>(fields.keySet().iterator());\n    }\n\n","sourceOld":"    @Override\n    public FieldsEnum iterator() throws IOException {\n      return new FieldsEnum() {\n        private Iterator<Map.Entry<String,SimpleTVTerms>> iterator = fields.entrySet().iterator();\n        private Map.Entry<String,SimpleTVTerms> current = null;\n        \n        @Override\n        public String next() {\n          if (!iterator.hasNext()) {\n            return null;\n          } else {\n            current = iterator.next();\n            return current.getKey();\n          }\n        }\n\n        @Override\n        public Terms terms() {\n          return current.getValue();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d56999cfc1772fd594a2a43a40007a11a188bd96","date":1345554776,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return Collections.unmodifiableSet(fields.keySet()).iterator();\n    }\n\n","sourceOld":"    @Override\n    public Iterator<String> iterator() {\n      return new UnmodifiableIterator<String>(fields.keySet().iterator());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return Collections.unmodifiableSet(fields.keySet()).iterator();\n    }\n\n","sourceOld":"    @Override\n    public Iterator<String> iterator() {\n      return new UnmodifiableIterator<String>(fields.keySet().iterator());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextTermVectorsReader.SimpleTVFields#iterator().mjava","sourceNew":"    @Override\n    public Iterator<String> iterator() {\n      return Collections.unmodifiableSet(fields.keySet()).iterator();\n    }\n\n","sourceOld":"    @Override\n    public Iterator<String> iterator() {\n      return Collections.unmodifiableSet(fields.keySet()).iterator();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","d56999cfc1772fd594a2a43a40007a11a188bd96"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["fe33227f6805edab2036cbb80645cc4e2d1fa424","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d56999cfc1772fd594a2a43a40007a11a188bd96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d56999cfc1772fd594a2a43a40007a11a188bd96":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d56999cfc1772fd594a2a43a40007a11a188bd96","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","fb07ab105350b80ed9d63ca64b117084ed7391bc","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d56999cfc1772fd594a2a43a40007a11a188bd96":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["001b25b42373b22a52f399dbf072f1224632e8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}