{"path":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"modules/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb889a868ab9d608bde8136f42ed7234a3a927b","date":1359393528,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", text).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","bugFix":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", text).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", new StringReader(text)).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", text).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", text).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", text).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create shingle analyzers using AnalyzerFactory.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // StandardTokenizer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getAnalyzerFactoryConfig\n        (\"shingle-analyzer\", \"StandardTokenizer,ShingleFilter\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n        (\"bogus\", text).close();\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one\", \"one two\", \"two\", \"two three\",\n                                                            \"three\", \"three four\", \"four\", \"four five\",\n                                                            \"five\", \"five six\", \"six\" });\n    // StandardTokenizer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n          (\"shingle-analyzer\",\n           \"StandardTokenizer,ShingleFilter(maxShingleSize:3,outputUnigrams:false)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one two\", \"one two three\", \"two three\",\n                                                            \"two three four\", \"three four\",\n                                                            \"three four five\", \"four five\",\n                                                            \"four five six\", \"five six\" });\n    // WhitespaceTokenizer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig(\"shingle-analyzer\", \"WhitespaceTokenizer,ShingleFilter\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                                            \"four\", \"four five\", \"five\", \"five six\",\n                                                            \"six\" });\n    \n    // WhitespaceTokenizer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getAnalyzerFactoryConfig\n        (\"shingle-factory\",\n         \"WhitespaceTokenizer,ShingleFilter(outputUnigrams:false,maxShingleSize:3)\"));\n    BaseTokenStreamTestCase.assertAnalyzesTo(benchmark.getRunData().getAnalyzer(), text,\n                                             new String[] { \"one,two,three, four\",\n                                                            \"one,two,three, four five\",\n                                                            \"four five\", \"four five six\",\n                                                            \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7bb889a868ab9d608bde8136f42ed7234a3a927b","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["7bb889a868ab9d608bde8136f42ed7234a3a927b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"de522d9303bd67c8473a269a1319125d1f3700e0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7bb889a868ab9d608bde8136f42ed7234a3a927b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bb889a868ab9d608bde8136f42ed7234a3a927b","de522d9303bd67c8473a269a1319125d1f3700e0"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7bb889a868ab9d608bde8136f42ed7234a3a927b":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","de522d9303bd67c8473a269a1319125d1f3700e0"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}