{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","commits":[{"id":"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b","date":1392108367,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if(reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS,ZkStateReader.toJSON(m),true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","date":1392108948,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if(reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS,ZkStateReader.toJSON(m),true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if(reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS,ZkStateReader.toJSON(m),true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["30b7bf64aeb00a25d1c4bf089c3943e576a38e17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if(reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS,ZkStateReader.toJSON(m),true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30b7bf64aeb00a25d1c4bf089c3943e576a38e17","date":1419334479,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","sourceNew":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if (reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m), true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","sourceOld":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if(reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS,ZkStateReader.toJSON(m),true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","bugFix":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","sourceNew":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(NAME);\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if (reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m), true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","sourceOld":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if (reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m), true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","sourceNew":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(NAME);\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if (reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m), true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","sourceOld":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if (reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m), true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b6398c01b0e06ba3aa3a96d549077877414f9f8","date":1429701153,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#handleProp(ZkNodeProps).mjava","sourceNew":null,"sourceOld":"    private void handleProp(ZkNodeProps message)  {\n      String name = message.getStr(NAME);\n      String val = message.getStr(\"val\");\n      Map m =  reader.getClusterProps();\n      if(val ==null) m.remove(name);\n      else m.put(name,val);\n\n      try {\n        if (reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS, true))\n          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m), true);\n        else\n          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n        clusterProps = reader.getClusterProps();\n      } catch (Exception e) {\n        log.error(\"Unable to set cluster property\", e);\n\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1390137e395d2f07f9ba5b8c43d293befe84d563":["30b7bf64aeb00a25d1c4bf089c3943e576a38e17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["30b7bf64aeb00a25d1c4bf089c3943e576a38e17","1390137e395d2f07f9ba5b8c43d293befe84d563"],"30b7bf64aeb00a25d1c4bf089c3943e576a38e17":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["1390137e395d2f07f9ba5b8c43d293befe84d563"]},"commit2Childs":{"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","3b6398c01b0e06ba3aa3a96d549077877414f9f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"30b7bf64aeb00a25d1c4bf089c3943e576a38e17":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"afd709fe548f0ddbaa0a678015e7c3d41ff1c87a":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"6bdd460d2fe72f80e52acb2774d58a4ae2e67b9b":["afd709fe548f0ddbaa0a678015e7c3d41ff1c87a"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["30b7bf64aeb00a25d1c4bf089c3943e576a38e17","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3b6398c01b0e06ba3aa3a96d549077877414f9f8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}