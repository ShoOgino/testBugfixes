{"path":"backwards/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/BitVector#subset(int,int).mjava","sourceNew":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","sourceOld":"  /**\n   * Retrieve a subset of this BitVector.\n   * \n   * @param start\n   *            starting index, inclusive\n   * @param end\n   *            ending index, exclusive\n   * @return subset\n   */\n  public BitVector subset(int start, int end) {\n    if (start < 0 || end > size() || end < start)\n      throw new IndexOutOfBoundsException();\n    // Special case -- return empty vector is start == end\n    if (end == start) return new BitVector(0);\n    byte[] bits = new byte[((end - start - 1) >>> 3) + 1];\n    int s = start >>> 3;\n    for (int i = 0; i < bits.length; i++) {\n      int cur = 0xFF & this.bits[i + s];\n      int next = i + s + 1 >= this.bits.length ? 0 : 0xFF & this.bits[i + s + 1];\n      bits[i] = (byte) ((cur >>> (start & 7)) | ((next << (8 - (start & 7)))));\n    }\n    int bitsToClear = (bits.length * 8 - (end - start)) % 8;\n    bits[bits.length - 1] &= ~(0xFF << (8 - bitsToClear));\n    return new BitVector(bits, end - start);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}