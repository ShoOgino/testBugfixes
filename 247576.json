{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#auth().mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#auth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void auth() throws Exception {\n    setupCluster(false, 0, true, null);\n    CloudSolrClient client = testHarness.get().cluster.getSolrClient();\n    try {\n      CollectionAdminRequest.List request = new CollectionAdminRequest.List();\n      client.request(request);\n      request.setBasicAuthCredentials(\"solr\", \"SolrRocks\");\n      client.request(request);\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      client.request(createRequest);\n      fail(\"Call should fail with 401\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(3);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/collections\", ADMIN, null, 200, \"action\", \"LIST\");\n      AuditEvent e = receiver.popEvent();\n      System.out.println(new AuditLoggerPlugin.JSONAuditEventFormatter().formatEvent(e));\n      assertAuditEvent(e, COMPLETED, \"/admin/collections\", ADMIN, \"solr\", 200, \"action\", \"LIST\");\n      assertAuditEvent(receiver.popEvent(), REJECTED, \"/admin/collections\", ADMIN, null,401);\n    }\n    try {\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      createRequest.setBasicAuthCredentials(\"solr\", \"wrongPW\");\n      client.request(createRequest);       \n      fail(\"Call should fail with 403\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(1);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), UNAUTHORIZED, \"/admin/collections\", ADMIN, null,403);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d450c0530a2765633277b632c29c54e190e3cb7e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d450c0530a2765633277b632c29c54e190e3cb7e","date":1571265874,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#auth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#auth().mjava","sourceNew":"  @Test\n  public void auth() throws Exception {\n    setupCluster(false, 0, true, null);\n    CloudSolrClient client = testHarness.get().cluster.getSolrClient();\n    try {\n      CollectionAdminRequest.List request = new CollectionAdminRequest.List();\n      client.request(request);\n      request.setBasicAuthCredentials(\"solr\", \"SolrRocks\");\n      client.request(request);\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      client.request(createRequest);\n      fail(\"Call should fail with 401\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(3);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/collections\", ADMIN, null, 200, \"action\", \"LIST\");\n      AuditEvent e = receiver.popEvent();\n      System.out.println(new AuditLoggerPlugin.JSONAuditEventFormatter().formatEvent(e));\n      assertAuditEvent(e, COMPLETED, \"/admin/collections\", ADMIN, \"solr\", 200, \"action\", \"LIST\");\n      assertAuditEvent(receiver.popEvent(), REJECTED, \"/admin/collections\", ADMIN, null,401);\n    }\n    try {\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      createRequest.setBasicAuthCredentials(\"solr\", \"wrongPW\");\n      client.request(createRequest);       \n      fail(\"Call should fail with 401\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(1);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), REJECTED, \"/admin/collections\", ADMIN, null, 401);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void auth() throws Exception {\n    setupCluster(false, 0, true, null);\n    CloudSolrClient client = testHarness.get().cluster.getSolrClient();\n    try {\n      CollectionAdminRequest.List request = new CollectionAdminRequest.List();\n      client.request(request);\n      request.setBasicAuthCredentials(\"solr\", \"SolrRocks\");\n      client.request(request);\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      client.request(createRequest);\n      fail(\"Call should fail with 401\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(3);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/collections\", ADMIN, null, 200, \"action\", \"LIST\");\n      AuditEvent e = receiver.popEvent();\n      System.out.println(new AuditLoggerPlugin.JSONAuditEventFormatter().formatEvent(e));\n      assertAuditEvent(e, COMPLETED, \"/admin/collections\", ADMIN, \"solr\", 200, \"action\", \"LIST\");\n      assertAuditEvent(receiver.popEvent(), REJECTED, \"/admin/collections\", ADMIN, null,401);\n    }\n    try {\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      createRequest.setBasicAuthCredentials(\"solr\", \"wrongPW\");\n      client.request(createRequest);       \n      fail(\"Call should fail with 403\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(1);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), UNAUTHORIZED, \"/admin/collections\", ADMIN, null,403);\n    }\n  }\n\n","bugFix":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#auth().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void auth() throws Exception {\n    setupCluster(false, 0, true, null);\n    CloudSolrClient client = testHarness.get().cluster.getSolrClient();\n    try {\n      CollectionAdminRequest.List request = new CollectionAdminRequest.List();\n      client.request(request);\n      request.setBasicAuthCredentials(\"solr\", \"SolrRocks\");\n      client.request(request);\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      client.request(createRequest);\n      fail(\"Call should fail with 401\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(3);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), COMPLETED, \"/admin/collections\", ADMIN, null, 200, \"action\", \"LIST\");\n      AuditEvent e = receiver.popEvent();\n      System.out.println(new AuditLoggerPlugin.JSONAuditEventFormatter().formatEvent(e));\n      assertAuditEvent(e, COMPLETED, \"/admin/collections\", ADMIN, \"solr\", 200, \"action\", \"LIST\");\n      assertAuditEvent(receiver.popEvent(), REJECTED, \"/admin/collections\", ADMIN, null,401);\n    }\n    try {\n      CollectionAdminRequest.Create createRequest = CollectionAdminRequest.createCollection(\"test\", 1, 1);\n      createRequest.setBasicAuthCredentials(\"solr\", \"wrongPW\");\n      client.request(createRequest);       \n      fail(\"Call should fail with 401\");\n    } catch (SolrException ex) {\n      waitForAuditEventCallbacks(1);\n      CallbackReceiver receiver = testHarness.get().receiver;\n      assertAuditEvent(receiver.popEvent(), REJECTED, \"/admin/collections\", ADMIN, null, 401);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d450c0530a2765633277b632c29c54e190e3cb7e":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d5482e225fe64e9f868c423923d1144adc88142":["d450c0530a2765633277b632c29c54e190e3cb7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"d450c0530a2765633277b632c29c54e190e3cb7e":["5d5482e225fe64e9f868c423923d1144adc88142"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["d450c0530a2765633277b632c29c54e190e3cb7e"],"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}