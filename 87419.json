{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed()) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.hasVectors()) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed()) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed()) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.hasVectors()) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed()) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.storeTermVector) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<>();\n    Collection<String> indexedFieldNames = new HashSet<>();\n    Collection<String> notIndexedFieldNames = new HashSet<>();\n    Collection<String> tvFieldNames = new HashSet<>();\n    Collection<String> noTVFieldNames = new HashSet<>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed()) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.hasVectors()) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed()) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<String>();\n    Collection<String> indexedFieldNames = new HashSet<String>();\n    Collection<String> notIndexedFieldNames = new HashSet<String>();\n    Collection<String> tvFieldNames = new HashSet<String>();\n    Collection<String> noTVFieldNames = new HashSet<String>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed()) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.hasVectors()) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed()) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556a4aab886d75371b2af129d87be3c2795cea76","date":1414954991,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#testGetFieldNameVariations().mjava","sourceNew":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<>();\n    Collection<String> indexedFieldNames = new HashSet<>();\n    Collection<String> notIndexedFieldNames = new HashSet<>();\n    Collection<String> tvFieldNames = new HashSet<>();\n    Collection<String> noTVFieldNames = new HashSet<>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.getIndexOptions() != IndexOptions.NONE) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.hasVectors()) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.getIndexOptions() != IndexOptions.NONE) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","sourceOld":"  public void testGetFieldNameVariations() {\n    Collection<String> allFieldNames = new HashSet<>();\n    Collection<String> indexedFieldNames = new HashSet<>();\n    Collection<String> notIndexedFieldNames = new HashSet<>();\n    Collection<String> tvFieldNames = new HashSet<>();\n    Collection<String> noTVFieldNames = new HashSet<>();\n\n    for(FieldInfo fieldInfo : reader.getFieldInfos()) {\n      final String name = fieldInfo.name;\n      allFieldNames.add(name);\n      if (fieldInfo.isIndexed()) {\n        indexedFieldNames.add(name);\n      } else {\n        notIndexedFieldNames.add(name);\n      }\n      if (fieldInfo.hasVectors()) {\n        tvFieldNames.add(name);\n      } else if (fieldInfo.isIndexed()) {\n        noTVFieldNames.add(name);\n      }\n    }\n\n    assertTrue(allFieldNames.size() == DocHelper.all.size());\n    for (String s : allFieldNames) {\n      assertTrue(DocHelper.nameValues.containsKey(s) == true || s.equals(\"\"));\n    }                                                                               \n\n    assertTrue(indexedFieldNames.size() == DocHelper.indexed.size());\n    for (String s : indexedFieldNames) {\n      assertTrue(DocHelper.indexed.containsKey(s) == true || s.equals(\"\"));\n    }\n    \n    assertTrue(notIndexedFieldNames.size() == DocHelper.unindexed.size());\n    //Get all indexed fields that are storing term vectors\n    assertTrue(tvFieldNames.size() == DocHelper.termvector.size());\n\n    assertTrue(noTVFieldNames.size() == DocHelper.notermvector.size());\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"556a4aab886d75371b2af129d87be3c2795cea76":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556a4aab886d75371b2af129d87be3c2795cea76"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["556a4aab886d75371b2af129d87be3c2795cea76"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"556a4aab886d75371b2af129d87be3c2795cea76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}