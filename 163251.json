{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#convertToPoints(PlanetModel,GeoPoint,double[],double[]).mjava","commits":[{"id":"01f1a345a808c3a24ce12b4540ab4847c0dac9b0","date":1459948931,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#convertToPoints(PlanetModel,GeoPoint,double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"  protected static List<GeoPoint> convertToPoints(final PlanetModel pm, final GeoPoint pole, final double[] angles, final double[] arcDistances) {\n    // To do the point rotations, we need the sine and cosine of the pole latitude and longitude.  Get it here for performance.\n    final double sinLatitude = Math.sin(pole.getLatitude());\n    final double cosLatitude = Math.cos(pole.getLatitude());\n    final double sinLongitude = Math.sin(pole.getLongitude());\n    final double cosLongitude = Math.cos(pole.getLongitude());\n    final List<GeoPoint> rval = new ArrayList<>();\n    for (int i = 0; i < angles.length; i++) {\n      rval.add(createPoint(pm, angles[i], arcDistances[i], sinLatitude, cosLatitude, sinLongitude, cosLongitude));\n    }\n    return rval;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01f1a345a808c3a24ce12b4540ab4847c0dac9b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"]},"commit2Childs":{"01f1a345a808c3a24ce12b4540ab4847c0dac9b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f1a345a808c3a24ce12b4540ab4847c0dac9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}