{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,Filter,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, Filter filter, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, filter, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, filter, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Weight,ScoreDoc,int).mjava","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   *\n   * <p>Applications should usually call {@link IndexSearcher#search(Query,int)} or\n   * {@link IndexSearcher#search(Query,Filter,int)} instead.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  protected TopDocs search(Weight weight, ScoreDoc after, int nDocs) throws IOException {\n    if (executor == null) {\n      return search(leafContexts, weight, after, nDocs);\n    } else {\n      final HitQueue hq = new HitQueue(nDocs, false);\n      final Lock lock = new ReentrantLock();\n      final ExecutionHelper<TopDocs> runner = new ExecutionHelper<TopDocs>(executor);\n    \n      for (int i = 0; i < leafSlices.length; i++) { // search each sub\n        runner.submit(\n                      new SearcherCallableNoSort(lock, this, leafSlices[i], weight, after, nDocs, hq));\n      }\n\n      int totalHits = 0;\n      float maxScore = Float.NEGATIVE_INFINITY;\n      for (final TopDocs topDocs : runner) {\n        if(topDocs.totalHits != 0) {\n          totalHits += topDocs.totalHits;\n          maxScore = Math.max(maxScore, topDocs.getMaxScore());\n        }\n      }\n\n      final ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n      for (int i = hq.size() - 1; i >= 0; i--) // put docs in array\n        scoreDocs[i] = hq.pop();\n\n      return new TopDocs(totalHits, scoreDocs, maxScore);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}