{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#getStateUpdateQueue(Stats).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#getStateUpdateQueue(Stats).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#getStateUpdateQueue(SolrZkClient,Stats).mjava","sourceNew":"  /**\n   * The overseer uses the returned queue to read any operations submitted by clients.\n   * This method should not be used directly by anyone other than the Overseer itself.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkStats  a {@link Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  ZkDistributedQueue getStateUpdateQueue(Stats zkStats) {\n    return new ZkDistributedQueue(reader.getZkClient(), \"/overseer/queue\", zkStats, STATE_UPDATE_MAX_QUEUE, new ConnectionManager.IsClosed(){\n      public boolean isClosed() {\n        return Overseer.this.isClosed() || zkController.getCoreContainer().isShutDown();\n      }\n    });\n  }\n\n","sourceOld":"  /**\n   * The overseer uses the returned queue to read any operations submitted by clients.\n   * This method should not be used directly by anyone other than the Overseer itself.\n   * This method will create the /overseer znode in ZooKeeper if it does not exist already.\n   *\n   * @param zkClient the {@link SolrZkClient} to be used for reading/writing to the queue\n   * @param zkStats  a {@link Stats} object which tracks statistics for all zookeeper operations performed by this queue\n   * @return a {@link ZkDistributedQueue} object\n   */\n  static ZkDistributedQueue getStateUpdateQueue(final SolrZkClient zkClient, Stats zkStats) {\n    createOverseerNode(zkClient);\n    return new ZkDistributedQueue(zkClient, \"/overseer/queue\", zkStats, STATE_UPDATE_MAX_QUEUE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}