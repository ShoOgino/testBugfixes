{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","commits":[{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":0,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoUtils.bboxContains(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoUtils.bboxContains(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoUtils.bboxContains(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoUtils.bboxContains(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoUtils.bboxContains(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoUtils.bboxContains(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04995b00da1e08edb88b14c5a9789d741de5c51d","date":1453863716,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery#rectContainsPoint(GeoRect,double,double).mjava","sourceNew":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoEncodingUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoEncodingUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRectPrecise(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Boolean rectContainsPoint(GeoRect rect, double pointLat, double pointLon) {\n    if (GeoUtils.compare(pointLon, rect.minLon) == 0.0 ||\n        GeoUtils.compare(pointLon, rect.maxLon) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.minLat) == 0.0 ||\n        GeoUtils.compare(pointLat, rect.maxLat) == 0.0) {\n      // Point is very close to rect boundary\n      return null;\n    }\n\n    if (rect.minLon < rect.maxLon) {\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, rect.maxLon, rect.maxLat);\n    } else {\n      // Rect crosses dateline:\n      return GeoRelationUtils.pointInRect(pointLon, pointLat, -180.0, rect.minLat, rect.maxLon, rect.maxLat)\n          || GeoRelationUtils.pointInRect(pointLon, pointLat, rect.minLon, rect.minLat, 180.0, rect.maxLat);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["33bb6bd7295e66f93f182556f5353b97243e62ba","937923083e4d137932336fc80f3d78758ff698a6"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"937923083e4d137932336fc80f3d78758ff698a6":["04995b00da1e08edb88b14c5a9789d741de5c51d"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"937923083e4d137932336fc80f3d78758ff698a6":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"04995b00da1e08edb88b14c5a9789d741de5c51d":["937923083e4d137932336fc80f3d78758ff698a6"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","04995b00da1e08edb88b14c5a9789d741de5c51d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}