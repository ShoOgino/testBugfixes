{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testQueries().mjava","commits":[{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testQueries().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testQueries().mjava","sourceNew":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1.build());\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","sourceOld":"  public void testQueries() throws Exception {\n    single = single(random());\n    parallel = parallel(random());\n    \n    queryTest(new TermQuery(new Term(\"f1\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f1\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f2\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f3\", \"v2\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v1\")));\n    queryTest(new TermQuery(new Term(\"f4\", \"v2\")));\n\n    BooleanQuery bq1 = new BooleanQuery();\n    bq1.add(new TermQuery(new Term(\"f1\", \"v1\")), Occur.MUST);\n    bq1.add(new TermQuery(new Term(\"f4\", \"v1\")), Occur.MUST);\n    queryTest(bq1);\n    \n    single.getIndexReader().close(); single = null;\n    parallel.getIndexReader().close(); parallel = null;\n    dir.close(); dir = null;\n    dir1.close(); dir1 = null;\n    dir2.close(); dir2 = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9644a32526f2e2ae87543b00e8be543aa25f29c":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}