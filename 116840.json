{"path":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testEqualScores().mjava","commits":[{"id":"c5f8e44d5e9627993851287f67e8360a36cb302a","date":1132032532,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testEqualScores().mjava","pathOld":"/dev/null","sourceNew":"    public void testEqualScores() throws IOException {\n        // NOTE: uses index build in *this* setUp\n        \n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n\tHits result;\n\n        // some hits match more terms then others, score should be the same\n        \n        result = search.search(csrq(\"data\",\"1\",\"6\",T,T));\n        int numHits = result.length();\n        assertEquals(\"wrong number of results\", 6, numHits);\n        float score = result.score(0);\n        for (int i = 1; i < numHits; i++) {\n            assertEquals(\"score for \" + i +\" was not the same\",\n                         score, result.score(i));\n        }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testEqualScores().mjava","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testEqualScores().mjava","sourceNew":"    public void testEqualScores() throws IOException {\n        // NOTE: uses index build in *this* setUp\n        \n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n  ScoreDoc[] result;\n\n        // some hits match more terms then others, score should be the same\n        \n        result = search.search(csrq(\"data\",\"1\",\"6\",T,T), null, 1000).scoreDocs;\n        int numHits = result.length;\n        assertEquals(\"wrong number of results\", 6, numHits);\n        float score = result[0].score;\n        for (int i = 1; i < numHits; i++) {\n            assertEquals(\"score for \" + i +\" was not the same\",\n                         score, result[i].score);\n        }\n\n    }\n\n","sourceOld":"    public void testEqualScores() throws IOException {\n        // NOTE: uses index build in *this* setUp\n        \n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n\tHits result;\n\n        // some hits match more terms then others, score should be the same\n        \n        result = search.search(csrq(\"data\",\"1\",\"6\",T,T));\n        int numHits = result.length();\n        assertEquals(\"wrong number of results\", 6, numHits);\n        float score = result.score(0);\n        for (int i = 1; i < numHits; i++) {\n            assertEquals(\"score for \" + i +\" was not the same\",\n                         score, result.score(i));\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/search/TestConstantScoreRangeQuery#testEqualScores().mjava","sourceNew":null,"sourceOld":"    public void testEqualScores() throws IOException {\n        // NOTE: uses index build in *this* setUp\n        \n        IndexReader reader = IndexReader.open(small);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n  ScoreDoc[] result;\n\n        // some hits match more terms then others, score should be the same\n        \n        result = search.search(csrq(\"data\",\"1\",\"6\",T,T), null, 1000).scoreDocs;\n        int numHits = result.length;\n        assertEquals(\"wrong number of results\", 6, numHits);\n        float score = result[0].score;\n        for (int i = 1; i < numHits; i++) {\n            assertEquals(\"score for \" + i +\" was not the same\",\n                         score, result[i].score);\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5f8e44d5e9627993851287f67e8360a36cb302a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"c5f8e44d5e9627993851287f67e8360a36cb302a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5f8e44d5e9627993851287f67e8360a36cb302a"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}