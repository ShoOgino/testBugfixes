{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","sourceNew":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n\n      if (++bufpos == bufsize)\n        bufpos = 0;\n\n      return buffer[bufpos];\n    }\n\n    char c;\n\n    if (++bufpos == available)\n      AdjustBuffSize();\n\n    if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n    {\n      UpdateLineColumn(c);\n\n      int backSlashCnt = 1;\n\n      for (;;) // Read all the backslashes\n      {\n        if (++bufpos == available)\n          AdjustBuffSize();\n\n        try\n        {\n          if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n          {\n            UpdateLineColumn(c);\n            // found a non-backslash char.\n            if ((c == 'u') && ((backSlashCnt & 1) == 1))\n            {\n              if (--bufpos < 0)\n                bufpos = bufsize - 1;\n\n              break;\n            }\n\n            backup(backSlashCnt);\n            return '\\\\';\n          }\n        }\n        catch(java.io.IOException e)\n        {\n\t  // We are returning one backslash so we should only backup (count-1)\n          if (backSlashCnt > 1)\n            backup(backSlashCnt-1);\n\n          return '\\\\';\n        }\n\n        UpdateLineColumn(c);\n        backSlashCnt++;\n      }\n\n      // Here, we have seen an odd number of backslash's followed by a 'u'\n      try\n      {\n        while ((c = ReadByte()) == 'u')\n          ++column;\n\n        buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                    hexval(ReadByte()) << 8 |\n                                    hexval(ReadByte()) << 4 |\n                                    hexval(ReadByte()));\n\n        column += 4;\n      }\n      catch(java.io.IOException e)\n      {\n        throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n      }\n\n      if (backSlashCnt == 1)\n        return c;\n      else\n      {\n        backup(backSlashCnt - 1);\n        return '\\\\';\n      }\n    }\n    else\n    {\n      UpdateLineColumn(c);\n      return c;\n    }\n  }\n\n","sourceOld":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n\n      if (++bufpos == bufsize)\n        bufpos = 0;\n\n      return buffer[bufpos];\n    }\n\n    char c;\n\n    if (++bufpos == available)\n      AdjustBuffSize();\n\n    if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n    {\n      UpdateLineColumn(c);\n\n      int backSlashCnt = 1;\n\n      for (;;) // Read all the backslashes\n      {\n        if (++bufpos == available)\n          AdjustBuffSize();\n\n        try\n        {\n          if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n          {\n            UpdateLineColumn(c);\n            // found a non-backslash char.\n            if ((c == 'u') && ((backSlashCnt & 1) == 1))\n            {\n              if (--bufpos < 0)\n                bufpos = bufsize - 1;\n\n              break;\n            }\n\n            backup(backSlashCnt);\n            return '\\\\';\n          }\n        }\n        catch(java.io.IOException e)\n        {\n\t  // We are returning one backslash so we should only backup (count-1)\n          if (backSlashCnt > 1)\n            backup(backSlashCnt-1);\n\n          return '\\\\';\n        }\n\n        UpdateLineColumn(c);\n        backSlashCnt++;\n      }\n\n      // Here, we have seen an odd number of backslash's followed by a 'u'\n      try\n      {\n        while ((c = ReadByte()) == 'u')\n          ++column;\n\n        buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                    hexval(ReadByte()) << 8 |\n                                    hexval(ReadByte()) << 4 |\n                                    hexval(ReadByte()));\n\n        column += 4;\n      }\n      catch(java.io.IOException e)\n      {\n        throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n      }\n\n      if (backSlashCnt == 1)\n        return c;\n      else\n      {\n        backup(backSlashCnt - 1);\n        return '\\\\';\n      }\n    }\n    else\n    {\n      UpdateLineColumn(c);\n      return c;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f03d60547476e008d3d993cd26872c1157f19cf","date":1270899773,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","sourceNew":"/** Read a character. */\r\n  public char readChar() throws java.io.IOException\r\n  {\r\n     if (inBuf > 0)\r\n     {\r\n        --inBuf;\r\n\r\n        if (++bufpos == bufsize)\r\n           bufpos = 0;\r\n\r\n        return buffer[bufpos];\r\n     }\r\n\r\n     char c;\r\n\r\n     if (++bufpos == available)\r\n        AdjustBuffSize();\r\n\r\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\r\n     {\r\n        UpdateLineColumn(c);\r\n\r\n        int backSlashCnt = 1;\r\n\r\n        for (;;) // Read all the backslashes\r\n        {\r\n           if (++bufpos == available)\r\n              AdjustBuffSize();\r\n\r\n           try\r\n           {\r\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\r\n              {\r\n                 UpdateLineColumn(c);\r\n                 // found a non-backslash char.\r\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\r\n                 {\r\n                    if (--bufpos < 0)\r\n                       bufpos = bufsize - 1;\r\n\r\n                    break;\r\n                 }\r\n\r\n                 backup(backSlashCnt);\r\n                 return '\\\\';\r\n              }\r\n           }\r\n           catch(java.io.IOException e)\r\n           {\r\n              if (backSlashCnt > 1)\r\n                 backup(backSlashCnt-1);\r\n\r\n              return '\\\\';\r\n           }\r\n\r\n           UpdateLineColumn(c);\r\n           backSlashCnt++;\r\n        }\r\n\r\n        // Here, we have seen an odd number of backslash's followed by a 'u'\r\n        try\r\n        {\r\n           while ((c = ReadByte()) == 'u')\r\n              ++column;\r\n\r\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\r\n                                       hexval(ReadByte()) << 8 |\r\n                                       hexval(ReadByte()) << 4 |\r\n                                       hexval(ReadByte()));\r\n\r\n           column += 4;\r\n        }\r\n        catch(java.io.IOException e)\r\n        {\r\n           throw new Error(\"Invalid escape character at line \" + line +\r\n                                         \" column \" + column + \".\");\r\n        }\r\n\r\n        if (backSlashCnt == 1)\r\n           return c;\r\n        else\r\n        {\r\n           backup(backSlashCnt - 1);\r\n           return '\\\\';\r\n        }\r\n     }\r\n     else\r\n     {\r\n        UpdateLineColumn(c);\r\n        return c;\r\n     }\r\n  }\r\n\n","sourceOld":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n    if (inBuf > 0)\n    {\n      --inBuf;\n\n      if (++bufpos == bufsize)\n        bufpos = 0;\n\n      return buffer[bufpos];\n    }\n\n    char c;\n\n    if (++bufpos == available)\n      AdjustBuffSize();\n\n    if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n    {\n      UpdateLineColumn(c);\n\n      int backSlashCnt = 1;\n\n      for (;;) // Read all the backslashes\n      {\n        if (++bufpos == available)\n          AdjustBuffSize();\n\n        try\n        {\n          if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n          {\n            UpdateLineColumn(c);\n            // found a non-backslash char.\n            if ((c == 'u') && ((backSlashCnt & 1) == 1))\n            {\n              if (--bufpos < 0)\n                bufpos = bufsize - 1;\n\n              break;\n            }\n\n            backup(backSlashCnt);\n            return '\\\\';\n          }\n        }\n        catch(java.io.IOException e)\n        {\n\t  // We are returning one backslash so we should only backup (count-1)\n          if (backSlashCnt > 1)\n            backup(backSlashCnt-1);\n\n          return '\\\\';\n        }\n\n        UpdateLineColumn(c);\n        backSlashCnt++;\n      }\n\n      // Here, we have seen an odd number of backslash's followed by a 'u'\n      try\n      {\n        while ((c = ReadByte()) == 'u')\n          ++column;\n\n        buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                    hexval(ReadByte()) << 8 |\n                                    hexval(ReadByte()) << 4 |\n                                    hexval(ReadByte()));\n\n        column += 4;\n      }\n      catch(java.io.IOException e)\n      {\n        throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n      }\n\n      if (backSlashCnt == 1)\n        return c;\n      else\n      {\n        backup(backSlashCnt - 1);\n        return '\\\\';\n      }\n    }\n    else\n    {\n      UpdateLineColumn(c);\n      return c;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b","date":1270900166,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","sourceNew":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","sourceOld":"/** Read a character. */\r\n  public char readChar() throws java.io.IOException\r\n  {\r\n     if (inBuf > 0)\r\n     {\r\n        --inBuf;\r\n\r\n        if (++bufpos == bufsize)\r\n           bufpos = 0;\r\n\r\n        return buffer[bufpos];\r\n     }\r\n\r\n     char c;\r\n\r\n     if (++bufpos == available)\r\n        AdjustBuffSize();\r\n\r\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\r\n     {\r\n        UpdateLineColumn(c);\r\n\r\n        int backSlashCnt = 1;\r\n\r\n        for (;;) // Read all the backslashes\r\n        {\r\n           if (++bufpos == available)\r\n              AdjustBuffSize();\r\n\r\n           try\r\n           {\r\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\r\n              {\r\n                 UpdateLineColumn(c);\r\n                 // found a non-backslash char.\r\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\r\n                 {\r\n                    if (--bufpos < 0)\r\n                       bufpos = bufsize - 1;\r\n\r\n                    break;\r\n                 }\r\n\r\n                 backup(backSlashCnt);\r\n                 return '\\\\';\r\n              }\r\n           }\r\n           catch(java.io.IOException e)\r\n           {\r\n              if (backSlashCnt > 1)\r\n                 backup(backSlashCnt-1);\r\n\r\n              return '\\\\';\r\n           }\r\n\r\n           UpdateLineColumn(c);\r\n           backSlashCnt++;\r\n        }\r\n\r\n        // Here, we have seen an odd number of backslash's followed by a 'u'\r\n        try\r\n        {\r\n           while ((c = ReadByte()) == 'u')\r\n              ++column;\r\n\r\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\r\n                                       hexval(ReadByte()) << 8 |\r\n                                       hexval(ReadByte()) << 4 |\r\n                                       hexval(ReadByte()));\r\n\r\n           column += 4;\r\n        }\r\n        catch(java.io.IOException e)\r\n        {\r\n           throw new Error(\"Invalid escape character at line \" + line +\r\n                                         \" column \" + column + \".\");\r\n        }\r\n\r\n        if (backSlashCnt == 1)\r\n           return c;\r\n        else\r\n        {\r\n           backup(backSlashCnt - 1);\r\n           return '\\\\';\r\n        }\r\n     }\r\n     else\r\n     {\r\n        UpdateLineColumn(c);\r\n        return c;\r\n     }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/JavaCharStream#readChar().mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/JavaCharStream#readChar().mjava","sourceNew":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","sourceOld":"/** Read a character. */\n  public char readChar() throws java.io.IOException\n  {\n     if (inBuf > 0)\n     {\n        --inBuf;\n\n        if (++bufpos == bufsize)\n           bufpos = 0;\n\n        return buffer[bufpos];\n     }\n\n     char c;\n\n     if (++bufpos == available)\n        AdjustBuffSize();\n\n     if ((buffer[bufpos] = c = ReadByte()) == '\\\\')\n     {\n        UpdateLineColumn(c);\n\n        int backSlashCnt = 1;\n\n        for (;;) // Read all the backslashes\n        {\n           if (++bufpos == available)\n              AdjustBuffSize();\n\n           try\n           {\n              if ((buffer[bufpos] = c = ReadByte()) != '\\\\')\n              {\n                 UpdateLineColumn(c);\n                 // found a non-backslash char.\n                 if ((c == 'u') && ((backSlashCnt & 1) == 1))\n                 {\n                    if (--bufpos < 0)\n                       bufpos = bufsize - 1;\n\n                    break;\n                 }\n\n                 backup(backSlashCnt);\n                 return '\\\\';\n              }\n           }\n           catch(java.io.IOException e)\n           {\n              if (backSlashCnt > 1)\n                 backup(backSlashCnt-1);\n\n              return '\\\\';\n           }\n\n           UpdateLineColumn(c);\n           backSlashCnt++;\n        }\n\n        // Here, we have seen an odd number of backslash's followed by a 'u'\n        try\n        {\n           while ((c = ReadByte()) == 'u')\n              ++column;\n\n           buffer[bufpos] = c = (char)(hexval(c) << 12 |\n                                       hexval(ReadByte()) << 8 |\n                                       hexval(ReadByte()) << 4 |\n                                       hexval(ReadByte()));\n\n           column += 4;\n        }\n        catch(java.io.IOException e)\n        {\n           throw new Error(\"Invalid escape character at line \" + line +\n                                         \" column \" + column + \".\");\n        }\n\n        if (backSlashCnt == 1)\n           return c;\n        else\n        {\n           backup(backSlashCnt - 1);\n           return '\\\\';\n        }\n     }\n     else\n     {\n        UpdateLineColumn(c);\n        return c;\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["1f03d60547476e008d3d993cd26872c1157f19cf"],"1f03d60547476e008d3d993cd26872c1157f19cf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"1f03d60547476e008d3d993cd26872c1157f19cf":["f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1f03d60547476e008d3d993cd26872c1157f19cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}