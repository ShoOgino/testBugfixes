{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#waitForCoreNodeName(String,String,String).mjava","sourceNew":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","sourceOld":"  String waitForCoreNodeName(String collectionName, String msgNodeName, String msgCore) {\n    int retryCount = 320;\n    while (retryCount-- > 0) {\n      final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (docCollection != null && docCollection.getSlicesMap() != null) {\n        Map<String,Slice> slicesMap = docCollection.getSlicesMap();\n        for (Slice slice : slicesMap.values()) {\n          for (Replica replica : slice.getReplicas()) {\n            // TODO: for really large clusters, we could 'index' on this\n\n            String nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n\n            if (nodeName.equals(msgNodeName) && core.equals(msgCore)) {\n              return replica.getName();\n            }\n          }\n        }\n      }\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not find coreNodeName\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}