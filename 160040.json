{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","commits":[{"id":"a05f3f5161c62339ec5560b8f6958f3df8483618","date":1563550501,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","pathOld":"/dev/null","sourceNew":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff2097f3a1298209d513f906d65f86bc0ab8d9c0","date":1564851155,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","sourceNew":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      prefix = prefix.substring(0, prefix.length()-1) + \"/16!\";  // change \"foo!\" into \"foo/16!\" to match 2 level compositeId\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","sourceOld":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","sourceNew":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      prefix = prefix.substring(0, prefix.length()-1) + \"/16!\";  // change \"foo!\" into \"foo/16!\" to match 2 level compositeId\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","sourceOld":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/SplitByPrefixTest#getDoc(String,String).mjava","sourceNew":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      prefix = prefix.substring(0, prefix.length()-1) + \"/16!\";  // change \"foo!\" into \"foo/16!\" to match 2 level compositeId\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","sourceOld":"  // Randomly add a second level prefix to test that\n  // they are all collapsed to a single bucket.  This behavior should change if/when counting support\n  // for more levels of compositeId values\n  SolrInputDocument getDoc(String prefix, String unique) {\n    String secondLevel = \"\";\n    if (random().nextBoolean()) {\n      secondLevel=\"\" + random().nextInt(2) + \"!\";\n    }\n    return sdoc(\"id\", prefix + secondLevel + unique);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff2097f3a1298209d513f906d65f86bc0ab8d9c0":["a05f3f5161c62339ec5560b8f6958f3df8483618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05f3f5161c62339ec5560b8f6958f3df8483618":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a05f3f5161c62339ec5560b8f6958f3df8483618","ff2097f3a1298209d513f906d65f86bc0ab8d9c0"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a05f3f5161c62339ec5560b8f6958f3df8483618","ff2097f3a1298209d513f906d65f86bc0ab8d9c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff2097f3a1298209d513f906d65f86bc0ab8d9c0"]},"commit2Childs":{"ff2097f3a1298209d513f906d65f86bc0ab8d9c0":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a05f3f5161c62339ec5560b8f6958f3df8483618"],"a05f3f5161c62339ec5560b8f6958f3df8483618":["ff2097f3a1298209d513f906d65f86bc0ab8d9c0","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}