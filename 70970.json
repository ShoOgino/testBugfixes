{"path":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","commits":[{"id":"b060a9c887ff2c6f4280953afc6fb6000934dae5","date":1394119540,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4637747f71df783fc2014ef1f1e0418466e3bed6","date":1394196311,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sorter).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sorter sorter) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sorter);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b31300b5ffd92c482faabff5910228b4cdaa7dde","date":1398105394,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    if (random().nextBoolean()) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/TestSortingMergePolicy#newSortingMergePolicy(Sort).mjava","sourceNew":"  public static MergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","sourceOld":"  static MergePolicy newSortingMergePolicy(Sort sort) {\n    // usually create a MP with a low merge factor so that many merges happen\n    MergePolicy mp;\n    int thingToDo = random().nextInt(3);\n    if (thingToDo == 0) {\n      TieredMergePolicy tmp = newTieredMergePolicy(random());\n      final int numSegs = TestUtil.nextInt(random(), 3, 5);\n      tmp.setSegmentsPerTier(numSegs);\n      tmp.setMaxMergeAtOnce(TestUtil.nextInt(random(), 2, numSegs));\n      mp = tmp;\n    } else if (thingToDo == 1) {\n      LogMergePolicy lmp = newLogMergePolicy(random());\n      lmp.setMergeFactor(TestUtil.nextInt(random(), 3, 5));\n      mp = lmp;\n    } else {\n      // just a regular random one from LTC (could be alcoholic etc)\n      mp = newMergePolicy();\n    }\n    // wrap it with a sorting mp\n    return new SortingMergePolicy(mp, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4637747f71df783fc2014ef1f1e0418466e3bed6"],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["b31300b5ffd92c482faabff5910228b4cdaa7dde"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b060a9c887ff2c6f4280953afc6fb6000934dae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"]},"commit2Childs":{"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"b060a9c887ff2c6f4280953afc6fb6000934dae5":["4637747f71df783fc2014ef1f1e0418466e3bed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b060a9c887ff2c6f4280953afc6fb6000934dae5","4637747f71df783fc2014ef1f1e0418466e3bed6"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b31300b5ffd92c482faabff5910228b4cdaa7dde":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"4637747f71df783fc2014ef1f1e0418466e3bed6":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b31300b5ffd92c482faabff5910228b4cdaa7dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}