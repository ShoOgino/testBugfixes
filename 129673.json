{"path":"solr/core/src/java/org/apache/solr/util/hll/HLL#heterogenousUnion(HLL).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#heterogenousUnion(HLL).mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    // Union helpers\n    /**\n     * Computes the union of two HLLs, of different types, and stores the\n     * result in this instance.\n     *\n     * @param other the other {@link HLL} instance to union into this one. This\n     *        cannot be <code>null</code>.\n     */\n    /*package, for testing*/ void heterogenousUnion(final HLL other) {\n        /*\n         * The logic here is divided into two sections: unions with an EMPTY\n         * HLL, and unions between EXPLICIT/SPARSE/FULL\n         * HLL.\n         *\n         * Between those two sections, all possible heterogeneous unions are\n         * covered. Should another type be added to HLLType whose unions\n         * are not easily reduced (say, as EMPTY's are below) this may be more\n         * easily implemented as Strategies. However, that is unnecessary as it\n         * stands.\n         */\n\n        // ....................................................................\n        // Union with an EMPTY\n        if(HLLType.EMPTY.equals(type)) {\n            // NOTE:  The union of empty with non-empty HLL is just a\n            //        clone of the non-empty.\n\n            switch(other.getType()) {\n                case EXPLICIT: {\n                    // src:  EXPLICIT\n                    // dest: EMPTY\n\n                    if(other.explicitStorage.size() <= explicitThreshold) {\n                        type = HLLType.EXPLICIT;\n                        explicitStorage = other.explicitStorage.clone();\n                    } else {\n                        if(!sparseOff) {\n                            initializeStorage(HLLType.SPARSE);\n                        } else {\n                            initializeStorage(HLLType.FULL);\n                        }\n                        for(LongCursor c : other.explicitStorage) {\n                            addRaw(c.value);\n                        }\n                    }\n                    return;\n                }\n                case SPARSE: {\n                    // src:  SPARSE\n                    // dest: EMPTY\n\n                    if(!sparseOff) {\n                        type = HLLType.SPARSE;\n                        sparseProbabilisticStorage = other.sparseProbabilisticStorage.clone();\n                    } else {\n                        initializeStorage(HLLType.FULL);\n                        for(IntByteCursor c : other.sparseProbabilisticStorage) {\n                          final int registerIndex = c.key;\n                          final byte registerValue = c.value;\n                          probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                        }\n                    }\n                    return;\n                }\n                default/*case FULL*/: {\n                    // src:  FULL\n                    // dest: EMPTY\n\n                    type = HLLType.FULL;\n                    probabilisticStorage = other.probabilisticStorage.clone();\n                    return;\n                }\n            }\n        } else if (HLLType.EMPTY.equals(other.getType())) {\n            // source is empty, so just return destination since it is unchanged\n            return;\n        } /* else -- both of the sets are not empty */\n\n        // ....................................................................\n        // NOTE: Since EMPTY is handled above, the HLLs are non-EMPTY below\n        switch(type) {\n            case EXPLICIT: {\n                // src:  FULL/SPARSE\n                // dest: EXPLICIT\n                // \"Storing into destination\" cannot be done (since destination\n                // is by definition of smaller capacity than source), so a clone\n                // of source is made and values from destination are inserted\n                // into that.\n\n                // Determine source and destination storage.\n                // NOTE:  destination storage may change through promotion if\n                //        source is SPARSE.\n                if(HLLType.SPARSE.equals(other.getType())) {\n                    if(!sparseOff) {\n                        type = HLLType.SPARSE;\n                        sparseProbabilisticStorage = other.sparseProbabilisticStorage.clone();\n                    } else {\n                        initializeStorage(HLLType.FULL);\n                        for(IntByteCursor c : other.sparseProbabilisticStorage) {\n                          final int registerIndex = c.key;\n                          final byte registerValue = c.value;\n                          probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                        }\n                    }\n                } else /*source is HLLType.FULL*/ {\n                    type = HLLType.FULL;\n                    probabilisticStorage = other.probabilisticStorage.clone();\n                }\n                for(LongCursor c : explicitStorage) {\n                    addRaw(c.value);\n                }\n                explicitStorage = null;\n                return;\n            }\n            case SPARSE: {\n                if(HLLType.EXPLICIT.equals(other.getType())) {\n                    // src:  EXPLICIT\n                    // dest: SPARSE\n                    // Add the raw values from the source to the destination.\n\n                    for(LongCursor c : other.explicitStorage) {\n                        addRaw(c.value);\n                    }\n                    // NOTE:  addRaw will handle promotion cleanup\n                } else /*source is HLLType.FULL*/ {\n                    // src:  FULL\n                    // dest: SPARSE\n                    // \"Storing into destination\" cannot be done (since destination\n                    // is by definition of smaller capacity than source), so a\n                    // clone of source is made and registers from the destination\n                    // are merged into the clone.\n\n                    type = HLLType.FULL;\n                    probabilisticStorage = other.probabilisticStorage.clone();\n                    for(IntByteCursor c : sparseProbabilisticStorage) {\n                      final int registerIndex = c.key;\n                      final byte registerValue = c.value;\n                      probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                    }\n                    sparseProbabilisticStorage = null;\n                }\n                return;\n            }\n            default/*destination is HLLType.FULL*/: {\n                if(HLLType.EXPLICIT.equals(other.getType())) {\n                    // src:  EXPLICIT\n                    // dest: FULL\n                    // Add the raw values from the source to the destination.\n                    // Promotion is not possible, so don't bother checking.\n\n                    for(LongCursor c : other.explicitStorage) {\n                        addRaw(c.value);\n                    }\n                } else /*source is HLLType.SPARSE*/ {\n                    // src:  SPARSE\n                    // dest: FULL\n                    // Merge the registers from the source into the destination.\n                    // Promotion is not possible, so don't bother checking.\n\n                    for(IntByteCursor c : other.sparseProbabilisticStorage) {\n                      final int registerIndex = c.key;\n                      final byte registerValue = c.value;\n                      probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                    }\n                }\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#heterogenousUnion(HLL).mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    // Union helpers\n    /**\n     * Computes the union of two HLLs, of different types, and stores the\n     * result in this instance.\n     *\n     * @param other the other {@link HLL} instance to union into this one. This\n     *        cannot be <code>null</code>.\n     */\n    /*package, for testing*/ void heterogenousUnion(final HLL other) {\n        /*\n         * The logic here is divided into two sections: unions with an EMPTY\n         * HLL, and unions between EXPLICIT/SPARSE/FULL\n         * HLL.\n         *\n         * Between those two sections, all possible heterogeneous unions are\n         * covered. Should another type be added to HLLType whose unions\n         * are not easily reduced (say, as EMPTY's are below) this may be more\n         * easily implemented as Strategies. However, that is unnecessary as it\n         * stands.\n         */\n\n        // ....................................................................\n        // Union with an EMPTY\n        if(HLLType.EMPTY.equals(type)) {\n            // NOTE:  The union of empty with non-empty HLL is just a\n            //        clone of the non-empty.\n\n            switch(other.getType()) {\n                case EXPLICIT: {\n                    // src:  EXPLICIT\n                    // dest: EMPTY\n\n                    if(other.explicitStorage.size() <= explicitThreshold) {\n                        type = HLLType.EXPLICIT;\n                        explicitStorage = other.explicitStorage.clone();\n                    } else {\n                        if(!sparseOff) {\n                            initializeStorage(HLLType.SPARSE);\n                        } else {\n                            initializeStorage(HLLType.FULL);\n                        }\n                        for(LongCursor c : other.explicitStorage) {\n                            addRaw(c.value);\n                        }\n                    }\n                    return;\n                }\n                case SPARSE: {\n                    // src:  SPARSE\n                    // dest: EMPTY\n\n                    if(!sparseOff) {\n                        type = HLLType.SPARSE;\n                        sparseProbabilisticStorage = other.sparseProbabilisticStorage.clone();\n                    } else {\n                        initializeStorage(HLLType.FULL);\n                        for(IntByteCursor c : other.sparseProbabilisticStorage) {\n                          final int registerIndex = c.key;\n                          final byte registerValue = c.value;\n                          probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                        }\n                    }\n                    return;\n                }\n                default/*case FULL*/: {\n                    // src:  FULL\n                    // dest: EMPTY\n\n                    type = HLLType.FULL;\n                    probabilisticStorage = other.probabilisticStorage.clone();\n                    return;\n                }\n            }\n        } else if (HLLType.EMPTY.equals(other.getType())) {\n            // source is empty, so just return destination since it is unchanged\n            return;\n        } /* else -- both of the sets are not empty */\n\n        // ....................................................................\n        // NOTE: Since EMPTY is handled above, the HLLs are non-EMPTY below\n        switch(type) {\n            case EXPLICIT: {\n                // src:  FULL/SPARSE\n                // dest: EXPLICIT\n                // \"Storing into destination\" cannot be done (since destination\n                // is by definition of smaller capacity than source), so a clone\n                // of source is made and values from destination are inserted\n                // into that.\n\n                // Determine source and destination storage.\n                // NOTE:  destination storage may change through promotion if\n                //        source is SPARSE.\n                if(HLLType.SPARSE.equals(other.getType())) {\n                    if(!sparseOff) {\n                        type = HLLType.SPARSE;\n                        sparseProbabilisticStorage = other.sparseProbabilisticStorage.clone();\n                    } else {\n                        initializeStorage(HLLType.FULL);\n                        for(IntByteCursor c : other.sparseProbabilisticStorage) {\n                          final int registerIndex = c.key;\n                          final byte registerValue = c.value;\n                          probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                        }\n                    }\n                } else /*source is HLLType.FULL*/ {\n                    type = HLLType.FULL;\n                    probabilisticStorage = other.probabilisticStorage.clone();\n                }\n                for(LongCursor c : explicitStorage) {\n                    addRaw(c.value);\n                }\n                explicitStorage = null;\n                return;\n            }\n            case SPARSE: {\n                if(HLLType.EXPLICIT.equals(other.getType())) {\n                    // src:  EXPLICIT\n                    // dest: SPARSE\n                    // Add the raw values from the source to the destination.\n\n                    for(LongCursor c : other.explicitStorage) {\n                        addRaw(c.value);\n                    }\n                    // NOTE:  addRaw will handle promotion cleanup\n                } else /*source is HLLType.FULL*/ {\n                    // src:  FULL\n                    // dest: SPARSE\n                    // \"Storing into destination\" cannot be done (since destination\n                    // is by definition of smaller capacity than source), so a\n                    // clone of source is made and registers from the destination\n                    // are merged into the clone.\n\n                    type = HLLType.FULL;\n                    probabilisticStorage = other.probabilisticStorage.clone();\n                    for(IntByteCursor c : sparseProbabilisticStorage) {\n                      final int registerIndex = c.key;\n                      final byte registerValue = c.value;\n                      probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                    }\n                    sparseProbabilisticStorage = null;\n                }\n                return;\n            }\n            default/*destination is HLLType.FULL*/: {\n                if(HLLType.EXPLICIT.equals(other.getType())) {\n                    // src:  EXPLICIT\n                    // dest: FULL\n                    // Add the raw values from the source to the destination.\n                    // Promotion is not possible, so don't bother checking.\n\n                    for(LongCursor c : other.explicitStorage) {\n                        addRaw(c.value);\n                    }\n                } else /*source is HLLType.SPARSE*/ {\n                    // src:  SPARSE\n                    // dest: FULL\n                    // Merge the registers from the source into the destination.\n                    // Promotion is not possible, so don't bother checking.\n\n                    for(IntByteCursor c : other.sparseProbabilisticStorage) {\n                      final int registerIndex = c.key;\n                      final byte registerValue = c.value;\n                      probabilisticStorage.setMaxRegister(registerIndex, registerValue);\n                    }\n                }\n            }\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}