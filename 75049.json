{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"/dev/null","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        if (format <= FORMAT) {\n          // this new format introduces multi-level skipping\n          maxSkipLevels = input.readInt();\n        }\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n    if (format > FORMAT_VERSION_UTF8_LENGTH_IN_BYTES) {\n      termBuffer.setPreUTF8Strings();\n      scanBuffer.setPreUTF8Strings();\n      prevBuffer.setPreUTF8Strings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n    if (format > FORMAT_MINIMUM)\n      throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    if (format < FORMAT_CURRENT)\n      throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n    if (format > FORMAT_MINIMUM)\n      throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    if (format < FORMAT_CURRENT)\n      throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format < FORMAT_CURRENT)\n        throw new CorruptIndexException(\"Unknown format version:\" + format + \" expected \" + FORMAT_CURRENT + \" or higher\");\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4","date":1279914031,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n    if (format > FORMAT_MINIMUM)\n      throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    if (format < FORMAT_CURRENT)\n      throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n    if (format > FORMAT_MINIMUM)\n      throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    if (format < FORMAT_CURRENT)\n      throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n    if (format > FORMAT_MINIMUM)\n      throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    if (format < FORMAT_CURRENT)\n      throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      if(format == -1){\n        if (!isIndex) {\n          indexInterval = input.readInt();\n          formatM1SkipInterval = input.readInt();\n        }\n        // switch off skipTo optimization for file format prior to 1.4rc2 in order to avoid a bug in \n        // skipTo implementation of these versions\n        skipInterval = Integer.MAX_VALUE;\n      } else {\n        indexInterval = input.readInt();\n        skipInterval = input.readInt();\n        maxSkipLevels = input.readInt();\n      }\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/SegmentTermEnum#SegmentTermEnum(IndexInput,FieldInfos,boolean).mjava","sourceNew":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","sourceOld":"  SegmentTermEnum(IndexInput i, FieldInfos fis, boolean isi)\n          throws CorruptIndexException, IOException {\n    input = i;\n    fieldInfos = fis;\n    isIndex = isi;\n    maxSkipLevels = 1; // use single-level skip lists for formats > -3 \n    \n    int firstInt = input.readInt();\n    if (firstInt >= 0) {\n      // original-format file, without explicit format version number\n      format = 0;\n      size = firstInt;\n\n      // back-compatible settings\n      indexInterval = 128;\n      skipInterval = Integer.MAX_VALUE; // switch off skipTo optimization\n    } else {\n      // we have a format version number\n      format = firstInt;\n\n      // check that it is a format we can understand\n      if (format > FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      if (format < FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(null, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n\n      size = input.readLong();                    // read the size\n      \n      indexInterval = input.readInt();\n      skipInterval = input.readInt();\n      maxSkipLevels = input.readInt();\n      assert indexInterval > 0: \"indexInterval=\" + indexInterval + \" is negative; must be > 0\";\n      assert skipInterval > 0: \"skipInterval=\" + skipInterval + \" is negative; must be > 0\";\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6267e1ce56c2eec111425690cd04e251b6f14952":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"3242a09f703274d3b9283f2064a1a33064b53a1b":[],"4b103252dee6afa1b6d7a622c773d178788eb85a":["7b91922b55d15444d554721b352861d028eb8278","3242a09f703274d3b9283f2064a1a33064b53a1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32","82d5bc05ad1c4710c0c32090d485203fa3ee8cc4"],"82d5bc05ad1c4710c0c32090d485203fa3ee8cc4":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3242a09f703274d3b9283f2064a1a33064b53a1b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}