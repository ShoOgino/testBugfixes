{"path":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","pathOld":"/dev/null","sourceNew":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumberDVWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumberDVWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumberDVWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumberDVWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumberDVWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumberDVWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumberDVWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumberDVWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","pathOld":"/dev/null","sourceNew":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed, true);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed, true);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed, true);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":null,"sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed, true);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":null,"sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed, true);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocValuesProcessor#addNumericField(FieldInfo,int,long).mjava","sourceNew":null,"sourceOld":"  void addNumericField(FieldInfo fieldInfo, int docID, long value) {\n    DocValuesWriter writer = writers.get(fieldInfo.name);\n    NumericDocValuesWriter numericWriter;\n    if (writer == null) {\n      numericWriter = new NumericDocValuesWriter(fieldInfo, bytesUsed, true);\n      writers.put(fieldInfo.name, numericWriter);\n    } else if (!(writer instanceof NumericDocValuesWriter)) {\n      throw new IllegalArgumentException(\"Incompatible DocValues type: field \\\"\" + fieldInfo.name + \"\\\" changed from \" + getTypeDesc(writer) + \" to numeric\");\n    } else {\n      numericWriter = (NumericDocValuesWriter) writer;\n    }\n    numericWriter.addValue(docID, value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","3394716f52b34ab259ad5247e7595d9f9db6e935"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["d4d69c535930b5cce125cff868d40f6373dc27d4","9faa42f41b6adb98daf009cf99a4ee239189e469"],"52c7e49be259508735752fba88085255014a6ecf":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","52c7e49be259508735752fba88085255014a6ecf"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}