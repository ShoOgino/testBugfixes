{"path":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"/dev/null","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-9838\")\n  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["98d250aa216a7b207d8015ed03e2f115f6bcb596"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"/dev/null","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-9838\")\n  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d250aa216a7b207d8015ed03e2f115f6bcb596","date":1489410968,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","sourceNew":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-9838\")\n  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","bugFix":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","sourceNew":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","sourceOld":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","sourceNew":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","sourceOld":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","sourceNew":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","sourceOld":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/int[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4f44656c8081bbc63325a83abdb025eafd5a2b","date":1543200469,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","sourceNew":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n    }\n    \n  }\n\n","sourceOld":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=6\"\n              );\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":["817fc4762cd649397b27305970dad27295735f3a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817fc4762cd649397b27305970dad27295735f3a","date":1561046362,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest#testAtomicUpdateOfFieldsWithDefaultValue().mjava","sourceNew":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              );\n    }\n    \n  }\n\n","sourceOld":"  public void testAtomicUpdateOfFieldsWithDefaultValue() {\n    // both fields have the same default value (42)\n    for (String fieldToUpdate : Arrays.asList(\"intDefault\", \"intDvoDefault\")) {\n      clearIndex();\n\n      // doc where we immediately attempt to inc the default value\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#7\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='708']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"7\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG#7 after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n\n      // diff doc where we check that we can overwrite the default value\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"set\", \"666\"))));\n      assertQ(fieldToUpdate + \": initial RTG#8\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='666']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      // do atomic update\n      assertU(adoc(sdoc(\"id\", \"8\", fieldToUpdate, ImmutableMap.of(\"inc\", -555))));\n      assertQ(fieldToUpdate + \": RTG after atomic update\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      \n      assertU(commit());\n      \n      assertQ(fieldToUpdate + \": doc7 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"7\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='7']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='153']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n      assertQ(fieldToUpdate + \": doc8 post commit RTG\"\n              , req(\"qt\", \"/get\", \"id\", \"8\")\n              , \"count(//doc)=1\"\n              , \"//doc/str[@name='id'][.='8']\"\n              , \"//doc/int[@name='\"+fieldToUpdate+\"'][.='111']\"\n              // whichever field we did *NOT* update\n              , \"//doc/int[@name!='\"+fieldToUpdate+\"'][.='42']\"\n              , \"//doc/long[@name='_version_']\"\n              , \"//doc/date[@name='timestamp']\"\n              , \"//doc/arr[@name='multiDefault']/str[.='muLti-Default']\"\n              , \"count(//doc/*)=7\"\n              );\n    }\n    \n  }\n\n","bugFix":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["28288370235ed02234a64753cdbf0c6ec096304a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["98d250aa216a7b207d8015ed03e2f115f6bcb596"],"817fc4762cd649397b27305970dad27295735f3a":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"98d250aa216a7b207d8015ed03e2f115f6bcb596":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"28288370235ed02234a64753cdbf0c6ec096304a":["98d250aa216a7b207d8015ed03e2f115f6bcb596","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["98d250aa216a7b207d8015ed03e2f115f6bcb596","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["817fc4762cd649397b27305970dad27295735f3a"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","98d250aa216a7b207d8015ed03e2f115f6bcb596"],"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["817fc4762cd649397b27305970dad27295735f3a"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"817fc4762cd649397b27305970dad27295735f3a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"98d250aa216a7b207d8015ed03e2f115f6bcb596":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}