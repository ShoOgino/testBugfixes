{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/UtilsForTests#validateSolrServerDocumentCount(File,FileSystem,Path,int,int).mjava","sourceNew":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","sourceOld":"  public static void validateSolrServerDocumentCount(File solrHomeDir, FileSystem fs, Path outDir, int expectedDocs, int expectedShards)\n      throws IOException, SolrServerException {\n    \n    long actualDocs = 0;\n    int actualShards = 0;\n    for (FileStatus dir : fs.listStatus(outDir)) { // for each shard\n      if (dir.getPath().getName().startsWith(\"part\") && dir.isDirectory()) {\n        actualShards++;\n        EmbeddedSolrServer solr = SolrRecordWriter.createEmbeddedSolrServer(\n            new Path(solrHomeDir.getAbsolutePath()), fs, dir.getPath());\n        \n        try {\n          SolrQuery query = new SolrQuery();\n          query.setQuery(\"*:*\");\n          QueryResponse resp = solr.query(query);\n          long numDocs = resp.getResults().getNumFound();\n          actualDocs += numDocs;\n        } finally {\n          solr.shutdown();\n        }\n      }\n    }\n    assertEquals(expectedShards, actualShards);\n    assertEquals(expectedDocs, actualDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}