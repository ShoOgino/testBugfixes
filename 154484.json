{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCopyOf().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCopyOf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCopyOf().mjava","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCopyOf().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testCopyOf().mjava","sourceNew":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","sourceOld":"  @Test\n  public void testCopyOf() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    int i=0;\n    while(i<50) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2016\", \"5\", \"1\"), \"price_f\", \"400.00\");\n    }\n\n    while(i<100) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2015\", \"5\", \"1\"), \"price_f\", \"300.0\");\n    }\n\n    while(i<150) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2014\", \"5\", \"1\"), \"price_f\", \"500.0\");\n    }\n\n    while(i<250) {\n      updateRequest.add(id, \"id_\"+(++i),\"test_dt\", getDateString(\"2013\", \"5\", \"1\"), \"price_f\", \"100.00\");\n    }\n\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr = \"timeseries(\"+COLLECTIONORALIAS+\", q=\\\"*:*\\\", start=\\\"2013-01-01T01:00:00.000Z\\\", \" +\n        \"end=\\\"2016-12-01T01:00:00.000Z\\\", \" +\n        \"gap=\\\"+1YEAR\\\", \" +\n        \"field=\\\"test_dt\\\", \" +\n        \"count(*), sum(price_f), max(price_f), min(price_f))\";\n\n    String cexpr = \"let(a=\"+expr+\", c=col(a, max(price_f)), tuple(copy1=copyOf(c, 10), copy2=copyOf(c), copy3=copyOf(c, 2) ))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> copy1 = (List<Number>)tuples.get(0).get(\"copy1\");\n    assertTrue(copy1.size() == 4);\n    assertTrue(copy1.get(0).doubleValue() == 100D);\n    assertTrue(copy1.get(1).doubleValue() == 500D);\n    assertTrue(copy1.get(2).doubleValue() == 300D);\n    assertTrue(copy1.get(3).doubleValue() == 400D);\n\n    List<Number> copy2 = (List<Number>)tuples.get(0).get(\"copy2\");\n    assertTrue(copy2.size() == 4);\n    assertTrue(copy2.get(0).doubleValue() == 100D);\n    assertTrue(copy2.get(1).doubleValue() == 500D);\n    assertTrue(copy2.get(2).doubleValue() == 300D);\n    assertTrue(copy2.get(3).doubleValue() == 400D);\n\n    List<Number> copy3 = (List<Number>)tuples.get(0).get(\"copy3\");\n    assertTrue(copy3.size() == 2);\n    assertTrue(copy3.get(0).doubleValue() == 100D);\n    assertTrue(copy3.get(1).doubleValue() == 500D);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}