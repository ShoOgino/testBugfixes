{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":["200be48c182b79811a4fed24fd2d2ad852f092cb"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) throws IOException {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"854f97cd3613b9579fba83755c80b697e2f3993f","date":1353527621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField + \"_dv\", sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField + \"_dv\", sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createRandomCollector(String,Sort,boolean,Type).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private AbstractAllGroupHeadsCollector<?> createRandomCollector(String groupField, Sort sortWithinGroup, boolean canUseIDV, Type valueType) {\n    AbstractAllGroupHeadsCollector<? extends AbstractAllGroupHeadsCollector.GroupHead> collector;\n    if (random().nextBoolean()) {\n      ValueSource vs = new BytesRefFieldSource(groupField);\n      collector =  new FunctionAllGroupHeadsCollector(vs, new HashMap<Object, Object>(), sortWithinGroup);\n    } else if (canUseIDV && random().nextBoolean()) {\n      boolean diskResident = random().nextBoolean();\n      collector =  DVAllGroupHeadsCollector.create(groupField, sortWithinGroup, valueType, diskResident);\n    } else {\n      collector =  TermAllGroupHeadsCollector.create(groupField, sortWithinGroup);\n    }\n\n    if (VERBOSE) {\n      System.out.println(\"Selected implementation: \" + collector.getClass().getSimpleName());\n    }\n\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","0837ab0472feecb3a54260729d845f839e1cbd72"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["854f97cd3613b9579fba83755c80b697e2f3993f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"854f97cd3613b9579fba83755c80b697e2f3993f":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d4d69c535930b5cce125cff868d40f6373dc27d4","fe33227f6805edab2036cbb80645cc4e2d1fa424","854f97cd3613b9579fba83755c80b697e2f3993f"],"854f97cd3613b9579fba83755c80b697e2f3993f":["0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}