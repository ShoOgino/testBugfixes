{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeatures().mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeatures().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Goes through all the stored feature values, and calculates the normalized\n     * values for all the features that will be used for scoring.\n     */\n    private void makeNormalizedFeatures() {\n      int pos = 0;\n      for (final Feature.FeatureWeight feature : modelFeatureWeights) {\n        final int featureId = feature.getIndex();\n        FeatureInfo fInfo = featuresInfo[featureId];\n        if (fInfo.isUsed()) { // not checking for finfo == null as that would be a bug we should catch\n          modelFeatureValuesNormalized[pos] = fInfo.getValue();\n        } else {\n          modelFeatureValuesNormalized[pos] = feature.getDefaultValue();\n        }\n        pos++;\n      }\n      ltrScoringModel.normalizeFeaturesInPlace(modelFeatureValuesNormalized);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeatures().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Goes through all the stored feature values, and calculates the normalized\n     * values for all the features that will be used for scoring.\n     */\n    private void makeNormalizedFeatures() {\n      int pos = 0;\n      for (final Feature.FeatureWeight feature : modelFeatureWeights) {\n        final int featureId = feature.getIndex();\n        FeatureInfo fInfo = featuresInfo[featureId];\n        if (fInfo.isUsed()) { // not checking for finfo == null as that would be a bug we should catch\n          modelFeatureValuesNormalized[pos] = fInfo.getValue();\n        } else {\n          modelFeatureValuesNormalized[pos] = feature.getDefaultValue();\n        }\n        pos++;\n      }\n      ltrScoringModel.normalizeFeaturesInPlace(modelFeatureValuesNormalized);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeaturesAndScore().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeatures().mjava","sourceNew":"    /**\n     * Goes through all the stored feature values, and calculates the normalized\n     * values for all the features that will be used for scoring.\n     * Then calculate and return the model's score.\n     */\n    private float makeNormalizedFeaturesAndScore() {\n      int pos = 0;\n      for (final Feature.FeatureWeight feature : modelFeatureWeights) {\n        final int featureId = feature.getIndex();\n        FeatureInfo fInfo = featuresInfo[featureId];\n        if (fInfo.isUsed()) { // not checking for finfo == null as that would be a bug we should catch\n          modelFeatureValuesNormalized[pos] = fInfo.getValue();\n        } else {\n          modelFeatureValuesNormalized[pos] = feature.getDefaultValue();\n        }\n        pos++;\n      }\n      ltrScoringModel.normalizeFeaturesInPlace(modelFeatureValuesNormalized);\n      return ltrScoringModel.score(modelFeatureValuesNormalized);\n    }\n\n","sourceOld":"    /**\n     * Goes through all the stored feature values, and calculates the normalized\n     * values for all the features that will be used for scoring.\n     */\n    private void makeNormalizedFeatures() {\n      int pos = 0;\n      for (final Feature.FeatureWeight feature : modelFeatureWeights) {\n        final int featureId = feature.getIndex();\n        FeatureInfo fInfo = featuresInfo[featureId];\n        if (fInfo.isUsed()) { // not checking for finfo == null as that would be a bug we should catch\n          modelFeatureValuesNormalized[pos] = fInfo.getValue();\n        } else {\n          modelFeatureValuesNormalized[pos] = feature.getDefaultValue();\n        }\n        pos++;\n      }\n      ltrScoringModel.normalizeFeaturesInPlace(modelFeatureValuesNormalized);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeaturesAndScore().mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.ModelWeight#makeNormalizedFeatures().mjava","sourceNew":"    /**\n     * Goes through all the stored feature values, and calculates the normalized\n     * values for all the features that will be used for scoring.\n     * Then calculate and return the model's score.\n     */\n    private float makeNormalizedFeaturesAndScore() {\n      int pos = 0;\n      for (final Feature.FeatureWeight feature : modelFeatureWeights) {\n        final int featureId = feature.getIndex();\n        FeatureInfo fInfo = featuresInfo[featureId];\n        if (fInfo.isUsed()) { // not checking for finfo == null as that would be a bug we should catch\n          modelFeatureValuesNormalized[pos] = fInfo.getValue();\n        } else {\n          modelFeatureValuesNormalized[pos] = feature.getDefaultValue();\n        }\n        pos++;\n      }\n      ltrScoringModel.normalizeFeaturesInPlace(modelFeatureValuesNormalized);\n      return ltrScoringModel.score(modelFeatureValuesNormalized);\n    }\n\n","sourceOld":"    /**\n     * Goes through all the stored feature values, and calculates the normalized\n     * values for all the features that will be used for scoring.\n     */\n    private void makeNormalizedFeatures() {\n      int pos = 0;\n      for (final Feature.FeatureWeight feature : modelFeatureWeights) {\n        final int featureId = feature.getIndex();\n        FeatureInfo fInfo = featuresInfo[featureId];\n        if (fInfo.isUsed()) { // not checking for finfo == null as that would be a bug we should catch\n          modelFeatureValuesNormalized[pos] = fInfo.getValue();\n        } else {\n          modelFeatureValuesNormalized[pos] = feature.getDefaultValue();\n        }\n        pos++;\n      }\n      ltrScoringModel.normalizeFeaturesInPlace(modelFeatureValuesNormalized);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07ef8d46ad3265812d247126beb45b283763afee"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}