{"path":"src/test-deprecated/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Tests Wildcard queries with an asterisk.\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, false, false);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, false, false);\n        query7.add(query5, false, false);\n\n\t// Queries do not automatically lower-case search terms:\n        Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 2);\n\tassertMatches(searcher, query5, 1);\n\tassertMatches(searcher, query6, 1);\n\tassertMatches(searcher, query7, 2);\n\tassertMatches(searcher, query8, 0);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestWildcard#testAsterisk().mjava","sourceNew":null,"sourceOld":"    /**\n     * Tests Wildcard queries with an asterisk.\n     *\n     */\n    public void testAsterisk()\n        throws IOException\n    {\n        RAMDirectory indexStore = getIndexStore(\"body\", new String[]\n\t    { \"metal\", \"metals\" }\n\t\t\t\t\t\t);\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\tQuery query1 = new TermQuery(new Term(\"body\", \"metal\"));\n        Query query2 = new WildcardQuery(new Term(\"body\", \"metal*\"));\n        Query query3 = new WildcardQuery(new Term(\"body\", \"m*tal\"));\n        Query query4 = new WildcardQuery(new Term(\"body\", \"m*tal*\"));\n        Query query5 = new WildcardQuery(new Term(\"body\", \"m*tals\"));\n\n        BooleanQuery query6 = new BooleanQuery();\n        query6.add(query5, false, false);\n\n        BooleanQuery query7 = new BooleanQuery();\n        query7.add(query3, false, false);\n        query7.add(query5, false, false);\n\n\t// Queries do not automatically lower-case search terms:\n        Query query8 = new WildcardQuery(new Term(\"body\", \"M*tal*\"));\n\n\tassertMatches(searcher, query1, 1);\n\tassertMatches(searcher, query2, 2);\n\tassertMatches(searcher, query3, 1);\n\tassertMatches(searcher, query4, 2);\n\tassertMatches(searcher, query5, 1);\n\tassertMatches(searcher, query6, 1);\n\tassertMatches(searcher, query7, 2);\n\tassertMatches(searcher, query8, 0);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}