{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","sourceNew":"    /**\n     * Marks positions of RV, R1 and R2 in a given word.\n     * Creation date: (16/03/2002 3:40:11 PM)\n     */\n    private void markPositions(String word)\n    {\n        RV = 0;\n        R1 = 0;\n        R2 = 0;\n        int i = 0;\n        // find RV\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // RV zone is empty\n        RV = i;\n        // find R1\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R1 zone is empty\n        R1 = i;\n        // find R2\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        R2 = i;\n    }\n\n","sourceOld":"    /**\n     * Marks positions of RV, R1 and R2 in a given word.\n     * Creation date: (16/03/2002 3:40:11 PM)\n     */\n    private void markPositions(String word)\n    {\n        RV = 0;\n        R1 = 0;\n        R2 = 0;\n        int i = 0;\n        // find RV\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // RV zone is empty\n        RV = i;\n        // find R1\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R1 zone is empty\n        R1 = i;\n        // find R2\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        R2 = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","sourceNew":"    /**\n     * Marks positions of RV, R1 and R2 in a given word.\n     * Creation date: (16/03/2002 3:40:11 PM)\n     */\n    private void markPositions(String word)\n    {\n        RV = 0;\n//        R1 = 0;\n        R2 = 0;\n        int i = 0;\n        // find RV\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // RV zone is empty\n        RV = i;\n        // find R1\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R1 zone is empty\n//        R1 = i;\n        // find R2\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        R2 = i;\n    }\n\n","sourceOld":"    /**\n     * Marks positions of RV, R1 and R2 in a given word.\n     * Creation date: (16/03/2002 3:40:11 PM)\n     */\n    private void markPositions(String word)\n    {\n        RV = 0;\n        R1 = 0;\n        R2 = 0;\n        int i = 0;\n        // find RV\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // RV zone is empty\n        RV = i;\n        // find R1\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R1 zone is empty\n        R1 = i;\n        // find R2\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        R2 = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ru/RussianStemmer#markPositions(String).mjava","sourceNew":"    /**\n     * Marks positions of RV, R1 and R2 in a given word.\n     * Creation date: (16/03/2002 3:40:11 PM)\n     */\n    private void markPositions(String word)\n    {\n        RV = 0;\n//        R1 = 0;\n        R2 = 0;\n        int i = 0;\n        // find RV\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // RV zone is empty\n        RV = i;\n        // find R1\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R1 zone is empty\n//        R1 = i;\n        // find R2\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        R2 = i;\n    }\n\n","sourceOld":"    /**\n     * Marks positions of RV, R1 and R2 in a given word.\n     * Creation date: (16/03/2002 3:40:11 PM)\n     */\n    private void markPositions(String word)\n    {\n        RV = 0;\n//        R1 = 0;\n        R2 = 0;\n        int i = 0;\n        // find RV\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // RV zone is empty\n        RV = i;\n        // find R1\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R1 zone is empty\n//        R1 = i;\n        // find R2\n        while (word.length() > i && !isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        while (word.length() > i && isVowel(word.charAt(i)))\n        {\n            i++;\n        }\n        if (word.length() - 1 < ++i)\n            return; // R2 zone is empty\n        R2 = i;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}