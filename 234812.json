{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","commits":[{"id":"7c82b0d4b7bf499a159eeff92add20bac6599cc1","date":1465223716,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = Arrays.copyOf(expDocNrs, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = Arrays.copyOf(expDocNrs, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = Arrays.copyOf(expDocNrs, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","sourceNew":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = ArrayUtil.copyOfSubArray(expDocNrs, 0, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","sourceOld":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = Arrays.copyOf(expDocNrs, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","sourceNew":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = ArrayUtil.copyOfSubArray(expDocNrs, 0, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","sourceOld":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = Arrays.copyOf(expDocNrs, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleExplanationsWithFillerDocs#qtest(Query,int[]).mjava","sourceNew":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = ArrayUtil.copyOfSubArray(expDocNrs, 0, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","sourceOld":"  /**\n   * Adjusts <code>expDocNrs</code> based on the filler docs injected in the index, \n   * and if neccessary wraps the <code>q</code> in a BooleanQuery that will filter out all \n   * filler docs using the {@link #EXTRA} field.\n   * \n   * @see #replaceIndex\n   */\n  @Override\n  public void qtest(Query q, int[] expDocNrs) throws Exception {\n\n    expDocNrs = Arrays.copyOf(expDocNrs, expDocNrs.length);\n    for (int i=0; i < expDocNrs.length; i++) {\n      expDocNrs[i] = PRE_FILLER_DOCS + ((NUM_FILLER_DOCS + 1) * expDocNrs[i]);\n    }\n\n    if (null != EXTRA) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(new BooleanClause(q, BooleanClause.Occur.MUST));\n      builder.add(new BooleanClause(new TermQuery(new Term(EXTRA, EXTRA)), BooleanClause.Occur.MUST_NOT));\n      q = builder.build();\n    }\n    super.qtest(q, expDocNrs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["191128ac5b85671b1671e2c857437694283b6ebf","9798d0818e7a880546802b509792d3f3d57babd2"],"191128ac5b85671b1671e2c857437694283b6ebf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c82b0d4b7bf499a159eeff92add20bac6599cc1"],"9798d0818e7a880546802b509792d3f3d57babd2":["191128ac5b85671b1671e2c857437694283b6ebf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","191128ac5b85671b1671e2c857437694283b6ebf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["191128ac5b85671b1671e2c857437694283b6ebf","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"7c82b0d4b7bf499a159eeff92add20bac6599cc1":["191128ac5b85671b1671e2c857437694283b6ebf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c82b0d4b7bf499a159eeff92add20bac6599cc1","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"191128ac5b85671b1671e2c857437694283b6ebf":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}