{"path":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDateTools#testStringToDate().mjava","sourceNew":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    expectThrows(ParseException.class, () -> {\n      DateTools.stringToDate(\"97\");    // no date\n    });\n\n    expectThrows(ParseException.class, () -> {\n      DateTools.stringToDate(\"200401011235009999\");    // no date\n    });\n\n    expectThrows(ParseException.class, () -> {\n      DateTools.stringToDate(\"aaaa\");    // no date\n    });\n  }\n\n","sourceOld":"  public void testStringToDate() throws ParseException {\n    \n    Date d = null;\n    d = DateTools.stringToDate(\"2004\");\n    assertEquals(\"2004-01-01 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705\");\n    assertEquals(\"2004-07-05 00:00:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"200407050910\");\n    assertEquals(\"2004-07-05 09:10:00:000\", isoFormat(d));\n    d = DateTools.stringToDate(\"20040705091055990\");\n    assertEquals(\"2004-07-05 09:10:55:990\", isoFormat(d));\n\n    try {\n      d = DateTools.stringToDate(\"97\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"200401011235009999\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n    try {\n      d = DateTools.stringToDate(\"aaaa\");    // no date\n      fail();\n    } catch(ParseException e) { /* expected exception */ }\n\n  }\n\n","bugFix":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["05fe562aa248790944d43cdd478f512572835ba0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}