{"path":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.ROOT);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.ROOT);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.ROOT);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.ROOT);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.US);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/tokenattributes/TestCharTermAttributeImpl#testAppendableInterface().mjava","sourceNew":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.ROOT);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    expectThrows(IndexOutOfBoundsException.class, () -> {\n      t.append((CharSequence) t2, 1, 5);\n    });\n\n    expectThrows(IndexOutOfBoundsException.class, () -> {\n      t.append((CharSequence) t2, 1, 0);\n    });\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","sourceOld":"  public void testAppendableInterface() {\n    CharTermAttributeImpl t = new CharTermAttributeImpl();\n    Formatter formatter = new Formatter(t, Locale.ROOT);\n    formatter.format(\"%d\", 1234);\n    assertEquals(\"1234\", t.toString());\n    formatter.format(\"%d\", 5678);\n    assertEquals(\"12345678\", t.toString());\n    t.append('9');\n    assertEquals(\"123456789\", t.toString());\n    t.append((CharSequence) \"0\");\n    assertEquals(\"1234567890\", t.toString());\n    t.append((CharSequence) \"0123456789\", 1, 3);\n    assertEquals(\"123456789012\", t.toString());\n    t.append((CharSequence) CharBuffer.wrap(\"0123456789\".toCharArray()), 3, 5);\n    assertEquals(\"12345678901234\", t.toString());\n    t.append((CharSequence) t);\n    assertEquals(\"1234567890123412345678901234\", t.toString());\n    t.append((CharSequence) new StringBuilder(\"0123456789\"), 5, 7);\n    assertEquals(\"123456789012341234567890123456\", t.toString());\n    t.append((CharSequence) new StringBuffer(t));\n    assertEquals(\"123456789012341234567890123456123456789012341234567890123456\", t.toString());\n    // very wierd, to test if a subSlice is wrapped correct :)\n    CharBuffer buf = CharBuffer.wrap(\"0123456789\".toCharArray(), 3, 5);\n    assertEquals(\"34567\", buf.toString());\n    t.setEmpty().append((CharSequence) buf, 1, 2);\n    assertEquals(\"4\", t.toString());\n    CharTermAttribute t2 = new CharTermAttributeImpl();\n    t2.append(\"test\");\n    t.append((CharSequence) t2);\n    assertEquals(\"4test\", t.toString());\n    t.append((CharSequence) t2, 1, 2);\n    assertEquals(\"4teste\", t.toString());\n    \n    try {\n      t.append((CharSequence) t2, 1, 5);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    try {\n      t.append((CharSequence) t2, 1, 0);\n      fail(\"Should throw IndexOutOfBoundsException\");\n    } catch(IndexOutOfBoundsException iobe) {\n    }\n    \n    t.append((CharSequence) null);\n    assertEquals(\"4testenull\", t.toString());\n  }\n\n","bugFix":["b298ec7eee064feb32314fd646a95e38f1152835"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["2acf500f78aa12b92e371fd89c719291986b6b90"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"],"46d8ada1fff8d18cb197c38c7983225162599948":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"2acf500f78aa12b92e371fd89c719291986b6b90":["fe33227f6805edab2036cbb80645cc4e2d1fa424","05fe562aa248790944d43cdd478f512572835ba0","46d8ada1fff8d18cb197c38c7983225162599948"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}