{"path":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,String,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    // don't use a precisionStep if the field is multiValued\n    int ps = field.multiValued() ? Integer.MAX_VALUE : precisionStep;\n\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, String field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field, precisionStep,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field, precisionStep,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field, precisionStep,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field, precisionStep,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field, precisionStep,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a8ebea459a12fd73b3a200b86053f407cf33693","date":1249412793,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    // don't use a precisionStep if the field is multiValued\n    int ps = field.multiValued() ? Integer.MAX_VALUE : precisionStep;\n\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","bugFix":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87aae76ff9968dd754e0682d8bc2edfea6b706","date":1254673566,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    // NumericRangeQuery extends MultiTermQuery but returns null for getTerm() which currently breaks\n    // the span based highlighter in Lucene 2.9.0.  Wrapping the query prevents the highlighter\n    // from calling getTerm()\n    return new SolrQueryWrapper(query);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"64c43363f86d5933eca7bb7f9c256aba8cf6b9af","date":1258732500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    // NumericRangeQuery extends MultiTermQuery but returns null for getTerm() which currently breaks\n    // the span based highlighter in Lucene 2.9.0.  Wrapping the query prevents the highlighter\n    // from calling getTerm()\n    return new SolrQueryWrapper(query);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {\n    int ps = precisionStep;\n    Query query = null;\n    switch (type) {\n      case INTEGER:\n        query = NumericRangeQuery.newIntRange(field.getName(), ps,\n                min == null ? null : Integer.parseInt(min),\n                max == null ? null : Integer.parseInt(max),\n                minInclusive, maxInclusive);\n        break;\n      case FLOAT:\n        query = NumericRangeQuery.newFloatRange(field.getName(), ps,\n                min == null ? null : Float.parseFloat(min),\n                max == null ? null : Float.parseFloat(max),\n                minInclusive, maxInclusive);\n        break;\n      case LONG:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : Long.parseLong(min),\n                max == null ? null : Long.parseLong(max),\n                minInclusive, maxInclusive);\n        break;\n      case DOUBLE:\n        query = NumericRangeQuery.newDoubleRange(field.getName(), ps,\n                min == null ? null : Double.parseDouble(min),\n                max == null ? null : Double.parseDouble(max),\n                minInclusive, maxInclusive);\n        break;\n      case DATE:\n        query = NumericRangeQuery.newLongRange(field.getName(), ps,\n                min == null ? null : dateField.parseMath(null, min).getTime(),\n                max == null ? null : dateField.parseMath(null, max).getTime(),\n                minInclusive, maxInclusive);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field\");\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6b87aae76ff9968dd754e0682d8bc2edfea6b706":["2a8ebea459a12fd73b3a200b86053f407cf33693"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["64c43363f86d5933eca7bb7f9c256aba8cf6b9af"],"2a8ebea459a12fd73b3a200b86053f407cf33693":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"64c43363f86d5933eca7bb7f9c256aba8cf6b9af":["6b87aae76ff9968dd754e0682d8bc2edfea6b706"]},"commit2Childs":{"6b87aae76ff9968dd754e0682d8bc2edfea6b706":["64c43363f86d5933eca7bb7f9c256aba8cf6b9af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["2a8ebea459a12fd73b3a200b86053f407cf33693"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2a8ebea459a12fd73b3a200b86053f407cf33693":["6b87aae76ff9968dd754e0682d8bc2edfea6b706"],"64c43363f86d5933eca7bb7f9c256aba8cf6b9af":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}