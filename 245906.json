{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#docFreq(String,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#docFreq(String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n\n    Terms terms = core.fields.terms(field);\n    if (terms != null) {\n      return terms.docFreq(term);\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    Terms terms = core.fields.terms(field);\n    if (terms != null) {\n      return terms.docFreq(term);\n    } else {\n      return 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n\n    Terms terms = core.fields.terms(field);\n    if (terms != null) {\n      return terms.docFreq(term);\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#docFreq(String,BytesRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    Terms terms = core.fields.terms(field);\n    if (terms != null) {\n      return terms.docFreq(term);\n    } else {\n      return 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2297162a22c55456e200caef2cbcb00fe381120"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["e2297162a22c55456e200caef2cbcb00fe381120"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"e2297162a22c55456e200caef2cbcb00fe381120":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}