{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#createCollection(String).mjava","commits":[{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#createCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collection) throws IOException, SolrServerException {\n    assertEquals(0, CollectionAdminRequest.createCollection(collection,\n        \"conf\", 2, 1)\n        .setMaxShardsPerNode(1).process(cluster.getSolrClient()).getStatus());\n    for (int i = 1; i < NUM_REPLICAS_OF_SHARD1; i++) {\n      assertTrue(\n          CollectionAdminRequest.addReplicaToShard(collection, \"shard1\").process(cluster.getSolrClient()).isSuccess()\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#createCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collection) throws IOException, SolrServerException {\n    assertEquals(0, CollectionAdminRequest.createCollection(collection,\n        \"conf\", 2, 1)\n        .setMaxShardsPerNode(1).process(cluster.getSolrClient()).getStatus());\n    for (int i = 1; i < NUM_REPLICAS_OF_SHARD1; i++) {\n      assertTrue(\n          CollectionAdminRequest.addReplicaToShard(collection, \"shard1\").process(cluster.getSolrClient()).isSuccess()\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#createCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collection) throws IOException, SolrServerException {\n    assertEquals(0, CollectionAdminRequest.createCollection(collection,\n        \"conf\", 2, 1)\n        .setMaxShardsPerNode(1).process(cluster.getSolrClient()).getStatus());\n    for (int i = 1; i < NUM_REPLICAS_OF_SHARD1; i++) {\n      assertTrue(\n          CollectionAdminRequest.addReplicaToShard(collection, \"shard1\").process(cluster.getSolrClient()).isSuccess()\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#createCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderElectionIntegrationTest#createCollection(String).mjava","sourceNew":"  private void createCollection(String collection) throws IOException, SolrServerException {\n    assertEquals(0, CollectionAdminRequest.createCollection(collection,\n        \"conf\", 2, 1)\n        .process(cluster.getSolrClient()).getStatus());\n    for (int i = 1; i < NUM_REPLICAS_OF_SHARD1; i++) {\n      assertTrue(\n          CollectionAdminRequest.addReplicaToShard(collection, \"shard1\").process(cluster.getSolrClient()).isSuccess()\n      );\n    }\n  }\n\n","sourceOld":"  private void createCollection(String collection) throws IOException, SolrServerException {\n    assertEquals(0, CollectionAdminRequest.createCollection(collection,\n        \"conf\", 2, 1)\n        .setMaxShardsPerNode(1).process(cluster.getSolrClient()).getStatus());\n    for (int i = 1; i < NUM_REPLICAS_OF_SHARD1; i++) {\n      assertTrue(\n          CollectionAdminRequest.addReplicaToShard(collection, \"shard1\").process(cluster.getSolrClient()).isSuccess()\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}