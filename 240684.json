{"path":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,Map[SegmentCommitInfo,Long]).mjava","commits":[{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,Map[SegmentCommitInfo,Long]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,long,IndexWriter,Map[SegmentCommitInfo,Long]).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentCommitInfo> candidate, boolean hitTooLarge, Map<SegmentCommitInfo, Long> sizeInBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentCommitInfo info : candidate) {\n      final long segBytes = sizeInBytes.get(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Roughly measure \"skew\" of the merge, i.e. how\n    // \"balanced\" the merge is (whether the segments are\n    // about the same size), which can range from\n    // 1.0/numSegsBeingMerged (good) to 1.0 (poor). Heavily\n    // lopsided merges (skew near 1.0) is no good; it means\n    // O(N^2) merge cost over time:\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(sizeInBytes.get(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(Locale.ROOT, \"%.3f\", skew) + \" nonDelRatio=\" + String.format(Locale.ROOT, \"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentCommitInfo> candidate, boolean hitTooLarge, long mergingBytes, IndexWriter writer, Map<SegmentCommitInfo, Long> sizeInBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentCommitInfo info : candidate) {\n      final long segBytes = sizeInBytes.get(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Roughly measure \"skew\" of the merge, i.e. how\n    // \"balanced\" the merge is (whether the segments are\n    // about the same size), which can range from\n    // 1.0/numSegsBeingMerged (good) to 1.0 (poor). Heavily\n    // lopsided merges (skew near 1.0) is no good; it means\n    // O(N^2) merge cost over time:\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(sizeInBytes.get(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(Locale.ROOT, \"%.3f\", skew) + \" nonDelRatio=\" + String.format(Locale.ROOT, \"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56fb5e4e4b239474721e13b4cd9542ea2d215451","date":1529091182,"type":5,"author":"Erick","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,Map[SegmentCommitInfo,SegmentSizeAndDocs]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,Map[SegmentCommitInfo,Long]).mjava","sourceNew":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentCommitInfo> candidate, boolean hitTooLarge, Map<SegmentCommitInfo, SegmentSizeAndDocs> segmentsSizes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentCommitInfo info : candidate) {\n      final long segBytes = segmentsSizes.get(info).sizeInBytes;\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Roughly measure \"skew\" of the merge, i.e. how\n    // \"balanced\" the merge is (whether the segments are\n    // about the same size), which can range from\n    // 1.0/numSegsBeingMerged (good) to 1.0 (poor). Heavily\n    // lopsided merges (skew near 1.0) is no good; it means\n    // O(N^2) merge cost over time:\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(segmentsSizes.get(candidate.get(0)).sizeInBytes)) / totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(Locale.ROOT, \"%.3f\", skew) + \" nonDelRatio=\" + String.format(Locale.ROOT, \"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentCommitInfo> candidate, boolean hitTooLarge, Map<SegmentCommitInfo, Long> sizeInBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentCommitInfo info : candidate) {\n      final long segBytes = sizeInBytes.get(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Roughly measure \"skew\" of the merge, i.e. how\n    // \"balanced\" the merge is (whether the segments are\n    // about the same size), which can range from\n    // 1.0/numSegsBeingMerged (good) to 1.0 (poor). Heavily\n    // lopsided merges (skew near 1.0) is no good; it means\n    // O(N^2) merge cost over time:\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(sizeInBytes.get(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(Locale.ROOT, \"%.3f\", skew) + \" nonDelRatio=\" + String.format(Locale.ROOT, \"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,Map[SegmentCommitInfo,Long]).mjava","sourceNew":null,"sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentCommitInfo> candidate, boolean hitTooLarge, Map<SegmentCommitInfo, Long> sizeInBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentCommitInfo info : candidate) {\n      final long segBytes = sizeInBytes.get(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Roughly measure \"skew\" of the merge, i.e. how\n    // \"balanced\" the merge is (whether the segments are\n    // about the same size), which can range from\n    // 1.0/numSegsBeingMerged (good) to 1.0 (poor). Heavily\n    // lopsided merges (skew near 1.0) is no good; it means\n    // O(N^2) merge cost over time:\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(sizeInBytes.get(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(Locale.ROOT, \"%.3f\", skew) + \" nonDelRatio=\" + String.format(Locale.ROOT, \"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/TieredMergePolicy#score(List[SegmentCommitInfo],boolean,Map[SegmentCommitInfo,Long]).mjava","sourceNew":null,"sourceOld":"  /** Expert: scores one merge; subclasses can override. */\n  protected MergeScore score(List<SegmentCommitInfo> candidate, boolean hitTooLarge, Map<SegmentCommitInfo, Long> sizeInBytes) throws IOException {\n    long totBeforeMergeBytes = 0;\n    long totAfterMergeBytes = 0;\n    long totAfterMergeBytesFloored = 0;\n    for(SegmentCommitInfo info : candidate) {\n      final long segBytes = sizeInBytes.get(info);\n      totAfterMergeBytes += segBytes;\n      totAfterMergeBytesFloored += floorSize(segBytes);\n      totBeforeMergeBytes += info.sizeInBytes();\n    }\n\n    // Roughly measure \"skew\" of the merge, i.e. how\n    // \"balanced\" the merge is (whether the segments are\n    // about the same size), which can range from\n    // 1.0/numSegsBeingMerged (good) to 1.0 (poor). Heavily\n    // lopsided merges (skew near 1.0) is no good; it means\n    // O(N^2) merge cost over time:\n    final double skew;\n    if (hitTooLarge) {\n      // Pretend the merge has perfect skew; skew doesn't\n      // matter in this case because this merge will not\n      // \"cascade\" and so it cannot lead to N^2 merge cost\n      // over time:\n      skew = 1.0/maxMergeAtOnce;\n    } else {\n      skew = ((double) floorSize(sizeInBytes.get(candidate.get(0))))/totAfterMergeBytesFloored;\n    }\n\n    // Strongly favor merges with less skew (smaller\n    // mergeScore is better):\n    double mergeScore = skew;\n\n    // Gently favor smaller merges over bigger ones.  We\n    // don't want to make this exponent too large else we\n    // can end up doing poor merges of small segments in\n    // order to avoid the large merges:\n    mergeScore *= Math.pow(totAfterMergeBytes, 0.05);\n\n    // Strongly favor merges that reclaim deletes:\n    final double nonDelRatio = ((double) totAfterMergeBytes)/totBeforeMergeBytes;\n    mergeScore *= Math.pow(nonDelRatio, reclaimDeletesWeight);\n\n    final double finalMergeScore = mergeScore;\n\n    return new MergeScore() {\n\n      @Override\n      public double getScore() {\n        return finalMergeScore;\n      }\n\n      @Override\n      public String getExplanation() {\n        return \"skew=\" + String.format(Locale.ROOT, \"%.3f\", skew) + \" nonDelRatio=\" + String.format(Locale.ROOT, \"%.3f\", nonDelRatio);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1d28f215464f76024caf026606f8ea51a5319c53","56fb5e4e4b239474721e13b4cd9542ea2d215451"],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["1d28f215464f76024caf026606f8ea51a5319c53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56fb5e4e4b239474721e13b4cd9542ea2d215451"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1d28f215464f76024caf026606f8ea51a5319c53","56fb5e4e4b239474721e13b4cd9542ea2d215451"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"56fb5e4e4b239474721e13b4cd9542ea2d215451":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d28f215464f76024caf026606f8ea51a5319c53"],"1d28f215464f76024caf026606f8ea51a5319c53":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","56fb5e4e4b239474721e13b4cd9542ea2d215451","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}