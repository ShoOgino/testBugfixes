{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDocOutOfOrder().mjava","commits":[{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDocOutOfOrder().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDoc().mjava","sourceNew":"    @Override\n    int nextDocOutOfOrder() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9a8c786cabf9991ff5341216b0013ec2811ac76","date":1373720828,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDocOutOfOrder().mjava","sourceNew":null,"sourceOld":"    @Override\n    int nextDocOutOfOrder() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsIncludingScoreQuery.MVInnerScorer#nextDocOutOfOrder().mjava","sourceNew":null,"sourceOld":"    @Override\n    int nextDocOutOfOrder() throws IOException {\n      if (docsEnum != null) {\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n\n      for (;;) {\n        do {\n          if (upto == terms.size()) {\n            return DocIdSetIterator.NO_MORE_DOCS;\n          }\n\n          scoreUpto = upto;\n          if (termsEnum.seekExact(terms.get(ords[upto++], spare), true)) {\n            docsEnum = reuse = termsEnum.docs(acceptDocs, reuse, DocsEnum.FLAG_NONE);\n          }\n        } while (docsEnum == null);\n\n        int docId;\n        do {\n          docId = docsEnum.nextDoc();\n          if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n            break;\n          }\n        } while (alreadyEmittedDocs.get(docId));\n        if (docId == DocIdSetIterator.NO_MORE_DOCS) {\n          docsEnum = null;\n        } else {\n          alreadyEmittedDocs.set(docId);\n          return docId;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9a8c786cabf9991ff5341216b0013ec2811ac76":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","c9a8c786cabf9991ff5341216b0013ec2811ac76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9a8c786cabf9991ff5341216b0013ec2811ac76"]},"commit2Childs":{"c9a8c786cabf9991ff5341216b0013ec2811ac76":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["c9a8c786cabf9991ff5341216b0013ec2811ac76","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}