{"path":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","commits":[{"id":"501ca4dfbe2109e999fff0e568b9f3095bdeff78","date":1347407909,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = new IndexSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.shutdown();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.shutdown();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.shutdown();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.shutdown();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    BoostQuery q = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), -42f);\n    assertEquals(-42f, q.getBoost(), 0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    Query q = new TermQuery(new Term(\"foo\", \"bar\"));\n    q.setBoost(-42f);\n    assertEquals(-42f, q.getBoost(), 0.0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d8b81a823aa3fcf19e4ed413f0b20db8993b012","date":1453235698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":"  public void testNegativeQueryBoost() throws Exception {\n    BoostQuery q = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), -42f);\n    assertEquals(-42f, q.getBoost(), 0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is positive: \" + hits[0].score,\n                   hits[0].score <= 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    BoostQuery q = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), -42f);\n    assertEquals(-42f, q.getBoost(), 0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is not negative: \" + hits[0].score,\n                   hits[0].score < 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testNegativeQueryBoost().mjava","sourceNew":null,"sourceOld":"  public void testNegativeQueryBoost() throws Exception {\n    BoostQuery q = new BoostQuery(new TermQuery(new Term(\"foo\", \"bar\")), -42f);\n    assertEquals(-42f, q.getBoost(), 0f);\n\n    Directory directory = newDirectory();\n    try {\n      Analyzer analyzer = new MockAnalyzer(random());\n      IndexWriterConfig conf = newIndexWriterConfig(analyzer);\n      \n      IndexWriter writer = new IndexWriter(directory, conf);\n      try {\n        Document d = new Document();\n        d.add(newTextField(\"foo\", \"bar\", Field.Store.YES));\n        writer.addDocument(d);\n      } finally {\n        writer.close();\n      }\n      \n      IndexReader reader = DirectoryReader.open(directory);\n      try {\n        IndexSearcher searcher = newSearcher(reader);\n        \n        ScoreDoc[] hits = searcher.search(q, 1000).scoreDocs;\n        assertEquals(1, hits.length);\n        assertTrue(\"score is positive: \" + hits[0].score,\n                   hits[0].score <= 0);\n\n        Explanation explain = searcher.explain(q, hits[0].doc);\n        assertEquals(\"score doesn't match explanation\",\n                     hits[0].score, explain.getValue(), 0.001f);\n        assertTrue(\"explain doesn't think doc is a match\",\n                   explain.isMatch());\n\n      } finally {\n        reader.close();\n      }\n    } finally {\n      directory.close();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4d8b81a823aa3fcf19e4ed413f0b20db8993b012":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"501ca4dfbe2109e999fff0e568b9f3095bdeff78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["4d8b81a823aa3fcf19e4ed413f0b20db8993b012"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["501ca4dfbe2109e999fff0e568b9f3095bdeff78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4d8b81a823aa3fcf19e4ed413f0b20db8993b012":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"501ca4dfbe2109e999fff0e568b9f3095bdeff78":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["501ca4dfbe2109e999fff0e568b9f3095bdeff78"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["4d8b81a823aa3fcf19e4ed413f0b20db8993b012"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}