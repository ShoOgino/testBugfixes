{"path":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#finish().mjava","commits":[{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#finish().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      docs = docs.resize(size);\n      offsets = offsets.resize(size);\n      lengths = lengths.resize(size);\n    }\n\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        long tmpDoc = docs.get(j);\n        docs.set(j, docs.get(i));\n        docs.set(i, tmpDoc);\n        \n        long tmpOffset = offsets.get(j);\n        offsets.set(j, offsets.get(i));\n        offsets.set(i, tmpOffset);\n\n        long tmpLength = lengths.get(j);\n        lengths.set(j, lengths.get(i));\n        lengths.set(i, tmpLength);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Integer.compare((int) docs.get(i), (int) docs.get(j));\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#finish().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      docs = docs.resize(size);\n      offsets = offsets.resize(size);\n      lengths = lengths.resize(size);\n    }\n\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        long tmpDoc = docs.get(j);\n        docs.set(j, docs.get(i));\n        docs.set(i, tmpDoc);\n        \n        long tmpOffset = offsets.get(j);\n        offsets.set(j, offsets.get(i));\n        offsets.set(i, tmpOffset);\n\n        long tmpLength = lengths.get(j);\n        lengths.set(j, lengths.get(i));\n        lengths.set(i, tmpLength);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Integer.compare((int) docs.get(i), (int) docs.get(j));\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#finish().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      docs = docs.resize(size);\n      offsets = offsets.resize(size);\n      lengths = lengths.resize(size);\n    }\n\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        long tmpDoc = docs.get(j);\n        docs.set(j, docs.get(i));\n        docs.set(i, tmpDoc);\n        \n        long tmpOffset = offsets.get(j);\n        offsets.set(j, offsets.get(i));\n        offsets.set(i, tmpOffset);\n\n        long tmpLength = lengths.get(j);\n        lengths.set(j, lengths.get(i));\n        lengths.set(i, tmpLength);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Integer.compare((int) docs.get(i), (int) docs.get(j));\n      }\n    }.sort(0, size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62389a101dca1b996a7d6ca10d23bfb747924e06","date":1525274565,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesFieldUpdates#finish().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void finish() {\n    if (finished) {\n      throw new IllegalStateException(\"already finished\");\n    }\n    finished = true;\n\n    // shrink wrap\n    if (size < docs.size()) {\n      docs = docs.resize(size);\n      offsets = offsets.resize(size);\n      lengths = lengths.resize(size);\n    }\n\n    new InPlaceMergeSorter() {\n      @Override\n      protected void swap(int i, int j) {\n        long tmpDoc = docs.get(j);\n        docs.set(j, docs.get(i));\n        docs.set(i, tmpDoc);\n        \n        long tmpOffset = offsets.get(j);\n        offsets.set(j, offsets.get(i));\n        offsets.set(i, tmpOffset);\n\n        long tmpLength = lengths.get(j);\n        lengths.set(j, lengths.get(i));\n        lengths.set(i, tmpLength);\n      }\n      \n      @Override\n      protected int compare(int i, int j) {\n        // increasing docID order:\n        // NOTE: we can have ties here, when the same docID was updated in the same segment, in which case we rely on sort being\n        // stable and preserving original order so the last update to that docID wins\n        return Integer.compare((int) docs.get(i), (int) docs.get(j));\n      }\n    }.sort(0, size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"62389a101dca1b996a7d6ca10d23bfb747924e06":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["62389a101dca1b996a7d6ca10d23bfb747924e06"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"62389a101dca1b996a7d6ca10d23bfb747924e06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["62389a101dca1b996a7d6ca10d23bfb747924e06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}