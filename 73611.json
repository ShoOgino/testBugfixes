{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,int,long,long,long,int,int,int).mjava","commits":[{"id":"619d6ef89bb642f6258a8369ba5a7a330580e97f","date":1561535144,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,int,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,long,long,long,int,int,int).mjava","sourceNew":"  private void verify(Directory dir, PointWriter points, int dataDimensions, int indexDimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dataDimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we only split by indexed dimension so we check for each only those dimension\n    for (int splitDim = 0; splitDim < indexDimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":"  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we check for each dimension\n    for (int splitDim =0; splitDim < dimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,int,long,long,long,int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,int,long,long,long,int,int,int).mjava","sourceNew":"  private void verify(Directory dir, PointWriter points, int dataDimensions, int indexDimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dataDimensions, indexDimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we only split by indexed dimension so we check for each only those dimension\n    for (int splitDim = 0; splitDim < indexDimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        byte[] maxDataDim = getMaxDataDimension(slices[0], bytesPerDimensions, dataDimensions, indexDimensions, max, splitDim);\n        byte[] minDataDim = getMinDataDimension(slices[1], bytesPerDimensions, dataDimensions, indexDimensions, min, splitDim);\n        cmp = Arrays.compareUnsigned(maxDataDim, 0, (dataDimensions - indexDimensions) * bytesPerDimensions, minDataDim, 0, (dataDimensions - indexDimensions) * bytesPerDimensions);\n        assertTrue(cmp <= 0);\n        if (cmp == 0) {\n          int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint, dataDimensions, indexDimensions,maxDataDim);\n          int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint, dataDimensions, indexDimensions,minDataDim);\n          assertTrue(minDocId >= maxDocID);\n        }\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","sourceOld":"  private void verify(Directory dir, PointWriter points, int dataDimensions, int indexDimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dataDimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we only split by indexed dimension so we check for each only those dimension\n    for (int splitDim = 0; splitDim < indexDimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint);\n        int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint);\n        assertTrue(minDocId >= maxDocID);\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#verify(Directory,PointWriter,int,int,long,long,long,int,int,int).mjava","sourceNew":null,"sourceOld":"  private void verify(Directory dir, PointWriter points, int dataDimensions, int indexDimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{\n    BKDRadixSelector radixSelector = new BKDRadixSelector(dataDimensions, indexDimensions, bytesPerDimensions, sortedOnHeap, dir, \"test\");\n    //we only split by indexed dimension so we check for each only those dimension\n    for (int splitDim = 0; splitDim < indexDimensions; splitDim++) {\n      //We need to make a copy of the data as it is deleted in the process\n      BKDRadixSelector.PathSlice inputSlice = new BKDRadixSelector.PathSlice(copyPoints(dir, points, packedLength), 0, points.count());\n      int commonPrefixLengthInput = getRandomCommonPrefix(inputSlice, bytesPerDimensions, splitDim);\n      BKDRadixSelector.PathSlice[] slices = new BKDRadixSelector.PathSlice[2];\n      byte[] partitionPoint = radixSelector.select(inputSlice, slices, start, end, middle, splitDim, commonPrefixLengthInput);\n      assertEquals(middle - start, slices[0].count);\n      assertEquals(end - middle, slices[1].count);\n      //check that left and right slices contain the correct points\n      byte[] max = getMax(slices[0], bytesPerDimensions, splitDim);\n      byte[] min = getMin(slices[1], bytesPerDimensions, splitDim);\n      int cmp = Arrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);\n      assertTrue(cmp <= 0);\n      if (cmp == 0) {\n        byte[] maxDataDim = getMaxDataDimension(slices[0], bytesPerDimensions, dataDimensions, indexDimensions, max, splitDim);\n        byte[] minDataDim = getMinDataDimension(slices[1], bytesPerDimensions, dataDimensions, indexDimensions, min, splitDim);\n        cmp = Arrays.compareUnsigned(maxDataDim, 0, (dataDimensions - indexDimensions) * bytesPerDimensions, minDataDim, 0, (dataDimensions - indexDimensions) * bytesPerDimensions);\n        assertTrue(cmp <= 0);\n        if (cmp == 0) {\n          int maxDocID = getMaxDocId(slices[0], bytesPerDimensions, splitDim, partitionPoint, dataDimensions, indexDimensions,maxDataDim);\n          int minDocId = getMinDocId(slices[1], bytesPerDimensions, splitDim, partitionPoint, dataDimensions, indexDimensions,minDataDim);\n          assertTrue(minDocId >= maxDocID);\n        }\n      }\n      assertTrue(Arrays.equals(partitionPoint, min));\n      slices[0].writer.destroy();\n      slices[1].writer.destroy();\n    }\n    points.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"619d6ef89bb642f6258a8369ba5a7a330580e97f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"619d6ef89bb642f6258a8369ba5a7a330580e97f":["c7f06758793500ca773d0df1037290e6e404fb33"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["619d6ef89bb642f6258a8369ba5a7a330580e97f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}