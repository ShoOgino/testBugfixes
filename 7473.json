{"path":"src/java/org/apache/lucene/index/DocumentsWriter.FieldMergeState#nextTerm().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter.FieldMergeState#nextTerm().mjava","pathOld":"/dev/null","sourceNew":"    boolean nextTerm() throws IOException {\n      postingUpto++;\n      if (postingUpto == field.numPostings)\n        return false;\n\n      p = postings[postingUpto];\n      docID = 0;\n\n      text = field.threadState.charPool.buffers[p.textStart >> CHAR_BLOCK_SHIFT];\n      textOffset = p.textStart & CHAR_BLOCK_MASK;\n\n      if (p.freqUpto > p.freqStart)\n        freq.init(field.threadState.postingsPool, p.freqStart, p.freqUpto);\n      else\n        freq.bufferOffset = freq.upto = freq.endIndex = 0;\n\n      prox.init(field.threadState.postingsPool, p.proxStart, p.proxUpto);\n\n      // Should always be true\n      boolean result = nextDoc();\n      assert result;\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a0af3a442be522899177e5e11384a45a6784a3f","date":1205348952,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.FieldMergeState#nextTerm().mjava","sourceNew":null,"sourceOld":"    boolean nextTerm() throws IOException {\n      postingUpto++;\n      if (postingUpto == field.numPostings)\n        return false;\n\n      p = postings[postingUpto];\n      docID = 0;\n\n      text = field.threadState.charPool.buffers[p.textStart >> CHAR_BLOCK_SHIFT];\n      textOffset = p.textStart & CHAR_BLOCK_MASK;\n\n      if (p.freqUpto > p.freqStart)\n        freq.init(field.threadState.postingsPool, p.freqStart, p.freqUpto);\n      else\n        freq.bufferOffset = freq.upto = freq.endIndex = 0;\n\n      prox.init(field.threadState.postingsPool, p.proxStart, p.proxUpto);\n\n      // Should always be true\n      boolean result = nextDoc();\n      assert result;\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5a0af3a442be522899177e5e11384a45a6784a3f":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a0af3a442be522899177e5e11384a45a6784a3f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5a0af3a442be522899177e5e11384a45a6784a3f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["5a0af3a442be522899177e5e11384a45a6784a3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}