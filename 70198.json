{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#checkShardsWhitelist(ResponseBuilder,List[String]).mjava","commits":[{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#checkShardsWhitelist(ResponseBuilder,List[String]).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkShardsWhitelist(final ResponseBuilder rb, final List<String> lst) {\n    final List<String> urls = new LinkedList<String>();\n    for (final String ele : lst) {\n      urls.addAll(StrUtils.splitSmart(ele, '|'));\n    }\n    \n    if (whitelistHostChecker.isWhitelistHostCheckingEnabled() && rb.req.getCore().getCoreContainer().getZkController() == null && !whitelistHostChecker.hasExplicitWhitelist()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"TermsComponent \"+HttpShardHandlerFactory.INIT_SHARDS_WHITELIST\n          +\" not configured but required when using the '\"+ShardParams.SHARDS+\"' parameter with the TermsComponent.\"\n          +HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n    } else {\n      ClusterState cs = null;\n      if (rb.req.getCore().getCoreContainer().getZkController() != null) {\n        cs = rb.req.getCore().getCoreContainer().getZkController().getClusterState();\n      }\n      whitelistHostChecker.checkWhitelist(cs, urls.toString(), urls);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c","date":1600965744,"type":4,"author":"S N Munendra","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#checkShardsWhitelist(ResponseBuilder,List[String]).mjava","sourceNew":null,"sourceOld":"  protected void checkShardsWhitelist(final ResponseBuilder rb, final List<String> lst) {\n    final List<String> urls = new LinkedList<String>();\n    for (final String ele : lst) {\n      urls.addAll(StrUtils.splitSmart(ele, '|'));\n    }\n    \n    if (whitelistHostChecker.isWhitelistHostCheckingEnabled() && rb.req.getCore().getCoreContainer().getZkController() == null && !whitelistHostChecker.hasExplicitWhitelist()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"TermsComponent \"+HttpShardHandlerFactory.INIT_SHARDS_WHITELIST\n          +\" not configured but required when using the '\"+ShardParams.SHARDS+\"' parameter with the TermsComponent.\"\n          +HttpShardHandlerFactory.SET_SOLR_DISABLE_SHARDS_WHITELIST_CLUE);\n    } else {\n      ClusterState cs = null;\n      if (rb.req.getCore().getCoreContainer().getZkController() != null) {\n        cs = rb.req.getCore().getCoreContainer().getZkController().getClusterState();\n      }\n      whitelistHostChecker.checkWhitelist(cs, urls.toString(), urls);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["4d51e7db479b42602c7e23ba871b177387268179"],"4d51e7db479b42602c7e23ba871b177387268179":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"]},"commit2Childs":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d51e7db479b42602c7e23ba871b177387268179":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d51e7db479b42602c7e23ba871b177387268179"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}