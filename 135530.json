{"path":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","commits":[{"id":"88b0212386fe531136816706dc37dc49b9dbf7dc","date":1532560226,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","sourceNew":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","sourceOld":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f703b580a38c8a12d78077283f2372b6f65312a0","date":1566551787,"type":3,"author":"Julie Tibshirani","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/NearestNeighbor.NearestVisitor#maybeUpdateBBox().mjava","sourceNew":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon,\n            SloppyMath.haversinMeters(hit.distanceSortKey));\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","sourceOld":"    private void maybeUpdateBBox() {\n      if (setBottomCounter < 1024 || (setBottomCounter & 0x3F) == 0x3F) {\n        NearestHit hit = hitQueue.peek();\n        Rectangle box = Rectangle.fromPointDistance(pointLat, pointLon, hit.distanceMeters);\n        //System.out.println(\"    update bbox to \" + box);\n        minLat = box.minLat;\n        maxLat = box.maxLat;\n        if (box.crossesDateline()) {\n          // box1\n          minLon = Double.NEGATIVE_INFINITY;\n          maxLon = box.maxLon;\n          // box2\n          minLon2 = box.minLon;\n        } else {\n          minLon = box.minLon;\n          maxLon = box.maxLon;\n          // disable box2\n          minLon2 = Double.POSITIVE_INFINITY;\n        }\n      }\n      setBottomCounter++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f703b580a38c8a12d78077283f2372b6f65312a0":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f703b580a38c8a12d78077283f2372b6f65312a0"]},"commit2Childs":{"88b0212386fe531136816706dc37dc49b9dbf7dc":["f703b580a38c8a12d78077283f2372b6f65312a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["88b0212386fe531136816706dc37dc49b9dbf7dc"],"f703b580a38c8a12d78077283f2372b6f65312a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}