{"path":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","commits":[{"id":"61e52acc0f10ced3042a4d0257710497d5ccf4ad","date":1289767503,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","sourceNew":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","sourceOld":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","sourceNew":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","sourceOld":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","pathOld":"solr/src/test/org/apache/solr/TestGroupingSearch#groupBy(Collection[Doc],String).mjava","sourceNew":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","sourceOld":"  public static Map<Comparable, Grp> groupBy(Collection<Doc> docs, String field) {\n    Map<Comparable, Grp> groups = new HashMap<Comparable, Grp>();\n    for (Doc doc : docs) {\n      List<Comparable> vals = doc.getValues(field);\n      if (vals == null) {\n        Grp grp = groups.get(null);\n        if (grp == null) {\n          grp = new Grp();\n          grp.groupValue = null;\n          grp.docs = new ArrayList<Doc>();\n          groups.put(null, grp);\n        }\n        grp.docs.add(doc);\n      } else {\n        for (Comparable val : vals) {\n\n          Grp grp = groups.get(val);\n          if (grp == null) {\n            grp = new Grp();\n            grp.groupValue = val;\n            grp.docs = new ArrayList<Doc>();\n            groups.put(grp.groupValue, grp);\n          }\n          grp.docs.add(doc);\n        }\n      }\n    }\n    return groups;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61e52acc0f10ced3042a4d0257710497d5ccf4ad"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["61e52acc0f10ced3042a4d0257710497d5ccf4ad"],"c26f00b574427b55127e869b935845554afde1fa":["61e52acc0f10ced3042a4d0257710497d5ccf4ad","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["61e52acc0f10ced3042a4d0257710497d5ccf4ad"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61e52acc0f10ced3042a4d0257710497d5ccf4ad"],"61e52acc0f10ced3042a4d0257710497d5ccf4ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","61e52acc0f10ced3042a4d0257710497d5ccf4ad"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"61e52acc0f10ced3042a4d0257710497d5ccf4ad":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}