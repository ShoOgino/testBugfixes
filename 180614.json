{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1), getUseCompoundFile()));        \n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1), getUseCompoundFile()));        \n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38a62612cfa4e104080d89d7751a8f1a258ac335","date":1291442315,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1)));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1), getUseCompoundFile()));        \n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","date":1291833341,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1)));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1), getUseCompoundFile()));        \n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1)));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1), getUseCompoundFile()));        \n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1)));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1)));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      SegmentInfos smallSegments = infos.range(numLargeSegs, numSegs);\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(infos.range(i, i + 1)));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesToExpungeDeletes(SegmentInfos).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findForcedDeletesMerges(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesToExpungeDeletes(SegmentInfos infos)\n    throws CorruptIndexException, IOException {\n    final int numSegs = infos.size();\n    final int numLargeSegs = (numSegs < _numLargeSegments ? numSegs : _numLargeSegments);\n    MergeSpecification spec = null;\n    \n    if(numLargeSegs < numSegs) {\n      // hack to create a shallow sub-range as SegmentInfos instance,\n      // it does not clone all metadata, but LogMerge does not need it\n      final SegmentInfos smallSegments = new SegmentInfos();\n      smallSegments.rollbackSegmentInfos(infos.asList().subList(numLargeSegs, numSegs));\n      spec = super.findMergesToExpungeDeletes(smallSegments);\n    }\n    \n    if(spec == null) spec = new MergeSpecification();\n    for(int i = 0; i < numLargeSegs; i++) {\n      SegmentInfo info = infos.info(i);\n      if(info.hasDeletions()) {\n        spec.add(new OneMerge(Collections.singletonList(infos.info(i))));\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["38a62612cfa4e104080d89d7751a8f1a258ac335"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["38a62612cfa4e104080d89d7751a8f1a258ac335","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","38a62612cfa4e104080d89d7751a8f1a258ac335"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","34ce7c842452c79b12c45a8feb64e4597c7110e8"],"38a62612cfa4e104080d89d7751a8f1a258ac335":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4a69e5860d014751cc9329dfeb441a6d8fd1ed8e":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["38a62612cfa4e104080d89d7751a8f1a258ac335","4a69e5860d014751cc9329dfeb441a6d8fd1ed8e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}