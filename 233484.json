{"path":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","commits":[{"id":"35999886aa4fb00f61d1e2106b5f9bc81deff220","date":1233176726,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"/dev/null","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"450f1a35b72759406232311bd2621441d6ebbe58","date":1236131427,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, terms), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List terms = new ArrayList();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName, (String[]) terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":["9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new KeywordAnalyzer()));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(new KeywordAnalyzer()));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new KeywordAnalyzer(), MaxFieldLength.UNLIMITED);\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheTermsFilter#testMissingTerms().mjava","sourceNew":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","sourceOld":"  public void testMissingTerms() throws Exception {\n    String fieldName = \"field1\";\n    MockRAMDirectory rd = new MockRAMDirectory();\n    IndexWriter w = new IndexWriter(rd, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      int term = i * 10; //terms are units of 10;\n      doc.add(new Field(fieldName, \"\" + term, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    w.close();\n\n    IndexReader reader = IndexReader.open(rd, true);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    int numDocs = reader.numDocs();\n    ScoreDoc[] results;\n    MatchAllDocsQuery q = new MatchAllDocsQuery();\n\n    List<String> terms = new ArrayList<String>();\n    terms.add(\"5\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match nothing\", 0, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 1\", 1, results.length);\n\n    terms = new ArrayList<String>();\n    terms.add(\"10\");\n    terms.add(\"20\");\n    results = searcher.search(q, new FieldCacheTermsFilter(fieldName,  terms.toArray(new String[0])), numDocs).scoreDocs;\n    assertEquals(\"Must match 2\", 2, results.length);\n\n    reader.close();\n    rd.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"35999886aa4fb00f61d1e2106b5f9bc81deff220":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"450f1a35b72759406232311bd2621441d6ebbe58":["35999886aa4fb00f61d1e2106b5f9bc81deff220"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["450f1a35b72759406232311bd2621441d6ebbe58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["450f1a35b72759406232311bd2621441d6ebbe58","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"35999886aa4fb00f61d1e2106b5f9bc81deff220":["450f1a35b72759406232311bd2621441d6ebbe58"],"450f1a35b72759406232311bd2621441d6ebbe58":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["35999886aa4fb00f61d1e2106b5f9bc81deff220"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}