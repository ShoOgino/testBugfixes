{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","sourceNew":"  /**\n   * Returns a new Token object, by default. However, if you want, you\n   * can create and return subclass objects based on the value of ofKind.\n   * Simply add the cases to the switch for all those special cases.\n   * For example, if you have a subclass of Token called IDToken that\n   * you want to create if ofKind is ID, simlpy add something like :\n   *\n   *    case MyParserConstants.ID : return new IDToken();\n   *\n   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use it in your lexical actions.\n   */\n  public static final Token newToken(int ofKind)\n  {\n     switch(ofKind)\n     {\n       default : return new Token();\n     }\n  }\n\n","sourceOld":"  /**\n   * Returns a new Token object, by default. However, if you want, you\n   * can create and return subclass objects based on the value of ofKind.\n   * Simply add the cases to the switch for all those special cases.\n   * For example, if you have a subclass of Token called IDToken that\n   * you want to create if ofKind is ID, simlpy add something like :\n   *\n   *    case MyParserConstants.ID : return new IDToken();\n   *\n   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use it in your lexical actions.\n   */\n  public static final Token newToken(int ofKind)\n  {\n     switch(ofKind)\n     {\n       default : return new Token();\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","sourceNew":"  public static Token newToken(int ofKind)\n  {\n     return newToken(ofKind, null);\n  }\n\n","sourceOld":"  /**\n   * Returns a new Token object, by default. However, if you want, you\n   * can create and return subclass objects based on the value of ofKind.\n   * Simply add the cases to the switch for all those special cases.\n   * For example, if you have a subclass of Token called IDToken that\n   * you want to create if ofKind is ID, simlpy add something like :\n   *\n   *    case MyParserConstants.ID : return new IDToken();\n   *\n   * to the following switch statement. Then you can cast matchedToken\n   * variable to the appropriate type and use it in your lexical actions.\n   */\n  public static final Token newToken(int ofKind)\n  {\n     switch(ofKind)\n     {\n       default : return new Token();\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/Token#newToken(int).mjava","sourceNew":"  public static Token newToken(int ofKind)\n  {\n     return newToken(ofKind, null);\n  }\n\n","sourceOld":"  public static Token newToken(int ofKind)\n  {\n     return newToken(ofKind, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}