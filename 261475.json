{"path":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","pathOld":"modules/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","sourceNew":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(CR)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(CR)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33ed545e4deff5f64f5f512c52a115a2d6d76f9","date":1359983920,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","sourceNew":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(lineEnd)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(CR)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","sourceNew":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(lineEnd)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(CR)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c9a6ea78b00a421744e770568d8c2aab262e4cd","date":1530971937,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(lineEnd)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(lineEnd)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/uima/src/test/org/apache/lucene/analysis/uima/an/SampleWSTokenizerAnnotator#process(JCas).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void process(JCas jCas) throws AnalysisEngineProcessException {\n    Type sentenceType = jCas.getCas().getTypeSystem().getType(SENTENCE_TYPE);\n    Type tokenType = jCas.getCas().getTypeSystem().getType(TOKEN_TYPE);\n    int i = 0;\n    for (String sentenceString : jCas.getDocumentText().split(lineEnd)) {\n      // add the sentence\n      AnnotationFS sentenceAnnotation = jCas.getCas().createAnnotation(sentenceType, i, sentenceString.length());\n      jCas.addFsToIndexes(sentenceAnnotation);\n      i += sentenceString.length();\n    }\n\n    // get tokens\n    int j = 0;\n    for (String tokenString : jCas.getDocumentText().split(WHITESPACE)) {\n      int tokenLength = tokenString.length();\n      AnnotationFS tokenAnnotation = jCas.getCas().createAnnotation(tokenType, j, j + tokenLength);\n      jCas.addFsToIndexes(tokenAnnotation);\n      j += tokenLength;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33ed545e4deff5f64f5f512c52a115a2d6d76f9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d33ed545e4deff5f64f5f512c52a115a2d6d76f9","8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d33ed545e4deff5f64f5f512c52a115a2d6d76f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c9a6ea78b00a421744e770568d8c2aab262e4cd"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["d33ed545e4deff5f64f5f512c52a115a2d6d76f9"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d33ed545e4deff5f64f5f512c52a115a2d6d76f9","8c9a6ea78b00a421744e770568d8c2aab262e4cd"]},"commit2Childs":{"d33ed545e4deff5f64f5f512c52a115a2d6d76f9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","8c9a6ea78b00a421744e770568d8c2aab262e4cd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d33ed545e4deff5f64f5f512c52a115a2d6d76f9","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8c9a6ea78b00a421744e770568d8c2aab262e4cd":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}