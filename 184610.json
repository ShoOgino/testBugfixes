{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","commits":[{"id":"75ac8571c2d82c574e446c3729251b994c69a55c","date":1402523781,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(Automaton).mjava","sourceNew":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      List<Transition> newTransitions = new ArrayList<>();\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private void replaceSep(Automaton a) {\n\n    State[] states = a.getNumberedStates();\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    for(int stateNumber=states.length-1;stateNumber >=0;stateNumber--) {\n      final State state = states[stateNumber];\n      List<Transition> newTransitions = new ArrayList<>();\n      for(Transition t : state.getTransitions()) {\n        assert t.getMin() == t.getMax();\n        if (t.getMin() == TokenStreamToAutomaton.POS_SEP) {\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            newTransitions.add(new Transition(SEP_LABEL, t.getDest()));\n          } else {\n            copyDestTransitions(state, t.getDest(), newTransitions);\n            a.setDeterministic(false);\n          }\n        } else if (t.getMin() == TokenStreamToAutomaton.HOLE) {\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          copyDestTransitions(state, t.getDest(), newTransitions);\n          a.setDeterministic(false);\n        } else {\n          newTransitions.add(t);\n        }\n      }\n      state.setTransitions(newTransitions.toArray(new Transition[newTransitions.size()]));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","sourceNew":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      List<Transition> newTransitions = new ArrayList<>();\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","sourceNew":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    Transition t = new Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","sourceOld":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","sourceNew":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    Transition t = new Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    Transition t = new Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finish();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#replaceSep(LightAutomaton).mjava","sourceNew":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private Automaton replaceSep(Automaton a) {\n\n    Automaton result = new Automaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    Transition t = new Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","sourceOld":"  // Replaces SEP with epsilon or remaps them if\n  // we were asked to preserve them:\n  private LightAutomaton replaceSep(LightAutomaton a) {\n\n    LightAutomaton result = new LightAutomaton();\n\n    // Copy all states over\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      result.createState();\n      result.setAccept(s, a.isAccept(s));\n    }\n\n    // Go in reverse topo sort so we know we only have to\n    // make one pass:\n    Transition t = new Transition();\n    int[] topoSortStates = topoSortStates(a);\n    for(int i=0;i<topoSortStates.length;i++) {\n      int state = topoSortStates[topoSortStates.length-1-i];\n      int count = a.initTransition(state, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        if (t.min == TokenStreamToAutomaton.POS_SEP) {\n          assert t.max == TokenStreamToAutomaton.POS_SEP;\n          if (preserveSep) {\n            // Remap to SEP_LABEL:\n            result.addTransition(state, t.dest, SEP_LABEL);\n          } else {\n            result.addEpsilon(state, t.dest);\n          }\n        } else if (t.min == TokenStreamToAutomaton.HOLE) {\n          assert t.max == TokenStreamToAutomaton.HOLE;\n\n          // Just remove the hole: there will then be two\n          // SEP tokens next to each other, which will only\n          // match another hole at search time.  Note that\n          // it will also match an empty-string token ... if\n          // that's somehow a problem we can always map HOLE\n          // to a dedicated byte (and escape it in the\n          // input).\n          result.addEpsilon(state, t.dest);\n        } else {\n          result.addTransition(state, t.dest, t.min, t.max);\n        }\n      }\n    }\n\n    result.finishState();\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ac8571c2d82c574e446c3729251b994c69a55c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["75ac8571c2d82c574e446c3729251b994c69a55c"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ac8571c2d82c574e446c3729251b994c69a55c":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ac8571c2d82c574e446c3729251b994c69a55c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}