{"path":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":["20349324eb18d1565d301e59be543989f38743d3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() throws ParseException {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19ec10ef17ba08cbd0c263d0d31a6ae9e9461a33","date":1352258720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            // A BooleanQuery is only possible from getFieldQuery if it came from\n            // a single whitespace separated term. In this case, check the coordination\n            // factor on the query: if its enabled, that means we aren't a set of synonyms\n            // but instead multiple terms from one whitespace-separated term, we must\n            // apply minShouldMatch here so that it works correctly with other things\n            // like aliasing.\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":["c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21","c7a49f8dc38a90fbd6c7edac0845981e0b0a7f21"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            // A BooleanQuery is only possible from getFieldQuery if it came from\n            // a single whitespace separated term. In this case, check the coordination\n            // factor on the query: if its enabled, that means we aren't a set of synonyms\n            // but instead multiple terms from one whitespace-separated term, we must\n            // apply minShouldMatch here so that it works correctly with other things\n            // like aliasing.\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            // A BooleanQuery is only possible from getFieldQuery if it came from\n            // a single whitespace separated term. In this case, check the coordination\n            // factor on the query: if its enabled, that means we aren't a set of synonyms\n            // but instead multiple terms from one whitespace-separated term, we must\n            // apply minShouldMatch here so that it works correctly with other things\n            // like aliasing.\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.ExtendedSolrQueryParser#getQuery().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin].ExtendedSolrQueryParser#getQuery().mjava","sourceNew":"    private Query getQuery() {\n      try {\n        \n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            // A BooleanQuery is only possible from getFieldQuery if it came from\n            // a single whitespace separated term. In this case, check the coordination\n            // factor on the query: if its enabled, that means we aren't a set of synonyms\n            // but instead multiple terms from one whitespace-separated term, we must\n            // apply minShouldMatch here so that it works correctly with other things\n            // like aliasing.\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n        \n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","sourceOld":"    private Query getQuery() {\n      try {\n\n        switch (type) {\n          case FIELD:  // fallthrough\n          case PHRASE:\n            Query query = super.getFieldQuery(field, val, type == QType.PHRASE);\n            // A BooleanQuery is only possible from getFieldQuery if it came from\n            // a single whitespace separated term. In this case, check the coordination\n            // factor on the query: if its enabled, that means we aren't a set of synonyms\n            // but instead multiple terms from one whitespace-separated term, we must\n            // apply minShouldMatch here so that it works correctly with other things\n            // like aliasing.\n            if (query instanceof BooleanQuery) {\n              BooleanQuery bq = (BooleanQuery) query;\n              if (!bq.isCoordDisabled()) {\n                SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch);\n              }\n            }\n            if (query instanceof PhraseQuery) {\n              PhraseQuery pq = (PhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n              ((PhraseQuery)query).setSlop(slop);\n            } else if (query instanceof MultiPhraseQuery) {\n              MultiPhraseQuery pq = (MultiPhraseQuery)query;\n              if (minClauseSize > 1 && pq.getTermArrays().size() < minClauseSize) return null;\n              ((MultiPhraseQuery)query).setSlop(slop);\n            } else if (minClauseSize > 1) {\n              // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n              return null;\n            }\n            return query;\n          case PREFIX: return super.getPrefixQuery(field, val);\n          case WILDCARD: return super.getWildcardQuery(field, val);\n          case FUZZY: return super.getFuzzyQuery(field, val, flt);\n          case RANGE: return super.getRangeQuery(field, val, val2, bool, bool2);\n        }\n        return null;\n\n      } catch (Exception e) {\n        // an exception here is due to the field query not being compatible with the input text\n        // for example, passing a string to a numeric field.\n        return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19ec10ef17ba08cbd0c263d0d31a6ae9e9461a33":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"c7e79e31f55cbb444e3023d430a340658755aa31":["19ec10ef17ba08cbd0c263d0d31a6ae9e9461a33"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["19ec10ef17ba08cbd0c263d0d31a6ae9e9461a33","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e79e31f55cbb444e3023d430a340658755aa31"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","19ec10ef17ba08cbd0c263d0d31a6ae9e9461a33"],"19ec10ef17ba08cbd0c263d0d31a6ae9e9461a33":["c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}