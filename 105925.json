{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    private TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","b6a0e3c1c21aac8ecf75706605133012833585c7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["aba371508186796cc6151d8223a5b4e16d02e26e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}