{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, indexReader, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCounts#compute(IndexReader,TaxonomyReader,FacetIndexingParams,CategoryListCache).mjava","sourceNew":"  static TotalFacetCounts compute(final IndexReader indexReader, final TaxonomyReader taxonomy, \n      final FacetIndexingParams facetIndexingParams) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          map.put(clp.createCategoryListIterator(partition), aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","sourceOld":"  static TotalFacetCounts compute(final IndexReader indexReader,\n      final TaxonomyReader taxonomy, final FacetIndexingParams facetIndexingParams,\n      final CategoryListCache clCache) throws IOException {\n    int partitionSize = PartitionsUtils.partitionSize(facetIndexingParams, taxonomy);\n    final int[][] counts = new int[(int) Math.ceil(taxonomy.getSize()  /(float) partitionSize)][partitionSize];\n    FacetSearchParams newSearchParams = new FacetSearchParams(DUMMY_REQ, facetIndexingParams); \n      //createAllListsSearchParams(facetIndexingParams,  this.totalCounts);\n    FacetsAccumulator fe = new StandardFacetsAccumulator(newSearchParams, indexReader, taxonomy) {\n      @Override\n      protected HashMap<CategoryListIterator, Aggregator> getCategoryListMap(\n          FacetArrays facetArrays, int partition) throws IOException {\n        \n        Aggregator aggregator = new CountingAggregator(counts[partition]);\n        HashMap<CategoryListIterator, Aggregator> map = new HashMap<CategoryListIterator, Aggregator>();\n        for (CategoryListParams clp: facetIndexingParams.getAllCategoryListParams()) {\n          final CategoryListIterator cli = clIteraor(clCache, clp, partition);\n          map.put(cli, aggregator);\n        }\n        return map;\n      }\n    };\n    fe.setComplementThreshold(FacetsAccumulator.DISABLE_COMPLEMENT);\n    fe.accumulate(ScoredDocIdsUtils.createAllDocsScoredDocIDs(indexReader));\n    return new TotalFacetCounts(taxonomy, facetIndexingParams, counts, CreationType.Computed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}