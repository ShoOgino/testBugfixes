{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    endWithPreviousDocument();\n    if (numBufferedDocs > 0) {\n      flush();\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    endWithPreviousDocument();\n    if (numBufferedDocs > 0) {\n      flush();\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    endWithPreviousDocument();\n    if (numBufferedDocs > 0) {\n      flush();\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    endWithPreviousDocument();\n    if (numBufferedDocs > 0) {\n      flush();\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc7a7bb1aa79cf53564793bb5ffa270250c679da","date":1357817084,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    endWithPreviousDocument();\n    if (numBufferedDocs > 0) {\n      flush();\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    endWithPreviousDocument();\n    if (numBufferedDocs > 0) {\n      flush();\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a88f37cd0154833b5c58daac509eb8be347d0f2","date":1397029487,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd7962f4da329a4e559727022b752c5cefaee5da","date":1421356185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","date":1481155163,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.getPosition() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.getPosition() == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.getPosition() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.getPosition() == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.length == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.length == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.size() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.size() == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.getPosition() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.getPosition() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b78d8dfe50af510bace3600bfc4cfa0b031f776","date":1598430423,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.size() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer(), metaStream);\n    metaStream.writeVLong(numChunks);\n    metaStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(metaStream);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.size() == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.size() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer());\n    fieldsStream.writeVLong(numChunks);\n    fieldsStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.size() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45264aed0cfa8a8a55ae1292b0e336d29cd88401","date":1600361948,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#finish(FieldInfos,int).mjava","sourceNew":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      numDirtyChunks++; // incomplete: we had to force this flush\n      final long expectedChunkDocs = Math.min(maxDocsPerChunk, (long) ((double) chunkSize / bufferedDocs.size() * numBufferedDocs));\n      numDirtyDocs += expectedChunkDocs - numBufferedDocs;\n      flush();\n    } else {\n      assert bufferedDocs.size() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer(), metaStream);\n    metaStream.writeVLong(numDirtyChunks);\n    metaStream.writeVLong(numDirtyDocs);\n    CodecUtil.writeFooter(metaStream);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.size() == 0;\n  }\n\n","sourceOld":"  @Override\n  public void finish(FieldInfos fis, int numDocs) throws IOException {\n    if (numBufferedDocs > 0) {\n      flush();\n      numDirtyChunks++; // incomplete: we had to force this flush\n    } else {\n      assert bufferedDocs.size() == 0;\n    }\n    if (docBase != numDocs) {\n      throw new RuntimeException(\"Wrote \" + docBase + \" docs, finish called with numDocs=\" + numDocs);\n    }\n    indexWriter.finish(numDocs, fieldsStream.getFilePointer(), metaStream);\n    metaStream.writeVLong(numChunks);\n    metaStream.writeVLong(numDirtyChunks);\n    CodecUtil.writeFooter(metaStream);\n    CodecUtil.writeFooter(fieldsStream);\n    assert bufferedDocs.size() == 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2b78d8dfe50af510bace3600bfc4cfa0b031f776":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"5eb2511ababf862ea11e10761c70ee560cd84510":["fc7a7bb1aa79cf53564793bb5ffa270250c679da","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["bd7962f4da329a4e559727022b752c5cefaee5da"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bd7962f4da329a4e559727022b752c5cefaee5da":["3a88f37cd0154833b5c58daac509eb8be347d0f2"],"45264aed0cfa8a8a55ae1292b0e336d29cd88401":["2b78d8dfe50af510bace3600bfc4cfa0b031f776"],"9856095f7afb5a607bf5e65077615ed91273508c":["bd7962f4da329a4e559727022b752c5cefaee5da","c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9"],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["45264aed0cfa8a8a55ae1292b0e336d29cd88401"]},"commit2Childs":{"2b78d8dfe50af510bace3600bfc4cfa0b031f776":["45264aed0cfa8a8a55ae1292b0e336d29cd88401"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","3a88f37cd0154833b5c58daac509eb8be347d0f2"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9":["409da428f28953cf35fddd5c9ff5c7e4f5439863","9856095f7afb5a607bf5e65077615ed91273508c"],"409da428f28953cf35fddd5c9ff5c7e4f5439863":["2b78d8dfe50af510bace3600bfc4cfa0b031f776"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","fc7a7bb1aa79cf53564793bb5ffa270250c679da"],"fc7a7bb1aa79cf53564793bb5ffa270250c679da":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"bd7962f4da329a4e559727022b752c5cefaee5da":["c4ad863d796f4e72a3a1ef4bacd2e19c3e9258c9","9856095f7afb5a607bf5e65077615ed91273508c"],"45264aed0cfa8a8a55ae1292b0e336d29cd88401":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"3a88f37cd0154833b5c58daac509eb8be347d0f2":["bd7962f4da329a4e559727022b752c5cefaee5da"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","9856095f7afb5a607bf5e65077615ed91273508c","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}