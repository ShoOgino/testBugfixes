{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f241b963c5bcd6c2293a928059dd2d64988a6042","date":1340296137,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","bugFix":["c619aff1490fbcbfb8aee81049da5e5120a986d6","25a69ca6651c6c39154826d22ee7a0b606cb5d8c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws CorruptIndexException, IOException {\n\n    // Ensure that only one thread actually gets to do the closing:\n    if (shouldClose()) {\n      // If any methods have hit OutOfMemoryError, then abort\n      // on close, in case the internal state of IndexWriter\n      // or DocumentsWriter is corrupt\n      if (hitOOM)\n        rollbackInternal();\n      else\n        closeInternal(waitForMerges);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e9b91640bcf21617f742fa506dc0a1495bb7d6","date":1343107563,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","date":1343203827,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, !hitOOM);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ad5831ce5311e0afb145f4ffafb431feb9ac224","date":1383743871,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n      assert eventQueue.isEmpty();\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36d11d10048211b240fce248fcfd8fcf9735efd8","date":1389299500,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n      assert assertEventQueueAfterClose();\n    }\n  }\n\n","sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n      assert eventQueue.isEmpty();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#close(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Closes the index with or without waiting for currently\n   * running merges to finish.  This is only meaningful when\n   * using a MergeScheduler that runs merges in background\n   * threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer, again.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: it is dangerous to always call\n   * close(false), especially when IndexWriter is not open\n   * for very long, because this can result in \"merge\n   * starvation\" whereby long merges will never have a\n   * chance to finish.  This will cause too many segments in\n   * your index over time.</p>\n   *\n   * @param waitForMerges if true, this call will block\n   * until all merges complete; else, it will ask all\n   * running merges to abort, wait until those merges have\n   * finished (which should be at most a few seconds), and\n   * then return.\n   */\n  public void close(boolean waitForMerges) throws IOException {\n\n    // Ensure that only one thread actually gets to do the\n    // closing, and make sure no commit is also in progress:\n    synchronized(commitLock) {\n      if (shouldClose()) {\n        // If any methods have hit OutOfMemoryError, then abort\n        // on close, in case the internal state of IndexWriter\n        // or DocumentsWriter is corrupt\n        if (hitOOM) {\n          rollbackInternal();\n        } else {\n          closeInternal(waitForMerges, true);\n        }\n      }\n      assert assertEventQueueAfterClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f241b963c5bcd6c2293a928059dd2d64988a6042":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"36d11d10048211b240fce248fcfd8fcf9735efd8":["4ad5831ce5311e0afb145f4ffafb431feb9ac224"],"4ad5831ce5311e0afb145f4ffafb431feb9ac224":["e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"e9e9b91640bcf21617f742fa506dc0a1495bb7d6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"aba371508186796cc6151d8223a5b4e16d02e26e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","e9e9b91640bcf21617f742fa506dc0a1495bb7d6"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["36d11d10048211b240fce248fcfd8fcf9735efd8"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["f241b963c5bcd6c2293a928059dd2d64988a6042"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"]},"commit2Childs":{"f241b963c5bcd6c2293a928059dd2d64988a6042":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f241b963c5bcd6c2293a928059dd2d64988a6042","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b":[],"36d11d10048211b240fce248fcfd8fcf9735efd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"4ad5831ce5311e0afb145f4ffafb431feb9ac224":["36d11d10048211b240fce248fcfd8fcf9735efd8"],"e9e9b91640bcf21617f742fa506dc0a1495bb7d6":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","4ad5831ce5311e0afb145f4ffafb431feb9ac224","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","e9e9b91640bcf21617f742fa506dc0a1495bb7d6","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe9077a1ed75bdcdcc7dfff6525f73941c8cf30b","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}