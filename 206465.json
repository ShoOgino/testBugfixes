{"path":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","commits":[{"id":"0698c497f27c6f59a7a094c46c0f8795f330edf7","date":1252588039,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"/dev/null","sourceNew":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e122d6e4a2d4e9b25c10c99d0df3066f9358cfda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","pathOld":"src/test/org/apache/solr/client/solrj/SolrExampleTests#testContentStreamRequest().mjava","sourceNew":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","sourceOld":"  public void testContentStreamRequest() throws Exception {\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    ContentStreamUpdateRequest up = new ContentStreamUpdateRequest(\"/update/csv\");\n    up.addFile(new File(\"books.csv\"));\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = server.request(up);\n    assertNotNull(\"Couldn't upload books.csv\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 10, rsp.getResults().getNumFound() );\n\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    up = new ContentStreamUpdateRequest(\"/update/extract\");\n    up.addFile(new File(\"mailing_lists.pdf\"));\n    up.setParam(\"literal.id\", \"mailing_lists.pdf\");\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    result = server.request(up);\n    assertNotNull(\"Couldn't upload mailing_lists.pdf\", result);\n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0698c497f27c6f59a7a094c46c0f8795f330edf7":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0698c497f27c6f59a7a094c46c0f8795f330edf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0698c497f27c6f59a7a094c46c0f8795f330edf7":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0698c497f27c6f59a7a094c46c0f8795f330edf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}