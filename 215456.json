{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readMetrics(String,Set[String],ClientSnitchCtx).mjava","commits":[{"id":"7811b56f2d9e37eb839450d346535c87f1f504c2","date":1502459873,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readMetrics(String,Set[String],ClientSnitchCtx).mjava","pathOld":"/dev/null","sourceNew":"    private void readMetrics(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> metricsNames = null;\n      for (String tag : requestedTags) {\n        if (tag.startsWith(METRICS_PREFIX)) {\n          if (metricsNames == null) metricsNames = new ArrayList<>();\n          metricsNames.add(tag);\n        }\n      }\n      if (metricsNames == null) return;\n      for (String metricsName : metricsNames) {\n        List<String> ss = StrUtils.splitSmart(metricsName, ':');\n        if (ss.size() < 3 || ss.size() > 4) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metrics name\" + metricsName);\n        }\n        try {\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.add(\"group\", ss.get(1));\n          params.add(\"prefix\", ss.get(2));\n          if (ss.size() == 4) params.add(\"property\", ss.get(3));\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          Object v = Utils.getObjectByPath(rsp.nl, true, ss);\n          if (v != null) snitchContext.getTags().put(metricsName, v);\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"455b47db0cfa51136fb68f261afcee3f59acb80e","date":1502982490,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider.AutoScalingSnitch#readMetrics(String,Set[String],ClientSnitchCtx).mjava","sourceNew":null,"sourceOld":"    private void readMetrics(String solrNode, Set<String> requestedTags, ClientSnitchCtx snitchContext) {\n      List<String> metricsNames = null;\n      for (String tag : requestedTags) {\n        if (tag.startsWith(METRICS_PREFIX)) {\n          if (metricsNames == null) metricsNames = new ArrayList<>();\n          metricsNames.add(tag);\n        }\n      }\n      if (metricsNames == null) return;\n      for (String metricsName : metricsNames) {\n        List<String> ss = StrUtils.splitSmart(metricsName, ':');\n        if (ss.size() < 3 || ss.size() > 4) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metrics name\" + metricsName);\n        }\n        try {\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.add(\"group\", ss.get(1));\n          params.add(\"prefix\", ss.get(2));\n          if (ss.size() == 4) params.add(\"property\", ss.get(3));\n          SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);\n          Object v = Utils.getObjectByPath(rsp.nl, true, ss);\n          if (v != null) snitchContext.getTags().put(metricsName, v);\n        } catch (Exception e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7811b56f2d9e37eb839450d346535c87f1f504c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"455b47db0cfa51136fb68f261afcee3f59acb80e":["7811b56f2d9e37eb839450d346535c87f1f504c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7811b56f2d9e37eb839450d346535c87f1f504c2":["455b47db0cfa51136fb68f261afcee3f59acb80e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7811b56f2d9e37eb839450d346535c87f1f504c2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"455b47db0cfa51136fb68f261afcee3f59acb80e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["455b47db0cfa51136fb68f261afcee3f59acb80e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}