{"path":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"/dev/null","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setConstantScoreRewrite(true);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setConstantScoreRewrite(false);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(\"value\")) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(\"value\")) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65eb076d345a794256daba691a2b366657c807e8","date":1245771732,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setConstantScoreRewrite(true);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setConstantScoreRewrite(false);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setConstantScoreRewrite(true);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setConstantScoreRewrite(false);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(\"value\")) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(\"value\")) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setConstantScoreRewrite(true);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setConstantScoreRewrite(false);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f72737a1e9086dec7c0a535a50ad665043ac21d5","date":1248519270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (boolean query)\";\n          q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery q = NumericRangeQuery.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    NumericRangeFilter f = NumericRangeFilter.newLongRange(field, precisionStep, new Long(lower), new Long(upper), true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c888ee2e3322649a888c466fae1c470524642e0a","date":1268478628,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#testRange(int).mjava","sourceNew":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for constant score + boolean query + filter, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    long lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Long> q = NumericRangeQuery.newLongRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Long> f = NumericRangeFilter.newLongRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Long.parseLong(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Long.parseLong(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c888ee2e3322649a888c466fae1c470524642e0a":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"f72737a1e9086dec7c0a535a50ad665043ac21d5":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"65eb076d345a794256daba691a2b366657c807e8":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["f72737a1e9086dec7c0a535a50ad665043ac21d5"],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["65eb076d345a794256daba691a2b366657c807e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c888ee2e3322649a888c466fae1c470524642e0a"]},"commit2Childs":{"c888ee2e3322649a888c466fae1c470524642e0a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f72737a1e9086dec7c0a535a50ad665043ac21d5":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"65eb076d345a794256daba691a2b366657c807e8":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["c888ee2e3322649a888c466fae1c470524642e0a"],"53b6c192847de8643a5da505cc433cbf8476a175":["65eb076d345a794256daba691a2b366657c807e8"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["f72737a1e9086dec7c0a535a50ad665043ac21d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}