{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c7b0ae5716b6c2044195a818e9ae58205175659","date":1353342230,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    @SuppressWarnings({\"rawtypes\"})\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    @SuppressWarnings({\"rawtypes\"})\n    List fields = new ArrayList();\n    fields.add(createMap(\"column\", \"firstName\"));\n    fields.add(createMap(\"column\", \"lastName\"));\n    fields.add(createMap(\"column\", \"middleName\"));\n    fields.add(createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(\"a@b.com\", \"c@d.com\");\n    @SuppressWarnings({\"rawtypes\"})\n    Map row = createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolver resolver = new VariableResolver();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = createMap(\"name\", \"e\");\n\n    Context context = getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["7c7b0ae5716b6c2044195a818e9ae58205175659"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fae06511695f4be0bce5337deb3b3f813d0c3e7c","7c7b0ae5716b6c2044195a818e9ae58205175659"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"7c7b0ae5716b6c2044195a818e9ae58205175659":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","407687e67faf6e1f02a211ca078d8e3eed631027"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["7c7b0ae5716b6c2044195a818e9ae58205175659","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}