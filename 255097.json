{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","commits":[{"id":"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55","date":1363791725,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null, new PassageScorer(), new PassageFormatter());\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a385683d8ce32386bb71e8c427cb78573debda2b","date":1363792009,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":null,"sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null, new PassageScorer(), new PassageFormatter());\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1","date":1363793774,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null, new PassageScorer(), new PassageFormatter());\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null);\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null, new PassageScorer(), new PassageFormatter());\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000, null);\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8176b5c0894f97addb4b77198ec5684476b1b32","date":1365103218,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, 2).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.shutdown();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":null,"sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighter#testEmptyHighlightsWhole().mjava","sourceNew":null,"sourceOld":"  /** Make sure highlighter returns whole text when there\n   *  are no hits and BreakIterator is null. */\n  public void testEmptyHighlightsWhole() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    \n    FieldType offsetsType = new FieldType(TextField.TYPE_STORED);\n    offsetsType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);\n    Document doc = new Document();\n\n    Field body = new Field(\"body\", \"test this is.  another sentence this test has.  far away is that planet.\", offsetsType);\n    doc.add(body);\n    iw.addDocument(doc);\n    \n    IndexReader ir = iw.getReader();\n    iw.close();\n    \n    IndexSearcher searcher = newSearcher(ir);\n    PostingsHighlighter highlighter = new PostingsHighlighter(10000) {\n      @Override\n      protected BreakIterator getBreakIterator(String field) {\n        return new WholeBreakIterator();\n      }\n    };\n    Query query = new TermQuery(new Term(\"body\", \"highlighting\"));\n    int[] docIDs = new int[] {0};\n    String snippets[] = highlighter.highlightFields(new String[] {\"body\"}, query, searcher, docIDs, new int[] { 2 }).get(\"body\");\n    assertEquals(1, snippets.length);\n    assertEquals(\"test this is.  another sentence this test has.  far away is that planet.\", snippets[0]);\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["157d49068cfc35be5fed366f40bc20cbcddea695"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d0ef034a4f10871667ae75181537775ddcf8ade4","381618eac2691bb34ab9a3fca76ad55c6274517e"],"a385683d8ce32386bb71e8c427cb78573debda2b":["77fc0eb4b8857a9f5235049cdfe6f678a3ddae55"],"4831dd345148fcd7c33877b449ade21fc45459d8":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["a385683d8ce32386bb71e8c427cb78573debda2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e8176b5c0894f97addb4b77198ec5684476b1b32":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a385683d8ce32386bb71e8c427cb78573debda2b":["4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1"],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77fc0eb4b8857a9f5235049cdfe6f678a3ddae55"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"157d49068cfc35be5fed366f40bc20cbcddea695":["e8176b5c0894f97addb4b77198ec5684476b1b32"],"77fc0eb4b8857a9f5235049cdfe6f678a3ddae55":["a385683d8ce32386bb71e8c427cb78573debda2b"],"4ca2025fc6d81ec43c276473ba49e4fbcb15ccb1":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}