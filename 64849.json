{"path":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfd4d352ddf04b37253ad97ce1aad1448253f0f7","date":1310173878,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63639dd66fd5bd9b90bc24dd596ae01575f27cc4","date":1310237454,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n    Query q = parser.parse(\"\\\"world Flatland\\\"~3\");\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = parser.parse(\"text:\\\"world Flatland\\\"~3\");\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingWithDefaultField().mjava","sourceNew":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","sourceOld":"  public void testHighlightingWithDefaultField() throws Exception {\n\n    String s1 = \"I call our world Flatland, not because we call it so,\";\n\n    // Verify that a query against the default field results in text being\n    // highlighted\n    // regardless of the field name.\n\n    PhraseQuery q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(FIELD_NAME, \"world\"));\n    q.add(new Term(FIELD_NAME, \"flatland\"));\n\n    String expected = \"I call our <B>world</B> <B>Flatland</B>, not because we call it so,\";\n    String observed = highlightField(q, \"SOME_FIELD_NAME\", s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Query in the default field results in text for *ANY* field being highlighted\",\n        expected, observed);\n\n    // Verify that a query against a named field does not result in any\n    // highlighting\n    // when the query field name differs from the name of the field being\n    // highlighted,\n    // which in this example happens to be the default field name.\n    q = new PhraseQuery();\n    q.setSlop(3);\n    q.add(new Term(\"text\", \"world\"));\n    q.add(new Term(\"text\", \"flatland\"));\n\n    expected = s1;\n    observed = highlightField(q, FIELD_NAME, s1);\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\n        \"Query in a named field does not result in highlighting when that field isn't in the query\",\n        s1, highlightField(q, FIELD_NAME, s1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c7f8e68717c68517265937c911e1ce9f25750247"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["c7f8e68717c68517265937c911e1ce9f25750247","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":["a3776dccca01c11e7046323cfad46a3b4a471233","dfd4d352ddf04b37253ad97ce1aad1448253f0f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dfd4d352ddf04b37253ad97ce1aad1448253f0f7":["b89678825b68eccaf09e6ab71675fc0b0af1e099","63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["dfd4d352ddf04b37253ad97ce1aad1448253f0f7","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":["63639dd66fd5bd9b90bc24dd596ae01575f27cc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"c7f8e68717c68517265937c911e1ce9f25750247":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"962d04139994fce5193143ef35615499a9a96d78":[],"63639dd66fd5bd9b90bc24dd596ae01575f27cc4":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","63639dd66fd5bd9b90bc24dd596ae01575f27cc4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}