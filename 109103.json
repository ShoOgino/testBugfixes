{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetedSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetedSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4c6c7f3cda7a0595cabd16e5e9107ca29852708","date":1355402234,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetedSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetedSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3,\n        parentCountRes.getNumSubResults());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3,\n        parentScoreRes.getNumSubResults());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", \n          countResNodes[i].getOrdinal(), scoreResNodes[i].getOrdinal());\n      assertEquals(\"Wrong scores!\", \n          constScore * countResNodes[i].getValue(),\n          scoreResNodes[i].getValue(), \n          Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90213788e5007cc5e2b3d88200a8265de9d4e6d4","date":1359060940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader\n        .maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore,\n          docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    List<FacetResult> countRes = findFacets(scoredDocIDs, getFacetSearchParams());\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, sumScoreSearchParams());\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(fip, new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(fip, new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(fip, new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(fip, new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(getFacetIndexingParams(Integer.MAX_VALUE), new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestScoredDocIdCollector#testConstantScore().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testConstantScore() throws Exception {\n    // test that constant score works well\n\n    Query q = new TermQuery(new Term(CONTENT_FIELD, \"white\"));\n    if (VERBOSE) {\n      System.out.println(\"Query: \" + q);\n    }\n    float constScore = 17.0f;\n    ScoredDocIdCollector dCollector = ScoredDocIdCollector.create(indexReader.maxDoc(), false); // scoring is disabled\n    dCollector.setDefaultScore(constScore);\n    searcher.search(q, dCollector);\n\n    // verify by doc scores at the level of doc-id-iterator\n    ScoredDocIDs scoredDocIDs = dCollector.getScoredDocIDs();\n    assertEquals(\"Wrong number of matching documents!\", 2, scoredDocIDs.size());\n    ScoredDocIDsIterator docItr = scoredDocIDs.iterator();\n    while (docItr.next()) {\n      assertEquals(\"Wrong score for doc \" + docItr.getDocID(), constScore, docItr.getScore(), Double.MIN_VALUE);\n    }\n\n    // verify by facet values\n    CategoryPath cp = new CategoryPath(\"root\",\"a\");\n    FacetSearchParams countFSP = new FacetSearchParams(fip, new CountFacetRequest(cp, 10));\n    FacetSearchParams scoreFSP = new FacetSearchParams(fip, new ScoreFacetRequest(cp, 10));\n    \n    List<FacetResult> countRes = findFacets(scoredDocIDs, countFSP);\n    List<FacetResult> scoreRes = findFacets(scoredDocIDs, scoreFSP);\n\n    assertEquals(\"Wrong number of facet count results!\", 1, countRes.size());\n    assertEquals(\"Wrong number of facet score results!\", 1, scoreRes.size());\n\n    FacetResultNode parentCountRes = countRes.get(0).getFacetResultNode();\n    FacetResultNode parentScoreRes = scoreRes.get(0).getFacetResultNode();\n\n    assertEquals(\"Wrong number of top count aggregated categories!\", 3, parentCountRes.subResults.size());\n    assertEquals(\"Wrong number of top score aggregated categories!\", 3, parentScoreRes.subResults.size());\n\n    // rely on that facet value is computed as doc-score, and\n    // accordingly compare values of the two top-category results.\n\n    FacetResultNode[] countResNodes = resultNodesAsArray(parentCountRes);\n    FacetResultNode[] scoreResNodes = resultNodesAsArray(parentScoreRes);\n\n    for (int i = 0; i < scoreResNodes.length; i++) {\n      assertEquals(\"Ordinals differ!\", countResNodes[i].ordinal, scoreResNodes[i].ordinal);\n      assertEquals(\"Wrong scores!\", constScore * countResNodes[i].value, scoreResNodes[i].value, Double.MIN_VALUE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"61d5f95d14e5b9b046998c51e16709a398c15226":["dd45d4a2ee01a1932d33eec42f5272c2402da679","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["07155cdd910937cdf6877e48884d5782845c8b8b","90213788e5007cc5e2b3d88200a8265de9d4e6d4"],"07155cdd910937cdf6877e48884d5782845c8b8b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"811cdb4a80352766eb0c762e48972707a924e5cd":["d4c6c7f3cda7a0595cabd16e5e9107ca29852708"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["07155cdd910937cdf6877e48884d5782845c8b8b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d4c6c7f3cda7a0595cabd16e5e9107ca29852708"],"90213788e5007cc5e2b3d88200a8265de9d4e6d4":["239f79ed06f0979cfe1911ec5fba32b94fda43c1","dd45d4a2ee01a1932d33eec42f5272c2402da679"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"d4c6c7f3cda7a0595cabd16e5e9107ca29852708":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","811cdb4a80352766eb0c762e48972707a924e5cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["61d5f95d14e5b9b046998c51e16709a398c15226","571abba77e55fea386a38c0024f72ffa5b37a9ad"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["61d5f95d14e5b9b046998c51e16709a398c15226"],"07155cdd910937cdf6877e48884d5782845c8b8b":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"811cdb4a80352766eb0c762e48972707a924e5cd":["90213788e5007cc5e2b3d88200a8265de9d4e6d4","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}