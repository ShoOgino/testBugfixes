{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#addPersistOneCore(ConfigSolr,SolrCore,SolrResourceLoader).mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#addPersistOneCore(ConfigSolr,SolrCore,SolrResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  protected void addPersistOneCore(ConfigSolr cfg, SolrCore solrCore, SolrResourceLoader loader) {\n\n    CoreDescriptor dcore = solrCore.getCoreDescriptor();\n\n    String coreName = dcore.getProperty(CoreDescriptor.CORE_NAME);\n\n    String origCoreName = null;\n\n    Map<String, String> coreAttribs = new HashMap<String, String>();\n    Properties persistProps = new Properties();\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    String collection = null;\n    if (cd  != null) collection = cd.getCollectionName();\n    String instDir = dcore.getRawInstanceDir();\n\n    if (cfg == null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_NAME, coreName);\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_CONFIG, dcore.getDefaultConfigName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SCHEMA, dcore.getDefaultSchemaName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_DATADIR, dcore.getProperty(CoreDescriptor.CORE_DATADIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ULOGDIR, dcore.getProperty(CoreDescriptor.CORE_ULOGDIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_TRANSIENT, dcore.getProperty(CoreDescriptor.CORE_TRANSIENT));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_LOADONSTARTUP, dcore.getProperty(CoreDescriptor.CORE_LOADONSTARTUP));\n      // we don't try and preserve sys prop defs in these\n\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_PROPERTIES, dcore.getPropertiesName());\n      // Add in any non-standard bits of data\n      Set<String> std = new TreeSet<String>();\n\n      Properties allProps = dcore.getCoreProperties();\n\n      std.addAll(Arrays.asList(CoreDescriptor.standardPropNames));\n\n      for (String prop : allProps.stringPropertyNames()) {\n        if (! std.contains(prop)) {\n          persistProps.put(prop, dcore.getProperty(prop));\n        }\n      }\n      if (StringUtils.isNotBlank(collection) && !collection.equals(coreName)) {\n        coreAttribs.put(CoreDescriptor.CORE_COLLECTION, collection);\n      }\n\n    } else {\n\n      origCoreName = getCoreToOrigName(solrCore);\n\n      if (origCoreName == null) {\n        origCoreName = coreName;\n      }\n      String tmp = cfg.getCoreNameFromOrig(origCoreName, loader, coreName);\n      if (tmp != null) coreName = tmp;\n\n      coreAttribs = cfg.readCoreAttributes(origCoreName);\n      persistProps = cfg.readCoreProperties(origCoreName);\n      if (coreAttribs != null) {\n        coreAttribs.put(CoreDescriptor.CORE_NAME, coreName);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_COLLECTION)) collection = coreAttribs.get(CoreDescriptor.CORE_COLLECTION);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_INSTDIR)) instDir = coreAttribs.get(CoreDescriptor.CORE_INSTDIR);\n      }\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, dcore.getRawInstanceDir());\n      coreAttribs.put(CoreDescriptor.CORE_COLLECTION, StringUtils.isNotBlank(collection) ? collection : dcore.getName());\n\n    }\n\n    // Default value here is same as old code.\n    addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, instDir);\n\n    // Emulating the old code, just overwrite shard and roles if present in the cloud descriptor\n    if (cd != null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SHARD, cd.getShardId());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ROLES, cd.getRoles());\n    }\n    coreAttribs.put(CoreDescriptor.CORE_LOADONSTARTUP, Boolean.toString(dcore.isLoadOnStartup()));\n    coreAttribs.put(CoreDescriptor.CORE_TRANSIENT, Boolean.toString(dcore.isTransient()));\n\n    // Now add back in any implicit properties that aren't in already. These are all \"attribs\" in this meaning\n    Properties implicit = dcore.initImplicitProperties();\n\n    if (! coreName.equals(container.getDefaultCoreName())) {\n      for (String prop : implicit.stringPropertyNames()) {\n        if (coreAttribs.get(prop) == null) {\n          coreAttribs.put(prop, implicit.getProperty(prop));\n        }\n      }\n    }\n    if (cfg != null) {\n      cfg.addPersistCore(coreName, persistProps, coreAttribs);\n    } else {\n      // Another awkward bit for back-compat for SOLR-4196\n      ConfigSolrXmlBackCompat.addPersistCore(persistProps, coreAttribs);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#addPersistOneCore(ConfigSolr,SolrCore,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#addPersistOneCore(ConfigSolr,SolrCore,SolrResourceLoader).mjava","sourceNew":"  protected void addPersistOneCore(ConfigSolr cfg, SolrCore solrCore, SolrResourceLoader loader) {\n\n    CoreDescriptor dcore = solrCore.getCoreDescriptor();\n\n    String coreName = dcore.getProperty(CoreDescriptor.CORE_NAME);\n\n    String origCoreName = null;\n\n    Map<String, String> coreAttribs = new HashMap<String, String>();\n    Properties persistProps = new Properties();\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    String collection = null;\n    if (cd  != null) collection = cd.getCollectionName();\n    String instDir = dcore.getRawInstanceDir();\n\n    if (cfg == null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_NAME, coreName);\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_CONFIG, dcore.getDefaultConfigName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SCHEMA, dcore.getDefaultSchemaName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_DATADIR, dcore.getProperty(CoreDescriptor.CORE_DATADIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ULOGDIR, dcore.getProperty(CoreDescriptor.CORE_ULOGDIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_TRANSIENT, dcore.getProperty(CoreDescriptor.CORE_TRANSIENT));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_LOADONSTARTUP, dcore.getProperty(CoreDescriptor.CORE_LOADONSTARTUP));\n      // we don't try and preserve sys prop defs in these\n\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_PROPERTIES, dcore.getPropertiesName());\n      // Add in any non-standard bits of data\n      Set<String> std = new TreeSet<String>();\n\n      Properties allProps = dcore.getCoreProperties();\n\n      std.addAll(Arrays.asList(CoreDescriptor.standardPropNames));\n\n      for (String prop : allProps.stringPropertyNames()) {\n        if (! std.contains(prop)) {\n          persistProps.put(prop, dcore.getProperty(prop));\n        }\n      }\n      if (StringUtils.isNotBlank(collection) && !collection.equals(coreName)) {\n        coreAttribs.put(CoreDescriptor.CORE_COLLECTION, collection);\n      }\n\n    } else {\n\n      origCoreName = getCoreToOrigName(solrCore);\n\n      if (origCoreName == null) {\n        origCoreName = coreName;\n      }\n      String tmp = cfg.getCoreNameFromOrig(origCoreName, loader, coreName);\n      if (tmp != null) coreName = tmp;\n\n      coreAttribs = cfg.readCoreAttributes(origCoreName);\n      persistProps = cfg.readCoreProperties(origCoreName);\n      if (coreAttribs != null) {\n        coreAttribs.put(CoreDescriptor.CORE_NAME, coreName);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_COLLECTION)) collection = coreAttribs.get(CoreDescriptor.CORE_COLLECTION);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_INSTDIR)) instDir = coreAttribs.get(CoreDescriptor.CORE_INSTDIR);\n      }\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, dcore.getRawInstanceDir());\n      coreAttribs.put(CoreDescriptor.CORE_COLLECTION, StringUtils.isNotBlank(collection) ? collection : dcore.getName());\n\n    }\n\n    // Default value here is same as old code.\n    addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, instDir);\n\n    // Emulating the old code, just overwrite shard and roles if present in the cloud descriptor\n    if (cd != null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SHARD, cd.getShardId());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ROLES, cd.getRoles());\n    }\n    coreAttribs.put(CoreDescriptor.CORE_LOADONSTARTUP, Boolean.toString(dcore.isLoadOnStartup()));\n    coreAttribs.put(CoreDescriptor.CORE_TRANSIENT, Boolean.toString(dcore.isTransient()));\n\n    // Now add back in any implicit properties that aren't in already. These are all \"attribs\" in this meaning\n    Properties implicit = dcore.initImplicitProperties();\n\n    if (! coreName.equals(container.getDefaultCoreName())) {\n      for (String prop : implicit.stringPropertyNames()) {\n        if (coreAttribs.get(prop) == null) {\n          coreAttribs.put(prop, implicit.getProperty(prop));\n        }\n      }\n    }\n    if (cfg != null) {\n      cfg.addPersistCore(coreName, persistProps, coreAttribs);\n    } else {\n      // Another awkward bit for back-compat for SOLR-4196\n      ConfigSolrXml.addPersistCore(persistProps, coreAttribs);\n    }\n  }\n\n","sourceOld":"  protected void addPersistOneCore(ConfigSolr cfg, SolrCore solrCore, SolrResourceLoader loader) {\n\n    CoreDescriptor dcore = solrCore.getCoreDescriptor();\n\n    String coreName = dcore.getProperty(CoreDescriptor.CORE_NAME);\n\n    String origCoreName = null;\n\n    Map<String, String> coreAttribs = new HashMap<String, String>();\n    Properties persistProps = new Properties();\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    String collection = null;\n    if (cd  != null) collection = cd.getCollectionName();\n    String instDir = dcore.getRawInstanceDir();\n\n    if (cfg == null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_NAME, coreName);\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_CONFIG, dcore.getDefaultConfigName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SCHEMA, dcore.getDefaultSchemaName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_DATADIR, dcore.getProperty(CoreDescriptor.CORE_DATADIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ULOGDIR, dcore.getProperty(CoreDescriptor.CORE_ULOGDIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_TRANSIENT, dcore.getProperty(CoreDescriptor.CORE_TRANSIENT));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_LOADONSTARTUP, dcore.getProperty(CoreDescriptor.CORE_LOADONSTARTUP));\n      // we don't try and preserve sys prop defs in these\n\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_PROPERTIES, dcore.getPropertiesName());\n      // Add in any non-standard bits of data\n      Set<String> std = new TreeSet<String>();\n\n      Properties allProps = dcore.getCoreProperties();\n\n      std.addAll(Arrays.asList(CoreDescriptor.standardPropNames));\n\n      for (String prop : allProps.stringPropertyNames()) {\n        if (! std.contains(prop)) {\n          persistProps.put(prop, dcore.getProperty(prop));\n        }\n      }\n      if (StringUtils.isNotBlank(collection) && !collection.equals(coreName)) {\n        coreAttribs.put(CoreDescriptor.CORE_COLLECTION, collection);\n      }\n\n    } else {\n\n      origCoreName = getCoreToOrigName(solrCore);\n\n      if (origCoreName == null) {\n        origCoreName = coreName;\n      }\n      String tmp = cfg.getCoreNameFromOrig(origCoreName, loader, coreName);\n      if (tmp != null) coreName = tmp;\n\n      coreAttribs = cfg.readCoreAttributes(origCoreName);\n      persistProps = cfg.readCoreProperties(origCoreName);\n      if (coreAttribs != null) {\n        coreAttribs.put(CoreDescriptor.CORE_NAME, coreName);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_COLLECTION)) collection = coreAttribs.get(CoreDescriptor.CORE_COLLECTION);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_INSTDIR)) instDir = coreAttribs.get(CoreDescriptor.CORE_INSTDIR);\n      }\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, dcore.getRawInstanceDir());\n      coreAttribs.put(CoreDescriptor.CORE_COLLECTION, StringUtils.isNotBlank(collection) ? collection : dcore.getName());\n\n    }\n\n    // Default value here is same as old code.\n    addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, instDir);\n\n    // Emulating the old code, just overwrite shard and roles if present in the cloud descriptor\n    if (cd != null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SHARD, cd.getShardId());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ROLES, cd.getRoles());\n    }\n    coreAttribs.put(CoreDescriptor.CORE_LOADONSTARTUP, Boolean.toString(dcore.isLoadOnStartup()));\n    coreAttribs.put(CoreDescriptor.CORE_TRANSIENT, Boolean.toString(dcore.isTransient()));\n\n    // Now add back in any implicit properties that aren't in already. These are all \"attribs\" in this meaning\n    Properties implicit = dcore.initImplicitProperties();\n\n    if (! coreName.equals(container.getDefaultCoreName())) {\n      for (String prop : implicit.stringPropertyNames()) {\n        if (coreAttribs.get(prop) == null) {\n          coreAttribs.put(prop, implicit.getProperty(prop));\n        }\n      }\n    }\n    if (cfg != null) {\n      cfg.addPersistCore(coreName, persistProps, coreAttribs);\n    } else {\n      // Another awkward bit for back-compat for SOLR-4196\n      ConfigSolrXmlBackCompat.addPersistCore(persistProps, coreAttribs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0cf46558b3f7708ed3a21e174b9e11cd30e26be","date":1365551184,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#addPersistOneCore(ConfigSolr,SolrResourceLoader,CoreDescriptor,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#addPersistOneCore(ConfigSolr,SolrCore,SolrResourceLoader).mjava","sourceNew":"  protected void addPersistOneCore(ConfigSolr cfg, SolrResourceLoader loader, CoreDescriptor dcore, String origCoreName) {\n\n    String coreName = dcore.getProperty(CoreDescriptor.CORE_NAME);\n\n    Map<String, String> coreAttribs = new HashMap<String, String>();\n    Properties persistProps = new Properties();\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    String collection = null;\n    if (cd  != null) collection = cd.getCollectionName();\n    String instDir = dcore.getRawInstanceDir();\n\n    if (cfg == null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_NAME, coreName);\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_CONFIG, dcore.getDefaultConfigName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SCHEMA, dcore.getDefaultSchemaName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_DATADIR, dcore.getProperty(CoreDescriptor.CORE_DATADIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ULOGDIR, dcore.getProperty(CoreDescriptor.CORE_ULOGDIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_TRANSIENT, dcore.getProperty(CoreDescriptor.CORE_TRANSIENT));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_LOADONSTARTUP, dcore.getProperty(CoreDescriptor.CORE_LOADONSTARTUP));\n      // we don't try and preserve sys prop defs in these\n\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_PROPERTIES, dcore.getPropertiesName());\n      // Add in any non-standard bits of data\n      Set<String> std = new TreeSet<String>();\n\n      Properties allProps = dcore.getCoreProperties();\n\n      std.addAll(Arrays.asList(CoreDescriptor.standardPropNames));\n\n      for (String prop : allProps.stringPropertyNames()) {\n        if (! std.contains(prop)) {\n          persistProps.put(prop, dcore.getProperty(prop));\n        }\n      }\n      if (StringUtils.isNotBlank(collection) && !collection.equals(coreName)) {\n        coreAttribs.put(CoreDescriptor.CORE_COLLECTION, collection);\n      }\n\n    } else {\n      if (origCoreName == null) {\n        origCoreName = coreName;\n      }\n      String tmp = cfg.getCoreNameFromOrig(origCoreName, loader, coreName);\n      if (tmp != null) coreName = tmp;\n\n      coreAttribs = cfg.readCoreAttributes(origCoreName);\n      persistProps = cfg.readCoreProperties(origCoreName);\n      if (coreAttribs != null) {\n        coreAttribs.put(CoreDescriptor.CORE_NAME, coreName);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_COLLECTION)) collection = coreAttribs.get(CoreDescriptor.CORE_COLLECTION);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_INSTDIR)) instDir = coreAttribs.get(CoreDescriptor.CORE_INSTDIR);\n      }\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, dcore.getRawInstanceDir());\n      coreAttribs.put(CoreDescriptor.CORE_COLLECTION, StringUtils.isNotBlank(collection) ? collection : dcore.getName());\n\n    }\n\n    // Default value here is same as old code.\n    addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, instDir);\n\n    // Emulating the old code, just overwrite shard and roles if present in the cloud descriptor\n    if (cd != null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SHARD, cd.getShardId());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ROLES, cd.getRoles());\n    }\n    coreAttribs.put(CoreDescriptor.CORE_LOADONSTARTUP, Boolean.toString(dcore.isLoadOnStartup()));\n    coreAttribs.put(CoreDescriptor.CORE_TRANSIENT, Boolean.toString(dcore.isTransient()));\n\n    if (cfg != null) {\n      cfg.addPersistCore(coreName, persistProps, coreAttribs);\n    } else {\n      // Another awkward bit for back-compat for SOLR-4196\n      ConfigSolrXml.addPersistCore(persistProps, coreAttribs);\n    }\n  }\n\n","sourceOld":"  protected void addPersistOneCore(ConfigSolr cfg, SolrCore solrCore, SolrResourceLoader loader) {\n\n    CoreDescriptor dcore = solrCore.getCoreDescriptor();\n\n    String coreName = dcore.getProperty(CoreDescriptor.CORE_NAME);\n\n    String origCoreName = null;\n\n    Map<String, String> coreAttribs = new HashMap<String, String>();\n    Properties persistProps = new Properties();\n    CloudDescriptor cd = dcore.getCloudDescriptor();\n    String collection = null;\n    if (cd  != null) collection = cd.getCollectionName();\n    String instDir = dcore.getRawInstanceDir();\n\n    if (cfg == null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_NAME, coreName);\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_CONFIG, dcore.getDefaultConfigName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SCHEMA, dcore.getDefaultSchemaName());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_DATADIR, dcore.getProperty(CoreDescriptor.CORE_DATADIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ULOGDIR, dcore.getProperty(CoreDescriptor.CORE_ULOGDIR));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_TRANSIENT, dcore.getProperty(CoreDescriptor.CORE_TRANSIENT));\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_LOADONSTARTUP, dcore.getProperty(CoreDescriptor.CORE_LOADONSTARTUP));\n      // we don't try and preserve sys prop defs in these\n\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_PROPERTIES, dcore.getPropertiesName());\n      // Add in any non-standard bits of data\n      Set<String> std = new TreeSet<String>();\n\n      Properties allProps = dcore.getCoreProperties();\n\n      std.addAll(Arrays.asList(CoreDescriptor.standardPropNames));\n\n      for (String prop : allProps.stringPropertyNames()) {\n        if (! std.contains(prop)) {\n          persistProps.put(prop, dcore.getProperty(prop));\n        }\n      }\n      if (StringUtils.isNotBlank(collection) && !collection.equals(coreName)) {\n        coreAttribs.put(CoreDescriptor.CORE_COLLECTION, collection);\n      }\n\n    } else {\n\n      origCoreName = getCoreToOrigName(solrCore);\n\n      if (origCoreName == null) {\n        origCoreName = coreName;\n      }\n      String tmp = cfg.getCoreNameFromOrig(origCoreName, loader, coreName);\n      if (tmp != null) coreName = tmp;\n\n      coreAttribs = cfg.readCoreAttributes(origCoreName);\n      persistProps = cfg.readCoreProperties(origCoreName);\n      if (coreAttribs != null) {\n        coreAttribs.put(CoreDescriptor.CORE_NAME, coreName);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_COLLECTION)) collection = coreAttribs.get(CoreDescriptor.CORE_COLLECTION);\n        if (coreAttribs.containsKey(CoreDescriptor.CORE_INSTDIR)) instDir = coreAttribs.get(CoreDescriptor.CORE_INSTDIR);\n      }\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, dcore.getRawInstanceDir());\n      coreAttribs.put(CoreDescriptor.CORE_COLLECTION, StringUtils.isNotBlank(collection) ? collection : dcore.getName());\n\n    }\n\n    // Default value here is same as old code.\n    addIfNotNull(coreAttribs, CoreDescriptor.CORE_INSTDIR, instDir);\n\n    // Emulating the old code, just overwrite shard and roles if present in the cloud descriptor\n    if (cd != null) {\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_SHARD, cd.getShardId());\n      addIfNotNull(coreAttribs, CoreDescriptor.CORE_ROLES, cd.getRoles());\n    }\n    coreAttribs.put(CoreDescriptor.CORE_LOADONSTARTUP, Boolean.toString(dcore.isLoadOnStartup()));\n    coreAttribs.put(CoreDescriptor.CORE_TRANSIENT, Boolean.toString(dcore.isTransient()));\n\n    // Now add back in any implicit properties that aren't in already. These are all \"attribs\" in this meaning\n    Properties implicit = dcore.initImplicitProperties();\n\n    if (! coreName.equals(container.getDefaultCoreName())) {\n      for (String prop : implicit.stringPropertyNames()) {\n        if (coreAttribs.get(prop) == null) {\n          coreAttribs.put(prop, implicit.getProperty(prop));\n        }\n      }\n    }\n    if (cfg != null) {\n      cfg.addPersistCore(coreName, persistProps, coreAttribs);\n    } else {\n      // Another awkward bit for back-compat for SOLR-4196\n      ConfigSolrXml.addPersistCore(persistProps, coreAttribs);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a837c064b67fa63a9394136e31218b908cdcf783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"]},"commit2Childs":{"a0cf46558b3f7708ed3a21e174b9e11cd30e26be":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["a0cf46558b3f7708ed3a21e174b9e11cd30e26be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}