{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n    \n    System.out.println(IOUtils.toString(new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"))));\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n    \n    System.out.println(IOUtils.toString(new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"))));\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    if (VERBOSE) {\n      FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      try {\n        System.out.println(IOUtils.toString(fis));\n      } finally {\n        fis.close();\n      }\n    }\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    if (VERBOSE) {\n      FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      try {\n        System.out.println(IOUtils.toString(fis));\n      } finally {\n        fis.close();\n      }\n    }\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    if (VERBOSE) {\n      FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      try {\n        System.out.println(IOUtils.toString(fis));\n      } finally {\n        fis.close();\n      }\n    }\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n    \n    System.out.println(IOUtils.toString(new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"))));\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    if (VERBOSE) {\n      FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      try {\n        System.out.println(IOUtils.toString(fis));\n      } finally {\n        fis.close();\n      }\n    }\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    if (VERBOSE) {\n      FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      try {\n        System.out.println(IOUtils.toString(fis));\n      } finally {\n        fis.close();\n      }\n    }\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"887bfc444c835df11ee4a8f0e4474a1b1718ca3b","date":1315843947,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='8983']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    if (VERBOSE) {\n      FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      try {\n        System.out.println(IOUtils.toString(fis));\n      } finally {\n        fis.close();\n      }\n    }\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4901f8624f774c2b648e66567b63c59e901ac7c8","date":1329431044,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='8983']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='8983']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abad9f9da3e1a25fe52dd31439ed7d11af1440a5","date":1330117371,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", home.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='./']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(home.getAbsolutePath(), new File(solrXml.getParent(), \"solr-persist.xml\")); \n \n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     \"solr-persist.xml\"));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"281cf05472e3b9e59c7c7f2f3ff09a2f0a2a48e9","date":1330687788,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", home.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(home.getAbsolutePath(), new File(solrXml.getParent(), \"solr-persist.xml\")); \n \n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     \"solr-persist.xml\"));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", home.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='./']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(home.getAbsolutePath(), new File(solrXml.getParent(), \"solr-persist.xml\")); \n \n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     \"solr-persist.xml\"));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", home.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(home.getAbsolutePath(), new File(solrXml.getParent(), \"solr-persist.xml\")); \n \n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     \"solr-persist.xml\"));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82484aea958a2f87f01285b102e83b1b89b6b6ad","date":1332516764,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", home.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(solrXml.getParent(), \"solr-persist.xml\"));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(home.getAbsolutePath(), new File(solrXml.getParent(), \"solr-persist.xml\")); \n \n    \n    mcr = CoreAdminRequest.persist(\"solr-persist.xml\", getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     \"solr-persist.xml\"));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197070b7f9191af8b5d8598b579393d4a67e32f0","date":1341843740,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(fis);\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ce60a6712f1e8ef7077bc4051aefc65f457f283","date":1352661483,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28a3c4e2d35aa13e94434a7c3de075def163b47e","date":1355674116,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(), coreadmin);\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe2d4d2624d8e786fe90cf705ac07befd5d8acfd","date":1364840870,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='solr']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='solr']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc6e48afbb50ae0a22fa76e226f04fd585532938","date":1371429211,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = CoreContainer.createAndLoad(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = CoreContainer.createAndLoad(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      assertTrue(\"\\\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\\\" doesn't match in:\\n\" + solrPersistXml,\n          exists(\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    String persistedSolrXml = new File(tempDir, SOLR_PERSIST_XML).getAbsolutePath();\n    log.info(\"persistedSolrXml: {}\", persistedSolrXml);\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(persistedSolrXml, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(persistedSolrXml));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(persistedSolrXml));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      assertTrue(\"\\\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\\\" doesn't match in:\\n\" + solrPersistXml,\n          exists(\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(persistedSolrXml, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(persistedSolrXml));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(persistedSolrXml, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(persistedSolrXml));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = CoreContainer.createAndLoad(SOLR_HOME.getAbsolutePath(), new File(persistedSolrXml));\n \n    //mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      assertTrue(\"\\\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\\\" doesn't match in:\\n\" + solrPersistXml,\n          exists(\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e764e9a107f93be9fa3c922bc6a197b3eec387e","date":1373560501,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores[@defaultCoreName='core0']\",\n        \"/solr/cores[@host='127.0.0.1']\",\n        \"/solr/cores[@hostPort='${hostPort:8983}']\",\n        \"/solr/cores[@zkClientTimeout='8000']\",\n        \"/solr/cores[@hostContext='${hostContext:solr}']\",\n        \"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\"\n        );\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores/core[@name='renamed_core']\",\n        \"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\",\n        \"/solr/cores/core[@collection='${collection:acollection}']\"\n        );\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n    TestHarness.validateXPath(locator.xml, \"/solr/cores/core[@name='collection1' and @instanceDir='.']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n\n    String persistedSolrXml = new File(tempDir, SOLR_PERSIST_XML).getAbsolutePath();\n    log.info(\"persistedSolrXml: {}\", persistedSolrXml);\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(persistedSolrXml, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(persistedSolrXml));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(persistedSolrXml));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      assertTrue(\"\\\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\\\" doesn't match in:\\n\" + solrPersistXml,\n          exists(\"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(persistedSolrXml, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(persistedSolrXml));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(persistedSolrXml, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(persistedSolrXml));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and @instanceDir='.']\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = CoreContainer.createAndLoad(SOLR_HOME.getAbsolutePath(), new File(persistedSolrXml));\n \n    //mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores[@defaultCoreName='core0']\",\n        \"/solr/cores[@host='127.0.0.1']\",\n        \"/solr/cores[@hostPort='${hostPort:8983}']\",\n        \"/solr/cores[@zkClientTimeout='8000']\",\n        \"/solr/cores[@hostContext='${hostContext:solr}']\",\n        \"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\"\n        );\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores/core[@name='renamed_core']\",\n        \"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\",\n        \"/solr/cores/core[@collection='${collection:acollection}']\"\n        );\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n    TestHarness.validateXPath(locator.xml, \"/solr/cores/core[@name='collection1' and @instanceDir='.']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, coreadmin);\n\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    FileInputStream fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      fis.close();\n      fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n      String solrPersistXml = IOUtils.toString(new InputStreamReader(fis, \"UTF-8\"));\n      //System.out.println(\"xml:\" + solrPersistXml);\n      assertTrue(\"\\\"/solr/cores[@defaultCoreName='core0']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@defaultCoreName='core0']\", document));\n      assertTrue(\"\\\"/solr/cores[@host='127.0.0.1']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@host='127.0.0.1']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostPort='${hostPort:8983}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostPort='${hostPort:8983}']\", document));\n      assertTrue(\"\\\"/solr/cores[@zkClientTimeout='8000']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@zkClientTimeout='8000']\", document));\n      assertTrue(\"\\\"/solr/cores[@hostContext='${hostContext:solr}']\\\" doesn't match in:\\n\" + solrPersistXml,\n                 exists(\"/solr/cores[@hostContext='${hostContext:solr}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n//    String solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='renamed_core']\", document));\n      assertTrue(exists(\"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\", document));\n      assertTrue(exists(\"/solr/cores/core[@collection='${collection:acollection}']\", document));\n      \n    } finally {\n      fis.close();\n    }\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//    fis = new FileInputStream(new File(solrXml.getParent(), SOLR_PERSIST_XML));\n//    solrPersistXml = IOUtils.toString(fis);\n//    System.out.println(\"xml:\" + solrPersistXml);\n//    fis.close();\n    \n    fis = new FileInputStream(new File(tempDir, SOLR_PERSIST_XML));\n    try {\n      Document document = builder.parse(fis);\n      assertTrue(exists(\"/solr/cores/core[@name='collection1' and (@instanceDir='./' or @instanceDir='.\\\\')]\", document));\n    } finally {\n      fis.close();\n    }\n    \n    // test reload and parse\n    cores.shutdown();\n    \n//   fis = new FileInputStream(new File(getSolrXml().getParent(),\n//   SOLR_PERSIST_XML));\n//   String solrPersistXml = IOUtils.toString(fis);\n//   System.out.println(\"xml:\" + solrPersistXml);\n//   fis.close();\n    \n    cores = new CoreContainer(SOLR_HOME.getAbsolutePath(), new File(tempDir, SOLR_PERSIST_XML));\n \n    mcr = CoreAdminRequest.persist(SOLR_PERSIST_XML, getRenamedSolrAdmin());\n    \n//     fis = new FileInputStream(new File(solrXml.getParent(),\n//     SOLR_PERSIST_XML));\n//     solrPersistXml = IOUtils.toString(fis);\n//     System.out.println(\"xml:\" + solrPersistXml);\n//     fis.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores[@defaultCoreName='core0']\",\n        \"/solr/cores[@host='127.0.0.1']\",\n        \"/solr/cores[@hostPort='${hostPort:8983}']\",\n        \"/solr/cores[@zkClientTimeout='8000']\",\n        \"/solr/cores[@hostContext='${hostContext:solr}']\",\n        \"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\"\n        );\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores/core[@name='renamed_core']\",\n        \"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\",\n        \"/solr/cores/core[@collection='${collection:acollection}']\"\n        );\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n    TestHarness.validateXPath(locator.xml, \"/solr/cores/core[@name='collection1' and @instanceDir='.']\");\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrServer coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores[@defaultCoreName='core0']\",\n        \"/solr/cores[@host='127.0.0.1']\",\n        \"/solr/cores[@hostPort='${hostPort:8983}']\",\n        \"/solr/cores[@zkClientTimeout='8000']\",\n        \"/solr/cores[@hostContext='${hostContext:solr}']\",\n        \"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\"\n        );\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores/core[@name='renamed_core']\",\n        \"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\",\n        \"/solr/cores/core[@collection='${collection:acollection}']\"\n        );\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n    TestHarness.validateXPath(locator.xml, \"/solr/cores/core[@name='collection1' and @instanceDir='.']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n\n    SolrXMLCoresLocator.NonPersistingLocator locator\n        = (SolrXMLCoresLocator.NonPersistingLocator) cores.getCoresLocator();\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores[@defaultCoreName='core0']\",\n        \"/solr/cores[@host='127.0.0.1']\",\n        \"/solr/cores[@hostPort='${hostPort:8983}']\",\n        \"/solr/cores[@zkClientTimeout='8000']\",\n        \"/solr/cores[@hostContext='${hostContext:solr}']\",\n        \"/solr/cores[@genericCoreNodeNames='${genericCoreNodeNames:true}']\"\n        );\n    \n    CoreAdminRequest.renameCore(name, \"renamed_core\", coreadmin);\n\n    TestHarness.validateXPath(locator.xml,\n        \"/solr/cores/core[@name='renamed_core']\",\n        \"/solr/cores/core[@instanceDir='${theInstanceDir:./}']\",\n        \"/solr/cores/core[@collection='${collection:acollection}']\"\n        );\n    \n    coreadmin = getRenamedSolrAdmin();\n    File dataDir = new File(tempDir,\"data3\");\n    File tlogDir = new File(tempDir,\"tlog3\");\n\n    CoreAdminRequest.createCore(\"newCore\", SOLR_HOME.getAbsolutePath(),\n        coreadmin, null, null, dataDir.getAbsolutePath(),\n        tlogDir.getAbsolutePath());\n\n    TestHarness.validateXPath(locator.xml, \"/solr/cores/core[@name='collection1' and @instanceDir='.']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    expectThrows(Exception.class, () -> up.process(getSolrCore1()));\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    SolrTestCaseJ4.ignoreException(\"core0\");\n    expectThrows(Exception.class, () -> up.process(getSolrCore0()));\n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    expectThrows(Exception.class, () -> up.process(getSolrCore1()));\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    SolrTestCaseJ4.ignoreException(\"core0\");\n    expectThrows(Exception.class, () -> up.process(getSolrCore0()));\n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestSolrProperties#testProperties().mjava","sourceNew":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    expectThrows(Exception.class, () -> up.process(getSolrCore1()));\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    SolrTestCaseJ4.ignoreException(\"core0\");\n    expectThrows(Exception.class, () -> up.process(getSolrCore0()));\n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","sourceOld":"  @Test\n  public void testProperties() throws Exception {\n\n    UpdateRequest up = new UpdateRequest();\n    up.setAction(ACTION.COMMIT, true, true);\n    up.deleteByQuery(\"*:*\");\n    up.process(getSolrCore0());\n    up.process(getSolrCore1());\n    up.clear();\n\n    // Add something to each core\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"AAA\");\n    doc.setField(\"core0\", \"yup stopfra stopfrb stopena stopenb\");\n\n    // Add to core0\n    up.add(doc);\n    up.process(getSolrCore0());\n\n    SolrTestCaseJ4.ignoreException(\"unknown field\");\n\n    // You can't add it to core1\n    try {\n      up.process(getSolrCore1());\n      fail(\"Can't add core0 field to core1!\");\n    }\n    catch (Exception ex) {\n    }\n\n    // Add to core1\n    doc.setField(\"id\", \"BBB\");\n    doc.setField(\"core1\", \"yup stopfra stopfrb stopena stopenb\");\n    doc.removeField(\"core0\");\n    up.add(doc);\n    up.process(getSolrCore1());\n\n    // You can't add it to core1\n    try {\n      SolrTestCaseJ4.ignoreException(\"core0\");\n      up.process(getSolrCore0());\n      fail(\"Can't add core1 field to core0!\");\n    }\n    catch (Exception ex) {\n    }\n    \n    SolrTestCaseJ4.resetExceptionIgnores();\n\n    // now Make sure AAA is in 0 and BBB in 1\n    SolrQuery q = new SolrQuery();\n    QueryRequest r = new QueryRequest(q);\n    q.setQuery(\"id:AAA\");\n    assertEquals(1, r.process(getSolrCore0()).getResults().size());\n    assertEquals(0, r.process(getSolrCore1()).getResults().size());\n\n    // Now test Changing the default core\n    assertEquals(1, getSolrCore0().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(0, getSolrCore0().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    assertEquals(0, getSolrCore1().query(new SolrQuery(\"id:AAA\")).getResults().size());\n    assertEquals(1, getSolrCore1().query(new SolrQuery(\"id:BBB\")).getResults().size());\n\n    // Now test reloading it should have a newer open time\n    String name = \"core0\";\n    SolrClient coreadmin = getSolrAdmin();\n    CoreAdminResponse mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long before = mcr.getStartTime(name).getTime();\n    CoreAdminRequest.reloadCore(name, coreadmin);\n\n    mcr = CoreAdminRequest.getStatus(name, coreadmin);\n    long after = mcr.getStartTime(name).getTime();\n    assertTrue(\"should have more recent time: \" + after + \",\" + before, after > before);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","28a3c4e2d35aa13e94434a7c3de075def163b47e"],"7116474e2e390259937401cf928323e0cbc75e60":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"281cf05472e3b9e59c7c7f2f3ff09a2f0a2a48e9":["abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["fe2d4d2624d8e786fe90cf705ac07befd5d8acfd","6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["4901f8624f774c2b648e66567b63c59e901ac7c8","281cf05472e3b9e59c7c7f2f3ff09a2f0a2a48e9"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"fe2d4d2624d8e786fe90cf705ac07befd5d8acfd":["28a3c4e2d35aa13e94434a7c3de075def163b47e"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["bafca15d8e408346a67f4282ad1143b88023893b"],"5ce60a6712f1e8ef7077bc4051aefc65f457f283":["2acf500f78aa12b92e371fd89c719291986b6b90"],"bafca15d8e408346a67f4282ad1143b88023893b":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"2acf500f78aa12b92e371fd89c719291986b6b90":["82484aea958a2f87f01285b102e83b1b89b6b6ad","197070b7f9191af8b5d8598b579393d4a67e32f0"],"abad9f9da3e1a25fe52dd31439ed7d11af1440a5":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["fe2d4d2624d8e786fe90cf705ac07befd5d8acfd"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["7116474e2e390259937401cf928323e0cbc75e60"],"197070b7f9191af8b5d8598b579393d4a67e32f0":["82484aea958a2f87f01285b102e83b1b89b6b6ad"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"887bfc444c835df11ee4a8f0e4474a1b1718ca3b":["c26f00b574427b55127e869b935845554afde1fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":["2acf500f78aa12b92e371fd89c719291986b6b90","5ce60a6712f1e8ef7077bc4051aefc65f457f283"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["dc6e48afbb50ae0a22fa76e226f04fd585532938"],"f8061ddd97f3352007d927dae445884a6f3d857b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"46d8ada1fff8d18cb197c38c7983225162599948":["82484aea958a2f87f01285b102e83b1b89b6b6ad","2acf500f78aa12b92e371fd89c719291986b6b90"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"28a3c4e2d35aa13e94434a7c3de075def163b47e":["5ce60a6712f1e8ef7077bc4051aefc65f457f283"],"82484aea958a2f87f01285b102e83b1b89b6b6ad":["281cf05472e3b9e59c7c7f2f3ff09a2f0a2a48e9"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["887bfc444c835df11ee4a8f0e4474a1b1718ca3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["82484aea958a2f87f01285b102e83b1b89b6b6ad","2acf500f78aa12b92e371fd89c719291986b6b90"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7116474e2e390259937401cf928323e0cbc75e60":["6e764e9a107f93be9fa3c922bc6a197b3eec387e"],"281cf05472e3b9e59c7c7f2f3ff09a2f0a2a48e9":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","82484aea958a2f87f01285b102e83b1b89b6b6ad"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["887bfc444c835df11ee4a8f0e4474a1b1718ca3b"],"fe2d4d2624d8e786fe90cf705ac07befd5d8acfd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","dc6e48afbb50ae0a22fa76e226f04fd585532938"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"5ce60a6712f1e8ef7077bc4051aefc65f457f283":["407687e67faf6e1f02a211ca078d8e3eed631027","28a3c4e2d35aa13e94434a7c3de075def163b47e"],"bafca15d8e408346a67f4282ad1143b88023893b":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"2acf500f78aa12b92e371fd89c719291986b6b90":["5ce60a6712f1e8ef7077bc4051aefc65f457f283","407687e67faf6e1f02a211ca078d8e3eed631027","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"abad9f9da3e1a25fe52dd31439ed7d11af1440a5":["281cf05472e3b9e59c7c7f2f3ff09a2f0a2a48e9"],"dc6e48afbb50ae0a22fa76e226f04fd585532938":["d264f386d864b5751209060e8886ca9845f70469"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6e764e9a107f93be9fa3c922bc6a197b3eec387e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","bafca15d8e408346a67f4282ad1143b88023893b"],"197070b7f9191af8b5d8598b579393d4a67e32f0":["2acf500f78aa12b92e371fd89c719291986b6b90"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"887bfc444c835df11ee4a8f0e4474a1b1718ca3b":["4901f8624f774c2b648e66567b63c59e901ac7c8"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"46d8ada1fff8d18cb197c38c7983225162599948":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["7116474e2e390259937401cf928323e0cbc75e60"],"28a3c4e2d35aa13e94434a7c3de075def163b47e":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe2d4d2624d8e786fe90cf705ac07befd5d8acfd"],"4901f8624f774c2b648e66567b63c59e901ac7c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"82484aea958a2f87f01285b102e83b1b89b6b6ad":["2acf500f78aa12b92e371fd89c719291986b6b90","197070b7f9191af8b5d8598b579393d4a67e32f0","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","46d8ada1fff8d18cb197c38c7983225162599948","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}