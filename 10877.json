{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEnumeratedDistribution().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEnumeratedDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testEnumeratedDistribution().mjava","sourceNew":"  @Test\n  public void testEnumeratedDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               c=enumeratedDistribution(b),\"+\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(c, 5), \" +\n        \"                     c=cumulativeProbability(c, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.07);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.07);\n\n\n    cexpr = \"let(a=sample(enumeratedDistribution(array(1,2,3,4), array(40, 30, 20, 10)), 50000),\"+\n                \"b=freqTable(a),\"+\n                \"y=col(b, pct))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> freqs = (List<Number>)tuples.get(0).get(\"y\");\n    assertEquals(freqs.get(0).doubleValue(), .40, .03);\n    assertEquals(freqs.get(1).doubleValue(), .30, .03);\n    assertEquals(freqs.get(2).doubleValue(), .20, .03);\n    assertEquals(freqs.get(3).doubleValue(), .10, .03);\n  }\n\n","sourceOld":"  @Test\n  public void testEnumeratedDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               c=enumeratedDistribution(b),\"+\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(c, 5), \" +\n        \"                     c=cumulativeProbability(c, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.07);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.07);\n\n\n    cexpr = \"let(a=sample(enumeratedDistribution(array(1,2,3,4), array(40, 30, 20, 10)), 50000),\"+\n                \"b=freqTable(a),\"+\n                \"y=col(b, pct))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> freqs = (List<Number>)tuples.get(0).get(\"y\");\n    assertEquals(freqs.get(0).doubleValue(), .40, .03);\n    assertEquals(freqs.get(1).doubleValue(), .30, .03);\n    assertEquals(freqs.get(2).doubleValue(), .20, .03);\n    assertEquals(freqs.get(3).doubleValue(), .10, .03);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEnumeratedDistribution().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testEnumeratedDistribution().mjava","sourceNew":"  @Test\n  public void testEnumeratedDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               c=enumeratedDistribution(b),\"+\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(c, 5), \" +\n        \"                     c=cumulativeProbability(c, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"rawtypes\"})\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.07);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.07);\n\n\n    cexpr = \"let(a=sample(enumeratedDistribution(array(1,2,3,4), array(40, 30, 20, 10)), 50000),\"+\n                \"b=freqTable(a),\"+\n                \"y=col(b, pct))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> freqs = (List<Number>)tuples.get(0).get(\"y\");\n    assertEquals(freqs.get(0).doubleValue(), .40, .03);\n    assertEquals(freqs.get(1).doubleValue(), .30, .03);\n    assertEquals(freqs.get(2).doubleValue(), .20, .03);\n    assertEquals(freqs.get(3).doubleValue(), .10, .03);\n  }\n\n","sourceOld":"  @Test\n  public void testEnumeratedDistribution() throws Exception {\n    String cexpr = \"let(a=uniformIntegerDistribution(1, 10),\" +\n        \"               b=sample(a, 10000),\" +\n        \"               c=enumeratedDistribution(b),\"+\n        \"               tuple(d=describe(b), \" +\n        \"                     p=probability(c, 5), \" +\n        \"                     c=cumulativeProbability(c, 5)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Map map = (Map)tuples.get(0).get(\"d\");\n    Number N = (Number)map.get(\"N\");\n    assertEquals(N.intValue(), 10000);\n    Number prob = (Number)tuples.get(0).get(\"p\");\n    assertEquals(prob.doubleValue(), 0.1, 0.07);\n    Number cprob = (Number)tuples.get(0).get(\"c\");\n    assertEquals(cprob.doubleValue(), 0.5, 0.07);\n\n\n    cexpr = \"let(a=sample(enumeratedDistribution(array(1,2,3,4), array(40, 30, 20, 10)), 50000),\"+\n                \"b=freqTable(a),\"+\n                \"y=col(b, pct))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<Number> freqs = (List<Number>)tuples.get(0).get(\"y\");\n    assertEquals(freqs.get(0).doubleValue(), .40, .03);\n    assertEquals(freqs.get(1).doubleValue(), .30, .03);\n    assertEquals(freqs.get(2).doubleValue(), .20, .03);\n    assertEquals(freqs.get(3).doubleValue(), .10, .03);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}