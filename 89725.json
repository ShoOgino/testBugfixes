{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", true, true, true);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", true, true, true);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tquery = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\n\n\t}\n\n","sourceOld":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", true, true, true);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", true, true, true);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tquery = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68fa956cfdb1b0e625046dcfa99f545fc8f04997","date":1133475513,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", true, true, true);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", true, true, true);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tquery = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\t}\n\n","sourceOld":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", true, true, true);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", true, true, true);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tquery = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00baa0cad99f9a7efd382b1e817c2f6b9384220a","date":1140555918,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.TOKENIZED);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.TOKENIZED);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tQueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());\n\t\tquery = parser.parse(\"multi*\");\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\t}\n\n","sourceOld":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", true, true, true);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", true, true, true);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tquery = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.TOKENIZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.TOKENIZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"\tpublic void testMultiSearcher() throws Exception\n\t{\n\t\t//setup index 1\n\t\tRAMDirectory ramDir1 = new RAMDirectory();\n\t\tIndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n\t\tDocument d = new Document();\n\t\tField f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.TOKENIZED);\n\t\td.add(f);\n\t\twriter1.addDocument(d);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\t\tIndexReader reader1 = IndexReader.open(ramDir1);\n\n\t\t//setup index 2\n\t\tRAMDirectory ramDir2 = new RAMDirectory();\n\t\tIndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n\t\td = new Document();\n\t\tf = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.TOKENIZED);\n\t\td.add(f);\n\t\twriter2.addDocument(d);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\t\tIndexReader reader2 = IndexReader.open(ramDir2);\n\n\n\n\t\tIndexSearcher searchers[]=new IndexSearcher[2];\n\t\tsearchers[0] = new IndexSearcher(ramDir1);\n\t\tsearchers[1] = new IndexSearcher(ramDir2);\n\t\tMultiSearcher multiSearcher=new MultiSearcher(searchers);\n\t\tQueryParser parser=new QueryParser(FIELD_NAME, new StandardAnalyzer());\n\t\tquery = parser.parse(\"multi*\");\n\t\tSystem.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n\t\t//at this point the multisearcher calls combine(query[])\n\t\thits = multiSearcher.search(query);\n\n\t\t//query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n\t\tQuery expandedQueries[]=new Query[2];\n\t\texpandedQueries[0]=query.rewrite(reader1);\n\t\texpandedQueries[1]=query.rewrite(reader2);\n\t\tquery=query.combine(expandedQueries);\n\n\n\t\t//create an instance of the highlighter with the tags used to surround highlighted text\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tString highlightedText = highlighter.getBestFragment(tokenStream,text);\n\t\t\tSystem.out.println(highlightedText);\n\t\t}\n\t\tassertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\", numHighlights == 2);\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.TOKENIZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.TOKENIZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setConstantScoreRewrite(false);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setConstantScoreRewrite(false);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1);\n    searchers[1] = new IndexSearcher(ramDir2);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.length(); i++) {\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer());\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464a71190fd7694704427cd763d7c957c10e935b","date":1256329736,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(new StandardAnalyzer(\n        TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new StandardAnalyzer(TEST_VERSION), true, IndexWriter.MaxFieldLength.UNLIMITED);\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION, FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      if (VERBOSE) System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testMultiSearcher().mjava","sourceNew":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      if (VERBOSE) System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","sourceOld":"  public void testMultiSearcher() throws Exception {\n    // setup index 1\n    RAMDirectory ramDir1 = new RAMDirectory();\n    IndexWriter writer1 = new IndexWriter(ramDir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    Document d = new Document();\n    Field f = new Field(FIELD_NAME, \"multiOne\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer1.addDocument(d);\n    writer1.optimize();\n    writer1.close();\n    IndexReader reader1 = IndexReader.open(ramDir1, true);\n\n    // setup index 2\n    RAMDirectory ramDir2 = new RAMDirectory();\n    IndexWriter writer2 = new IndexWriter(ramDir2, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n    d = new Document();\n    f = new Field(FIELD_NAME, \"multiTwo\", Field.Store.YES, Field.Index.ANALYZED);\n    d.add(f);\n    writer2.addDocument(d);\n    writer2.optimize();\n    writer2.close();\n    IndexReader reader2 = IndexReader.open(ramDir2, true);\n\n    IndexSearcher searchers[] = new IndexSearcher[2];\n    searchers[0] = new IndexSearcher(ramDir1, true);\n    searchers[1] = new IndexSearcher(ramDir2, true);\n    MultiSearcher multiSearcher = new MultiSearcher(searchers);\n    QueryParser parser = new QueryParser(TEST_VERSION_CURRENT, FIELD_NAME, new StandardAnalyzer(TEST_VERSION_CURRENT));\n    parser.setMultiTermRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    query = parser.parse(\"multi*\");\n    if (VERBOSE) System.out.println(\"Searching for: \" + query.toString(FIELD_NAME));\n    // at this point the multisearcher calls combine(query[])\n    hits = multiSearcher.search(query, null, 1000);\n\n    // query = QueryParser.parse(\"multi*\", FIELD_NAME, new StandardAnalyzer(TEST_VERSION));\n    Query expandedQueries[] = new Query[2];\n    expandedQueries[0] = query.rewrite(reader1);\n    expandedQueries[1] = query.rewrite(reader2);\n    query = query.combine(expandedQueries);\n\n    // create an instance of the highlighter with the tags used to surround\n    // highlighted text\n    Highlighter highlighter = new Highlighter(this, new QueryTermScorer(query));\n\n    for (int i = 0; i < hits.totalHits; i++) {\n      String text = multiSearcher.doc(hits.scoreDocs[i].doc).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n      String highlightedText = highlighter.getBestFragment(tokenStream, text);\n      if (VERBOSE) System.out.println(highlightedText);\n    }\n    assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n        numHighlights == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00baa0cad99f9a7efd382b1e817c2f6b9384220a":["68fa956cfdb1b0e625046dcfa99f545fc8f04997"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["464a71190fd7694704427cd763d7c957c10e935b"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["296b8b38a87feb478921f77834a2302dfe77641c"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"464a71190fd7694704427cd763d7c957c10e935b":["ba1116b3450a9c1642c89445d131b37344055245"],"4256bc1b3c94786287ccdfc751230374521843cf":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"ba1116b3450a9c1642c89445d131b37344055245":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"68fa956cfdb1b0e625046dcfa99f545fc8f04997":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["87c966e9308847938a7c905c2e46a56d8df788b8"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"296b8b38a87feb478921f77834a2302dfe77641c":["00baa0cad99f9a7efd382b1e817c2f6b9384220a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"00baa0cad99f9a7efd382b1e817c2f6b9384220a":["296b8b38a87feb478921f77834a2302dfe77641c"],"043c298cb215f13ba7b9b81d20760704e8f93d66":["68fa956cfdb1b0e625046dcfa99f545fc8f04997"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"464a71190fd7694704427cd763d7c957c10e935b":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["4256bc1b3c94786287ccdfc751230374521843cf"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"ba1116b3450a9c1642c89445d131b37344055245":["464a71190fd7694704427cd763d7c957c10e935b"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"68fa956cfdb1b0e625046dcfa99f545fc8f04997":["00baa0cad99f9a7efd382b1e817c2f6b9384220a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ba1116b3450a9c1642c89445d131b37344055245"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["87c966e9308847938a7c905c2e46a56d8df788b8"],"296b8b38a87feb478921f77834a2302dfe77641c":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}