{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(StringHelper.compare(HalfFloatPoint.BYTES, previous, 0, current, 0) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(StringHelper.compare(HalfFloatPoint.BYTES, previous, 0, current, 0) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(StringHelper.compare(HalfFloatPoint.BYTES, previous, 0, current, 0) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41f60ea1802fda42d3c91d023406066d00ddb5f8","date":1535615991,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","sourceNew":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(FutureArrays.compareUnsigned(previous, 0, HalfFloatPoint.BYTES, current, 0, HalfFloatPoint.BYTES) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","sourceOld":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(StringHelper.compare(HalfFloatPoint.BYTES, previous, 0, current, 0) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBytes().mjava","sourceNew":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(Arrays.compareUnsigned(previous, 0, HalfFloatPoint.BYTES, current, 0, HalfFloatPoint.BYTES) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","sourceOld":"  public void testSortableBytes() {\n    for (int i = Short.MIN_VALUE + 1; i <= Short.MAX_VALUE; ++i) {\n      byte[] previous = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) (i - 1), previous, 0);\n      byte[] current = new byte[HalfFloatPoint.BYTES];\n      HalfFloatPoint.shortToSortableBytes((short) i, current, 0);\n      assertTrue(FutureArrays.compareUnsigned(previous, 0, HalfFloatPoint.BYTES, current, 0, HalfFloatPoint.BYTES) < 0);\n      assertEquals(i, HalfFloatPoint.sortableBytesToShort(current, 0));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["41f60ea1802fda42d3c91d023406066d00ddb5f8"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"41f60ea1802fda42d3c91d023406066d00ddb5f8":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["41f60ea1802fda42d3c91d023406066d00ddb5f8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}