{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testRescoreOfASubsetOfHits().mjava","commits":[{"id":"fe442914a786fcba929cedd8a1715fdd9c0c2dae","date":1567667544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testRescoreOfASubsetOfHits().mjava","pathOld":"/dev/null","sourceNew":"  public void testRescoreOfASubsetOfHits() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = 100;\n    String fieldName = \"field\";\n    IndexReader reader = publishDocs(numDocs, fieldName, dir);\n\n    // Construct a query that will get numDocs hits.\n    String wordOne = dictionary.get(0);\n    TermQuery termQuery = new TermQuery(new Term(fieldName, wordOne));\n    IndexSearcher searcher = getSearcher(reader);\n    searcher.setSimilarity(new BM25Similarity());\n    TopDocs hits = searcher.search(termQuery, numDocs);\n\n    // Next, use a more specific phrase query that will return different scores\n    // from the above term query\n    String wordTwo = RandomPicks.randomFrom(random(), dictionary);\n    PhraseQuery phraseQuery = new PhraseQuery(1, fieldName, wordOne, wordTwo);\n\n    // rescore, requesting a smaller topN\n    int topN = random().nextInt(numDocs-1);\n    TopDocs phraseQueryHits = QueryRescorer.rescore(searcher, hits, phraseQuery, 2.0, topN);\n    assertEquals(topN, phraseQueryHits.scoreDocs.length);\n\n    for (int i = 1; i < phraseQueryHits.scoreDocs.length; i++) {\n      assertTrue(phraseQueryHits.scoreDocs[i].score <= phraseQueryHits.scoreDocs[i-1].score);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460728fc2f8c1aae84c0562b509c778faf625103","date":1567695577,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testRescoreOfASubsetOfHits().mjava","sourceNew":null,"sourceOld":"  public void testRescoreOfASubsetOfHits() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = 100;\n    String fieldName = \"field\";\n    IndexReader reader = publishDocs(numDocs, fieldName, dir);\n\n    // Construct a query that will get numDocs hits.\n    String wordOne = dictionary.get(0);\n    TermQuery termQuery = new TermQuery(new Term(fieldName, wordOne));\n    IndexSearcher searcher = getSearcher(reader);\n    searcher.setSimilarity(new BM25Similarity());\n    TopDocs hits = searcher.search(termQuery, numDocs);\n\n    // Next, use a more specific phrase query that will return different scores\n    // from the above term query\n    String wordTwo = RandomPicks.randomFrom(random(), dictionary);\n    PhraseQuery phraseQuery = new PhraseQuery(1, fieldName, wordOne, wordTwo);\n\n    // rescore, requesting a smaller topN\n    int topN = random().nextInt(numDocs-1);\n    TopDocs phraseQueryHits = QueryRescorer.rescore(searcher, hits, phraseQuery, 2.0, topN);\n    assertEquals(topN, phraseQueryHits.scoreDocs.length);\n\n    for (int i = 1; i < phraseQueryHits.scoreDocs.length; i++) {\n      assertTrue(phraseQueryHits.scoreDocs[i].score <= phraseQueryHits.scoreDocs[i-1].score);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f89859d16ab335d18913323f0af3fcb7b580917","date":1567704488,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer#testRescoreOfASubsetOfHits().mjava","pathOld":"/dev/null","sourceNew":"  public void testRescoreOfASubsetOfHits() throws Exception {\n    Directory dir = newDirectory();\n    int numDocs = 100;\n    String fieldName = \"field\";\n    IndexReader reader = publishDocs(numDocs, fieldName, dir);\n\n    // Construct a query that will get numDocs hits.\n    String wordOne = dictionary.get(0);\n    TermQuery termQuery = new TermQuery(new Term(fieldName, wordOne));\n    IndexSearcher searcher = getSearcher(reader);\n    searcher.setSimilarity(new BM25Similarity());\n    TopDocs hits = searcher.search(termQuery, numDocs);\n\n    // Next, use a more specific phrase query that will return different scores\n    // from the above term query\n    String wordTwo = RandomPicks.randomFrom(random(), dictionary);\n    PhraseQuery phraseQuery = new PhraseQuery(1, fieldName, wordOne, wordTwo);\n\n    // rescore, requesting a smaller topN\n    int topN = random().nextInt(numDocs-1);\n    TopDocs phraseQueryHits = QueryRescorer.rescore(searcher, hits, phraseQuery, 2.0, topN);\n    assertEquals(topN, phraseQueryHits.scoreDocs.length);\n\n    for (int i = 1; i < phraseQueryHits.scoreDocs.length; i++) {\n      assertTrue(phraseQueryHits.scoreDocs[i].score <= phraseQueryHits.scoreDocs[i-1].score);\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"460728fc2f8c1aae84c0562b509c778faf625103":["fe442914a786fcba929cedd8a1715fdd9c0c2dae"],"9f89859d16ab335d18913323f0af3fcb7b580917":["460728fc2f8c1aae84c0562b509c778faf625103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe442914a786fcba929cedd8a1715fdd9c0c2dae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f89859d16ab335d18913323f0af3fcb7b580917"]},"commit2Childs":{"460728fc2f8c1aae84c0562b509c778faf625103":["9f89859d16ab335d18913323f0af3fcb7b580917"],"9f89859d16ab335d18913323f0af3fcb7b580917":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe442914a786fcba929cedd8a1715fdd9c0c2dae"],"fe442914a786fcba929cedd8a1715fdd9c0c2dae":["460728fc2f8c1aae84c0562b509c778faf625103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}