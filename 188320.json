{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/AnalysisResponseBase#buildTokenInfo(NamedList[Object]).mjava","sourceNew":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <br>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","sourceOld":"  /**\n   * Parses the given named list and builds a token infoform it. Expects a named list of the form:\n   * <p/>\n   * <pre><code>\n   *  &lt;arr name=\"Tokenizer\"&gt;\n   *      &lt;str name=\"text\"&gt;the_text&lt;/str&gt;\n   *      &lt;str name=\"rawText\"&gt;the_raw_text&lt;/str&gt; (optional)\n   *      &lt;str name=\"type\"&gt;the_type&lt;/str&gt;\n   *      &lt;int name=\"start\"&gt;1&lt;/str&gt;\n   *      &lt;int name=\"end\"&gt;3&lt;/str&gt;\n   *      &lt;int name=\"position\"&gt;1&lt;/str&gt;\n   *      &lt;bool name=\"match\"&gt;true | false&lt;/bool&gt; (optional)\n   *  &lt;/arr&gt;\n   * </code></pre>\n   *\n   * @param tokenNL The named list to parse.\n   *\n   * @return The built token info.\n   */\n  protected TokenInfo buildTokenInfo(NamedList<Object> tokenNL) {\n    String text = (String) tokenNL.get(\"text\");\n    String rawText = (String) tokenNL.get(\"rawText\");\n    String type = (String) tokenNL.get(\"type\");\n    int start = (Integer) tokenNL.get(\"start\");\n    int end = (Integer) tokenNL.get(\"end\");\n    int position = (Integer) tokenNL.get(\"position\");\n    Boolean match = (Boolean) tokenNL.get(\"match\");\n    return new TokenInfo(text, rawText, type, start, end, position, (match == null ? false : match));\n  }\n\n","bugFix":["68df8db3f6c0c0ebbd1e40ba638115a748fb6a2a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}