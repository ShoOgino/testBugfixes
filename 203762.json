{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int,int).mjava","commits":[{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int).mjava","sourceNew":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max, int timeoutInSecs) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.endTime = cloudManager.getTimeSource().getTimeNs() + TimeUnit.SECONDS.toNanos(timeoutInSecs);\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      violation.getClause().getThirdTag().varType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    for (Violation current : ctx.session.getViolations()) {\n      for (Violation old : violations) {\n        if (!ctx.needMore()) return ctx.getSuggestions();\n        if (current.equals(old)) {\n          //could not be resolved\n          ctx.suggestions.add(new Suggester.SuggestionInfo(current, null, \"unresolved-violation\"));\n          break;\n        }\n      }\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","sourceOld":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      violation.getClause().getThirdTag().varType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    for (Violation current : ctx.session.getViolations()) {\n      for (Violation old : violations) {\n        if (current.equals(old)) {\n          //could not be resolved\n          ctx.suggestions.add(new Suggester.SuggestionInfo(current, null, \"unresolved-violation\"));\n          break;\n        }\n      }\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4","date":1558992012,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/PolicyHelper#getSuggestions(AutoScalingConfig,SolrCloudManager,int,int).mjava","sourceNew":null,"sourceOld":"  public static List<Suggester.SuggestionInfo> getSuggestions(AutoScalingConfig autoScalingConf,\n                                                              SolrCloudManager cloudManager, int max, int timeoutInSecs) {\n    Policy policy = autoScalingConf.getPolicy();\n    Suggestion.Ctx ctx = new Suggestion.Ctx();\n    ctx.endTime = cloudManager.getTimeSource().getTimeNs() + TimeUnit.SECONDS.toNanos(timeoutInSecs);\n    ctx.max = max;\n    ctx.session = policy.createSession(cloudManager);\n    List<Violation> violations = ctx.session.getViolations();\n    for (Violation violation : violations) {\n      violation.getClause().getThirdTag().varType.getSuggestions(ctx.setViolation(violation));\n      ctx.violation = null;\n    }\n\n    for (Violation current : ctx.session.getViolations()) {\n      for (Violation old : violations) {\n        if (!ctx.needMore()) return ctx.getSuggestions();\n        if (current.equals(old)) {\n          //could not be resolved\n          ctx.suggestions.add(new Suggester.SuggestionInfo(current, null, \"unresolved-violation\"));\n          break;\n        }\n      }\n    }\n\n    if (ctx.needMore()) {\n      try {\n        addMissingReplicas(cloudManager, ctx);\n      } catch (IOException e) {\n        log.error(\"Unable to fetch cluster state\", e);\n      }\n    }\n\n    if (ctx.needMore()) {\n      suggestOptimizations(ctx, Math.min(ctx.max - ctx.getSuggestions().size(), 10));\n    }\n    return ctx.getSuggestions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"fc9c1463ee15ef7c0d3b9656b69b7a5ba49ac3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}