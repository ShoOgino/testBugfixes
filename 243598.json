{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  /**\n   * Overrides super class, by passing terms through analyzer.\n   * @exception ParseException\n   */\n  @Override\n  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)\n      throws ParseException {\n    // get Analyzer from superclass and tokenize the terms\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    boolean multipleTokens = false;\n\n    // part1\n    try {\n      if (source.incrementToken()) {\n        part1 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part1\");\n    }\n\n    // part2\n    source = getAnalyzer().tokenStream(field, new StringReader(part2));\n    termAtt = source.addAttribute(TermAttribute.class);\n    \n    try {\n      if (source.incrementToken()) {\n        part2 = termAtt.term();\n      }\n      multipleTokens = source.incrementToken();\n    } catch (IOException e) {\n      // ignore\n    }\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n    if (multipleTokens) {\n      throw new ParseException(\"Cannot build RangeQuery with analyzer \" + getAnalyzer().getClass()\n          + \" - tokens were added to part2\");\n    }\n    return super.getRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}