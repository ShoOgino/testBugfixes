{"path":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","commits":[{"id":"172df63033c2189512184145d4d45c79b230d45e","date":1311519908,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#testOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.open(\"/fake/path\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n  }\n\n","sourceOld":"  public void testOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.open(\"/fake/path\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", null);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","sourceOld":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.open(\"/fake/path\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n  }\n\n","bugFix":["c194d5d82aa52be285a8de7cbfb68645e01c4f0e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, null);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","sourceOld":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", null);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, null);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","sourceOld":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", null);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a5f916afbd74e1875b20198b0925849fc7091d","date":1410737177,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, \"single\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","sourceOld":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, null);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5ba470831f135c6146ebded0fac228b6142f01b","date":1450376475,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, \"single\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n    factory.close();\n  }\n\n","sourceOld":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, \"single\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/RAMDirectoryFactoryTest#dotestOpenSucceedForEmptyDir().mjava","sourceNew":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, DirectoryFactory.LOCK_TYPE_SINGLE);\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n    factory.close();\n  }\n\n","sourceOld":"  private void dotestOpenSucceedForEmptyDir() throws IOException {\n    RAMDirectoryFactory factory = new RAMDirectoryFactory();\n    Directory dir = factory.get(\"/fake/path\", DirContext.DEFAULT, \"single\");\n    assertNotNull(\"RAMDirectoryFactory should create RefCntRamDirectory even if the path doen't lead \" +\n        \"to index directory on the file system\", dir);\n    factory.release(dir);\n    factory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5ba470831f135c6146ebded0fac228b6142f01b":["42a5f916afbd74e1875b20198b0925849fc7091d"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["e22ffe8cc51a892ae103df018822d7873e901c2a","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42a5f916afbd74e1875b20198b0925849fc7091d":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"172df63033c2189512184145d4d45c79b230d45e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["f5ba470831f135c6146ebded0fac228b6142f01b"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["172df63033c2189512184145d4d45c79b230d45e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b3091e174423680e7d6cce5f858d48cd5410bcf"]},"commit2Childs":{"f5ba470831f135c6146ebded0fac228b6142f01b":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["8917bfede3b4ca30f4305c1e391e9218959cd723","42a5f916afbd74e1875b20198b0925849fc7091d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["172df63033c2189512184145d4d45c79b230d45e"],"42a5f916afbd74e1875b20198b0925849fc7091d":["f5ba470831f135c6146ebded0fac228b6142f01b"],"172df63033c2189512184145d4d45c79b230d45e":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["8917bfede3b4ca30f4305c1e391e9218959cd723","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}