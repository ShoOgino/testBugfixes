{"path":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"/dev/null","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testConstantScoreQueryAndFilter().mjava","sourceNew":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testConstantScoreQueryAndFilter() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, d);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"a\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"b\", StringField.TYPE_UNSTORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    Filter filterB = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"b\"))));\n    Query query = new ConstantScoreQuery(filterB);\n\n    IndexSearcher s = new IndexSearcher(r);\n    assertEquals(1, s.search(query, filterB, 1).totalHits); // Query for field:b, Filter field:b\n\n    Filter filterA = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"field\", \"a\"))));\n    query = new ConstantScoreQuery(filterA);\n\n    assertEquals(0, s.search(query, filterB, 1).totalHits); // Query field:b, Filter field:a\n\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}