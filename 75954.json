{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws ParseException {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub.setBoost(a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n        DisjunctionMaxQuery q = new DisjunctionMaxQuery(a.tie);\n\n        /* we might not get any valid queries from delegation,\n         * in which case we should return null\n         */\n        boolean ok = false;\n\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            q.add(sub);\n            ok = true;\n          }\n        }\n        return ok ? q : null;\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n        throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n        throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n      throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68c354ba50abc8ed5c5fe98901e61d68f93952bb","date":1479836000,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw)\n        throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted, false);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted, raw);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n        throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils.DisjunctionMaxQueryParser#getFieldQuery(String,String,boolean).mjava","sourceNew":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted, boolean raw)\n        throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted, false);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted, raw);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Delegates to the super class unless the field has been specified\n     * as an alias -- in which case we recurse on each of\n     * the aliased fields, and the results are composed into a\n     * DisjunctionMaxQuery.  (so yes: aliases which point at other\n     * aliases should work)\n     */\n    @Override\n    protected Query getFieldQuery(String field, String queryText, boolean quoted)\n        throws SyntaxError {\n\n      if (aliases.containsKey(field)) {\n\n        Alias a = aliases.get(field);\n\n        List<Query> disjuncts = new ArrayList<>();\n        for (String f : a.fields.keySet()) {\n\n          Query sub = getFieldQuery(f,queryText,quoted);\n          if (null != sub) {\n            if (null != a.fields.get(f)) {\n              sub = new BoostQuery(sub, a.fields.get(f));\n            }\n            disjuncts.add(sub);\n          }\n        }\n        return disjuncts.isEmpty()\n            ? null\n            : new DisjunctionMaxQuery(disjuncts, a.tie);\n\n      } else {\n        try {\n          return super.getFieldQuery(field, queryText, quoted);\n        } catch (Exception e) {\n          return null;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3cdb67100dc016748799a77218aa409478372d79"],"727bb765ff2542275f6d31f67be18d7104bae148":["b5991832ae4bac45cecfff0fc33125aeac823d3d","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5296efc4b319f5647b606629c093a94b23692c6":["a5d3ee590efa5b1f764e8ce985d9125bc97af483","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68c354ba50abc8ed5c5fe98901e61d68f93952bb"]},"commit2Childs":{"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","2dfdf766e55e943d942055d7de53c7ad6bc45283"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"a5296efc4b319f5647b606629c093a94b23692c6":[],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["727bb765ff2542275f6d31f67be18d7104bae148","a5296efc4b319f5647b606629c093a94b23692c6","68c354ba50abc8ed5c5fe98901e61d68f93952bb"],"68c354ba50abc8ed5c5fe98901e61d68f93952bb":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","727bb765ff2542275f6d31f67be18d7104bae148","a258fbb26824fd104ed795e5d9033d2d040049ee","a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}