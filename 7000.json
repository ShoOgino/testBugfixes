{"path":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newBoxQuery(String,QueryRelation,double,double,double,double).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    Rectangle rectangle = new Rectangle(minLatitude, maxLatitude, minLongitude, maxLongitude);\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, rectangle);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a defined bounding box **/\n  public static Query newBoxQuery(String field, QueryRelation queryRelation, double minLatitude, double maxLatitude, double minLongitude, double maxLongitude) {\n    if (queryRelation == QueryRelation.CONTAINS && minLongitude > maxLongitude) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, GeoUtils.MAX_LON_INCL), BooleanClause.Occur.MUST);\n      builder.add(newBoxQuery(field, queryRelation, minLatitude, maxLatitude, GeoUtils.MIN_LON_INCL, maxLongitude), BooleanClause.Occur.MUST);\n      return builder.build();\n    }\n    return new LatLonShapeBoundingBoxQuery(field, queryRelation, minLatitude, maxLatitude, minLongitude, maxLongitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}