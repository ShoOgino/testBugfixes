{"path":"src/java/org/apache/solr/schema/SchemaField#create(String,FieldType,Map).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#create(String,FieldType,Map).mjava","pathOld":"/dev/null","sourceNew":"  static SchemaField create(String name, FieldType ft, Map props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n\n    return new SchemaField(name, ft, p);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf460de117c67053b6fb9141cc7c778e81e5ef54","date":1168027938,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#create(String,FieldType,Map).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#create(String,FieldType,Map).mjava","sourceNew":"  static SchemaField create(String name, FieldType ft, Map props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n\n    String defaultValue = null;\n    if( props.containsKey( \"default\" ) ) {\n    \tdefaultValue = (String)props.get( \"default\" );\n    }\n    return new SchemaField(name, ft, p, defaultValue );\n  }\n\n","sourceOld":"  static SchemaField create(String name, FieldType ft, Map props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n\n    return new SchemaField(name, ft, p);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22","date":1177887783,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/SchemaField#create(String,FieldType,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/schema/SchemaField#create(String,FieldType,Map).mjava","sourceNew":"  static SchemaField create(String name, FieldType ft, Map<String,String> props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n\n    String defaultValue = null;\n    if( props.containsKey( \"default\" ) ) {\n    \tdefaultValue = (String)props.get( \"default\" );\n    }\n    return new SchemaField(name, ft, p, defaultValue );\n  }\n\n","sourceOld":"  static SchemaField create(String name, FieldType ft, Map props) {\n    int trueProps = parseProperties(props,true);\n    int falseProps = parseProperties(props,false);\n\n    int p = ft.properties;\n\n    //\n    // If any properties were explicitly turned off, then turn off other properties\n    // that depend on that.\n    //\n    if (on(falseProps,STORED)) {\n      int pp = STORED | BINARY | COMPRESSED;\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting stored field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    if (on(falseProps,INDEXED)) {\n      int pp = (INDEXED | OMIT_NORMS\n              | STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS\n              | SORT_MISSING_FIRST | SORT_MISSING_LAST);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting indexed field options:\" + props);\n      }\n      p &= ~pp;\n\n    }\n\n    if (on(falseProps,STORE_TERMVECTORS)) {\n      int pp = (STORE_TERMVECTORS | STORE_TERMPOSITIONS | STORE_TERMOFFSETS);\n      if (on(pp,trueProps)) {\n        throw new RuntimeException(\"SchemaField: \" + name + \" conflicting termvector field options:\" + props);\n      }\n      p &= ~pp;\n    }\n\n    // override sort flags\n    if (on(trueProps,SORT_MISSING_FIRST)) {\n      p &= ~SORT_MISSING_LAST;\n    }\n\n    if (on(trueProps,SORT_MISSING_LAST)) {\n      p &= ~SORT_MISSING_FIRST;\n    }\n\n    p &= ~falseProps;\n    p |= trueProps;\n\n    String defaultValue = null;\n    if( props.containsKey( \"default\" ) ) {\n    \tdefaultValue = (String)props.get( \"default\" );\n    }\n    return new SchemaField(name, ft, p, defaultValue );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":["bf460de117c67053b6fb9141cc7c778e81e5ef54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf460de117c67053b6fb9141cc7c778e81e5ef54":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["bf460de117c67053b6fb9141cc7c778e81e5ef54"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"335d5ef4d54c2861b4ebdc7244bd81278f1c1d22":[],"bf460de117c67053b6fb9141cc7c778e81e5ef54":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["335d5ef4d54c2861b4ebdc7244bd81278f1c1d22","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}