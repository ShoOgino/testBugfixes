{"path":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","commits":[{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> values = new ArrayList<MultiDocValues.DocValuesIndex>();\n    for (int i = 0; i < numTop; i++) {\n      final DocValues docValues = top[i].fields.docValues();\n      if (docValues != null) {\n        values.add(new MultiDocValues.DocValuesIndex(docValues,\n            top[i].index));\n      }\n    }\n    // TODO return an empty docvalues instance if values are empty\n    return docValues.reset(values.toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","sourceNew":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n    int docsUpto = 0;\n    Values type = null;\n    final int numEnums = enumWithSlices.length;\n    for (int i = 0; i < numEnums; i++) {\n      FieldsEnumWithSlice withSlice = enumWithSlices[i];\n      Slice slice = withSlice.slice;\n      final DocValues values = withSlice.fields.docValues();\n\n      final int start = slice.start;\n      final int length = slice.length;\n      if (values != null) {\n        if (docsUpto != start) {\n          type = values.type();\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start,\n            length));\n        docsUpto = start + length;\n       \n\n      } else if (i+1 == numEnums && !docValuesIndex.isEmpty()) {\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n            new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                - docsUpto));\n      }\n    }\n    return docValuesIndex.isEmpty() ? null : docValues.reset(docValuesIndex\n        .toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","sourceOld":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> values = new ArrayList<MultiDocValues.DocValuesIndex>();\n    for (int i = 0; i < numTop; i++) {\n      final DocValues docValues = top[i].fields.docValues();\n      if (docValues != null) {\n        values.add(new MultiDocValues.DocValuesIndex(docValues,\n            top[i].index));\n      }\n    }\n    // TODO return an empty docvalues instance if values are empty\n    return docValues.reset(values.toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0637f89202e27b25802435a9cf789fc0890c8a67","date":1288436161,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","sourceNew":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n    int docsUpto = 0;\n    Values type = null;\n    final int numEnums = enumWithSlices.length;\n    for (int i = 0; i < numEnums; i++) {\n      FieldsEnumWithSlice withSlice = enumWithSlices[i];\n      Slice slice = withSlice.slice;\n      final DocValues values = withSlice.fields.docValues();\n      final int start = slice.start;\n      final int length = slice.length;\n      if (values != null && currentField.equals(withSlice.current)) {\n        if (docsUpto != start) {\n          type = values.type();\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start,\n            length));\n        docsUpto = start + length;\n\n      } else if (i + 1 == numEnums && !docValuesIndex.isEmpty()) {\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n            new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                - docsUpto));\n      }\n    }\n    return docValuesIndex.isEmpty() ? null : docValues.reset(docValuesIndex\n        .toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","sourceOld":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n    int docsUpto = 0;\n    Values type = null;\n    final int numEnums = enumWithSlices.length;\n    for (int i = 0; i < numEnums; i++) {\n      FieldsEnumWithSlice withSlice = enumWithSlices[i];\n      Slice slice = withSlice.slice;\n      final DocValues values = withSlice.fields.docValues();\n\n      final int start = slice.start;\n      final int length = slice.length;\n      if (values != null) {\n        if (docsUpto != start) {\n          type = values.type();\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start,\n            length));\n        docsUpto = start + length;\n       \n\n      } else if (i+1 == numEnums && !docValuesIndex.isEmpty()) {\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n            new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                - docsUpto));\n      }\n    }\n    return docValuesIndex.isEmpty() ? null : docValues.reset(docValuesIndex\n        .toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","sourceNew":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n    int docsUpto = 0;\n    Type type = null;\n    final int numEnums = enumWithSlices.length;\n    for (int i = 0; i < numEnums; i++) {\n      FieldsEnumWithSlice withSlice = enumWithSlices[i];\n      Slice slice = withSlice.slice;\n      final DocValues values = withSlice.fields.docValues();\n      final int start = slice.start;\n      final int length = slice.length;\n      if (values != null && currentField.equals(withSlice.current)) {\n        if (docsUpto != start) {\n          type = values.type();\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start,\n            length));\n        docsUpto = start + length;\n\n      } else if (i + 1 == numEnums && !docValuesIndex.isEmpty()) {\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n            new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                - docsUpto));\n      }\n    }\n    return docValuesIndex.isEmpty() ? null : docValues.reset(docValuesIndex\n        .toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","sourceOld":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n    int docsUpto = 0;\n    Values type = null;\n    final int numEnums = enumWithSlices.length;\n    for (int i = 0; i < numEnums; i++) {\n      FieldsEnumWithSlice withSlice = enumWithSlices[i];\n      Slice slice = withSlice.slice;\n      final DocValues values = withSlice.fields.docValues();\n      final int start = slice.start;\n      final int length = slice.length;\n      if (values != null && currentField.equals(withSlice.current)) {\n        if (docsUpto != start) {\n          type = values.type();\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start,\n            length));\n        docsUpto = start + length;\n\n      } else if (i + 1 == numEnums && !docValuesIndex.isEmpty()) {\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n            new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                - docsUpto));\n      }\n    }\n    return docValuesIndex.isEmpty() ? null : docValues.reset(docValuesIndex\n        .toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiFieldsEnum#docValues().mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues docValues() throws IOException {\n    final List<MultiDocValues.DocValuesIndex> docValuesIndex = new ArrayList<MultiDocValues.DocValuesIndex>();\n    int docsUpto = 0;\n    Type type = null;\n    final int numEnums = enumWithSlices.length;\n    for (int i = 0; i < numEnums; i++) {\n      FieldsEnumWithSlice withSlice = enumWithSlices[i];\n      Slice slice = withSlice.slice;\n      final DocValues values = withSlice.fields.docValues();\n      final int start = slice.start;\n      final int length = slice.length;\n      if (values != null && currentField.equals(withSlice.current)) {\n        if (docsUpto != start) {\n          type = values.type();\n          docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n              new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                  - docsUpto));\n        }\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(values, start,\n            length));\n        docsUpto = start + length;\n\n      } else if (i + 1 == numEnums && !docValuesIndex.isEmpty()) {\n        docValuesIndex.add(new MultiDocValues.DocValuesIndex(\n            new MultiDocValues.DummyDocValues(start, type), docsUpto, start\n                - docsUpto));\n      }\n    }\n    return docValuesIndex.isEmpty() ? null : docValues.reset(docValuesIndex\n        .toArray(MultiDocValues.DocValuesIndex.EMPTY_ARRAY));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["0637f89202e27b25802435a9cf789fc0890c8a67"],"0637f89202e27b25802435a9cf789fc0890c8a67":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0637f89202e27b25802435a9cf789fc0890c8a67"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0e28c49f1fb6215a550fdadcf3805aa629b63ec0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0637f89202e27b25802435a9cf789fc0890c8a67":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}