{"path":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433","date":1293817845,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> fieldFilter = null;\n    Set<String> returnFields = res.getReturnFields();\n    if(returnFields != null) {\n      // copy return fields list\n      fieldFilter = new HashSet<String>(returnFields);\n      // add highlight fields\n      SolrHighlighter highligher = req.getCore().getHighlighter();\n      if(highligher.isHighlightingEnabled(req.getParams())) {\n        for(String field: highligher.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n      }\n      // fetch unique key if one exists.\n      SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n      if(null != keyField)\n          fieldFilter.add(keyField.getName());\n    }\n\n    // get documents\n    DocIterator iter = docs.iterator();\n    for (int i=0; i<docs.size(); i++) {\n      searcher.doc(iter.nextDoc(), fieldFilter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    Set<String> returnFields = res.getReturnFields();\n    Set<String> fieldFilter = returnFields;\n\n    if(returnFields != null) {\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(returnFields);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/util/SolrPluginUtils#optimizePreFetchDocs(ResponseBuilder,DocList,Query,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Pre-fetch documents into the index searcher's document cache.\n   *\n   * This is an entirely optional step which you might want to perform for\n   * the following reasons:\n   *\n   * <ul>\n   *     <li>Locates the document-retrieval costs in one spot, which helps\n   *     detailed performance measurement</li>\n   *\n   *     <li>Determines a priori what fields will be needed to be fetched by\n   *     various subtasks, like response writing and highlighting.  This\n   *     minimizes the chance that many needed fields will be loaded lazily.\n   *     (it is more efficient to load all the field we require normally).</li>\n   * </ul>\n   *\n   * If lazy field loading is disabled, this method does nothing.\n   */\n  public static void optimizePreFetchDocs(ResponseBuilder rb,\n                                          DocList docs,\n                                          Query query,\n                                          SolrQueryRequest req,\n                                          SolrQueryResponse res) throws IOException {\n    SolrIndexSearcher searcher = req.getSearcher();\n    if(!searcher.enableLazyFieldLoading) {\n      // nothing to do\n      return;\n    }\n\n    ReturnFields returnFields = res.getReturnFields();\n    if(returnFields.getLuceneFieldNames() != null) {\n      Set<String> fieldFilter = returnFields.getLuceneFieldNames();\n\n      if (rb.doHighlights) {\n        // copy return fields list\n        fieldFilter = new HashSet<String>(fieldFilter);\n        // add highlight fields\n\n        SolrHighlighter highlighter = HighlightComponent.getHighlighter(req.getCore());\n        for (String field: highlighter.getHighlightFields(query, req, null))\n          fieldFilter.add(field);\n\n        // fetch unique key if one exists.\n        SchemaField keyField = req.getSearcher().getSchema().getUniqueKeyField();\n        if(null != keyField)\n          fieldFilter.add(keyField.getName());\n      }\n\n      // get documents\n      DocIterator iter = docs.iterator();\n      for (int i=0; i<docs.size(); i++) {\n        searcher.doc(iter.nextDoc(), fieldFilter);\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"6aedf81f068e430dec27d94310415cc6ff52731c":["863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"863f5f4b9cd4134d4bd9d6528419bf72ddbe4433":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","6aedf81f068e430dec27d94310415cc6ff52731c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","863f5f4b9cd4134d4bd9d6528419bf72ddbe4433"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}