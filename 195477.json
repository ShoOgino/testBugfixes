{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","pathOld":"modules/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","sourceNew":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","sourceOld":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","sourceNew":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","sourceOld":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(reader, readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","sourceNew":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","sourceOld":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","sourceNew":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","sourceNew":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4","date":1449124064,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","pathOld":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer#testLatticeToDot().mjava","sourceNew":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n\n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testLatticeToDot() throws Exception {\n    final GraphvizFormatter gv2 = new GraphvizFormatter(ConnectionCosts.getInstance());\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        JapaneseTokenizer tokenizer = new JapaneseTokenizer(newAttributeFactory(), readDict(), false, Mode.SEARCH);\n        tokenizer.setGraphvizFormatter(gv2);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n\n    String input = \"スペースステーションに行きます。うたがわしい。\";\n    String[] surfaceForms = {\n        \"スペース\", \"ステーション\", \"に\", \"行き\", \"ます\", \"。\",\n        \"うたがわしい\", \"。\"\n    };\n    assertAnalyzesTo(analyzer,\n                     input,\n                     surfaceForms);\n    \n    assertTrue(gv2.finish().indexOf(\"22.0\") != -1);\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4"],"f2b45d6769cfaeb4456b4b66cdd5e25c8940f2a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}