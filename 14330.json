{"path":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName), \n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n      \n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName), \n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n      \n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName), \n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n      \n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName), \n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n      \n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName), \n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n      \n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab30b5737e6a5d4ee74fdc889750d18d2a624471","date":1576097297,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n   \n    long timeAllowed = req.getParams().getLong(CommonParams.TIME_ALLOWED, -1L);\n    if (timeAllowed >= 0L) {\n      SolrQueryTimeoutImpl.set(timeAllowed);\n    }\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      rsp.addResponse(new AnalyticsResponse(new TimeExceededStubException(e)));\n    } finally {\n      SolrQueryTimeoutImpl.reset();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n   \n    long timeAllowed = req.getParams().getLong(CommonParams.TIME_ALLOWED, -1L);\n    if (timeAllowed >= 0L) {\n      SolrQueryTimeoutImpl.set(timeAllowed);\n    }\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      rsp.addResponse(new AnalyticsResponse(new TimeExceededStubException(e)));\n    } finally {\n      SolrQueryTimeoutImpl.reset();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6d19d09273bf442102fec52cfac9af9294bc89","date":1597466467,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n\n    SolrQueryTimeoutImpl.set(req);\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      rsp.addResponse(new AnalyticsResponse(new TimeExceededStubException(e)));\n    } finally {\n      SolrQueryTimeoutImpl.reset();\n    }\n  }\n\n","sourceOld":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n   \n    long timeAllowed = req.getParams().getLong(CommonParams.TIME_ALLOWED, -1L);\n    if (timeAllowed >= 0L) {\n      SolrQueryTimeoutImpl.set(timeAllowed);\n    }\n    try {\n      DocSet docs;\n      try {\n        docs = getDocuments(req);\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      // The olap-style requests are converted to the current format in the AnalyticsComponent\n      // so the AnalyticsHandler only needs to handle current format requests.\n      AnalyticsRequestManager manager = AnalyticsRequestParser.parse(req.getParams().get(AnalyticsRequestParser.analyticsParamName),\n                                                                new ExpressionFactory(indexSchema),\n                                                                false);\n      // Collect the reduction data for the request\n      SolrIndexSearcher searcher = req.getSearcher();\n      Filter filter = docs.getTopFilter();\n      AnalyticsDriver.drive(manager, searcher, filter, req);\n\n      // Do not calculate results, instead export the reduction data for this shard.\n      rsp.addResponse(new AnalyticsResponse(manager));\n    } catch (SolrException e) {\n      rsp.addResponse(new AnalyticsResponse(e));\n    } catch (ExitableDirectoryReader.ExitingReaderException e) {\n      rsp.addResponse(new AnalyticsResponse(new TimeExceededStubException(e)));\n    } finally {\n      SolrQueryTimeoutImpl.reset();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df724d84dab24a0cc54bec95a8680867adc7f171":["1e4e64b7199d2f2a17be7f3926c7532553910dce","ab30b5737e6a5d4ee74fdc889750d18d2a624471"],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"ab30b5737e6a5d4ee74fdc889750d18d2a624471":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"5f6d19d09273bf442102fec52cfac9af9294bc89":["ab30b5737e6a5d4ee74fdc889750d18d2a624471"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6d19d09273bf442102fec52cfac9af9294bc89"]},"commit2Childs":{"df724d84dab24a0cc54bec95a8680867adc7f171":[],"1e4e64b7199d2f2a17be7f3926c7532553910dce":["df724d84dab24a0cc54bec95a8680867adc7f171","ab30b5737e6a5d4ee74fdc889750d18d2a624471","f8061ddd97f3352007d927dae445884a6f3d857b"],"ab30b5737e6a5d4ee74fdc889750d18d2a624471":["df724d84dab24a0cc54bec95a8680867adc7f171","5f6d19d09273bf442102fec52cfac9af9294bc89"],"5f6d19d09273bf442102fec52cfac9af9294bc89":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["df724d84dab24a0cc54bec95a8680867adc7f171","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}