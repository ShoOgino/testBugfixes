{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","commits":[{"id":"76f7066a3ec6e68e257b01dd46edbbdd3530690a","date":1358805020,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90f762b9c981401224de7f0a7c1ffc8fbc67574f","date":1366475889,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\", pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\", pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\", pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\");\n            e.initCause(pe);\n            throw e;\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\", pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRef scratch = new BytesRef();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\", pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":["76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value (resource=\" + in + \")\", pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if its real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    LegacyNumericDocValues values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      return new LegacyNumericDocValuesWrapper(getNumericDocsWithField(fieldInfo), values);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    LegacyNumericDocValues values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      return new LegacyNumericDocValuesWrapper(getNumericDocsWithField(fieldInfo), values);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocIdSetIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    LegacyNumericDocValues values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      return new LegacyNumericDocValuesWrapper(getNumericDocsWithField(fieldInfo), values);\n    }\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocIdSetIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n    assert field != null;\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    decoder.setParseBigDecimal(true);\n\n    return new NumericDocValues() {\n      @Override\n      public long get(int docID) {\n        try {\n          //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (1+field.pattern.length()+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n          BigDecimal bd;\n          try {\n            bd = (BigDecimal) decoder.parse(scratch.get().utf8ToString());\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse BigDecimal value\", in, pe);\n          }\n          SimpleTextUtil.readLine(in, scratch); // read the line telling us if it's real or not\n          return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocValuesIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return docsWithField.advanceExact(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocIdSetIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocValuesIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return docsWithField.advanceExact(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocIdSetIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocValuesIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return docsWithField.advanceExact(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n    IntFunction<Long> values = getNumericNonIterator(fieldInfo);\n    if (values == null) {\n      return null;\n    } else {\n      DocIdSetIterator docsWithField = getNumericDocsWithField(fieldInfo);\n      return new NumericDocValues() {\n        \n        @Override\n        public int nextDoc() throws IOException {\n          return docsWithField.nextDoc();\n        }\n        \n        @Override\n        public int docID() {\n          return docsWithField.docID();\n        }\n        \n        @Override\n        public long cost() {\n          return docsWithField.cost();\n        }\n        \n        @Override\n        public int advance(int target) throws IOException {\n          return docsWithField.advance(target);\n        }\n        \n        @Override\n        public long longValue() throws IOException {\n          return values.apply(docsWithField.docID());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["90f762b9c981401224de7f0a7c1ffc8fbc67574f","9faa42f41b6adb98daf009cf99a4ee239189e469"],"56572ec06f1407c066d6b7399413178b33176cd8":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","f7558b5077dd4abd457be151475f13b541f4f13e"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76f7066a3ec6e68e257b01dd46edbbdd3530690a"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"90f762b9c981401224de7f0a7c1ffc8fbc67574f":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"76f7066a3ec6e68e257b01dd46edbbdd3530690a":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["90f762b9c981401224de7f0a7c1ffc8fbc67574f"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["76f7066a3ec6e68e257b01dd46edbbdd3530690a","d4d69c535930b5cce125cff868d40f6373dc27d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}