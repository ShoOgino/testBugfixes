{"path":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","commits":[{"id":"c2042d3e27841c5b60112990fc33559e10ccf6dd","date":1424537395,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsFilterTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 1%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 100);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsFilter filter = new TermsFilter(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(filter);\n    final long expectedRamBytesUsed = filter.ramBytesUsed();\n    // error margin within 1%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a54410d37fe11baed59cc55dcad44db795f732c2","date":1430995912,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 1%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 100);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TermInSetQueryTest#testRamBytesUsed().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/TermsQueryTest#testRamBytesUsed().mjava","sourceNew":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermInSetQuery query = new TermInSetQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","sourceOld":"  public void testRamBytesUsed() {\n    List<Term> terms = new ArrayList<>();\n    final int numTerms = 1000 + random().nextInt(1000);\n    for (int i = 0; i < numTerms; ++i) {\n      terms.add(new Term(\"f\", RandomStrings.randomUnicodeOfLength(random(), 10)));\n    }\n    TermsQuery query = new TermsQuery(terms);\n    final long actualRamBytesUsed = RamUsageTester.sizeOf(query);\n    final long expectedRamBytesUsed = query.ramBytesUsed();\n    // error margin within 5%\n    assertEquals(actualRamBytesUsed, expectedRamBytesUsed, actualRamBytesUsed / 20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["a54410d37fe11baed59cc55dcad44db795f732c2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a54410d37fe11baed59cc55dcad44db795f732c2","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"a54410d37fe11baed59cc55dcad44db795f732c2":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2042d3e27841c5b60112990fc33559e10ccf6dd"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"a54410d37fe11baed59cc55dcad44db795f732c2":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"c2042d3e27841c5b60112990fc33559e10ccf6dd":["a54410d37fe11baed59cc55dcad44db795f732c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}