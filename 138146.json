{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","commits":[{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion>0) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b450082a183f77a08a778bcd9ca4663286387004"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5","date":1417094182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion>0) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#checkStale(SolrZkClient,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#checkStale(SolrZkClient,String,int).mjava","sourceNew":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","sourceOld":"  private static boolean checkStale(SolrZkClient zkClient,  String zkPath, int currentVersion)  {\n    if(zkPath == null) return false;\n    try {\n      Stat stat = zkClient.exists(zkPath, null, true);\n      if(stat == null){\n        if(currentVersion > -1) return true;\n        return false;\n      }\n      if (stat.getVersion() >  currentVersion) {\n        log.info(zkPath+\" is stale will need an update from {} to {}\", currentVersion,stat.getVersion());\n        return true;\n      }\n      return false;\n    } catch (KeeperException.NoNodeException nne){\n      //no problem\n    } catch (KeeperException e) {\n      log.error(\"error refreshing solrconfig \", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().isInterrupted();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d72e80cee24be385c713864a9f1f90be3744482":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["7d72e80cee24be385c713864a9f1f90be3744482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["d8d1f2c78f560980e5822db6905bb3b2f52fdbe5"],"7d72e80cee24be385c713864a9f1f90be3744482":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"d8d1f2c78f560980e5822db6905bb3b2f52fdbe5":["7d72e80cee24be385c713864a9f1f90be3744482"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}