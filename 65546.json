{"path":"solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","commits":[{"id":"189e978ae1c3cc165c6c7247cd6604c8c33037c7","date":1308355821,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","pathOld":"/dev/null","sourceNew":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a","e22ffe8cc51a892ae103df018822d7873e901c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","pathOld":"/dev/null","sourceNew":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","sourceNew":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","sourceNew":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderNoQuery#testSearcherEvents().mjava","sourceNew":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","sourceOld":"  // Determine that when the query lists are commented out of both new and\n  // first searchers in the config, we don't throw an NPE\n  @Test\n  public void testSearcherEvents() throws Exception {\n    SolrCore core = h.getCore();\n    SolrEventListener newSearcherListener = core.newSearcherListeners.get(0);\n    assertTrue(\"Not an instance of QuerySenderListener\", newSearcherListener instanceof QuerySenderListener);\n    QuerySenderListener qsl = (QuerySenderListener) newSearcherListener;\n\n    RefCounted<SolrIndexSearcher> currentSearcherRef = core.getSearcher();\n    SolrIndexSearcher currentSearcher = currentSearcherRef.get();\n    SolrIndexSearcher dummy = null;\n    qsl.newSearcher(currentSearcher, dummy);//test first Searcher (since param is null)\n    MockQuerySenderListenerReqHandler mock = (MockQuerySenderListenerReqHandler) core.getRequestHandler(\"mock\");\n    assertNotNull(\"Mock is null\", mock);\n    assertNull(\"Req (firstsearcher) is not null\", mock.req);\n\n    Directory dir = currentSearcher.getIndexReader().directory();\n    SolrIndexSearcher newSearcher = new SolrIndexSearcher(core, core.getSchema(), \"testQuerySenderNoQuery\", dir, true, false);\n\n    qsl.newSearcher(newSearcher, currentSearcher); // get newSearcher.\n    assertNull(\"Req (newsearcher) is not null\", mock.req);\n    newSearcher.close();\n    currentSearcherRef.decref();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","189e978ae1c3cc165c6c7247cd6604c8c33037c7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7edfc3f7caa7b49a18fe367692768b33b018e9db"],"c26f00b574427b55127e869b935845554afde1fa":["189e978ae1c3cc165c6c7247cd6604c8c33037c7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["189e978ae1c3cc165c6c7247cd6604c8c33037c7"],"189e978ae1c3cc165c6c7247cd6604c8c33037c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7edfc3f7caa7b49a18fe367692768b33b018e9db":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7edfc3f7caa7b49a18fe367692768b33b018e9db","189e978ae1c3cc165c6c7247cd6604c8c33037c7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"189e978ae1c3cc165c6c7247cd6604c8c33037c7":["7edfc3f7caa7b49a18fe367692768b33b018e9db","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}