{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa0f21a44e235a2299ea1fa913898b182dd7cce","date":1590952026,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      Replica ri = new Replica(\n          createReplica.coreNodeName,\n          createReplica.node,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.coreName,\n          Replica.State.DOWN,\n          createReplica.replicaType,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNodeName(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      ReplicaInfo ri = new ReplicaInfo(\n          createReplica.coreNodeName,\n          createReplica.coreName,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.replicaType,\n          createReplica.node,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNode(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simAddReplica(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  /**\n   * Add a new replica. Note that if any details of a replica (node, coreNodeName, SolrCore name, etc)\n   * are missing they will be filled in using the policy framework.\n   * @param message replica details\n   * @param results result of the operation\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void simAddReplica(ZkNodeProps message, NamedList results) throws Exception {\n    if (message.getStr(CommonAdminParams.ASYNC) != null) {\n      results.add(CoreAdminParams.REQUESTID, message.getStr(CommonAdminParams.ASYNC));\n    }\n    ClusterState clusterState = getClusterState();\n    DocCollection coll = clusterState.getCollection(message.getStr(ZkStateReader.COLLECTION_PROP));\n    AtomicReference<PolicyHelper.SessionWrapper> sessionWrapper = new AtomicReference<>();\n\n    Replica.Type replicaType = Replica.Type.valueOf(message.getStr(ZkStateReader.REPLICA_TYPE, Replica.Type.NRT.name()).toUpperCase(Locale.ROOT));\n    EnumMap<Replica.Type, Integer> replicaTypesVsCount = new EnumMap<>(Replica.Type.class);\n    replicaTypesVsCount.put(Replica.Type.NRT, message.getInt(NRT_REPLICAS, replicaType == Replica.Type.NRT ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.TLOG, message.getInt(TLOG_REPLICAS, replicaType == Replica.Type.TLOG ? 1 : 0));\n    replicaTypesVsCount.put(Replica.Type.PULL, message.getInt(PULL_REPLICAS, replicaType == Replica.Type.PULL ? 1 : 0));\n\n    int totalReplicas = 0;\n    for (Map.Entry<Replica.Type, Integer> entry : replicaTypesVsCount.entrySet()) {\n      totalReplicas += entry.getValue();\n    }\n    if (totalReplicas > 1)  {\n      if (message.getStr(CoreAdminParams.NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'name' parameter is specified\");\n      }\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cannot create \" + totalReplicas + \" replicas if 'coreNodeName' parameter is specified\");\n      }\n    }\n\n    List<ReplicaPosition> replicaPositions = AddReplicaCmd.buildReplicaPositions(cloudManager, clusterState, coll.getName(), message, replicaTypesVsCount, sessionWrapper);\n    for (ReplicaPosition replicaPosition : replicaPositions) {\n      AddReplicaCmd.CreateReplica createReplica = AddReplicaCmd.assignReplicaDetails(cloudManager, clusterState, message, replicaPosition);\n      if (message.getStr(CoreAdminParams.CORE_NODE_NAME) == null) {\n        createReplica.coreNodeName = Assign.assignCoreNodeName(stateManager, coll);\n      }\n      Replica ri = new Replica(\n          createReplica.coreNodeName,\n          createReplica.node,\n          createReplica.collectionName,\n          createReplica.sliceName,\n          createReplica.coreName,\n          Replica.State.DOWN,\n          createReplica.replicaType,\n          message.getProperties()\n      );\n      simAddReplica(ri.getNodeName(), ri, true);\n    }\n    if (sessionWrapper.get() != null) {\n      sessionWrapper.get().release();\n    }\n    results.add(\"success\", \"\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"daa0f21a44e235a2299ea1fa913898b182dd7cce":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["daa0f21a44e235a2299ea1fa913898b182dd7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}