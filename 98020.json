{"path":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","sourceNew":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for( final String fileName: segmentInfos.files(directory, isCommit) ) {\n      incRef(fileName);\n    }\n  }\n\n","sourceOld":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for( final String fileName: segmentInfos.files(directory, isCommit) ) {\n      incRef(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","sourceNew":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for(final String fileName: segmentInfos.files(directory, isCommit)) {\n      incRef(fileName);\n    }\n  }\n\n","sourceOld":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for( final String fileName: segmentInfos.files(directory, isCommit) ) {\n      incRef(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","sourceNew":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for(final String fileName: segmentInfos.files(directory, isCommit)) {\n      incRef(fileName);\n    }\n  }\n\n","sourceOld":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for( final String fileName: segmentInfos.files(directory, isCommit) ) {\n      incRef(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba839b7548159227edcb740033d0f814b323d8d","date":1424455904,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter#incRef(SegmentInfos,boolean).mjava","sourceNew":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for(final String fileName: segmentInfos.files(isCommit)) {\n      incRef(fileName);\n    }\n  }\n\n","sourceOld":"  void incRef(SegmentInfos segmentInfos, boolean isCommit) throws IOException {\n    assert locked();\n    // If this is a commit point, also incRef the\n    // segments_N file:\n    for(final String fileName: segmentInfos.files(directory, isCommit)) {\n      incRef(fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"fba839b7548159227edcb740033d0f814b323d8d":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fba839b7548159227edcb740033d0f814b323d8d"]},"commit2Childs":{"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fba839b7548159227edcb740033d0f814b323d8d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"fba839b7548159227edcb740033d0f814b323d8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}