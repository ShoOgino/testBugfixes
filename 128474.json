{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"/dev/null","sourceNew":"  private void initEngine(Context context) {\n    try {\n      String scriptText = (String) context.getVariableResolver().resolve(\n              DataConfig.IMPORTER_NS + \".\" + DataConfig.SCRIPT);\n      String scriptLang = (String) context.getVariableResolver().resolve(\n              DataConfig.IMPORTER_NS + \".\" + DataConfig.SCRIPT_LANG);\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"<script> can be used only in java 6 or above\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cda565f1dbc96f12de5c399b6d48418f0e79be5","date":1236799070,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"<script> can be used only in java 6 or above\", e);\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    try {\n      String scriptText = (String) context.getVariableResolver().resolve(\n              DataConfig.IMPORTER_NS + \".\" + DataConfig.SCRIPT);\n      String scriptLang = (String) context.getVariableResolver().resolve(\n              DataConfig.IMPORTER_NS + \".\" + DataConfig.SCRIPT_LANG);\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"<script> can be used only in java 6 or above\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aa5e2592246701cc809f7dbc2218aa7bc974a1b","date":1258789131,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"<script> can be used only in java 6 or above\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/ScriptTransformer#initEngine(Context).mjava","sourceNew":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","sourceOld":"  private void initEngine(Context context) {\n    try {\n      String scriptText = context.getScript();\n      String scriptLang = context.getScriptLanguage();\n      if(scriptText == null ){\n        throw new DataImportHandlerException(SEVERE,\n              \"<script> tag is not present under <dataConfig>\");\n      }\n      Object scriptEngineMgr = Class\n              .forName(\"javax.script.ScriptEngineManager\").newInstance();\n      // create a Script engine\n      Method getEngineMethod = scriptEngineMgr.getClass().getMethod(\n              \"getEngineByName\", String.class);\n      engine = getEngineMethod.invoke(scriptEngineMgr, scriptLang);\n      Method evalMethod = engine.getClass().getMethod(\"eval\", String.class);\n      invokeFunctionMethod = engine.getClass().getMethod(\"invokeFunction\",\n              String.class, Object[].class);\n      evalMethod.invoke(engine, scriptText);\n    } catch (Exception e) {\n      wrapAndThrow(SEVERE,e, \"<script> can be used only in java 6 or above\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cda565f1dbc96f12de5c399b6d48418f0e79be5":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"2aa5e2592246701cc809f7dbc2218aa7bc974a1b":["1cda565f1dbc96f12de5c399b6d48418f0e79be5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2aa5e2592246701cc809f7dbc2218aa7bc974a1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1cda565f1dbc96f12de5c399b6d48418f0e79be5":["2aa5e2592246701cc809f7dbc2218aa7bc974a1b"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["1cda565f1dbc96f12de5c399b6d48418f0e79be5"],"2aa5e2592246701cc809f7dbc2218aa7bc974a1b":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}