{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"/dev/null","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = (BitVector) mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","date":1326996651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = (MutableBits) mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = (BitVector) mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8daf107908340529aa1381b475f2eb79b4f4865a","date":1327774969,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = (MutableBits) mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = (BitVector) mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = (BitVector) mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReadersAndLiveDocs#getMergeReader(IOContext).mjava","sourceNew":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","sourceOld":"    // Get reader for merging (does not load the terms\n    // index):\n    public synchronized SegmentReader getMergeReader(IOContext context) throws IOException {\n      //System.out.println(\"  livedocs=\" + rld.liveDocs);\n\n      if (mergeReader == null) {\n\n        if (reader != null) {\n          // Just use the already opened non-merge reader\n          // for merging.  In the NRT case this saves us\n          // pointless double-open:\n          //System.out.println(\"PROMOTE non-merge reader seg=\" + rld.info);\n          reader.incRef();\n          mergeReader = reader;\n        } else {\n          mergeReader = new SegmentReader(info, -1, context);\n          if (liveDocs == null) {\n            liveDocs = mergeReader.getLiveDocs();\n          }\n        }\n      }\n\n      // Ref for caller\n      mergeReader.incRef();\n      return mergeReader;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"8daf107908340529aa1381b475f2eb79b4f4865a":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["9ce667c6d3400b22523701c549c0d35e26da8b46","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["9ce667c6d3400b22523701c549c0d35e26da8b46","8daf107908340529aa1381b475f2eb79b4f4865a"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["8daf107908340529aa1381b475f2eb79b4f4865a"],"8daf107908340529aa1381b475f2eb79b4f4865a":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fd92b8bcc88e969302510acf77bd6970da3994c4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}