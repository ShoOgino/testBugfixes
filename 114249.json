{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","commits":[{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      return (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      return (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      return (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      return (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","date":1538649775,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      return (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","sourceNew":"  public Map<String, Object> getClusterProperties() throws IOException {\n    return getClusterProperties(new Stat());\n\n  }\n\n","sourceOld":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  public Map<String, Object> getClusterProperties() throws IOException {\n    return getClusterProperties(new Stat());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterProperties#getClusterProperties().mjava","sourceNew":"  /**\n   * Return the cluster properties\n   * @throws IOException if there is an error reading properties from the cluster\n   */\n  @SuppressWarnings(\"unchecked\")\n  public Map<String, Object> getClusterProperties() throws IOException {\n    try {\n      Map<String, Object> properties = (Map<String, Object>) Utils.fromJSON(client.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      return convertCollectionDefaultsToNestedFormat(properties);\n    } catch (KeeperException.NoNodeException e) {\n      return Collections.emptyMap();\n    } catch (KeeperException | InterruptedException e) {\n      throw new IOException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    }\n  }\n\n","sourceOld":"  public Map<String, Object> getClusterProperties() throws IOException {\n    return getClusterProperties(new Stat());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","115923bc88e5b1dc4bef049b1ded8486723052ed"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["115923bc88e5b1dc4bef049b1ded8486723052ed","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["03ac95daf4ee56bf1430dc5f8c54fcbcc5f3646e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}