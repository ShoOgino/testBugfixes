{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","commits":[{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean isIndexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType) {\n    this.name = name;\n    this.isIndexed = isIndexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (isIndexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n    assert indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !storePayloads;\n  }\n\n","bugFix":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","31f025ae60076ae95274433f3fe8e6ace2857a87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","sourceNew":"  /**\n   * Sole Constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sole Constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#FieldInfo(String,boolean,int,boolean,boolean,boolean,IndexOptions,DocValues.Type,DocValues.Type,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sole Constructor.\n   *\n   * @lucene.experimental\n   */\n  public FieldInfo(String name, boolean indexed, int number, boolean storeTermVector, \n            boolean omitNorms, boolean storePayloads, IndexOptions indexOptions, DocValues.Type docValues, DocValues.Type normsType, Map<String,String> attributes) {\n    this.name = name;\n    this.indexed = indexed;\n    this.number = number;\n    this.docValueType = docValues;\n    if (indexed) {\n      this.storeTermVector = storeTermVector;\n      this.storePayloads = storePayloads;\n      this.omitNorms = omitNorms;\n      this.indexOptions = indexOptions;\n      this.normType = !omitNorms ? normsType : null;\n    } else { // for non-indexed fields, leave defaults\n      this.storeTermVector = false;\n      this.storePayloads = false;\n      this.omitNorms = false;\n      this.indexOptions = null;\n      this.normType = null;\n    }\n    this.attributes = attributes;\n    assert checkConsistency();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c14aed69f37b57db63b1fccc0740b17060a08f2b","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ede60c0b5bb96ad193414bbd663193b56689b3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"0837ab0472feecb3a54260729d845f839e1cbd72":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}