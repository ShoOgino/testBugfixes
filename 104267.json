{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","commits":[{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape(PlanetModel).mjava","sourceNew":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape() {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n        try {\n          return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, geoPoints, convexPointIndex);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","sourceOld":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape(PlanetModel planetModel) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(planetModel, toRadians(randomLat()), toRadians(randomLon()));\n          geoPoints.add(gPt);\n        }\n        final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n        try {\n          return GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints, convexPointIndex);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(randomLat());\n        double lon = toRadians(randomLon());\n\n        double angle;\n        if (smallBBox) {\n          angle = random().nextDouble() * Math.PI/360.0;\n        } else {\n          angle = random().nextDouble() * Math.PI/2.0;\n        }\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(planetModel, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(randomLat());\n        double lat1 = toRadians(randomLat());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(randomLon());\n        double lon1 = toRadians(randomLon());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(planetModel, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(planetModel, toRadians(randomLat()), toRadians(randomLon()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(planetModel, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"414425421ced68c7064f08c9da6a2c95399226d9","date":1460921822,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","sourceNew":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape() {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        try {\n          return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, geoPoints);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","sourceOld":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape() {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        final int convexPointIndex = random().nextInt(vertexCount);       //If we get this wrong, hopefully we get IllegalArgumentException\n        try {\n          return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, geoPoints, convexPointIndex);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536a864ce38bf14fb3f072a3129a389e95200e20","date":1461068886,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","sourceNew":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape() {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        try {\n          final GeoShape rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, geoPoints);\n          if (rval == null) {\n            // Degenerate polygon\n            continue;\n          }\n          return rval;\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","sourceOld":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape() {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        try {\n          return GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, geoPoints);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape(PlanetModel).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#randomShape().mjava","sourceNew":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape(final PlanetModel planetModel) {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(planetModel, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        try {\n          final GeoShape rval = GeoPolygonFactory.makeGeoPolygon(planetModel, geoPoints);\n          if (rval == null) {\n            // Degenerate polygon\n            continue;\n          }\n          return rval;\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(planetModel, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(planetModel, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(planetModel, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(planetModel, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","sourceOld":"  // Poached from Geo3dRptTest.randomShape:\n  private static GeoShape randomShape() {\n    while (true) {\n      final int shapeType = random().nextInt(4);\n      switch (shapeType) {\n      case 0: {\n        // Polygons\n        final int vertexCount = random().nextInt(3) + 3;\n        final List<GeoPoint> geoPoints = new ArrayList<>();\n        while (geoPoints.size() < vertexCount) {\n          final GeoPoint gPt = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n          geoPoints.add(gPt);\n        }\n        try {\n          final GeoShape rval = GeoPolygonFactory.makeGeoPolygon(PlanetModel.WGS84, geoPoints);\n          if (rval == null) {\n            // Degenerate polygon\n            continue;\n          }\n          return rval;\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      case 1: {\n        // Circles\n\n        double lat = toRadians(GeoTestUtil.nextLatitude());\n        double lon = toRadians(GeoTestUtil.nextLongitude());\n\n        double angle = random().nextDouble() * Math.PI/2.0;\n\n        try {\n          return GeoCircleFactory.makeGeoCircle(PlanetModel.WGS84, lat, lon, angle);\n        } catch (IllegalArgumentException iae) {\n          // angle is too small; try again:\n          continue;\n        }\n      }\n\n      case 2: {\n        // Rectangles\n        double lat0 = toRadians(GeoTestUtil.nextLatitude());\n        double lat1 = toRadians(GeoTestUtil.nextLatitude());\n        if (lat1 < lat0) {\n          double x = lat0;\n          lat0 = lat1;\n          lat1 = x;\n        }\n        double lon0 = toRadians(GeoTestUtil.nextLongitude());\n        double lon1 = toRadians(GeoTestUtil.nextLongitude());\n        if (lon1 < lon0) {\n          double x = lon0;\n          lon0 = lon1;\n          lon1 = x;\n        }\n\n        return GeoBBoxFactory.makeGeoBBox(PlanetModel.WGS84, lat1, lat0, lon0, lon1);\n      }\n\n      case 3: {\n        // Paths\n        final int pointCount = random().nextInt(5) + 1;\n        final double width = toRadians(random().nextInt(89)+1);\n        final GeoPoint[] points = new GeoPoint[pointCount];\n        for (int i = 0; i < pointCount; i++) {\n          points[i] = new GeoPoint(PlanetModel.WGS84, toRadians(GeoTestUtil.nextLatitude()), toRadians(GeoTestUtil.nextLongitude()));\n        }\n        try {\n          return GeoPathFactory.makeGeoPath(PlanetModel.WGS84, width, points);\n        } catch (IllegalArgumentException e) {\n          // This is what happens when we create a shape that is invalid.  Although it is conceivable that there are cases where\n          // the exception is thrown incorrectly, we aren't going to be able to do that in this random test.\n          continue;\n        }\n      }\n\n      default:\n        throw new IllegalStateException(\"Unexpected shape type\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"414425421ced68c7064f08c9da6a2c95399226d9":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["536a864ce38bf14fb3f072a3129a389e95200e20"],"536a864ce38bf14fb3f072a3129a389e95200e20":["414425421ced68c7064f08c9da6a2c95399226d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["414425421ced68c7064f08c9da6a2c95399226d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"414425421ced68c7064f08c9da6a2c95399226d9":["536a864ce38bf14fb3f072a3129a389e95200e20"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536a864ce38bf14fb3f072a3129a389e95200e20":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}