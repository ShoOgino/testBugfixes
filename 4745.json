{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedNumericDocValues(String,AtomicReader,SortedNumericDocValues,Bits).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedNumericDocValues(String,AtomicReader,SortedNumericDocValues,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedNumericDocValues(String fieldName, AtomicReader reader, SortedNumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.setDocument(i);\n      int count = ndv.count();\n      if (docsWithField.get(i)) {\n        if (count == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is not marked missing but has zero count for doc: \" + i);\n        }\n        long previous = Long.MIN_VALUE;\n        for (int j = 0; j < count; j++) {\n          long value = ndv.valueAt(j);\n          if (value < previous) {\n            throw new RuntimeException(\"values out of order: \" + value + \" < \" + previous + \" for doc: \" + i);\n          }\n          previous = value;\n        }\n      } else {\n        if (count != 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has count=\" + count + \" for doc: \" + i);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedNumericDocValues(String,AtomicReader,SortedNumericDocValues,Bits).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkSortedNumericDocValues(String fieldName, AtomicReader reader, SortedNumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.setDocument(i);\n      int count = ndv.count();\n      if (docsWithField.get(i)) {\n        if (count == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is not marked missing but has zero count for doc: \" + i);\n        }\n        long previous = Long.MIN_VALUE;\n        for (int j = 0; j < count; j++) {\n          long value = ndv.valueAt(j);\n          if (value < previous) {\n            throw new RuntimeException(\"values out of order: \" + value + \" < \" + previous + \" for doc: \" + i);\n          }\n          previous = value;\n        }\n      } else {\n        if (count != 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has count=\" + count + \" for doc: \" + i);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkSortedNumericDocValues(String,AtomicReader,SortedNumericDocValues,Bits).mjava","sourceNew":null,"sourceOld":"  private static void checkSortedNumericDocValues(String fieldName, AtomicReader reader, SortedNumericDocValues ndv, Bits docsWithField) {\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      ndv.setDocument(i);\n      int count = ndv.count();\n      if (docsWithField.get(i)) {\n        if (count == 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is not marked missing but has zero count for doc: \" + i);\n        }\n        long previous = Long.MIN_VALUE;\n        for (int j = 0; j < count; j++) {\n          long value = ndv.valueAt(j);\n          if (value < previous) {\n            throw new RuntimeException(\"values out of order: \" + value + \" < \" + previous + \" for doc: \" + i);\n          }\n          previous = value;\n        }\n      } else {\n        if (count != 0) {\n          throw new RuntimeException(\"dv for field: \" + fieldName + \" is marked missing but has count=\" + count + \" for doc: \" + i);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}