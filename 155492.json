{"path":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","commits":[{"id":"a0e3055974cda209e4f95efadcd904f0ebf03ada","date":1406238198,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[]).mjava","sourceNew":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        return o1.start.compareTo(o2.start);\n      }\n    });\n    return sortedIntervals;\n  }\n\n","sourceOld":"  private FacetInterval[] getSortedIntervals(String[] intervals) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        return o1.start.compareTo(o2.start);\n      }\n    });\n    return sortedIntervals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28734fb4930c942ddbcc23e90b746f7e231278b1","date":1477363794,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","sourceNew":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        int startComparison = o1.start.compareTo(o2.start);\n        if (startComparison == 0) {\n          if (o1.startOpen != o2.startOpen) {\n            if (!o1.startOpen) {\n              return -1;\n            } else {\n              return 1;\n            }\n          }\n        }\n        return startComparison;\n      }\n    });\n    return sortedIntervals;\n  }\n\n","sourceOld":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        return o1.start.compareTo(o2.start);\n      }\n    });\n    return sortedIntervals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60b61628d1912768f51eccaa8ead5a5a32ab34c6","date":1477427681,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","sourceNew":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        int startComparison = o1.start.compareTo(o2.start);\n        if (startComparison == 0) {\n          if (o1.startOpen != o2.startOpen) {\n            if (!o1.startOpen) {\n              return -1;\n            } else {\n              return 1;\n            }\n          }\n        }\n        return startComparison;\n      }\n    });\n    return sortedIntervals;\n  }\n\n","sourceOld":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        return o1.start.compareTo(o2.start);\n      }\n    });\n    return sortedIntervals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/IntervalFacets#getSortedIntervals(String[],SolrParams).mjava","sourceNew":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        int startComparison = o1.start.compareTo(o2.start);\n        if (startComparison == 0) {\n          if (o1.startOpen != o2.startOpen) {\n            if (!o1.startOpen) {\n              return -1;\n            } else {\n              return 1;\n            }\n          }\n        }\n        return startComparison;\n      }\n    });\n    return sortedIntervals;\n  }\n\n","sourceOld":"  private FacetInterval[] getSortedIntervals(String[] intervals, SolrParams params) throws SyntaxError {\n    FacetInterval[] sortedIntervals = new FacetInterval[intervals.length];\n    int idx = 0;\n    for (String intervalStr : intervals) {\n      sortedIntervals[idx++] = new FacetInterval(schemaField, intervalStr, params);\n    }\n    \n    /*\n     * This comparator sorts the intervals by start value from lower to greater\n     */\n    Arrays.sort(sortedIntervals, new Comparator<FacetInterval>() {\n\n      @Override\n      public int compare(FacetInterval o1, FacetInterval o2) {\n        assert o1 != null;\n        assert o2 != null;\n        return compareStart(o1, o2);\n      }\n\n      private int compareStart(FacetInterval o1, FacetInterval o2) {\n        if (o1.start == null) {\n          if (o2.start == null) {\n            return 0;\n          }\n          return -1;\n        }\n        if (o2.start == null) {\n          return 1;\n        }\n        return o1.start.compareTo(o2.start);\n      }\n    });\n    return sortedIntervals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["a0e3055974cda209e4f95efadcd904f0ebf03ada","28734fb4930c942ddbcc23e90b746f7e231278b1"],"28734fb4930c942ddbcc23e90b746f7e231278b1":["a0e3055974cda209e4f95efadcd904f0ebf03ada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e3055974cda209e4f95efadcd904f0ebf03ada","60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"a0e3055974cda209e4f95efadcd904f0ebf03ada":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"]},"commit2Childs":{"60b61628d1912768f51eccaa8ead5a5a32ab34c6":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28734fb4930c942ddbcc23e90b746f7e231278b1":["60b61628d1912768f51eccaa8ead5a5a32ab34c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0e3055974cda209e4f95efadcd904f0ebf03ada"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"a0e3055974cda209e4f95efadcd904f0ebf03ada":["60b61628d1912768f51eccaa8ead5a5a32ab34c6","28734fb4930c942ddbcc23e90b746f7e231278b1","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}