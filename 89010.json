{"path":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94becf27613d0cdcfe2a6245a8c88a2a850b2ffa","date":1363456993,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":"  // pkg-protected for access from TimSort class\n  void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":"  private void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"179c01998affd8475cfbb86e5c74e568870b2a9f","date":1363967234,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":"  /** Merge the slices [lo-pivot[ (of length len1) and [pivot-hi[ (of length\n   *  len2) which are already sorted. This method merges in-place but can be\n   *  extended to provide a faster implementation using extra memory. */\n  protected void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":"  // pkg-protected for access from TimSort class\n  void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5108a3a331b23a7fba7e7a4037fcb87085e0112e","date":1364415244,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":"  /** Merge the slices [lo-pivot[ (of length len1) and [pivot-hi[ (of length\n   *  len2) which are already sorted. This method merges in-place but can be\n   *  extended to provide a faster implementation using extra memory. */\n  protected void merge(int lo, int pivot, int hi, int len1, int len2) {\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    runMerge(lo, first_cut, new_mid, len11, len22);\n    runMerge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","sourceOld":"  /** Merge the slices [lo-pivot[ (of length len1) and [pivot-hi[ (of length\n   *  len2) which are already sorted. This method merges in-place but can be\n   *  extended to provide a faster implementation using extra memory. */\n  protected void merge(int lo, int pivot, int hi, int len1, int len2) {\n    if (len1 == 0 || len2 == 0) {\n      return;\n    }\n    if (len1 + len2 == 2) {\n      if (compare(pivot, lo) < 0) {\n          swap(pivot, lo);\n      }\n      return;\n    }\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    merge(lo, first_cut, new_mid, len11, len22);\n    merge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcc555744b1a581a4beccd0b75f8d3fe49735a2f","date":1367588265,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/SorterTemplate#merge(int,int,int,int,int).mjava","sourceNew":null,"sourceOld":"  /** Merge the slices [lo-pivot[ (of length len1) and [pivot-hi[ (of length\n   *  len2) which are already sorted. This method merges in-place but can be\n   *  extended to provide a faster implementation using extra memory. */\n  protected void merge(int lo, int pivot, int hi, int len1, int len2) {\n    int first_cut, second_cut;\n    int len11, len22;\n    if (len1 > len2) {\n      len11 = len1 >>> 1;\n      first_cut = lo + len11;\n      second_cut = lower(pivot, hi, first_cut);\n      len22 = second_cut - pivot;\n    } else {\n      len22 = len2 >>> 1;\n      second_cut = pivot + len22;\n      first_cut = upper(lo, pivot, second_cut);\n      len11 = first_cut - lo;\n    }\n    rotate(first_cut, pivot, second_cut);\n    final int new_mid = first_cut + len22;\n    runMerge(lo, first_cut, new_mid, len11, len22);\n    runMerge(new_mid, second_cut, hi, len1 - len11, len2 - len22);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["179c01998affd8475cfbb86e5c74e568870b2a9f"],"179c01998affd8475cfbb86e5c74e568870b2a9f":["94becf27613d0cdcfe2a6245a8c88a2a850b2ffa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"94becf27613d0cdcfe2a6245a8c88a2a850b2ffa":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5108a3a331b23a7fba7e7a4037fcb87085e0112e":["dcc555744b1a581a4beccd0b75f8d3fe49735a2f"],"179c01998affd8475cfbb86e5c74e568870b2a9f":["5108a3a331b23a7fba7e7a4037fcb87085e0112e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["94becf27613d0cdcfe2a6245a8c88a2a850b2ffa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dcc555744b1a581a4beccd0b75f8d3fe49735a2f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94becf27613d0cdcfe2a6245a8c88a2a850b2ffa":["179c01998affd8475cfbb86e5c74e568870b2a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}