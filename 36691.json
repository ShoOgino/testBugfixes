{"path":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","commits":[{"id":"e91746d568843981a68fb96dcecc7f383eb55701","date":1347520198,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex();\n      SimpleNaiveBayesClassifier simpleNaiveBayesClassifier = new SimpleNaiveBayesClassifier();\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      simpleNaiveBayesClassifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more. \";\n      assertEquals(\"technology\", simpleNaiveBayesClassifier.assignClass(newText));\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db318054409ed0abffd7a36b3f0ac61693f45684","date":1351009122,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), new MockAnalyzer(random()));\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex();\n      SimpleNaiveBayesClassifier simpleNaiveBayesClassifier = new SimpleNaiveBayesClassifier();\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      simpleNaiveBayesClassifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more. \";\n      assertEquals(\"technology\", simpleNaiveBayesClassifier.assignClass(newText));\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), new MockAnalyzer(random()));\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    SlowCompositeReaderWrapper compositeReaderWrapper = null;\n    try {\n      populateIndex();\n      SimpleNaiveBayesClassifier simpleNaiveBayesClassifier = new SimpleNaiveBayesClassifier();\n      compositeReaderWrapper = new SlowCompositeReaderWrapper(indexWriter.getReader());\n      simpleNaiveBayesClassifier.train(compositeReaderWrapper, textFieldName, classFieldName, analyzer);\n      String newText = \"Much is made of what the likes of Facebook, Google and Apple know about users. Truth is, Amazon may know more. \";\n      assertEquals(\"technology\", simpleNaiveBayesClassifier.assignClass(newText));\n    } finally {\n      if (compositeReaderWrapper != null)\n        compositeReaderWrapper.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6965197f9fe6d03eb332e2bd4e44e905f83f83d","date":1365412474,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), new BytesRef(\"technology\"), new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), new MockAnalyzer(random()));\n  }\n\n","bugFix":null,"bugIntro":["f943af95e5f861862ba175e931d53f5c53060cb3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f943af95e5f861862ba175e931d53f5c53060cb3","date":1367086170,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), categoryFieldName);\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), new BytesRef(\"technology\"), new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","bugFix":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), categoryFieldName);\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n    checkCorrectClassification(new SimpleNaiveBayesClassifier(), POLITICS_INPUT, POLITICS_RESULT, new MockAnalyzer(random()), textFieldName, categoryFieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/SimpleNaiveBayesClassifierTest#testBasicUsage().mjava","sourceNew":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = getSampleIndex(analyzer);\n      SimpleNaiveBayesClassifier classifier = new SimpleNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName);\n      checkCorrectClassification(classifier, TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(classifier, POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBasicUsage() throws Exception {\n    LeafReader leafReader = null;\n    try {\n      MockAnalyzer analyzer = new MockAnalyzer(random());\n      leafReader = populateSampleIndex(analyzer);\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), TECHNOLOGY_INPUT, TECHNOLOGY_RESULT);\n      checkCorrectClassification(new SimpleNaiveBayesClassifier(leafReader, analyzer, null, categoryFieldName, textFieldName), POLITICS_INPUT, POLITICS_RESULT);\n    } finally {\n      if (leafReader != null) {\n        leafReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["db318054409ed0abffd7a36b3f0ac61693f45684"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"62e52115b56781006682fd92c6938efaf174304d":["e91746d568843981a68fb96dcecc7f383eb55701","db318054409ed0abffd7a36b3f0ac61693f45684"],"f943af95e5f861862ba175e931d53f5c53060cb3":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db318054409ed0abffd7a36b3f0ac61693f45684":["e91746d568843981a68fb96dcecc7f383eb55701"],"e91746d568843981a68fb96dcecc7f383eb55701":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["45ae8f6354b0826d27014deff71fe330604a9783"],"45ae8f6354b0826d27014deff71fe330604a9783":["f943af95e5f861862ba175e931d53f5c53060cb3"]},"commit2Childs":{"d6965197f9fe6d03eb332e2bd4e44e905f83f83d":["f943af95e5f861862ba175e931d53f5c53060cb3"],"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"62e52115b56781006682fd92c6938efaf174304d":[],"f943af95e5f861862ba175e931d53f5c53060cb3":["45ae8f6354b0826d27014deff71fe330604a9783"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91746d568843981a68fb96dcecc7f383eb55701"],"db318054409ed0abffd7a36b3f0ac61693f45684":["d6965197f9fe6d03eb332e2bd4e44e905f83f83d","62e52115b56781006682fd92c6938efaf174304d"],"e91746d568843981a68fb96dcecc7f383eb55701":["62e52115b56781006682fd92c6938efaf174304d","db318054409ed0abffd7a36b3f0ac61693f45684"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"45ae8f6354b0826d27014deff71fe330604a9783":["360ff513ddb24a30ffa2111a3ef0f91038803100"]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}