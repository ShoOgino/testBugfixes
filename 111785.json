{"path":"solr/core/src/java/org/apache/solr/security/KerberosFilter#substituteOriginalUserRequest(HttpServletRequest).mjava","commits":[{"id":"ba52b298388110adda4c077defc2ab02b2b3fcc7","date":1563183607,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosFilter#substituteOriginalUserRequest(HttpServletRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If principal is an admin user, i.e. has ALL permissions (e.g. request coming from Solr\n   * node), and \"originalUserPrincipal\" is specified, then set originalUserPrincipal\n   * as the principal. This is the case in forwarded/remote requests\n   * through KerberosPlugin. This is needed because the original node that received\n   * this request did not perform any authorization, and hence we are the first ones\n   * to authorize the request (and we need the original user principal to do so).\n   * @return Substituted request, if applicable, or the original request\n   */\n  private HttpServletRequest substituteOriginalUserRequest(HttpServletRequest request) {\n    final HttpServletRequest originalRequest = request;\n    AuthorizationPlugin authzPlugin = coreContainer.getAuthorizationPlugin();\n    if (authzPlugin instanceof RuleBasedAuthorizationPlugin) {\n      RuleBasedAuthorizationPlugin ruleBased = (RuleBasedAuthorizationPlugin) authzPlugin;\n      if (request.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER) != null &&\n          ruleBased.doesUserHavePermission(request.getUserPrincipal().getName(), PermissionNameProvider.Name.ALL)) {\n        request = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            String originalUserPrincipal = originalRequest.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER);\n            log.info(\"Substituting user principal from {} to {}.\", originalRequest.getUserPrincipal(), originalUserPrincipal);\n            return new Principal() {\n              @Override\n              public String getName() {\n                return originalUserPrincipal;\n              }\n              @Override\n              public String toString() {\n                return originalUserPrincipal;\n              }\n            };\n          }\n        };\n      }\n    }\n    return request;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosFilter#substituteOriginalUserRequest(HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosFilter#substituteOriginalUserRequest(HttpServletRequest).mjava","sourceNew":"  /**\n   * If principal is an admin user, i.e. has ALL permissions (e.g. request coming from Solr\n   * node), and \"originalUserPrincipal\" is specified, then set originalUserPrincipal\n   * as the principal. This is the case in forwarded/remote requests\n   * through KerberosPlugin. This is needed because the original node that received\n   * this request did not perform any authorization, and hence we are the first ones\n   * to authorize the request (and we need the original user principal to do so).\n   * @return Substituted request, if applicable, or the original request\n   */\n  private HttpServletRequest substituteOriginalUserRequest(HttpServletRequest request) {\n    final HttpServletRequest originalRequest = request;\n    AuthorizationPlugin authzPlugin = coreContainer.getAuthorizationPlugin();\n    if (authzPlugin instanceof RuleBasedAuthorizationPlugin) {\n      RuleBasedAuthorizationPlugin ruleBased = (RuleBasedAuthorizationPlugin) authzPlugin;\n      if (request.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER) != null &&\n          ruleBased.doesUserHavePermission(request.getUserPrincipal().getName(), PermissionNameProvider.Name.ALL)) {\n        request = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            String originalUserPrincipal = originalRequest.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER);\n            if (log.isInfoEnabled()) {\n              log.info(\"Substituting user principal from {} to {}.\", originalRequest.getUserPrincipal(), originalUserPrincipal);\n            }\n            return new Principal() {\n              @Override\n              public String getName() {\n                return originalUserPrincipal;\n              }\n              @Override\n              public String toString() {\n                return originalUserPrincipal;\n              }\n            };\n          }\n        };\n      }\n    }\n    return request;\n  }\n\n","sourceOld":"  /**\n   * If principal is an admin user, i.e. has ALL permissions (e.g. request coming from Solr\n   * node), and \"originalUserPrincipal\" is specified, then set originalUserPrincipal\n   * as the principal. This is the case in forwarded/remote requests\n   * through KerberosPlugin. This is needed because the original node that received\n   * this request did not perform any authorization, and hence we are the first ones\n   * to authorize the request (and we need the original user principal to do so).\n   * @return Substituted request, if applicable, or the original request\n   */\n  private HttpServletRequest substituteOriginalUserRequest(HttpServletRequest request) {\n    final HttpServletRequest originalRequest = request;\n    AuthorizationPlugin authzPlugin = coreContainer.getAuthorizationPlugin();\n    if (authzPlugin instanceof RuleBasedAuthorizationPlugin) {\n      RuleBasedAuthorizationPlugin ruleBased = (RuleBasedAuthorizationPlugin) authzPlugin;\n      if (request.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER) != null &&\n          ruleBased.doesUserHavePermission(request.getUserPrincipal().getName(), PermissionNameProvider.Name.ALL)) {\n        request = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            String originalUserPrincipal = originalRequest.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER);\n            log.info(\"Substituting user principal from {} to {}.\", originalRequest.getUserPrincipal(), originalUserPrincipal);\n            return new Principal() {\n              @Override\n              public String getName() {\n                return originalUserPrincipal;\n              }\n              @Override\n              public String toString() {\n                return originalUserPrincipal;\n              }\n            };\n          }\n        };\n      }\n    }\n    return request;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8076096f334b0665d0a69a63ee98ac09baad402b","date":1589405373,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/KerberosFilter#substituteOriginalUserRequest(HttpServletRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/KerberosFilter#substituteOriginalUserRequest(HttpServletRequest).mjava","sourceNew":"  /**\n   * If principal is an admin user, i.e. has ALL permissions (e.g. request coming from Solr\n   * node), and \"originalUserPrincipal\" is specified, then set originalUserPrincipal\n   * as the principal. This is the case in forwarded/remote requests\n   * through KerberosPlugin. This is needed because the original node that received\n   * this request did not perform any authorization, and hence we are the first ones\n   * to authorize the request (and we need the original user principal to do so).\n   * @return Substituted request, if applicable, or the original request\n   */\n  private HttpServletRequest substituteOriginalUserRequest(HttpServletRequest request) {\n    final HttpServletRequest originalRequest = request;\n    AuthorizationPlugin authzPlugin = coreContainer.getAuthorizationPlugin();\n    if (authzPlugin instanceof RuleBasedAuthorizationPlugin) {\n      RuleBasedAuthorizationPlugin ruleBased = (RuleBasedAuthorizationPlugin) authzPlugin;\n      if (request.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER) != null &&\n          ruleBased.doesUserHavePermission(request.getUserPrincipal(), PermissionNameProvider.Name.ALL)) {\n        request = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            String originalUserPrincipal = originalRequest.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER);\n            if (log.isInfoEnabled()) {\n              log.info(\"Substituting user principal from {} to {}.\", originalRequest.getUserPrincipal(), originalUserPrincipal);\n            }\n            return new Principal() {\n              @Override\n              public String getName() {\n                return originalUserPrincipal;\n              }\n              @Override\n              public String toString() {\n                return originalUserPrincipal;\n              }\n            };\n          }\n        };\n      }\n    }\n    return request;\n  }\n\n","sourceOld":"  /**\n   * If principal is an admin user, i.e. has ALL permissions (e.g. request coming from Solr\n   * node), and \"originalUserPrincipal\" is specified, then set originalUserPrincipal\n   * as the principal. This is the case in forwarded/remote requests\n   * through KerberosPlugin. This is needed because the original node that received\n   * this request did not perform any authorization, and hence we are the first ones\n   * to authorize the request (and we need the original user principal to do so).\n   * @return Substituted request, if applicable, or the original request\n   */\n  private HttpServletRequest substituteOriginalUserRequest(HttpServletRequest request) {\n    final HttpServletRequest originalRequest = request;\n    AuthorizationPlugin authzPlugin = coreContainer.getAuthorizationPlugin();\n    if (authzPlugin instanceof RuleBasedAuthorizationPlugin) {\n      RuleBasedAuthorizationPlugin ruleBased = (RuleBasedAuthorizationPlugin) authzPlugin;\n      if (request.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER) != null &&\n          ruleBased.doesUserHavePermission(request.getUserPrincipal().getName(), PermissionNameProvider.Name.ALL)) {\n        request = new HttpServletRequestWrapper(request) {\n          @Override\n          public Principal getUserPrincipal() {\n            String originalUserPrincipal = originalRequest.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER);\n            if (log.isInfoEnabled()) {\n              log.info(\"Substituting user principal from {} to {}.\", originalRequest.getUserPrincipal(), originalUserPrincipal);\n            }\n            return new Principal() {\n              @Override\n              public String getName() {\n                return originalUserPrincipal;\n              }\n              @Override\n              public String toString() {\n                return originalUserPrincipal;\n              }\n            };\n          }\n        };\n      }\n    }\n    return request;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["ba52b298388110adda4c077defc2ab02b2b3fcc7"],"8076096f334b0665d0a69a63ee98ac09baad402b":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba52b298388110adda4c077defc2ab02b2b3fcc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8076096f334b0665d0a69a63ee98ac09baad402b"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["8076096f334b0665d0a69a63ee98ac09baad402b"],"8076096f334b0665d0a69a63ee98ac09baad402b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba52b298388110adda4c077defc2ab02b2b3fcc7"],"ba52b298388110adda4c077defc2ab02b2b3fcc7":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}