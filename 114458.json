{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#Lucene60DimensionalWriter(SegmentWriteState,int,double).mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#Lucene60DimensionalWriter(SegmentWriteState,int,double).mjava","pathOld":"/dev/null","sourceNew":"  /** Full constructor */\n  public Lucene60DimensionalWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n    assert writeState.fieldInfos.hasDimensionalValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxMBSortInHeap = maxMBSortInHeap;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60PointWriter#Lucene60PointWriter(SegmentWriteState,int,double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter#Lucene60DimensionalWriter(SegmentWriteState,int,double).mjava","sourceNew":"  /** Full constructor */\n  public Lucene60PointWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n    assert writeState.fieldInfos.hasPointValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxMBSortInHeap = maxMBSortInHeap;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60PointFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60PointFormat.CODEC_NAME,\n                                 Lucene60PointFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","sourceOld":"  /** Full constructor */\n  public Lucene60DimensionalWriter(SegmentWriteState writeState, int maxPointsInLeafNode, double maxMBSortInHeap) throws IOException {\n    assert writeState.fieldInfos.hasDimensionalValues();\n    this.writeState = writeState;\n    this.maxPointsInLeafNode = maxPointsInLeafNode;\n    this.maxMBSortInHeap = maxMBSortInHeap;\n    String dataFileName = IndexFileNames.segmentFileName(writeState.segmentInfo.name,\n                                                         writeState.segmentSuffix,\n                                                         Lucene60DimensionalFormat.DATA_EXTENSION);\n    dataOut = writeState.directory.createOutput(dataFileName, writeState.context);\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(dataOut,\n                                 Lucene60DimensionalFormat.CODEC_NAME,\n                                 Lucene60DimensionalFormat.DATA_VERSION_CURRENT,\n                                 writeState.segmentInfo.getId(),\n                                 writeState.segmentSuffix);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(dataOut);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b485ce675d4e8b9dbfafd122ca9b7b33a883be7b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}