{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      // not till java6 @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      // not till java6 @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      // not till java6 @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2da1197ae52a47f9d559bf916998d6626fb9a7b","date":1316275956,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, true);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      // not till java6 @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, false);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      // not till java6 @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","bugFix":["47ac88233e9e3019faa24a5184425ad60c23d70f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletion#lookupSortedAlphabetically(BytesRef,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#lookupSortedAlphabetically(String,int).mjava","sourceNew":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not\n   * constant</b>. This is a workaround: in general, use constant weights for\n   * alphabetically sorted result.\n   */\n  private List<Completion> lookupSortedAlphabetically(BytesRef key, int num)\n      throws IOException {\n    // Greedily get num results from each weight branch.\n    List<Completion> res = lookupSortedByWeight(key, num, true);\n\n    // Sort and trim.\n    Collections.sort(res);\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Lookup suggestions sorted alphabetically <b>if weights are not constant</b>. This\n   * is a workaround: in general, use constant weights for alphabetically sorted result.\n   */\n  private List<LookupResult> lookupSortedAlphabetically(String key, int num) throws IOException {\n    // Greedily get num results from each weight branch.\n    List<LookupResult> res = lookupSortedByWeight(key, num, true);\n    \n    // Sort and trim.\n    Collections.sort(res, new Comparator<LookupResult>() {\n      // not till java6 @Override\n      public int compare(LookupResult o1, LookupResult o2) {\n        return o1.key.compareTo(o2.key);\n      }\n    });\n    if (res.size() > num) {\n      res = res.subList(0, num);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2da1197ae52a47f9d559bf916998d6626fb9a7b":["e230a61047bc041516c811baa08a7174d6f8322a"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["e2da1197ae52a47f9d559bf916998d6626fb9a7b"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"e2da1197ae52a47f9d559bf916998d6626fb9a7b":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["e2da1197ae52a47f9d559bf916998d6626fb9a7b","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}