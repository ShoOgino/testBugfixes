{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,Collection[ReaderFinishedListener]).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,CodecProvider,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, CodecProvider codecs,\n                  Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    if (codecs == null) {\n      this.codecs = CodecProvider.getDefault();\n    } else {\n      this.codecs = codecs;\n    }\n    \n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8414cdacb05e1277df96a30710f570f4251d9a","date":1323040348,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(true, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, true /* nocommit: remove readOnly */);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean readOnly, boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.readOnly = readOnly;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(readOnly, infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone, readOnly);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["7b91922b55d15444d554721b352861d028eb8278"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","4b8414cdacb05e1277df96a30710f570f4251d9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["4b8414cdacb05e1277df96a30710f570f4251d9a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}