{"path":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279c7cd47f17e1e8b674a3741ff5f040bc680be","date":1341675760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestBinaryResponseWriter#testUUID().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/TestBinaryResponseWriter#testUUID().mjava","sourceNew":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests known types implementation by asserting correct encoding/decoding of UUIDField\n   */\n  public void testUUID() throws Exception {\n    String s = UUID.randomUUID().toString().toLowerCase(Locale.ROOT);\n    assertU(adoc(\"id\", \"101\", \"uuid\", s));\n    assertU(commit());\n    LocalSolrQueryRequest req = lrf.makeRequest(\"q\", \"*:*\");\n    SolrQueryResponse rsp = h.queryAndResponse(req.getParams().get(CommonParams.QT), req);\n    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) h.getCore().getQueryResponseWriter(\"javabin\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    writer.write(baos, req, rsp);\n    NamedList res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()));\n    SolrDocumentList docs = (SolrDocumentList) res.get(\"response\");\n    for (Object doc : docs) {\n      SolrDocument document = (SolrDocument) doc;\n      assertEquals(\"Returned object must be a string\", \"java.lang.String\", document.getFieldValue(\"uuid\").getClass().getName());\n      assertEquals(\"Wrong UUID string returned\", s, document.getFieldValue(\"uuid\"));\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2acf500f78aa12b92e371fd89c719291986b6b90","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2acf500f78aa12b92e371fd89c719291986b6b90":["c26f00b574427b55127e869b935845554afde1fa","9279c7cd47f17e1e8b674a3741ff5f040bc680be"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2acf500f78aa12b92e371fd89c719291986b6b90","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"46d8ada1fff8d18cb197c38c7983225162599948":["c26f00b574427b55127e869b935845554afde1fa","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","9279c7cd47f17e1e8b674a3741ff5f040bc680be","2acf500f78aa12b92e371fd89c719291986b6b90","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9279c7cd47f17e1e8b674a3741ff5f040bc680be":["2acf500f78aa12b92e371fd89c719291986b6b90"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2acf500f78aa12b92e371fd89c719291986b6b90":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","fe33227f6805edab2036cbb80645cc4e2d1fa424","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","46d8ada1fff8d18cb197c38c7983225162599948"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}