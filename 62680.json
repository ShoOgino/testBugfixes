{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","commits":[{"id":"fe31ae3a69266f8acd2d1c341b4f285ee7f5c574","date":1350477646,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetBestFragmentsConstantScore() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        if (random().nextBoolean()) {\n          BooleanQuery bq = new BooleanQuery();\n          bq.add(new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(\n              new Term(FIELD_NAME, \"kennedy\")))), Occur.MUST);\n          bq.add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          doSearching(bq);\n        } else {\n          doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME,\n              \"kennedy\"))));\n        }\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetBestFragmentsConstantScore() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        if (random().nextBoolean()) {\n          BooleanQuery bq = new BooleanQuery();\n          bq.add(new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(\n              new Term(FIELD_NAME, \"kennedy\")))), Occur.MUST);\n          bq.add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          doSearching(bq);\n        } else {\n          doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME,\n              \"kennedy\"))));\n        }\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","sourceNew":"  public void testGetBestFragmentsConstantScore() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        if (random().nextBoolean()) {\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          bq.add(new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(\n              new Term(FIELD_NAME, \"kennedy\")))), Occur.MUST);\n          bq.add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          doSearching(bq.build());\n        } else {\n          doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME,\n              \"kennedy\"))));\n        }\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsConstantScore() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        if (random().nextBoolean()) {\n          BooleanQuery bq = new BooleanQuery();\n          bq.add(new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(\n              new Term(FIELD_NAME, \"kennedy\")))), Occur.MUST);\n          bq.add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          doSearching(bq);\n        } else {\n          doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME,\n              \"kennedy\"))));\n        }\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52e48927ca4ef3655a261f2230b968b6fdf3608","date":1444652107,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetBestFragmentsConstantScore().mjava","sourceNew":"  public void testGetBestFragmentsConstantScore() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        if (random().nextBoolean()) {\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          bq.add(new ConstantScoreQuery(new TermQuery(\n              new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          bq.add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          doSearching(bq.build());\n        } else {\n          doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME,\n              \"kennedy\"))));\n        }\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n      }\n    };\n\n    helper.start();\n  }\n\n","sourceOld":"  public void testGetBestFragmentsConstantScore() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        numHighlights = 0;\n        if (random().nextBoolean()) {\n          BooleanQuery.Builder bq = new BooleanQuery.Builder();\n          bq.add(new ConstantScoreQuery(new QueryWrapperFilter(new TermQuery(\n              new Term(FIELD_NAME, \"kennedy\")))), Occur.MUST);\n          bq.add(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME, \"kennedy\"))), Occur.MUST);\n          doSearching(bq.build());\n        } else {\n          doSearching(new ConstantScoreQuery(new TermQuery(new Term(FIELD_NAME,\n              \"kennedy\"))));\n        }\n        doStandardHighlights(analyzer, searcher, hits, query, HighlighterTest.this);\n        assertTrue(\"Failed to find correct number of highlights \" + numHighlights + \" found\",\n            numHighlights == 4);\n      }\n    };\n\n    helper.start();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fe31ae3a69266f8acd2d1c341b4f285ee7f5c574"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe31ae3a69266f8acd2d1c341b4f285ee7f5c574"],"fe31ae3a69266f8acd2d1c341b4f285ee7f5c574":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d52e48927ca4ef3655a261f2230b968b6fdf3608"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d52e48927ca4ef3655a261f2230b968b6fdf3608"],"d52e48927ca4ef3655a261f2230b968b6fdf3608":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","fe31ae3a69266f8acd2d1c341b4f285ee7f5c574"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fe31ae3a69266f8acd2d1c341b4f285ee7f5c574":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}