{"path":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","commits":[{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(Collection[String],SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(Collection<String> fieldNames, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      FieldInfos infos = reader.fieldInfos();\n      DocValues dv;\n      for (final String fieldName : fieldNames) {\n        FieldInfo info = infos.fieldInfo(fieldName);\n        if (reader.hasNorms(fieldName)) {\n          dv = reader.normValues(fieldName);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + fieldName + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(fieldName) != null) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + fieldName + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e8d5a6ffbfa3405d234a87c833741eabed98d13","date":1326725835,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.isIndexed && !info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#testFieldNorms(FieldInfos,SegmentReader).mjava","sourceNew":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test field norms.\n   */\n  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {\n    final Status.FieldNormStatus status = new Status.FieldNormStatus();\n\n    try {\n      // Test Field Norms\n      if (infoStream != null) {\n        infoStream.print(\"    test: field norms.........\");\n      }\n      DocValues dv;\n      for (FieldInfo info : fieldInfos) {\n        if (reader.hasNorms(info.name)) {\n          dv = reader.normValues(info.name);\n          assert dv != null;\n          if (dv.getSource().hasArray()) {\n            Object array = dv.getSource().getArray();\n            if (Array.getLength(array) != reader.maxDoc()) {\n              throw new RuntimeException(\"norms for field: \" + info.name + \" are of the wrong size\");\n            }\n          }\n          if (!info.isIndexed || info.omitNorms) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          ++status.totFields;\n        } else {\n          if (reader.normValues(info.name) != null) {\n            throw new RuntimeException(\"field: \" + info.name + \" should omit norms but has them!\");\n          }\n          if (info.normsPresent()) {\n            throw new RuntimeException(\"field: \" + info.name + \" should have norms but omits them!\");\n          }\n        }\n      }\n\n      msg(\"OK [\" + status.totFields + \" fields]\");\n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9e8d5a6ffbfa3405d234a87c833741eabed98d13":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}