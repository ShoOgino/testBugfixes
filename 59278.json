{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      ArrayList<Integer> percs = new ArrayList<>(1);\n      int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n      percs.add(ord);\n      OrdinalCalculator.putOrdinalsInPosition(list, percs);\n      result = list.get(percs.get(0));\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      ArrayList<Integer> percs = new ArrayList<>(1);\n      int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n      percs.add(ord);\n      OrdinalCalculator.putOrdinalsInPosition(list, percs);\n      result = list.get(percs.get(0));\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      ArrayList<Integer> percs = new ArrayList<>(1);\n      int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n      percs.add(ord);\n      OrdinalCalculator.putOrdinalsInPosition(list, percs);\n      result = list.get(percs.get(0));\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      double[] perc = new double[]{Double.parseDouble(stat.substring(5))/100};\n      result = PercentileCalculator.getPercentiles(list, perc).get(0);\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyAbstractAnalyticsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#[T-extends-Comparable[T]]_calculateStat(ArrayList[T],String).mjava","sourceNew":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      ArrayList<Integer> percs = new ArrayList<>(1);\n      int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n      percs.add(ord);\n      OrdinalCalculator.putOrdinalsInPosition(list, percs);\n      result = list.get(percs.get(0));\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","sourceOld":"  public <T extends Comparable<T>> Object calculateStat(ArrayList<T> list, String stat) {\n    Object result;\n    if (stat.contains(\"perc_\")) {\n      ArrayList<Integer> percs = new ArrayList<>(1);\n      int ord = (int) Math.ceil(Double.parseDouble(stat.substring(5))/100 * list.size()) - 1;\n      percs.add(ord);\n      OrdinalCalculator.putOrdinalsInPosition(list, percs);\n      result = list.get(percs.get(0));\n    } else if (stat.equals(\"count\")) {\n      result = Long.valueOf(list.size());\n    } else if (stat.equals(\"unique\")) {\n      HashSet<T> set = new HashSet<>();\n      set.addAll(list);\n      result = Long.valueOf((long)set.size());\n    } else if (stat.equals(\"max\")) {\n      Collections.sort(list);\n      result = list.get(list.size()-1);\n    } else if (stat.equals(\"min\")) {\n      Collections.sort(list);\n      result = list.get(0);\n    } else {\n      result = null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}