{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      //publish node state (recovering)\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      //wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7875fce026a0a335830cfc75abc3eb009eff9a73","1e9ce820cd3ed9efb959c181daaafd22f0c70143","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      //publish node state (recovering)\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      //wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      //publish node state (recovering)\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      //wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6101715a4732c1fe39eae50ce4a23fec6fc270d0","date":1328795951,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      //publish node state (recovering)\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      //wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      //publish node state (recovering)\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      //wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84250b785753dee996ec3f88a1ea2e941ebe7cfb","date":1328840665,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      \n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      //publish node state (recovering)\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      //wait overseer assignment\n      waitForSliceCount(reader, \"collection1\", 1);\n      \n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      //live node\n      String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + \"node1\";\n      zkClient.makePath(nodePath,CreateMode.EPHEMERAL, true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      Overseer.createClientNodes(zkClient, \"node1\");\n      \n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      HashMap<String, String> coreProps = new HashMap<String,String>();\n      coreProps.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\");\n      coreProps.put(ZkStateReader.NODE_NAME_PROP, \"node1\");\n      coreProps.put(ZkStateReader.CORE_NAME_PROP, \"core1\");\n      coreProps.put(ZkStateReader.ROLES_PROP, \"\");\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      CoreState state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n      \n      nodePath = \"/node_states/node1\";\n\n      try {\n        zkClient.makePath(nodePath, CreateMode.EPHEMERAL, true);\n      } catch (KeeperException ke) {\n        if(ke.code()!=Code.NODEEXISTS) {\n          throw ke;\n        }\n      }\n      \n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      coreProps.put(ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n      \n      coreProps.put(ZkStateReader.SHARD_ID_PROP, \"shard1\");\n      state = new CoreState(\"core1\", \"collection1\", coreProps, 2);\n\n      zkClient.setData(nodePath, ZkStateReader.toJSON(new CoreState[]{state}), true);\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n\n      if (reader != null) {\n        reader.close();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getCloudState().toString(), ZkStateReader.RECOVERING,\n          reader.getCloudState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"node1_core1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getShards()\n              .get(\"node1_core1\").get(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"node1_core1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"node1_core1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir().getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, Overseer.OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.RECOVERING);\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertEquals(reader.getClusterState().toString(), ZkStateReader.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplicasMap()\n              .get(\"core_node1\").getStr(ZkStateReader.STATE_PROP));\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, ZkStateReader.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyStatus(reader, Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(ZkStateReader.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(ZkStateReader.toJSON(m));\n\n      verifyStatus(reader, Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyStatus(reader, Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"bugIntro":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"791c4fb1ff970967cf1802cf4d4875ba12c2eb01","date":1446659977,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d48cfd089cba66f9745d8043e8e971b60514418d","date":1449003177,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, \"collection1\");\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(\"collection1\", \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\",\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, \"collection1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getInQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, collection);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(collection, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n      \n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n\n      assertSame(reader.getClusterState().toString(), Replica.State.RECOVERING,\n          reader.getClusterState().getSlice(COLLECTION, \"shard1\").getReplica(\"core_node1\").getState());\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7","date":1501726570,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      DistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      \n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(overseerClient);\n\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    \n    ZkTestServer server = new ZkTestServer(zkDir);\n    \n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      \n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = Overseer.getStateUpdateQueue(zkClient);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(zkClient);\n      close(overseerClient);\n\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","a5093a9e893633cc091cf2f729d7863671c2b715","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","f4abec28b874149a7223e32cc7a01704c27790de"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(overseerClient);\n\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    \n    try {\n      \n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n      \n      q.offer(Utils.toJSON(m));\n      \n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(overseerClient);\n\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testStateChange().mjava","sourceNew":"  @Test\n  public void testStateChange() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n      createCollection(COLLECTION, 1);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(overseerClient);\n\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStateChange() throws Exception {\n\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      overseerClient = electNewOverseer(server.getZkAddress());\n\n      ZkDistributedQueue q = overseers.get(0).getStateUpdateQueue();\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n          \"name\", COLLECTION,\n          ZkStateReader.REPLICATION_FACTOR, \"1\",\n          ZkStateReader.NUM_SHARDS_PROP, \"1\",\n          \"createNodeSet\", \"\");\n      q.offer(Utils.toJSON(m));\n\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.CORE_NODE_NAME_PROP, \"core_node1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.RECOVERING.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      waitForCollections(reader, COLLECTION);\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.RECOVERING);\n\n      //publish node state (active)\n      m = new ZkNodeProps(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1/solr\",\n          ZkStateReader.NODE_NAME_PROP, \"node1\",\n          ZkStateReader.COLLECTION_PROP, COLLECTION,\n          ZkStateReader.SHARD_ID_PROP, \"shard1\",\n          ZkStateReader.CORE_NAME_PROP, \"core1\",\n          ZkStateReader.ROLES_PROP, \"\",\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n\n      q.offer(Utils.toJSON(m));\n\n      verifyReplicaStatus(reader, \"collection1\", \"shard1\", \"core_node1\", Replica.State.ACTIVE);\n\n    } finally {\n\n      close(overseerClient);\n\n      close(reader);\n    }\n  }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["d48cfd089cba66f9745d8043e8e971b60514418d","19498030e0adab22f604f935cae3c03dcf0952a6"],"5de502b5478255493125e7e801411ba17a6682ec":["af2638813028b254a88b418ebeafb541afb49653"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["849494cf2f3a96af5c8c84995108ddd8456fcd04","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["fa64435b5902ce266c23755a4a00691a3285dab8","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["af2638813028b254a88b418ebeafb541afb49653"],"d48cfd089cba66f9745d8043e8e971b60514418d":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["f4abec28b874149a7223e32cc7a01704c27790de"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","7875fce026a0a335830cfc75abc3eb009eff9a73"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7":["28288370235ed02234a64753cdbf0c6ec096304a"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["6f20fd35e3055a0c5b387df0b986a68d65d86441","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["fa64435b5902ce266c23755a4a00691a3285dab8"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"19498030e0adab22f604f935cae3c03dcf0952a6":["d48cfd089cba66f9745d8043e8e971b60514418d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a5093a9e893633cc091cf2f729d7863671c2b715":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"d48cfd089cba66f9745d8043e8e971b60514418d":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"791c4fb1ff970967cf1802cf4d4875ba12c2eb01":["d48cfd089cba66f9745d8043e8e971b60514418d"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"44bfd7d2ea76c7c37dd13eadc1889039e172f3c7":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"84250b785753dee996ec3f88a1ea2e941ebe7cfb":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["791c4fb1ff970967cf1802cf4d4875ba12c2eb01"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"f4abec28b874149a7223e32cc7a01704c27790de":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"6101715a4732c1fe39eae50ce4a23fec6fc270d0":["84250b785753dee996ec3f88a1ea2e941ebe7cfb"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["44bfd7d2ea76c7c37dd13eadc1889039e172f3c7"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","37a0f60745e53927c4c876cfe5b5a58170f0646c","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","6101715a4732c1fe39eae50ce4a23fec6fc270d0"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","6240b74b884c5587f2a4062dd27d6c32bf228889"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","8fd5be977c105554c6a7b68afcdbc511439723ab","6240b74b884c5587f2a4062dd27d6c32bf228889","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}