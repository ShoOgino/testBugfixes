{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    private Rectangle makeShape() {\n      String token = getTokenString();\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if ('A' == c || 'a' == c) {\n          ymin += levelH[i];\n        } else if ('B' == c || 'b' == c) {\n          xmin += levelW[i];\n          ymin += levelH[i];\n        } else if ('C' == c || 'c' == c) {\n          // nothing really\n        }\n        else if('D' == c || 'd' == c) {\n          xmin += levelW[i];\n        } else {\n          throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length();\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRect(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    private Rectangle makeShape() {\n      String token = getTokenString();\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if ('A' == c || 'a' == c) {\n          ymin += levelH[i];\n        } else if ('B' == c || 'b' == c) {\n          xmin += levelW[i];\n          ymin += levelH[i];\n        } else if ('C' == c || 'c' == c) {\n          // nothing really\n        }\n        else if('D' == c || 'd' == c) {\n          xmin += levelW[i];\n        } else {\n          throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length();\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRect(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    private Rectangle makeShape() {\n      String token = getTokenString();\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if ('A' == c || 'a' == c) {\n          ymin += levelH[i];\n        } else if ('B' == c || 'b' == c) {\n          xmin += levelW[i];\n          ymin += levelH[i];\n        } else if ('C' == c || 'c' == c) {\n          // nothing really\n        }\n        else if('D' == c || 'd' == c) {\n          xmin += levelW[i];\n        } else {\n          throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length();\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    private Rectangle makeShape() {\n      String token = getTokenString();\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if ('A' == c || 'a' == c) {\n          ymin += levelH[i];\n        } else if ('B' == c || 'b' == c) {\n          xmin += levelW[i];\n          ymin += levelH[i];\n        } else if ('C' == c || 'c' == c) {\n          // nothing really\n        }\n        else if('D' == c || 'd' == c) {\n          xmin += levelW[i];\n        } else {\n          throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length();\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRect(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4de14be4bd1b857ba37ca138b61c4661c6d1bed3","date":1396628861,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    private Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    private Rectangle makeShape() {\n      String token = getTokenString();\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if ('A' == c || 'a' == c) {\n          ymin += levelH[i];\n        } else if ('B' == c || 'b' == c) {\n          xmin += levelW[i];\n          ymin += levelH[i];\n        } else if ('C' == c || 'c' == c) {\n          // nothing really\n        }\n        else if('D' == c || 'd' == c) {\n          xmin += levelW[i];\n        } else {\n          throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length();\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    private Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    private Rectangle makeShape() {\n      String token = getTokenString();\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length(); i++) {\n        char c = token.charAt(i);\n        if ('A' == c || 'a' == c) {\n          ymin += levelH[i];\n        } else if ('B' == c || 'b' == c) {\n          xmin += levelW[i];\n          ymin += levelH[i];\n        } else if ('C' == c || 'c' == c) {\n          // nothing really\n        }\n        else if('D' == c || 'd' == c) {\n          xmin += levelW[i];\n        } else {\n          throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length();\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    protected Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    private Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    protected Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    protected Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/QuadPrefixTree.QuadCell#makeShape().mjava","sourceNew":"    protected Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","sourceOld":"    protected Rectangle makeShape() {\n      BytesRef token = getTokenBytesNoLeaf(null);\n      double xmin = QuadPrefixTree.this.xmin;\n      double ymin = QuadPrefixTree.this.ymin;\n\n      for (int i = 0; i < token.length; i++) {\n        byte c = token.bytes[token.offset + i];\n        switch (c) {\n          case 'A':\n            ymin += levelH[i];\n            break;\n          case 'B':\n            xmin += levelW[i];\n            ymin += levelH[i];\n            break;\n          case 'C':\n            break;//nothing really\n          case 'D':\n            xmin += levelW[i];\n            break;\n          default:\n            throw new RuntimeException(\"unexpected char: \" + c);\n        }\n      }\n      int len = token.length;\n      double width, height;\n      if (len > 0) {\n        width = levelW[len-1];\n        height = levelH[len-1];\n      } else {\n        width = gridW;\n        height = gridH;\n      }\n      return ctx.makeRectangle(xmin, xmin + width, ymin, ymin + height);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["9d3854546d75fdc5a4c3b13d0c67b6b331185945","112d77ac8d3e10a362516ad834c9a11d35c94234"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["da956410d7a790f567af4e7e94584fb0930212f2","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"da956410d7a790f567af4e7e94584fb0930212f2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["da956410d7a790f567af4e7e94584fb0930212f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["da956410d7a790f567af4e7e94584fb0930212f2"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"da956410d7a790f567af4e7e94584fb0930212f2":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","4de14be4bd1b857ba37ca138b61c4661c6d1bed3"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"4de14be4bd1b857ba37ca138b61c4661c6d1bed3":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}