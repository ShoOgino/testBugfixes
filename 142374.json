{"path":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","commits":[{"id":"ba1c938737d199113ec96f0d8ce2c8791b61cd18","date":1458148009,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0acd5cf26e179fa6c0650a6348a8913718fc98a7","date":1523271967,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      // For SolrDocumentList, use writeVal instead of writeArray\n      if (!(val instanceof SolrDocumentList) && val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      // For SolrDocumentList, use writeVal instead of writeArray\n      if (!(val instanceof SolrDocumentList) && val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      if (val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ed6dbc6b97218bcfe460d98ac978fdaa523feb4","date":1526113368,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeSolrDocument(String,SolrDocument,ReturnFields,int).mjava","sourceNew":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n      writeVal(fname, val);\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  @Override\n  public void writeSolrDocument(String name, SolrDocument doc, ReturnFields returnFields, int idx) throws IOException {\n    if( idx > 0 ) {\n      writeArraySeparator();\n    }\n\n    indent();\n    writeMapOpener(-1); \n    incLevel();\n\n    writeKey(\"type\", false);\n    writeVal(null, \"Feature\");\n    \n    Object val = doc.getFieldValue(geofield);\n    if(val != null) {  \n      writeFeatureGeometry(val);\n    }\n    \n    boolean first=true;\n    for (String fname : doc.getFieldNames()) {\n      if (fname.equals(geofield) || ((returnFields!= null && !returnFields.wantsField(fname)))) {\n        continue;\n      }\n      writeMapSeparator();\n      if (first) {\n        indent();\n        writeKey(\"properties\", false);\n        writeMapOpener(-1); \n        incLevel();\n        \n        first=false;\n      }\n\n      indent();\n      writeKey(fname, true);\n      val = doc.getFieldValue(fname);\n\n      // SolrDocument will now have multiValued fields represented as a Collection,\n      // even if only a single value is returned for this document.\n      // For SolrDocumentList, use writeVal instead of writeArray\n      if (!(val instanceof SolrDocumentList) && val instanceof List) {\n        // shortcut this common case instead of going through writeVal again\n        writeArray(name,((Iterable)val).iterator());\n      } else {\n        writeVal(fname, val);\n      }\n    }\n\n    // GeoJSON does not really support nested FeatureCollections\n    if(doc.hasChildDocuments()) {\n      if(first == false) {\n        writeMapSeparator();\n        indent();\n      }\n      writeKey(\"_childDocuments_\", true);\n      writeArrayOpener(doc.getChildDocumentCount());\n      List<SolrDocument> childDocs = doc.getChildDocuments();\n      for(int i=0; i<childDocs.size(); i++) {\n        writeSolrDocument(null, childDocs.get(i), null, i);\n      }\n      writeArrayCloser();\n    }\n\n    // check that we added any properties\n    if(!first) {\n      decLevel();\n      writeMapCloser();\n    }\n    \n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["ba1c938737d199113ec96f0d8ce2c8791b61cd18","0acd5cf26e179fa6c0650a6348a8913718fc98a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"4ed6dbc6b97218bcfe460d98ac978fdaa523feb4":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ed6dbc6b97218bcfe460d98ac978fdaa523feb4"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["4ed6dbc6b97218bcfe460d98ac978fdaa523feb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["d58e44159788900f4a2113b84463dc3fbbf80f20","0acd5cf26e179fa6c0650a6348a8913718fc98a7"],"0acd5cf26e179fa6c0650a6348a8913718fc98a7":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"4ed6dbc6b97218bcfe460d98ac978fdaa523feb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}