{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(null, postings1, secondFlags);\n    if (shouldReuse)\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    else\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2af5333eca069fd35d7e0572227a82d0696ce137"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","sourceNew":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(postings1, secondFlags);\n    if (shouldReuse)\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    else\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n  }\n\n","sourceOld":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(null, postings1, secondFlags);\n    if (shouldReuse)\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    else\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2af5333eca069fd35d7e0572227a82d0696ce137","date":1465574261,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","sourceNew":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(postings1, secondFlags);\n    if (shouldReuse) {\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    } else {\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n    }\n  }\n\n","sourceOld":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(postings1, secondFlags);\n    if (shouldReuse)\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    else\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n  }\n\n","bugFix":["51f5280f31484820499077f41fcdfe92d527d9dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#checkReuse(TermsEnum,int,int,boolean).mjava","sourceNew":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(postings1, secondFlags);\n    if (shouldReuse) {\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    } else {\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n    }\n  }\n\n","sourceOld":"  protected static void checkReuse(TermsEnum termsEnum, int firstFlags, int secondFlags, boolean shouldReuse) throws IOException {\n    PostingsEnum postings1 = termsEnum.postings(null, firstFlags);\n    PostingsEnum postings2 = termsEnum.postings(postings1, secondFlags);\n    if (shouldReuse)\n      assertSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to be reused\", postings1, postings2);\n    else\n      assertNotSame(\"Expected PostingsEnum \" + postings1.getClass().getName() + \" to not be reused\", postings1, postings2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2af5333eca069fd35d7e0572227a82d0696ce137":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0f4464508ee83288c8c4585b533f9faaa93aa314","2af5333eca069fd35d7e0572227a82d0696ce137"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af5333eca069fd35d7e0572227a82d0696ce137"]},"commit2Childs":{"2af5333eca069fd35d7e0572227a82d0696ce137":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["2af5333eca069fd35d7e0572227a82d0696ce137","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}