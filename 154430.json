{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#createActiveReplicaSearcherWatcher(AtomicInteger,AtomicReference[String]).mjava","commits":[{"id":"e87998750c1408b8af3248e55cff794d51d37166","date":1501426220,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#createActiveReplicaSearcherWatcher(AtomicInteger,AtomicReference[String]).mjava","pathOld":"/dev/null","sourceNew":"  private CollectionStateWatcher createActiveReplicaSearcherWatcher(AtomicInteger expectedDocs, AtomicReference<String> failingCoreNodeName) {\n    return new CollectionStateWatcher() {\n      @Override\n      public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        try {\n          String coreNodeName = coreNodeNameRef.get();\n          String coreName = coreNameRef.get();\n          if (coreNodeName == null || coreName == null) return false;\n          Replica replica = collectionState.getReplica(coreNodeName);\n          if (replica == null) return false;\n          log.info(\"Collection state: {}\", collectionState);\n          if (replica.isActive(liveNodes)) {\n            log.info(\"Active replica: {}\", coreNodeName);\n            for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n              JettySolrRunner jettySolrRunner = cluster.getJettySolrRunner(i);\n              log.info(\"Checking node: {}\", jettySolrRunner.getNodeName());\n              if (jettySolrRunner.getNodeName().equals(replica.getNodeName())) {\n                SolrDispatchFilter solrDispatchFilter = jettySolrRunner.getSolrDispatchFilter();\n                try (SolrCore core = solrDispatchFilter.getCores().getCore(coreName)) {\n                  if (core.getSolrConfig().useColdSearcher) {\n                    log.error(\"useColdSearcher is enabled! It should not be enabled for this test!\");\n                    assert false;\n                    return false;\n                  }\n                  log.info(\"Found SolrCore: {}, id: {}\", core.getName(), core);\n                  RefCounted<SolrIndexSearcher> registeredSearcher = core.getRegisteredSearcher();\n                  if (registeredSearcher != null) {\n                    log.error(\"registered searcher not null, maxdocs = {}\", registeredSearcher.get().maxDoc());\n                    if (registeredSearcher.get().maxDoc() != expectedDocs.get()) {\n                      failingCoreNodeName.set(coreNodeName);\n                      registeredSearcher.decref();\n                      return false;\n                    } else {\n                      registeredSearcher.decref();\n                      return false;\n                    }\n                  } else {\n                    log.error(\"registered searcher was null!\");\n                    RefCounted<SolrIndexSearcher> newestSearcher = core.getNewestSearcher(false);\n                    if (newestSearcher != null) {\n                      SolrIndexSearcher searcher = newestSearcher.get();\n                      log.warn(\"newest searcher was: {}\", searcher);\n                      newestSearcher.decref();\n                    } else {\n                      log.error(\"newest searcher was also null!\");\n                    }\n                    // no registered searcher but replica is active!\n                    failingCoreNodeName.set(coreNodeName);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          log.error(\"Unexpected exception in state watcher\", e);\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#createActiveReplicaSearcherWatcher(AtomicInteger,AtomicReference[String]).mjava","pathOld":"/dev/null","sourceNew":"  private CollectionStateWatcher createActiveReplicaSearcherWatcher(AtomicInteger expectedDocs, AtomicReference<String> failingCoreNodeName) {\n    return new CollectionStateWatcher() {\n      @Override\n      public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        try {\n          String coreNodeName = coreNodeNameRef.get();\n          String coreName = coreNameRef.get();\n          if (coreNodeName == null || coreName == null) return false;\n          Replica replica = collectionState.getReplica(coreNodeName);\n          if (replica == null) return false;\n          log.info(\"Collection state: {}\", collectionState);\n          if (replica.isActive(liveNodes)) {\n            log.info(\"Active replica: {}\", coreNodeName);\n            for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n              JettySolrRunner jettySolrRunner = cluster.getJettySolrRunner(i);\n              log.info(\"Checking node: {}\", jettySolrRunner.getNodeName());\n              if (jettySolrRunner.getNodeName().equals(replica.getNodeName())) {\n                SolrDispatchFilter solrDispatchFilter = jettySolrRunner.getSolrDispatchFilter();\n                try (SolrCore core = solrDispatchFilter.getCores().getCore(coreName)) {\n                  if (core.getSolrConfig().useColdSearcher) {\n                    log.error(\"useColdSearcher is enabled! It should not be enabled for this test!\");\n                    assert false;\n                    return false;\n                  }\n                  log.info(\"Found SolrCore: {}, id: {}\", core.getName(), core);\n                  RefCounted<SolrIndexSearcher> registeredSearcher = core.getRegisteredSearcher();\n                  if (registeredSearcher != null) {\n                    log.error(\"registered searcher not null, maxdocs = {}\", registeredSearcher.get().maxDoc());\n                    if (registeredSearcher.get().maxDoc() != expectedDocs.get()) {\n                      failingCoreNodeName.set(coreNodeName);\n                      registeredSearcher.decref();\n                      return false;\n                    } else {\n                      registeredSearcher.decref();\n                      return false;\n                    }\n                  } else {\n                    log.error(\"registered searcher was null!\");\n                    RefCounted<SolrIndexSearcher> newestSearcher = core.getNewestSearcher(false);\n                    if (newestSearcher != null) {\n                      SolrIndexSearcher searcher = newestSearcher.get();\n                      log.warn(\"newest searcher was: {}\", searcher);\n                      newestSearcher.decref();\n                    } else {\n                      log.error(\"newest searcher was also null!\");\n                    }\n                    // no registered searcher but replica is active!\n                    failingCoreNodeName.set(coreNodeName);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          log.error(\"Unexpected exception in state watcher\", e);\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#createActiveReplicaSearcherWatcher(AtomicInteger,AtomicReference[String]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#createActiveReplicaSearcherWatcher(AtomicInteger,AtomicReference[String]).mjava","sourceNew":"  private CollectionStateWatcher createActiveReplicaSearcherWatcher(AtomicInteger expectedDocs, AtomicReference<String> failingCoreNodeName) {\n    return new CollectionStateWatcher() {\n      @Override\n      public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        try {\n          String coreNodeName = coreNodeNameRef.get();\n          String coreName = coreNameRef.get();\n          if (coreNodeName == null || coreName == null) return false;\n          Replica replica = collectionState.getReplica(coreNodeName);\n          if (replica == null) return false;\n          log.info(\"Collection state: {}\", collectionState);\n          if (replica.isActive(liveNodes)) {\n            log.info(\"Active replica: {}\", coreNodeName);\n            for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n              JettySolrRunner jettySolrRunner = cluster.getJettySolrRunner(i);\n              if (log.isInfoEnabled()) {\n                log.info(\"Checking node: {}\", jettySolrRunner.getNodeName());\n              }\n              if (jettySolrRunner.getNodeName().equals(replica.getNodeName())) {\n                SolrDispatchFilter solrDispatchFilter = jettySolrRunner.getSolrDispatchFilter();\n                try (SolrCore core = solrDispatchFilter.getCores().getCore(coreName)) {\n                  if (core.getSolrConfig().useColdSearcher) {\n                    log.error(\"useColdSearcher is enabled! It should not be enabled for this test!\");\n                    assert false;\n                    return false;\n                  }\n                  if (log.isInfoEnabled()) {\n                    log.info(\"Found SolrCore: {}, id: {}\", core.getName(), core);\n                  }\n                  RefCounted<SolrIndexSearcher> registeredSearcher = core.getRegisteredSearcher();\n                  if (registeredSearcher != null) {\n                    log.error(\"registered searcher not null, maxdocs = {}\", registeredSearcher.get().maxDoc());\n                    if (registeredSearcher.get().maxDoc() != expectedDocs.get()) {\n                      failingCoreNodeName.set(coreNodeName);\n                      registeredSearcher.decref();\n                      return false;\n                    } else {\n                      registeredSearcher.decref();\n                      return false;\n                    }\n                  } else {\n                    log.error(\"registered searcher was null!\");\n                    RefCounted<SolrIndexSearcher> newestSearcher = core.getNewestSearcher(false);\n                    if (newestSearcher != null) {\n                      SolrIndexSearcher searcher = newestSearcher.get();\n                      log.warn(\"newest searcher was: {}\", searcher);\n                      newestSearcher.decref();\n                    } else {\n                      log.error(\"newest searcher was also null!\");\n                    }\n                    // no registered searcher but replica is active!\n                    failingCoreNodeName.set(coreNodeName);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          log.error(\"Unexpected exception in state watcher\", e);\n        }\n        return false;\n      }\n    };\n  }\n\n","sourceOld":"  private CollectionStateWatcher createActiveReplicaSearcherWatcher(AtomicInteger expectedDocs, AtomicReference<String> failingCoreNodeName) {\n    return new CollectionStateWatcher() {\n      @Override\n      public boolean onStateChanged(Set<String> liveNodes, DocCollection collectionState) {\n        try {\n          String coreNodeName = coreNodeNameRef.get();\n          String coreName = coreNameRef.get();\n          if (coreNodeName == null || coreName == null) return false;\n          Replica replica = collectionState.getReplica(coreNodeName);\n          if (replica == null) return false;\n          log.info(\"Collection state: {}\", collectionState);\n          if (replica.isActive(liveNodes)) {\n            log.info(\"Active replica: {}\", coreNodeName);\n            for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {\n              JettySolrRunner jettySolrRunner = cluster.getJettySolrRunner(i);\n              log.info(\"Checking node: {}\", jettySolrRunner.getNodeName());\n              if (jettySolrRunner.getNodeName().equals(replica.getNodeName())) {\n                SolrDispatchFilter solrDispatchFilter = jettySolrRunner.getSolrDispatchFilter();\n                try (SolrCore core = solrDispatchFilter.getCores().getCore(coreName)) {\n                  if (core.getSolrConfig().useColdSearcher) {\n                    log.error(\"useColdSearcher is enabled! It should not be enabled for this test!\");\n                    assert false;\n                    return false;\n                  }\n                  log.info(\"Found SolrCore: {}, id: {}\", core.getName(), core);\n                  RefCounted<SolrIndexSearcher> registeredSearcher = core.getRegisteredSearcher();\n                  if (registeredSearcher != null) {\n                    log.error(\"registered searcher not null, maxdocs = {}\", registeredSearcher.get().maxDoc());\n                    if (registeredSearcher.get().maxDoc() != expectedDocs.get()) {\n                      failingCoreNodeName.set(coreNodeName);\n                      registeredSearcher.decref();\n                      return false;\n                    } else {\n                      registeredSearcher.decref();\n                      return false;\n                    }\n                  } else {\n                    log.error(\"registered searcher was null!\");\n                    RefCounted<SolrIndexSearcher> newestSearcher = core.getNewestSearcher(false);\n                    if (newestSearcher != null) {\n                      SolrIndexSearcher searcher = newestSearcher.get();\n                      log.warn(\"newest searcher was: {}\", searcher);\n                      newestSearcher.decref();\n                    } else {\n                      log.error(\"newest searcher was also null!\");\n                    }\n                    // no registered searcher but replica is active!\n                    failingCoreNodeName.set(coreNodeName);\n                  }\n                }\n              }\n            }\n          }\n        } catch (Exception e) {\n          log.error(\"Unexpected exception in state watcher\", e);\n        }\n        return false;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e87998750c1408b8af3248e55cff794d51d37166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e87998750c1408b8af3248e55cff794d51d37166"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"e87998750c1408b8af3248e55cff794d51d37166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e87998750c1408b8af3248e55cff794d51d37166"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e87998750c1408b8af3248e55cff794d51d37166":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}