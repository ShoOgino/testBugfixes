{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","commits":[{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/core/src/test/org/apache/solr/api/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n    pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/aa/bb/{cc}/tt/*\", emptyMap(), \"W\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt\", templateValues));\n    assertEquals(templateValues.get(\"*\"), null);\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello/world/from/solr\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello/world/from/solr\");\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","sourceNew":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n    pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/aa/bb/{cc}/tt/*\", emptyMap(), \"W\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt\", templateValues));\n    assertEquals(templateValues.get(\"*\"), null);\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello/world/from/solr\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello/world/from/solr\");\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    @SuppressWarnings({\"rawtypes\"})\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n    pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/aa/bb/{cc}/tt/*\", emptyMap(), \"W\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt\", templateValues));\n    assertEquals(templateValues.get(\"*\"), null);\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello/world/from/solr\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello/world/from/solr\");\n  }\n\n","sourceOld":"  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n    pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/aa/bb/{cc}/tt/*\", emptyMap(), \"W\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt\", templateValues));\n    assertEquals(templateValues.get(\"*\"), null);\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello/world/from/solr\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello/world/from/solr\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestPathTrie#testPathTrie().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    @SuppressWarnings({\"rawtypes\"})\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n    pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/aa/bb/{cc}/tt/*\", emptyMap(), \"W\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt\", templateValues));\n    assertEquals(templateValues.get(\"*\"), null);\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello/world/from/solr\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello/world/from/solr\");\n\n    pathTrie.insert(\"/1/2/{x}/4\", emptyMap(), \"a\");\n    assertEquals(\"a\", pathTrie.lookup(\"/1/2/3/4\", null));\n    templateValues.clear();\n    assertEquals(\"a\", pathTrie.lookup(\"/1/2/3/4\", templateValues));\n    assertEquals(templateValues.get(\"x\"), \"3\");\n    pathTrie.remove(PathTrie.getPathSegments(\"/1/2/3/4\"));\n    assertEquals(null, pathTrie.lookup(\"/1/2/3/4\", null));\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testPathTrie() {\n    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/\", emptyMap(), \"R\");\n    pathTrie.insert(\"/aa\", emptyMap(), \"d\");\n    pathTrie.insert(\"/aa/bb/{cc}/dd\", emptyMap(), \"a\");\n    pathTrie.insert(\"/$handlerName/{cc}/dd\", singletonMap(HANDLER_NAME, \"test\"), \"test\");\n    pathTrie.insert(\"/aa/bb/{cc}/{xx}\", emptyMap(), \"b\");\n    pathTrie.insert(\"/aa/bb\", emptyMap(), \"c\");\n\n    @SuppressWarnings({\"rawtypes\"})\n    HashMap templateValues = new HashMap<>();\n    assertEquals(\"R\", pathTrie.lookup(\"/\", templateValues, null));\n    assertEquals(\"d\", pathTrie.lookup(\"/aa\", templateValues, null));\n    assertEquals(\"a\", pathTrie.lookup(\"/aa/bb/hello/dd\", templateValues, null));\n    templateValues.clear();\n    assertEquals(\"test\", pathTrie.lookup(\"/test/hello/dd\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    templateValues.clear();\n    assertEquals(\"b\", pathTrie.lookup(\"/aa/bb/hello/world\", templateValues, null));\n    assertEquals(\"hello\", templateValues.get(\"cc\"));\n    assertEquals(\"world\", templateValues.get(\"xx\"));\n    Set<String> subPaths =  new HashSet<>();\n    templateValues.clear();\n    pathTrie.lookup(\"/aa\",templateValues, subPaths);\n    assertEquals(3, subPaths.size());\n\n    pathTrie = new PathTrie<>(ImmutableSet.of(\"_introspect\"));\n    pathTrie.insert(\"/aa/bb/{cc}/tt/*\", emptyMap(), \"W\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello\");\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt\", templateValues));\n    assertEquals(templateValues.get(\"*\"), null);\n\n    templateValues.clear();\n    assertEquals(\"W\" ,pathTrie.lookup(\"/aa/bb/somepart/tt/hello/world/from/solr\", templateValues));\n    assertEquals(templateValues.get(\"*\"), \"/hello/world/from/solr\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"b0b597c65628ca9e73913a07e81691f8229bae35":["28288370235ed02234a64753cdbf0c6ec096304a","6ba409fa7dec3437c7631ef2582c2ad91a8368b1"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["9ba1b632c041956c93c41aa1143d16a567014891","b0b597c65628ca9e73913a07e81691f8229bae35"],"28288370235ed02234a64753cdbf0c6ec096304a":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}