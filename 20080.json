{"path":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContext#SpatialContext(DistanceUnits,DistanceCalculator,Rectangle).mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContext#SpatialContext(DistanceUnits,DistanceCalculator,Rectangle).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/context/SpatialContext#SpatialContext(DistanceUnits,DistanceCalculator,Rectangle).mjava","sourceNew":"  /**\n   *\n   * @param units Required; and establishes geo vs cartesian.\n   * @param calculator Optional; defaults to Haversine or cartesian depending on units.\n   * @param worldBounds Optional; defaults to GEO_WORLDBOUNDS or MAX_WORLDBOUNDS depending on units.\n   */\n  protected SpatialContext(DistanceUnits units, DistanceCalculator calculator, Rectangle worldBounds) {\n    if (units == null)\n      throw new IllegalArgumentException(\"units can't be null\");\n    this.units = units;\n\n    if (calculator == null) {\n      calculator = isGeo()\n          ? new GeodesicSphereDistCalc.Haversine(units.earthRadius())\n          : new CartesianDistCalc();\n    }\n    this.calculator = calculator;\n\n    if (worldBounds == null) {\n      worldBounds = isGeo() ? GEO_WORLDBOUNDS : MAX_WORLDBOUNDS;\n    } else {\n      if (isGeo())\n        assert new RectangleImpl(worldBounds).equals(GEO_WORLDBOUNDS);\n      if (worldBounds.getCrossesDateLine())\n        throw new IllegalArgumentException(\"worldBounds shouldn't cross dateline: \"+worldBounds);\n    }\n    //copy so we can ensure we have the right implementation\n    worldBounds = makeRect(worldBounds.getMinX(),worldBounds.getMaxX(),worldBounds.getMinY(),worldBounds.getMaxY());\n    this.worldBounds = worldBounds;\n    \n    this.maxCircleDistance = isGeo() ? calculator.degreesToDistance(180) : null;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param units Required; and establishes geo vs cartesian.\n   * @param calculator Optional; defaults to Haversine or cartesian depending on units.\n   * @param worldBounds Optional; defaults to GEO_WORLDBOUNDS or MAX_WORLDBOUNDS depending on units.\n   */\n  protected SpatialContext(DistanceUnits units, DistanceCalculator calculator, Rectangle worldBounds) {\n    if (units == null)\n      throw new IllegalArgumentException(\"units can't be null\");\n    this.units = units;\n\n    if (calculator == null) {\n      calculator = isGeo()\n          ? new GeodesicSphereDistCalc.Haversine(units.earthRadius())\n          : new CartesianDistCalc();\n    }\n    this.calculator = calculator;\n\n    if (worldBounds == null) {\n      worldBounds = isGeo() ? GEO_WORLDBOUNDS : MAX_WORLDBOUNDS;\n    } else {\n      if (isGeo())\n        assert new RectangleImpl(worldBounds).equals(GEO_WORLDBOUNDS);\n      if (worldBounds.getCrossesDateLine())\n        throw new IllegalArgumentException(\"worldBounds shouldn't cross dateline: \"+worldBounds);\n    }\n    //copy so we can ensure we have the right implementation\n    worldBounds = makeRect(worldBounds.getMinX(),worldBounds.getMaxX(),worldBounds.getMinY(),worldBounds.getMaxY());\n    this.worldBounds = worldBounds;\n    \n    this.maxCircleDistance = isGeo() ? calculator.degreesToDistance(180) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/context/SpatialContext#SpatialContext(DistanceUnits,DistanceCalculator,Rectangle).mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/context/SpatialContext#SpatialContext(DistanceUnits,DistanceCalculator,Rectangle).mjava","sourceNew":"  /**\n   *\n   * @param units Required; and establishes geo vs cartesian.\n   * @param calculator Optional; defaults to Haversine or cartesian depending on units.\n   * @param worldBounds Optional; defaults to GEO_WORLDBOUNDS or MAX_WORLDBOUNDS depending on units.\n   */\n  protected SpatialContext(DistanceUnits units, DistanceCalculator calculator, Rectangle worldBounds) {\n    if (units == null)\n      throw new IllegalArgumentException(\"units can't be null\");\n    this.units = units;\n\n    if (calculator == null) {\n      calculator = isGeo()\n          ? new GeodesicSphereDistCalc.Haversine(units.earthRadius())\n          : new CartesianDistCalc();\n    }\n    this.calculator = calculator;\n\n    if (worldBounds == null) {\n      worldBounds = isGeo() ? GEO_WORLDBOUNDS : MAX_WORLDBOUNDS;\n    } else {\n      if (isGeo())\n        assert new RectangleImpl(worldBounds).equals(GEO_WORLDBOUNDS);\n      if (worldBounds.getCrossesDateLine())\n        throw new IllegalArgumentException(\"worldBounds shouldn't cross dateline: \"+worldBounds);\n    }\n    //copy so we can ensure we have the right implementation\n    worldBounds = makeRect(worldBounds.getMinX(),worldBounds.getMaxX(),worldBounds.getMinY(),worldBounds.getMaxY());\n    this.worldBounds = worldBounds;\n    \n    this.maxCircleDistance = isGeo() ? calculator.degreesToDistance(180) : null;\n  }\n\n","sourceOld":"  /**\n   *\n   * @param units Required; and establishes geo vs cartesian.\n   * @param calculator Optional; defaults to Haversine or cartesian depending on units.\n   * @param worldBounds Optional; defaults to GEO_WORLDBOUNDS or MAX_WORLDBOUNDS depending on units.\n   */\n  protected SpatialContext(DistanceUnits units, DistanceCalculator calculator, Rectangle worldBounds) {\n    if (units == null)\n      throw new IllegalArgumentException(\"units can't be null\");\n    this.units = units;\n\n    if (calculator == null) {\n      calculator = isGeo()\n          ? new GeodesicSphereDistCalc.Haversine(units.earthRadius())\n          : new CartesianDistCalc();\n    }\n    this.calculator = calculator;\n\n    if (worldBounds == null) {\n      worldBounds = isGeo() ? GEO_WORLDBOUNDS : MAX_WORLDBOUNDS;\n    } else {\n      if (isGeo())\n        assert new RectangleImpl(worldBounds).equals(GEO_WORLDBOUNDS);\n      if (worldBounds.getCrossesDateLine())\n        throw new IllegalArgumentException(\"worldBounds shouldn't cross dateline: \"+worldBounds);\n    }\n    //copy so we can ensure we have the right implementation\n    worldBounds = makeRect(worldBounds.getMinX(),worldBounds.getMaxX(),worldBounds.getMinY(),worldBounds.getMaxY());\n    this.worldBounds = worldBounds;\n    \n    this.maxCircleDistance = isGeo() ? calculator.degreesToDistance(180) : null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}