{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","commits":[{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GroupHead<T> groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GH groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GroupHead<T> groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GH groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    groupSelector.advanceTo(doc);\n    T groupValue = groupSelector.currentValue();\n    if (heads.containsKey(groupValue) == false) {\n      groupValue = groupSelector.copyValue();\n      heads.put(groupValue, newGroupHead(doc, groupValue, context, scorer));\n      return;\n    }\n\n    GroupHead<T> groupHead = heads.get(groupValue);\n    // Ok now we need to check if the current doc is more relevant than top doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GroupHead<T> groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AllGroupHeadsCollector#collect(int).mjava","sourceNew":"  @Override\n  public void collect(int doc) throws IOException {\n    groupSelector.advanceTo(doc);\n    T groupValue = groupSelector.currentValue();\n    if (heads.containsKey(groupValue) == false) {\n      groupValue = groupSelector.copyValue();\n      heads.put(groupValue, newGroupHead(doc, groupValue, context, scorer));\n      return;\n    }\n\n    GroupHead<T> groupHead = heads.get(groupValue);\n    // Ok now we need to check if the current doc is more relevant than top doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","sourceOld":"  @Override\n  public void collect(int doc) throws IOException {\n    retrieveGroupHeadAndAddIfNotExist(doc);\n    if (temporalResult.stop) {\n      return;\n    }\n    GroupHead<T> groupHead = temporalResult.groupHead;\n\n    // Ok now we need to check if the current doc is more relevant then current doc for this group\n    for (int compIDX = 0; ; compIDX++) {\n      final int c = reversed[compIDX] * groupHead.compare(compIDX, doc);\n      if (c < 0) {\n        // Definitely not competitive. So don't even bother to continue\n        return;\n      } else if (c > 0) {\n        // Definitely competitive.\n        break;\n      } else if (compIDX == compIDXEnd) {\n        // Here c=0. If we're at the last comparator, this doc is not\n        // competitive, since docs are visited in doc Id order, which means\n        // this doc cannot compete with any other document in the queue.\n        return;\n      }\n    }\n    groupHead.updateDocHead(doc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["20e94e61fe5291647346b70437617e6b6c370408"],"20e94e61fe5291647346b70437617e6b6c370408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20e94e61fe5291647346b70437617e6b6c370408"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"20e94e61fe5291647346b70437617e6b6c370408":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}