{"path":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"/dev/null","sourceNew":"    /**\r\n     * Find words for a more-like-this query former.\r\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\r\n\t * Each array has 6 elements.\r\n\t * The elements are:\r\n\t * <ol>\r\n\t * <li> The word (String)\r\n\t * <li> The top field that this word comes from (String)\r\n\t * <li> The score for this word (Float)\r\n\t * <li> The IDF value (Float)\r\n\t * <li> The frequency of this word in the index (Integer)\r\n\t * <li> The frequency of this word in the source document (Integer)\t \t \r\n\t * </ol>\r\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\r\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\r\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\r\n     *\r\n     * @param r the reader that has the content of the document\r\n\t * @return the most intresting words in the document ordered by score, with the highest scoring, or best entry, first\r\n\t *\r\n\t * @see #retrieveInterestingTerms\r\n     */\r\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\r\n        Map words = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n\t\t\taddTermFrequencies(r, words, fieldName);\r\n        }\r\n        return createQueue(words);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\r\n     * Find words for a more-like-this query former.\r\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\r\n\t * Each array has 6 elements.\r\n\t * The elements are:\r\n\t * <ol>\r\n\t * <li> The word (String)\r\n\t * <li> The top field that this word comes from (String)\r\n\t * <li> The score for this word (Float)\r\n\t * <li> The IDF value (Float)\r\n\t * <li> The frequency of this word in the index (Integer)\r\n\t * <li> The frequency of this word in the source document (Integer)\t \t \r\n\t * </ol>\r\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\r\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\r\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\r\n     *\r\n     * @param r the reader that has the content of the document\r\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\r\n\t *\r\n\t * @see #retrieveInterestingTerms\r\n     */\r\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\r\n        Map words = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n\t\t\taddTermFrequencies(r, words, fieldName);\r\n        }\r\n        return createQueue(words);\r\n    }\r\n\n","sourceOld":"    /**\r\n     * Find words for a more-like-this query former.\r\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\r\n\t * Each array has 6 elements.\r\n\t * The elements are:\r\n\t * <ol>\r\n\t * <li> The word (String)\r\n\t * <li> The top field that this word comes from (String)\r\n\t * <li> The score for this word (Float)\r\n\t * <li> The IDF value (Float)\r\n\t * <li> The frequency of this word in the index (Integer)\r\n\t * <li> The frequency of this word in the source document (Integer)\t \t \r\n\t * </ol>\r\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\r\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\r\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\r\n     *\r\n     * @param r the reader that has the content of the document\r\n\t * @return the most intresting words in the document ordered by score, with the highest scoring, or best entry, first\r\n\t *\r\n\t * @see #retrieveInterestingTerms\r\n     */\r\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\r\n        Map words = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n\t\t\taddTermFrequencies(r, words, fieldName);\r\n        }\r\n        return createQueue(words);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\r\n     * Find words for a more-like-this query former.\r\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\r\n\t * Each array has 6 elements.\r\n\t * The elements are:\r\n\t * <ol>\r\n\t * <li> The word (String)\r\n\t * <li> The top field that this word comes from (String)\r\n\t * <li> The score for this word (Float)\r\n\t * <li> The IDF value (Float)\r\n\t * <li> The frequency of this word in the index (Integer)\r\n\t * <li> The frequency of this word in the source document (Integer)\t \t \r\n\t * </ol>\r\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\r\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\r\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\r\n     *\r\n     * @param r the reader that has the content of the document\r\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\r\n\t *\r\n\t * @see #retrieveInterestingTerms\r\n     */\r\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\r\n        Map words = new HashMap();\r\n        for (int i = 0; i < fieldNames.length; i++) {\r\n            String fieldName = fieldNames[i];\r\n\t\t\taddTermFrequencies(r, words, fieldName);\r\n        }\r\n        return createQueue(words);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n        Map<String,Int> words = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue retrieveTerms(Reader r) throws IOException {\n        Map words = new HashMap();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveTerms(Reader).mjava","sourceNew":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n        Map<String,Int> words = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","sourceOld":"    /**\n     * Find words for a more-like-this query former.\n\t * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n\t * Each array has 6 elements.\n\t * The elements are:\n\t * <ol>\n\t * <li> The word (String)\n\t * <li> The top field that this word comes from (String)\n\t * <li> The score for this word (Float)\n\t * <li> The IDF value (Float)\n\t * <li> The frequency of this word in the index (Integer)\n\t * <li> The frequency of this word in the source document (Integer)\t \t \n\t * </ol>\n\t * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n\t * This method is exposed so that you can identify the \"interesting words\" in a document.\n\t * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n     *\n     * @param r the reader that has the content of the document\n\t * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n\t *\n\t * @see #retrieveInterestingTerms\n     */\n    public PriorityQueue<Object[]> retrieveTerms(Reader r) throws IOException {\n        Map<String,Int> words = new HashMap<String,Int>();\n        for (int i = 0; i < fieldNames.length; i++) {\n            String fieldName = fieldNames[i];\n\t\t\taddTermFrequencies(r, words, fieldName);\n        }\n        return createQueue(words);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"7e2cb543b41c145f33390f460ee743d6693c9c6c":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["60cdc0e643184821eb066795a8791cd82559f46e"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}