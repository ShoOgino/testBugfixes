{"path":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateRequestedAccount().mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateRequestedAccount().mjava","pathOld":"contrib/gdata-server/src/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateRequestedAccount().mjava","sourceNew":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createRequestedAccount(HttpServletRequest)'\n     */\n    public void testCreateRequestedAccount() throws IOException, ParseException, ServiceException {\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        GDataAccount a = new GDataAccount();\n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndReturn(this.adminService.getAccount(this.accountName),a );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n        assertEquals(a,account);\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        /*\n         *Test for service exception \n         */\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        \n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndDefaultThrow(this.adminService.getAccount(this.accountName),new ServiceException(GDataResponse.BAD_REQUEST) );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n            fail(\" exception expected \");\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        \n        \n        \n        \n    }\n\n","sourceOld":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createRequestedAccount(HttpServletRequest)'\n     */\n    public void testCreateRequestedAccount() throws IOException, ParseException, ServiceException {\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        GDataAccount a = new GDataAccount();\n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndReturn(this.adminService.getAccount(this.accountName),a );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n        assertEquals(a,account);\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        /*\n         *Test for service exception \n         */\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        \n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndDefaultThrow(this.adminService.getAccount(this.accountName),new ServiceException(GDataResponse.BAD_REQUEST) );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n            fail(\" exception expected \");\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        \n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateRequestedAccount().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/servlet/handler/TestAbstractFeedHandler#testCreateRequestedAccount().mjava","sourceNew":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createRequestedAccount(HttpServletRequest)'\n     */\n    public void testCreateRequestedAccount() throws IOException, ParseException, ServiceException {\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        GDataAccount a = new GDataAccount();\n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndReturn(this.adminService.getAccount(this.accountName),a );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n        assertEquals(a,account);\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        /*\n         *Test for service exception \n         */\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        \n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndDefaultThrow(this.adminService.getAccount(this.accountName),new ServiceException(GDataResponse.BAD_REQUEST) );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n            fail(\" exception expected \");\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        \n        \n        \n        \n    }\n\n","sourceOld":"    /*\n     * Test method for 'org.apache.lucene.gdata.servlet.handler.AbstractFeedHandler.createRequestedAccount(HttpServletRequest)'\n     */\n    public void testCreateRequestedAccount() throws IOException, ParseException, ServiceException {\n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        GDataAccount a = new GDataAccount();\n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndReturn(this.adminService.getAccount(this.accountName),a );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n        AbstractFeedHandler handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n        assertEquals(a,account);\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            fail(\"unexpected exception -- \"+e.getMessage());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        /*\n         *Test for service exception \n         */\n        \n        this.requestMockControl.expectAndDefaultReturn(this.mockRequest \n                .getParameter(AbstractFeedHandler.PARAMETER_ACCOUNT), this.accountName);\n        \n        a.setName(\"helloworld\");\n        this.adminServiceMockControl.expectAndDefaultThrow(this.adminService.getAccount(this.accountName),new ServiceException(GDataResponse.BAD_REQUEST) );\n        this.requestMockControl.replay();\n        this.adminServiceMockControl.replay();\n         handler = new InsertFeedHandler();\n        try{\n            \n            GDataAccount account = handler.createRequestedAccount(this.mockRequest);\n       \n            fail(\" exception expected \");\n        \n        }catch (Exception e) {\n            e.printStackTrace();\n            assertEquals(HttpServletResponse.SC_BAD_REQUEST,handler.getErrorCode());\n            \n        }\n        this.requestMockControl.verify();\n        this.requestMockControl.reset();\n        this.adminServiceMockControl.verify();\n        this.adminServiceMockControl.reset();\n        \n        \n        \n        \n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}