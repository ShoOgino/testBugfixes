{"path":"backwards/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8ff728f0ac9112fac26f50ef2a8e7580c2525e6c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","pathOld":"backwards/src/test/org/apache/lucene/document/TestDocument#testRemoveForNewDocument().mjava","sourceNew":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","sourceOld":"  /**\n   * Tests {@link Document#removeField(String)} method for a brand new Document\n   * that has not been indexed yet.\n   *\n   * @throws Exception on error\n   */\n  public void testRemoveForNewDocument() throws Exception\n  {\n    Document doc = makeDocumentWithFields();\n    assertEquals(8, doc.fields.size());\n    doc.removeFields(\"keyword\");\n    assertEquals(6, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");      // removing non-existing fields is siltenlty ignored\n    doc.removeFields(\"keyword\");\t\t// removing a field more than once\n    assertEquals(6, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(5, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"text\");\n    assertEquals(4, doc.fields.size());\n    doc.removeField(\"doesnotexists\");       // removing non-existing fields is siltenlty ignored\n    assertEquals(4, doc.fields.size());\n    doc.removeFields(\"unindexed\");\n    assertEquals(2, doc.fields.size());\n    doc.removeFields(\"unstored\");\n    assertEquals(0, doc.fields.size());\n    doc.removeFields(\"doesnotexists\");\t// removing non-existing fields is siltenlty ignored\n    assertEquals(0, doc.fields.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}