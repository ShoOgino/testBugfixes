{"path":"lucene/contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","pathOld":"contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","sourceNew":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\t\taddCommand(\"analyzer\", ANALYZER, \"Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\t\taddCommand(\"analyzer\", ANALYZER, \"Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a55c46ea262f9033bd9ab60542dea4b38abef33","date":1306109444,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","sourceNew":null,"sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\t\taddCommand(\"analyzer\", ANALYZER, \"Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","sourceNew":null,"sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\t\taddCommand(\"analyzer\", ANALYZER, \"Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/lucli/src/java/lucli/Lucli#Lucli(String[]).mjava","sourceNew":null,"sourceOld":"\t/**\n\t\tMain entry point. The first argument can be a filename with an\n\t\tapplication initialization file.\n\t\t*/\n\n\tpublic Lucli(String[] args) throws IOException {\n\t\tString line;\n\n\t\thistoryFile = System.getProperty(\"user.home\") + File.separator\t+ HISTORYFILE;\n\n\t\t/*\n\t\t * Initialize the list of commands\n\t\t */\n\t\taddCommand(\"info\", INFO, \"Display info about the current Lucene index. Example: info\");\n\t\taddCommand(\"search\", SEARCH, \"Search the current index. Example: search foo\", 1);\n\t\taddCommand(\"count\", COUNT, \"Return the number of hits for a search. Example: count foo\", 1);\n\t\taddCommand(\"optimize\", OPTIMIZE, \"Optimize the current index\");\n\t\taddCommand(\"quit\", QUIT, \"Quit/exit the program\");\n\t\taddCommand(\"help\", HELP, \"Display help about commands\");\n\t\taddCommand(\"terms\", TERMS, \"Show the first \" + MAX_TERMS + \" terms in this index. Supply a field name to only show terms in a specific field. Example: terms\");\n\t\taddCommand(\"index\", INDEX, \"Choose a different lucene index. Example index my_index\", 1);\n\t\taddCommand(\"tokens\", TOKENS, \"Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo\", 1);\n\t\taddCommand(\"explain\", EXPLAIN, \"Explanation that describes how the document scored against query. Example: explain foo\", 1);\n\t\taddCommand(\"analyzer\", ANALYZER, \"Specifies the Analyzer class to be used. Example: analyzer org.apache.lucene.analysis.SimpleAnalyzer\", 1);\n\n\t\t//parse command line arguments\n\t\tparseArgs(args);\n\n\t\tConsoleReader cr = new ConsoleReader();\n\t\t//Readline.readHistoryFile(fullPath);\n\t\tcr.setHistory(new History(new File(historyFile)));\n\t\t\n\t\t// set completer with list of words\n    Completor[] comp = new Completor[]{\n            new SimpleCompletor(getCommandsAsArray()),\n            new FileNameCompletor()\n        };\n    cr.addCompletor (new ArgumentCompletor(comp));\n\n\t\t// main input loop\n\t\tluceneMethods = new LuceneMethods(DEFAULT_INDEX);\n\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tline = cr.readLine(\"lucli> \");\n\t\t\t\tif (line != null) {\n\t\t\t\t\thandleCommand(line, cr);\n\t\t\t\t}\n\t\t\t} catch (java.io.EOFException eof) {\n\t\t\t\tSystem.out.println(\"\");//new line\n\t\t\t\texit();\n\t\t\t} catch (UnsupportedEncodingException enc) {\n\t\t\t\tenc.printStackTrace(System.err);\n\t\t\t} catch (ParseException pe) {\n\t\t\t\tpe.printStackTrace(System.err);\n\t\t\t} catch (IOException ioe) {\n\t\t\t\tioe.printStackTrace(System.err);\n\t\t\t}\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["9454a6510e2db155fb01faa5c049b06ece95fab9","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["9454a6510e2db155fb01faa5c049b06ece95fab9","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a55c46ea262f9033bd9ab60542dea4b38abef33"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":[],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a55c46ea262f9033bd9ab60542dea4b38abef33":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","3a55c46ea262f9033bd9ab60542dea4b38abef33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}