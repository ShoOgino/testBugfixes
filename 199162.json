{"path":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n//        IndexReader open = IndexReader.open(writer, true);\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n//          if (random.nextInt(10) == 0) {\n//            IndexReader reader = open.reopen();\n//            if (reader != open) {\n//              open.close();\n//              open = reader;\n//            }\n//            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n//            \n//          }\n        }\n//        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d45e9e2ad7f57776540627c78f5e22e469ccdc1","date":1302784878,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","sourceOld":"    public void run() {\n      try {\n//        IndexReader open = IndexReader.open(writer, true);\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n//          if (random.nextInt(10) == 0) {\n//            IndexReader reader = open.reopen();\n//            if (reader != open) {\n//              open.close();\n//              open = reader;\n//            }\n//            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n//            \n//          }\n        }\n//        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","bugFix":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(10) == 0) {\n            if (open == null)\n              open = IndexReader.open(writer, true);\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        open.close();\n      } catch (Exception e) {\n        fail(e.getMessage());\n      }\n      \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", Index.NOT_ANALYZED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = IndexReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = open.reopen();\n            if (reader != open) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1","date":1327856616,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = IndexReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        IndexReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            IndexReader reader = IndexReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates.IndexingThread#run().mjava","sourceNew":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    public void run() {\n      try {\n        DirectoryReader open = null;\n        for (int i = 0; i < num; i++) {\n          Document doc = new Document();// docs.nextDoc();\n          doc.add(newField(\"id\", \"test\", StringField.TYPE_UNSTORED));\n          writer.updateDocument(new Term(\"id\", \"test\"), doc);\n          if (random.nextInt(3) == 0) {\n            if (open == null) {\n              open = IndexReader.open(writer, true);\n            }\n            DirectoryReader reader = DirectoryReader.openIfChanged(open);\n            if (reader != null) {\n              open.close();\n              open = reader;\n            }\n            assertEquals(\"iter: \" + i + \" numDocs: \"+ open.numDocs() + \" del: \" + open.numDeletedDocs() + \" max: \" + open.maxDoc(), 1, open.numDocs());\n          }\n        }\n        if (open != null) {\n          open.close();\n        }\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8a8259c922a83abc544609227a60d48e5ee93e7e","539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["7d45e9e2ad7f57776540627c78f5e22e469ccdc1"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["539f3288b4d7cc9e05a96e17d2a4b1d40d5a2be1","5cab9a86bd67202d20b6adc463008c8e982b070a"],"7d45e9e2ad7f57776540627c78f5e22e469ccdc1":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b","a3776dccca01c11e7046323cfad46a3b4a471233"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}