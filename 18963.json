{"path":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), Field.Store.NO, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0f2476332da483dc2ea1fdd80b5968380653166","date":1316180489,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\",\n        \"fvie\"), 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10,\n        ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir, false);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir, false);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir, false);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10, ir, false);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\",\n        \"fvie\"), 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10,\n        ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, \n        new MockAnalyzer(random, MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\",\n        \"fvie\"), 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10,\n        ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/spell/TestDirectSpellChecker#testSimpleExamples().mjava","sourceNew":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\",\n        \"fvie\"), 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10,\n        ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleExamples() throws Exception {\n    DirectSpellChecker spellChecker = new DirectSpellChecker();\n    spellChecker.setMinQueryLength(0);\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        new MockAnalyzer(random(), MockTokenizer.SIMPLE, true));\n\n    for (int i = 0; i < 20; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    IndexReader ir = writer.getReader();\n\n    SuggestWord[] similar = spellChecker.suggestSimilar(new Term(\"numbers\",\n        \"fvie\"), 2, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"five\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    if (similar.length > 0) {\n      assertFalse(similar[0].string.equals(\"five\")); // don't suggest a word for itself\n    }\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fvie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fiv\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fives\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0);\n    assertEquals(\"five\", similar[0].string);\n\n    assertTrue(similar.length > 0);\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"fie\"), 2, ir,\n        SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertEquals(\"five\", similar[0].string);\n\n    // add some more documents\n    for (int i = 1000; i < 1100; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"numbers\", English.intToEnglish(i), TextField.TYPE_UNSTORED));\n      writer.addDocument(doc);\n    }\n\n    ir.close();\n    ir = writer.getReader();\n\n    // look ma, no spellcheck index rebuild\n    similar = spellChecker.suggestSimilar(new Term(\"numbers\", \"tousand\"), 10,\n        ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX);\n    assertTrue(similar.length > 0); \n    assertEquals(\"thousand\", similar[0].string);\n\n    ir.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"b0f2476332da483dc2ea1fdd80b5968380653166":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b0f2476332da483dc2ea1fdd80b5968380653166"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e230a61047bc041516c811baa08a7174d6f8322a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0f2476332da483dc2ea1fdd80b5968380653166":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["b0f2476332da483dc2ea1fdd80b5968380653166"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}