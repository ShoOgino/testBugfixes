{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrServer,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrClient client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrServer client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrServer()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1197d6f54676973038ad402280d80a139dfd27b","date":1455734228,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","sourceNew":"  protected void createCollection(String COLL_NAME, CloudSolrClient client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client, \"conf1\");\n    assertAllActive(COLL_NAME, getCommonCloudSolrClient().getZkStateReader());\n    \n  }\n\n","sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrClient client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client,\"conf1\");\n    waitForRecoveriesToFinish(COLL_NAME, false);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","sourceNew":null,"sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrClient client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client, \"conf1\");\n    assertAllActive(COLL_NAME, getCommonCloudSolrClient().getZkStateReader());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#createCollection(String,CloudSolrClient,int,int).mjava","sourceNew":null,"sourceOld":"  protected void createCollection(String COLL_NAME, CloudSolrClient client,int replicationFactor , int numShards ) throws Exception {\n    int maxShardsPerNode = ((((numShards+1) * replicationFactor) / getCommonCloudSolrClient()\n        .getZkStateReader().getClusterState().getLiveNodes().size())) + 1;\n\n    Map<String, Object> props = makeMap(\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, numShards);\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n    createCollection(collectionInfos, COLL_NAME, props, client, \"conf1\");\n    assertAllActive(COLL_NAME, getCommonCloudSolrClient().getZkStateReader());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b1197d6f54676973038ad402280d80a139dfd27b"],"b1197d6f54676973038ad402280d80a139dfd27b":["bafca15d8e408346a67f4282ad1143b88023893b"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["b1197d6f54676973038ad402280d80a139dfd27b","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a4efd3fffdd7acd625bb88e455c8097e17f75735"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1197d6f54676973038ad402280d80a139dfd27b":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["b1197d6f54676973038ad402280d80a139dfd27b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}