{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","pathOld":"/dev/null","sourceNew":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(new int[] { 1 }, new long[] { 1L });\n\n    // omit freqs\n    doTestImpactSerialization(new int[] { 1 }, new long[] { 42L });\n    // omit freqs with very large norms\n    doTestImpactSerialization(new int[] { 1 }, new long[] { -100L });\n\n    // omit norms\n    doTestImpactSerialization(new int[] { 30 }, new long[] { 1L });\n    // omit norms with large freq\n    doTestImpactSerialization(new int[] { 500 }, new long[] { 1L });\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        new int[] { 1, 3, 7, 15, 20, 28 },\n        new long[] { 7L, 9L, 10L, 11L, 13L, 14L });\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        new int[] { 2, 10, 12, 50, 1000, 1005 },\n        new long[] { 2L, 10L, 50L, -100L, -80L, -3L });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","sourceNew":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 1L)));\n\n    // omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 42L)));\n    // omit freqs with very large norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, -100L)));\n\n    // omit norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(30, 1L)));\n    // omit norms with large freq\n    doTestImpactSerialization(Collections.singletonList(new Impact(500, 1L)));\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(1, 7L),\n            new Impact(3, 9L),\n            new Impact(7, 10L),\n            new Impact(15, 11L),\n            new Impact(20, 13L),\n            new Impact(28, 14L)));\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(2, 2L),\n            new Impact(10, 10L),\n            new Impact(12, 50L),\n            new Impact(50, -100L),\n            new Impact(1000, -80L),\n            new Impact(1005, -3L)));\n  }\n\n","sourceOld":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(new int[] { 1 }, new long[] { 1L });\n\n    // omit freqs\n    doTestImpactSerialization(new int[] { 1 }, new long[] { 42L });\n    // omit freqs with very large norms\n    doTestImpactSerialization(new int[] { 1 }, new long[] { -100L });\n\n    // omit norms\n    doTestImpactSerialization(new int[] { 30 }, new long[] { 1L });\n    // omit norms with large freq\n    doTestImpactSerialization(new int[] { 500 }, new long[] { 1L });\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        new int[] { 1, 3, 7, 15, 20, 28 },\n        new long[] { 7L, 9L, 10L, 11L, 13L, 14L });\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        new int[] { 2, 10, 12, 50, 1000, 1005 },\n        new long[] { 2L, 10L, 50L, -100L, -80L, -3L });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","sourceNew":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 1L)));\n\n    // omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 42L)));\n    // omit freqs with very large norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, -100L)));\n\n    // omit norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(30, 1L)));\n    // omit norms with large freq\n    doTestImpactSerialization(Collections.singletonList(new Impact(500, 1L)));\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(1, 7L),\n            new Impact(3, 9L),\n            new Impact(7, 10L),\n            new Impact(15, 11L),\n            new Impact(20, 13L),\n            new Impact(28, 14L)));\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(2, 2L),\n            new Impact(10, 10L),\n            new Impact(12, 50L),\n            new Impact(50, -100L),\n            new Impact(1000, -80L),\n            new Impact(1005, -3L)));\n  }\n\n","sourceOld":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 1L)));\n\n    // omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 42L)));\n    // omit freqs with very large norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, -100L)));\n\n    // omit norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(30, 1L)));\n    // omit norms with large freq\n    doTestImpactSerialization(Collections.singletonList(new Impact(500, 1L)));\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(1, 7L),\n            new Impact(3, 9L),\n            new Impact(7, 10L),\n            new Impact(15, 11L),\n            new Impact(20, 13L),\n            new Impact(28, 14L)));\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(2, 2L),\n            new Impact(10, 10L),\n            new Impact(12, 50L),\n            new Impact(50, -100L),\n            new Impact(1000, -80L),\n            new Impact(1005, -3L)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene84/TestLucene84PostingsFormat#testImpactSerialization().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat#testImpactSerialization().mjava","sourceNew":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 1L)));\n\n    // omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 42L)));\n    // omit freqs with very large norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, -100L)));\n\n    // omit norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(30, 1L)));\n    // omit norms with large freq\n    doTestImpactSerialization(Collections.singletonList(new Impact(500, 1L)));\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(1, 7L),\n            new Impact(3, 9L),\n            new Impact(7, 10L),\n            new Impact(15, 11L),\n            new Impact(20, 13L),\n            new Impact(28, 14L)));\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(2, 2L),\n            new Impact(10, 10L),\n            new Impact(12, 50L),\n            new Impact(50, -100L),\n            new Impact(1000, -80L),\n            new Impact(1005, -3L)));\n  }\n\n","sourceOld":"  public void testImpactSerialization() throws IOException {\n    // omit norms and omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 1L)));\n\n    // omit freqs\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, 42L)));\n    // omit freqs with very large norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(1, -100L)));\n\n    // omit norms\n    doTestImpactSerialization(Collections.singletonList(new Impact(30, 1L)));\n    // omit norms with large freq\n    doTestImpactSerialization(Collections.singletonList(new Impact(500, 1L)));\n\n    // freqs and norms, basic\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(1, 7L),\n            new Impact(3, 9L),\n            new Impact(7, 10L),\n            new Impact(15, 11L),\n            new Impact(20, 13L),\n            new Impact(28, 14L)));\n\n    // freqs and norms, high values\n    doTestImpactSerialization(\n        Arrays.asList(\n            new Impact(2, 2L),\n            new Impact(10, 10L),\n            new Impact(12, 50L),\n            new Impact(50, -100L),\n            new Impact(1000, -80L),\n            new Impact(1005, -3L)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}