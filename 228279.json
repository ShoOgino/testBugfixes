{"path":"lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans#asTwoPhaseIterator().mjava","commits":[{"id":"80ff50a565777c812ef7871453d715713fb6fb9c","date":1430307731,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpans#asTwoPhaseIterator().mjava","sourceNew":"  /**\n   * Return a {@link TwoPhaseIterator} view of this ConjunctionSpans.\n   */\n  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator res = new TwoPhaseIterator(conjunction) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return twoPhaseCurrentDocMatches();\n      }\n    };\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Return a {@link TwoPhaseIterator} view of this {@link NearSpans}.\n   */\n  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator res = new TwoPhaseIterator(conjunction) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return twoPhaseCurrentDocMatches();\n      }\n    };\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/ConjunctionSpans#asTwoPhaseIterator().mjava","sourceNew":"  /**\n   * Return a {@link TwoPhaseIterator} view of this ConjunctionSpans.\n   */\n  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    float totalMatchCost = 0;\n    // Compute the matchCost as the total matchCost/positionsCostant of the sub spans.\n    for (Spans spans : subSpans) {\n      TwoPhaseIterator tpi = spans.asTwoPhaseIterator();\n      if (tpi != null) {\n        totalMatchCost += tpi.matchCost();\n      } else {\n        totalMatchCost += spans.positionsCost();\n      }\n    }\n    final float matchCost = totalMatchCost;\n\n    return new TwoPhaseIterator(conjunction) {\n      @Override\n      public boolean matches() throws IOException {\n        return twoPhaseCurrentDocMatches();\n      }\n\n      @Override\n      public float matchCost() {\n        return matchCost;\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Return a {@link TwoPhaseIterator} view of this ConjunctionSpans.\n   */\n  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator res = new TwoPhaseIterator(conjunction) {\n\n      @Override\n      public boolean matches() throws IOException {\n        return twoPhaseCurrentDocMatches();\n      }\n    };\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["80ff50a565777c812ef7871453d715713fb6fb9c"],"80ff50a565777c812ef7871453d715713fb6fb9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d277693481ea6007c1d83cd503d0859bb3b64d20"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"80ff50a565777c812ef7871453d715713fb6fb9c":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80ff50a565777c812ef7871453d715713fb6fb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}