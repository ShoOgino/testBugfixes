{"path":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","commits":[{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#close().mjava","sourceNew":"  /**\n   * Close this ReferenceManager to future {@link #acquire() acquiring}. Any\n   * references that were previously {@link #acquire() acquired} won't be\n   * affected, and they should still be {@link #release released} when they are\n   * not needed anymore.\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this SearcherManager to future searching. Any searches still in\n   * process in other threads won't be affected, and they should still call\n   * {@link #release} after they are done.\n   */\n  public synchronized void close() throws IOException {\n    if (currentSearcher != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapSearcher(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","sourceNew":"  /**\n   * Close this ReferenceManager to future {@link #acquire() acquiring}. Any\n   * references that were previously {@link #acquire() acquired} won't be\n   * affected, and they should still be {@link #release released} when they are\n   * not needed anymore.\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this ReferenceManager to future {@link #acquire() acquiring}. Any\n   * references that were previously {@link #acquire() acquired} won't be\n   * affected, and they should still be {@link #release released} when they are\n   * not needed anymore.\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef","date":1351890270,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","sourceNew":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this ReferenceManager to future {@link #acquire() acquiring}. Any\n   * references that were previously {@link #acquire() acquired} won't be\n   * affected, and they should still be {@link #release released} when they are\n   * not needed anymore.\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","sourceNew":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  @Override\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","sourceOld":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","sourceNew":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  @Override\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","sourceOld":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","sourceNew":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  @Override\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","sourceOld":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  @Override\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ReferenceManager#close().mjava","sourceNew":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  @Override\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","sourceOld":"  /**\n    * <p>\n    * Closes this ReferenceManager to prevent future {@link #acquire() acquiring}. A\n    * reference manager should be closed if the reference to the managed resource\n    * should be disposed or the application using the {@link ReferenceManager}\n    * is shutting down. The managed resource might not be released immediately,\n    * if the {@link ReferenceManager} user is holding on to a previously\n    * {@link #acquire() acquired} reference. The resource will be released once\n    * when the last reference is {@link #release(Object) released}. Those\n    * references can still be used as if the manager was still active.\n    * </p>\n    * <p>\n    * Applications should not {@link #acquire() acquire} new references from this\n    * manager once this method has been called. {@link #acquire() Acquiring} a\n    * resource on a closed {@link ReferenceManager} will throw an\n    * {@link AlreadyClosedException}.\n    * </p>\n    * \n    * @throws IOException\n    *           if the underlying reader of the current reference could not be closed\n   */\n  @Override\n  public final synchronized void close() throws IOException {\n    if (current != null) {\n      // make sure we can call this more than once\n      // closeable javadoc says:\n      // if this is already closed then invoking this method has no effect.\n      swapReference(null);\n      afterClose();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef","7530de27b87b961b51f01bd1299b7004d46e8823"],"c380c22ff3b659b2d7412a3335f853d354d17568":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef":["c380c22ff3b659b2d7412a3335f853d354d17568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7530de27b87b961b51f01bd1299b7004d46e8823"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c380c22ff3b659b2d7412a3335f853d354d17568":["b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef"],"b6d8a16d4f11021a8b59ff7a66277da1fda4a3ef":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}