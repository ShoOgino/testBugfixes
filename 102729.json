{"path":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitNorms#testOmitNormsCombos().mjava","sourceNew":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the fully merged equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","sourceOld":"  /**\n   * Tests various combinations of omitNorms=true/false, the field not existing at all,\n   * ensuring that only omitNorms is 'viral'.\n   * Internally checks that MultiNorms.norms() is consistent (returns the same bytes)\n   * as the fully merged equivalent.\n   */\n  public void testOmitNormsCombos() throws IOException {\n    // indexed with norms\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    Field norms = new Field(\"foo\", \"a\", customType);\n    // indexed without norms\n    FieldType customType1 = new FieldType(TextField.TYPE_STORED);\n    customType1.setOmitNorms(true);\n    Field noNorms = new Field(\"foo\", \"a\", customType1);\n    // not indexed, but stored\n    FieldType customType2 = new FieldType();\n    customType2.setStored(true);\n    Field noIndex = new Field(\"foo\", \"a\", customType2);\n    // not indexed but stored, omitNorms is set\n    FieldType customType3 = new FieldType();\n    customType3.setStored(true);\n    customType3.setOmitNorms(true);\n    Field noNormsNoIndex = new Field(\"foo\", \"a\", customType3);\n    // not indexed nor stored (doesnt exist at all, we index a different field instead)\n    Field emptyNorms = new Field(\"bar\", \"a\", customType);\n    \n    assertNotNull(getNorms(\"foo\", norms, norms));\n    assertNull(getNorms(\"foo\", norms, noNorms));\n    assertNotNull(getNorms(\"foo\", norms, noIndex));\n    assertNotNull(getNorms(\"foo\", norms, noNormsNoIndex));\n    assertNotNull(getNorms(\"foo\", norms, emptyNorms));\n    assertNull(getNorms(\"foo\", noNorms, noNorms));\n    assertNull(getNorms(\"foo\", noNorms, noIndex));\n    assertNull(getNorms(\"foo\", noNorms, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNorms, emptyNorms));\n    assertNull(getNorms(\"foo\", noIndex, noIndex));\n    assertNull(getNorms(\"foo\", noIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, noNormsNoIndex));\n    assertNull(getNorms(\"foo\", noNormsNoIndex, emptyNorms));\n    assertNull(getNorms(\"foo\", emptyNorms, emptyNorms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}