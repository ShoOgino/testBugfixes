{"path":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/util/automaton/AutomatonTestUtil#randomAutomaton(Random).mjava","sourceNew":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","sourceOld":"  /** return a random NFA/DFA for testing */\n  public static Automaton randomAutomaton(Random random) {\n    // get two random Automata from regexps\n    Automaton a1 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean())\n      a1 = BasicOperations.complement(a1);\n    \n    Automaton a2 = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton();\n    if (random.nextBoolean()) \n      a2 = BasicOperations.complement(a2);\n    \n    // combine them in random ways\n    switch(random.nextInt(4)) {\n      case 0: return BasicOperations.concatenate(a1, a2);\n      case 1: return BasicOperations.union(a1, a2);\n      case 2: return BasicOperations.intersection(a1, a2);\n      default: return BasicOperations.minus(a1, a2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}