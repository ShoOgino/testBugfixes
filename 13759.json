{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","commits":[{"id":"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","date":1531585717,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX()) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX()) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX()) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","date":1559804329,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","sourceNew":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX() || (node.getX() == leftMost.getX() && node.getY() < leftMost.getY())) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","sourceOld":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX()) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Tessellator#fetchLeftmost(Node).mjava","sourceNew":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX() || (node.getX() == leftMost.getX() && node.getY() < leftMost.getY())) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","sourceOld":"  /** Finds the left-most hole of a polygon ring. **/\n  private static final Node fetchLeftmost(final Node start) {\n    Node node = start;\n    Node leftMost = start;\n    do {\n      // Determine if the current node possesses a lesser X position.\n      if (node.getX() < leftMost.getX() || (node.getX() == leftMost.getX() && node.getY() < leftMost.getY())) {\n        // Maintain a reference to this Node.\n        leftMost = node;\n      }\n      // Progress the search to the next node in the doubly-linked list.\n      node = node.next;\n    } while (node != start);\n\n    // Return the node with the smallest X value.\n    return leftMost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3154b8a89750f531ca89c2fc8d7dc22a6ee5739d"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06fc6aedefe19d7a0b0d82dac953a4f161e16b5c"]},"commit2Childs":{"06fc6aedefe19d7a0b0d82dac953a4f161e16b5c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","3154b8a89750f531ca89c2fc8d7dc22a6ee5739d","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06fc6aedefe19d7a0b0d82dac953a4f161e16b5c","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3154b8a89750f531ca89c2fc8d7dc22a6ee5739d":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}