{"path":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","commits":[{"id":"ee1513e4ee2237693ff50a460d78dff5246c3d34","date":1311330418,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final TermsEnum termsEnum = context.reader.terms(term.field())\n          .getThreadTermsEnum();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader.terms(term.field()).getThreadTermsEnum();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader\";\n        return null;\n      }\n      final TermsEnum termsEnum = context.reader.terms(term.field())\n          .getThreadTermsEnum();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader.terms(term.field()).getThreadTermsEnum();\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader, term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader.terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#getTermsEnum(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","sourceOld":"    /**\n     * Returns a {@link TermsEnum} positioned at this weights Term or null if\n     * the term does not exist in the given context\n     */\n    TermsEnum getTermsEnum(AtomicReaderContext context) throws IOException {\n      final TermState state = termStates.get(context.ord);\n      if (state == null) { // term is not present in that reader\n        assert termNotInReader(context.reader(), term.field(), term.bytes()) : \"no termstate found but term exists in reader term=\" + term;\n        return null;\n      }\n      //System.out.println(\"LD=\" + reader.getLiveDocs() + \" set?=\" + (reader.getLiveDocs() != null ? reader.getLiveDocs().get(0) : \"null\"));\n      final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);\n      termsEnum.seekExact(term.bytes(), state);\n      return termsEnum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["e2297162a22c55456e200caef2cbcb00fe381120"],"e2297162a22c55456e200caef2cbcb00fe381120":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"ee1513e4ee2237693ff50a460d78dff5246c3d34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e2297162a22c55456e200caef2cbcb00fe381120","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e2297162a22c55456e200caef2cbcb00fe381120"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"e2297162a22c55456e200caef2cbcb00fe381120":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"ee1513e4ee2237693ff50a460d78dff5246c3d34":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}