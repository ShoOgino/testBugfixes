{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.indexOptions != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.TermsReader#TermsReader(FieldInfos,IndexInput,int).mjava","sourceNew":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","sourceOld":"    public TermsReader(FieldInfos fieldInfos, IndexInput in, int termCount) throws IOException {\n      this.termCount = termCount;\n      final int fieldNumber = in.readVInt();\n      field = fieldInfos.fieldInfo(fieldNumber);\n      if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n        sumTotalTermFreq = in.readVLong();\n      } else {\n        sumTotalTermFreq = -1;\n      }\n      sumDocFreq = in.readVLong();\n      docCount = in.readVInt();\n      \n      fst = new FST<BytesRef>(in, outputs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}