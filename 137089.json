{"path":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery2#assertFromTestData(int[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery2#assertFromTestData(int[]).mjava","sourceNew":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      SlowFuzzyQuery q = new SlowFuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void assertFromTestData(int codePointTable[]) throws Exception {\n    if (VERBOSE) {\n      System.out.println(\"TEST: codePointTable=\" + codePointTable);\n    }\n    InputStream stream = getClass().getResourceAsStream(\"fuzzyTestData.txt\");\n    BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n    \n    int bits = Integer.parseInt(reader.readLine());\n    int terms = (int) Math.pow(2, bits);\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    Field field = newField(\"field\", \"\", TextField.TYPE_UNSTORED);\n    doc.add(field);\n    \n    for (int i = 0; i < terms; i++) {\n      field.setStringValue(mapInt(codePointTable, i));\n      writer.addDocument(doc);\n    }   \n    \n    IndexReader r = writer.getReader();\n    IndexSearcher searcher = newSearcher(r);\n    if (VERBOSE) {\n      System.out.println(\"TEST: searcher=\" + searcher);\n    }\n    // even though this uses a boost-only rewrite, this test relies upon queryNorm being the default implementation,\n    // otherwise scores are different!\n    searcher.setSimilarity(new DefaultSimilarity());\n    \n    writer.close();\n    String line;\n    while ((line = reader.readLine()) != null) {\n      String params[] = line.split(\",\");\n      String query = mapInt(codePointTable, Integer.parseInt(params[0]));\n      int prefix = Integer.parseInt(params[1]);\n      int pqSize = Integer.parseInt(params[2]);\n      float minScore = Float.parseFloat(params[3]);\n      FuzzyQuery q = new FuzzyQuery(new Term(\"field\", query), minScore, prefix);\n      q.setRewriteMethod(new MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite(pqSize));\n      int expectedResults = Integer.parseInt(reader.readLine());\n      TopDocs docs = searcher.search(q, expectedResults);\n      assertEquals(expectedResults, docs.totalHits);\n      for (int i = 0; i < expectedResults; i++) {\n        String scoreDoc[] = reader.readLine().split(\",\");\n        assertEquals(Integer.parseInt(scoreDoc[0]), docs.scoreDocs[i].doc);\n        assertEquals(Float.parseFloat(scoreDoc[1]), docs.scoreDocs[i].score, epsilon);\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d374631bb6f5665bd5907a6186a9bb283a315f7d"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}