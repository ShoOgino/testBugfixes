{"path":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random()), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random()));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random()), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random()));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random()));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","date":1412231650,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"  /** \n   * This test creates a compound file based on a large number of files of\n   * various length. The file content is generated randomly. The sizes range\n   * from 0 to 1Mb. Some of the sizes are selected to test the buffering\n   * logic in the file reading code. For this the chunk variable is set to\n   * the length of the buffer used internally by the compound file logic.\n   */\n  public void testRandomFiles() throws IOException {\n    // Setup the test segment\n    String segment = \"test\";\n    int chunk = 1024; // internal buffer size used by the stream\n    createRandomFile(dir, segment + \".zero\", 0);\n    createRandomFile(dir, segment + \".one\", 1);\n    createRandomFile(dir, segment + \".ten\", 10);\n    createRandomFile(dir, segment + \".hundred\", 100);\n    createRandomFile(dir, segment + \".big1\", chunk);\n    createRandomFile(dir, segment + \".big2\", chunk - 1);\n    createRandomFile(dir, segment + \".big3\", chunk + 1);\n    createRandomFile(dir, segment + \".big4\", 3 * chunk);\n    createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n    createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n    createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n    \n    // Setup extraneous files\n    createRandomFile(dir, \"onetwothree\", 100);\n    createRandomFile(dir, segment + \".notIn\", 50);\n    createRandomFile(dir, segment + \".notIn2\", 51);\n    \n    byte id[] = StringHelper.randomId();\n    \n    // Now test\n    CompoundFileDirectory csw = new CompoundFileDirectory(id, dir, \"test.cfs\", newIOContext(random()), true);\n    final String data[] = new String[] {\n        \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n        \".big4\", \".big5\", \".big6\", \".big7\"\n    };\n    for (int i=0; i<data.length; i++) {\n      String fileName = segment + data[i];\n      dir.copy(csw, fileName, fileName, newIOContext(random()));\n    }\n    csw.close();\n    \n    CompoundFileDirectory csr = new CompoundFileDirectory(id, dir, \"test.cfs\", newIOContext(random()), false);\n    for (int i=0; i<data.length; i++) {\n      IndexInput check = dir.openInput(segment + data[i], newIOContext(random()));\n      IndexInput test = csr.openInput(segment + data[i], newIOContext(random()));\n      assertSameStreams(data[i], check, test);\n      assertSameSeekBehavior(data[i], check, test);\n      test.close();\n      check.close();\n    }\n    csr.close();\n  }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random()), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random()));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random()), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random()));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random()));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"989d940c4bf402188f4f0ae13736836885227383","date":1412263633,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":null,"sourceOld":"  /** \n   * This test creates a compound file based on a large number of files of\n   * various length. The file content is generated randomly. The sizes range\n   * from 0 to 1Mb. Some of the sizes are selected to test the buffering\n   * logic in the file reading code. For this the chunk variable is set to\n   * the length of the buffer used internally by the compound file logic.\n   */\n  public void testRandomFiles() throws IOException {\n    // Setup the test segment\n    String segment = \"test\";\n    int chunk = 1024; // internal buffer size used by the stream\n    createRandomFile(dir, segment + \".zero\", 0);\n    createRandomFile(dir, segment + \".one\", 1);\n    createRandomFile(dir, segment + \".ten\", 10);\n    createRandomFile(dir, segment + \".hundred\", 100);\n    createRandomFile(dir, segment + \".big1\", chunk);\n    createRandomFile(dir, segment + \".big2\", chunk - 1);\n    createRandomFile(dir, segment + \".big3\", chunk + 1);\n    createRandomFile(dir, segment + \".big4\", 3 * chunk);\n    createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n    createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n    createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n    \n    // Setup extraneous files\n    createRandomFile(dir, \"onetwothree\", 100);\n    createRandomFile(dir, segment + \".notIn\", 50);\n    createRandomFile(dir, segment + \".notIn2\", 51);\n    \n    byte id[] = StringHelper.randomId();\n    \n    // Now test\n    CompoundFileDirectory csw = new CompoundFileDirectory(id, dir, \"test.cfs\", newIOContext(random()), true);\n    final String data[] = new String[] {\n        \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n        \".big4\", \".big5\", \".big6\", \".big7\"\n    };\n    for (int i=0; i<data.length; i++) {\n      String fileName = segment + data[i];\n      dir.copy(csw, fileName, fileName, newIOContext(random()));\n    }\n    csw.close();\n    \n    CompoundFileDirectory csr = new CompoundFileDirectory(id, dir, \"test.cfs\", newIOContext(random()), false);\n    for (int i=0; i<data.length; i++) {\n      IndexInput check = dir.openInput(segment + data[i], newIOContext(random()));\n      IndexInput test = csr.openInput(segment + data[i], newIOContext(random()));\n      assertSameStreams(data[i], check, test);\n      assertSameSeekBehavior(data[i], check, test);\n      test.close();\n      check.close();\n    }\n    csr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":null,"sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileDirectory csw = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random()), true);\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            String fileName = segment + data[i];\n            dir.copy(csw, fileName, fileName, newIOContext(random()));\n        }\n        csw.close();\n\n        CompoundFileDirectory csr = new CompoundFileDirectory(dir, \"test.cfs\", newIOContext(random()), false);\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i], newIOContext(random()));\n            IndexInput test = csr.openInput(segment + data[i], newIOContext(random()));\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"989d940c4bf402188f4f0ae13736836885227383":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","989d940c4bf402188f4f0ae13736836885227383"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"989d940c4bf402188f4f0ae13736836885227383":["9bb9a29a5e71a90295f175df8919802993142c9a"],"f382b2e9f4ca7dbe98e2f15da70983ecfc02b171":["989d940c4bf402188f4f0ae13736836885227383"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f382b2e9f4ca7dbe98e2f15da70983ecfc02b171","9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}