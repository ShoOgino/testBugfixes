{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   * \n   * @param path\n   * @param data\n   * @param createMode\n   * @param watcher\n   * @param failOnExists\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   * \n   * @param path\n   * @param data\n   * @param createMode\n   * @param watcher\n   * @param failOnExists\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   * \n   * @param path\n   * @param data\n   * @param createMode\n   * @param watcher\n   * @param failOnExists\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf6bbe162516990d957fa4184b79d62651e9a053","date":1328025498,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   * \n   * @param path\n   * @param data\n   * @param createMode\n   * @param watcher\n   * @param failOnExists\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          \n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n          \n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   * \n   * @param path\n   * @param data\n   * @param createMode\n   * @param watcher\n   * @param failOnExists\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          \n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n          \n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   * \n   * @param path\n   * @param data\n   * @param createMode\n   * @param watcher\n   * @param failOnExists\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          \n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n          \n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83f985d9828d30801541f1eed26aa3169646baf","date":1409315453,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n          \n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n          \n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n          }\n        } catch (NodeExistsException e) {\n          \n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n          \n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n          \n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n          \n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, failOnExists, retryOnConnLoss, 0);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":["c83f985d9828d30801541f1eed26aa3169646baf","86290366cefc1b9d4eced13b430858c4a4c0421d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bf6bbe162516990d957fa4184b79d62651e9a053","962cd4f5e313777f35da8f521265323e84184929"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, failOnExists, retryOnConnLoss, 0);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * Note: retryOnConnLoss is only respected for the final node - nodes\n   * before that are always retried on connection loss.\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    log.debug(\"makePath: {}\", path);\n    boolean retry = true;\n\n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      final String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher, retryOnConnLoss);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n          if (!retryOnConnLoss) retry = false;\n        }\n        try {\n          if (retry) {\n            final CreateMode finalMode = mode;\n            final byte[] finalBytes = bytes;\n            zkCmdExecutor.retryOperation(new ZkOperation() {\n              @Override\n              public Object execute() throws KeeperException, InterruptedException {\n                keeper.create(currentPath, finalBytes, zkACLProvider.getACLsToAdd(currentPath), finalMode);\n                return null;\n              }\n            });\n          } else {\n            keeper.create(currentPath, bytes, zkACLProvider.getACLsToAdd(currentPath), mode);\n          }\n        } catch (NodeExistsException e) {\n\n          if (!failOnExists) {\n            // TODO: version ? for now, don't worry about race\n            setData(currentPath, data, -1, retryOnConnLoss);\n            // set new watch\n            exists(currentPath, watcher, retryOnConnLoss);\n            return;\n          }\n\n          // ignore unless it's the last node in the path\n          if (i == paths.length - 1) {\n            throw e;\n          }\n        }\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher, retryOnConnLoss);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1, retryOnConnLoss);\n        // set new watch\n        exists(currentPath, watcher, retryOnConnLoss);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bf6bbe162516990d957fa4184b79d62651e9a053"],"962cd4f5e313777f35da8f521265323e84184929":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86290366cefc1b9d4eced13b430858c4a4c0421d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["c83f985d9828d30801541f1eed26aa3169646baf"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bf6bbe162516990d957fa4184b79d62651e9a053":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["86290366cefc1b9d4eced13b430858c4a4c0421d","962cd4f5e313777f35da8f521265323e84184929"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"c83f985d9828d30801541f1eed26aa3169646baf":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c83f985d9828d30801541f1eed26aa3169646baf"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"bf6bbe162516990d957fa4184b79d62651e9a053":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","bf6bbe162516990d957fa4184b79d62651e9a053"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"c83f985d9828d30801541f1eed26aa3169646baf":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}