{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","commits":[{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#topScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                               Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                               Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<TopScorer> prohibited = new ArrayList<TopScorer>();\n      List<TopScorer> optional = new ArrayList<TopScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        TopScorer subScorer = w.topScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.topScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c307d500c43658a83e788edf36022a20fa30c15b","date":1394481241,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                               Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cf15d89c400585df630cb62449fb4d6cb58434f","date":1397643074,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n//          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n          Scorer requiredSubScorer = w.scorer(context, acceptDocs);\n          if ( requiredSubScorer == null ) return null;\n          required.add(requiredSubScorer);\n          \n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, required, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"158bf4b301557fdddcd1f665fa0700b7f19678d0","date":1397643258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<Scorer> required = new ArrayList<Scorer>();\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n//          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n          Scorer requiredSubScorer = w.scorer(context, acceptDocs);\n          if ( requiredSubScorer == null ) return null;\n          required.add(requiredSubScorer);\n          \n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, required, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"476106d7593eb20e5e2ec466d7a271b3f7fe0b4e","date":1397647483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","sourceOld":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      // Check if we can and should return a BooleanScorer\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#bulkScorer(AtomicReaderContext,boolean,Bits).mjava","sourceNew":null,"sourceOld":"    @Override\n    public BulkScorer bulkScorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n                                 Bits acceptDocs) throws IOException {\n\n      if (scoreDocsInOrder || minNrShouldMatch > 1) {\n        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch\n        // but the same is even true of pure conjunctions...\n        return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n      }\n\n      List<BulkScorer> prohibited = new ArrayList<BulkScorer>();\n      List<BulkScorer> optional = new ArrayList<BulkScorer>();\n      Iterator<BooleanClause> cIter = clauses.iterator();\n      for (Weight w  : weights) {\n        BooleanClause c =  cIter.next();\n        BulkScorer subScorer = w.bulkScorer(context, false, acceptDocs);\n        if (subScorer == null) {\n          if (c.isRequired()) {\n            return null;\n          }\n        } else if (c.isRequired()) {\n          // TODO: there are some cases where BooleanScorer\n          // would handle conjunctions faster than\n          // BooleanScorer2...\n          return super.bulkScorer(context, scoreDocsInOrder, acceptDocs);\n        } else if (c.isProhibited()) {\n          prohibited.add(subScorer);\n        } else {\n          optional.add(subScorer);\n        }\n      }\n\n      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c307d500c43658a83e788edf36022a20fa30c15b":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"0cf15d89c400585df630cb62449fb4d6cb58434f":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"476106d7593eb20e5e2ec466d7a271b3f7fe0b4e":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["0cf15d89c400585df630cb62449fb4d6cb58434f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5794e5c995c57444b154b01a9f3c837cd530a77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c307d500c43658a83e788edf36022a20fa30c15b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["476106d7593eb20e5e2ec466d7a271b3f7fe0b4e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"c307d500c43658a83e788edf36022a20fa30c15b":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"0cf15d89c400585df630cb62449fb4d6cb58434f":["158bf4b301557fdddcd1f665fa0700b7f19678d0"],"476106d7593eb20e5e2ec466d7a271b3f7fe0b4e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"158bf4b301557fdddcd1f665fa0700b7f19678d0":["476106d7593eb20e5e2ec466d7a271b3f7fe0b4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5794e5c995c57444b154b01a9f3c837cd530a77","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["c307d500c43658a83e788edf36022a20fa30c15b"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["0cf15d89c400585df630cb62449fb4d6cb58434f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}