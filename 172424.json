{"path":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final InvertedFields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final InvertedFields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term, with control over whether offsets and payloads are\n   *  required.  Some codecs may be able to optimize their\n   *  implementation when offsets and/or payloads are not required.\n   *  This will return null, if either the field or term\n   *  does not exist or positions weren't indexed.  See\n   *  {@link TermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,int)}. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, int flags) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, flags);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termPositionsEnum(Bits,String,BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns {@link DocsAndPositionsEnum} for the specified\n   *  field & term.  This may return null, if either the\n   *  field or term does not exist, or needsOffsets is\n   *  true but offsets were not indexed for this field. */\n  public final DocsAndPositionsEnum termPositionsEnum(Bits liveDocs, String field, BytesRef term, boolean needsOffsets) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docsAndPositions(liveDocs, null, needsOffsets);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}