{"path":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"  private Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec","date":1210002569,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  private Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116df897fd068949084f44e80c7c4a0869652e6","date":1213709875,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n      case EXTERN_STRING >>> 5   : return readExternString(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3","date":1217360461,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n      case EXTERN_STRING >>> 5   : return readExternString(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n      case ITERATOR : return readIterator(dis);\n      case END : return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n      case EXTERN_STRING >>> 5   : return readExternString(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","pathOld":"src/java/org/apache/solr/common/util/NamedListCodec#readVal(FastInputStream).mjava","sourceNew":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n      case EXTERN_STRING >>> 5   : return readExternString(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n      case ITERATOR : return readIterator(dis);\n      case END : return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","sourceOld":"  public Object readVal(FastInputStream dis) throws IOException {\n    tagByte = dis.readByte();\n\n    // if ((tagByte & 0xe0) == 0) {\n    // if top 3 bits are clear, this is a normal tag\n\n    // OK, try type + size in single byte\n    switch(tagByte>>>5) {\n      case STR >>> 5         : return readStr(dis);\n      case SINT >>>5         : return readSmallInt(dis);\n      case SLONG >>>5        : return readSmallLong(dis);\n      case ARR >>> 5         : return readArray(dis);\n      case ORDERED_MAP >>> 5 : return readOrderedMap(dis);\n      case NAMED_LST >>> 5   : return readNamedList(dis);\n      case EXTERN_STRING >>> 5   : return readExternString(dis);\n    }\n\n    switch(tagByte){\n      case NULL : return null;\n      case DATE : return new Date(dis.readLong());\n      case INT : return dis.readInt();\n      case BOOL_TRUE : return Boolean.TRUE;\n      case BOOL_FALSE : return Boolean.FALSE;\n      case FLOAT : return dis.readFloat();\n      case DOUBLE : return dis.readDouble();\n      case LONG : return dis.readLong();\n      case BYTE : return dis.readByte();\n      case SHORT : return dis.readShort();\n      case MAP : return readMap(dis);\n      case SOLRDOC : return readSolrDocument(dis);\n      case SOLRDOCLST : return readSolrDocumentList(dis);\n      case BYTEARR : return readByteArray(dis);\n      case ITERATOR : return readIterator(dis);\n      case END : return END_OBJ;\n    }\n\n    throw new RuntimeException(\"Unknown type \" + tagByte);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3"],"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec":["da0acfe5ceed804451d76c8f887855b3d060e132"],"7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3":["7116df897fd068949084f44e80c7c4a0869652e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7116df897fd068949084f44e80c7c4a0869652e6":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"da0acfe5ceed804451d76c8f887855b3d060e132":["1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec"],"1c67f56bba7a7ad4f04337ab44ae4600d6e1a8ec":["7116df897fd068949084f44e80c7c4a0869652e6"],"7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"7116df897fd068949084f44e80c7c4a0869652e6":["7eb36d46695c2b44e2a4b8f12adfd6d9da4668c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}