{"path":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","commits":[{"id":"2ac3b0ef79dfcf20e23ceb1d0e4165591014307f","date":1329257614,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      try {\n        analyzeText(descriptorPath);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182a24bbb41c826d0ccff1e503b8d57583f7f1fb","date":1329337760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","pathOld":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      try {\n        analyzeText();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      try {\n        analyzeText(descriptorPath);\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aec84e8d8ab512aa75776fc6700cd109cc26b1a1","date":1330179240,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","pathOld":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      initializeIterator();\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      try {\n        analyzeText();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","pathOld":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      initializeIterator();\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      try {\n        analyzeText();\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","pathOld":"modules/analysis/uima/src/java/org/apache/lucene/analysis/uima/UIMAAnnotationsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      initializeIterator();\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (iterator == null) {\n      initializeIterator();\n    }\n    if (iterator.hasNext()) {\n      clearAttributes();\n      AnnotationFS next = iterator.next();\n      termAttr.append(next.getCoveredText());\n      offsetAttr.setOffset(correctOffset(next.getBegin()), correctOffset(next.getEnd()));\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ac3b0ef79dfcf20e23ceb1d0e4165591014307f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aec84e8d8ab512aa75776fc6700cd109cc26b1a1"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["182a24bbb41c826d0ccff1e503b8d57583f7f1fb","aec84e8d8ab512aa75776fc6700cd109cc26b1a1"],"aec84e8d8ab512aa75776fc6700cd109cc26b1a1":["182a24bbb41c826d0ccff1e503b8d57583f7f1fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182a24bbb41c826d0ccff1e503b8d57583f7f1fb":["2ac3b0ef79dfcf20e23ceb1d0e4165591014307f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"2ac3b0ef79dfcf20e23ceb1d0e4165591014307f":["182a24bbb41c826d0ccff1e503b8d57583f7f1fb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"aec84e8d8ab512aa75776fc6700cd109cc26b1a1":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ac3b0ef79dfcf20e23ceb1d0e4165591014307f"],"182a24bbb41c826d0ccff1e503b8d57583f7f1fb":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aec84e8d8ab512aa75776fc6700cd109cc26b1a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}