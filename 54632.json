{"path":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","commits":[{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection).mjava","sourceNew":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          queryToSpanQuery(queryClauses[i].getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      stq.setBoost(query.getBoost());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      queryToSpanQuery(((FilteredQuery) query).getQuery(), payloads);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<Query>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<Query>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n            inorder);\n        sp.setBoost(query.getBoost());\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","sourceOld":"  private void queryToSpanQuery(Query query, Collection payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          queryToSpanQuery(queryClauses[i].getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      stq.setBoost(query.getBoost());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      queryToSpanQuery(((FilteredQuery) query).getQuery(), payloads);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery((Query) iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = (Term[]) termArrays.get(i);\n          List disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (int j = 0; j < termArray.length; ++j) {\n            disjuncts.add(new SpanTermQuery(termArray[j]));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery((SpanQuery[]) disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n            inorder);\n        sp.setBoost(query.getBoost());\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f63c5771d883c45d43e7d5ac11344582906f7d17","date":1256132259,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","sourceNew":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          queryToSpanQuery(queryClauses[i].getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      stq.setBoost(query.getBoost());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      queryToSpanQuery(((FilteredQuery) query).getQuery(), payloads);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings(\"unchecked\") final List<Query>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<Query>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n            inorder);\n        sp.setBoost(query.getBoost());\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","sourceOld":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          queryToSpanQuery(queryClauses[i].getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      stq.setBoost(query.getBoost());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      queryToSpanQuery(((FilteredQuery) query).getQuery(), payloads);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        final List<Query>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<Query>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n            inorder);\n        sp.setBoost(query.getBoost());\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","pathOld":"src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#queryToSpanQuery(Query,Collection[byte[]]).mjava","sourceNew":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          queryToSpanQuery(queryClauses[i].getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      stq.setBoost(query.getBoost());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      queryToSpanQuery(((FilteredQuery) query).getQuery(), payloads);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings(\"unchecked\") final List<Query>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<Query>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n            inorder);\n        sp.setBoost(query.getBoost());\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","sourceOld":"  private void queryToSpanQuery(Query query, Collection<byte[]> payloads)\n      throws IOException {\n    if (query instanceof BooleanQuery) {\n      BooleanClause[] queryClauses = ((BooleanQuery) query).getClauses();\n\n      for (int i = 0; i < queryClauses.length; i++) {\n        if (!queryClauses[i].isProhibited()) {\n          queryToSpanQuery(queryClauses[i].getQuery(), payloads);\n        }\n      }\n\n    } else if (query instanceof PhraseQuery) {\n      Term[] phraseQueryTerms = ((PhraseQuery) query).getTerms();\n      SpanQuery[] clauses = new SpanQuery[phraseQueryTerms.length];\n      for (int i = 0; i < phraseQueryTerms.length; i++) {\n        clauses[i] = new SpanTermQuery(phraseQueryTerms[i]);\n      }\n\n      int slop = ((PhraseQuery) query).getSlop();\n      boolean inorder = false;\n\n      if (slop == 0) {\n        inorder = true;\n      }\n\n      SpanNearQuery sp = new SpanNearQuery(clauses, slop, inorder);\n      sp.setBoost(query.getBoost());\n      getPayloads(payloads, sp);\n    } else if (query instanceof TermQuery) {\n      SpanTermQuery stq = new SpanTermQuery(((TermQuery) query).getTerm());\n      stq.setBoost(query.getBoost());\n      getPayloads(payloads, stq);\n    } else if (query instanceof SpanQuery) {\n      getPayloads(payloads, (SpanQuery) query);\n    } else if (query instanceof FilteredQuery) {\n      queryToSpanQuery(((FilteredQuery) query).getQuery(), payloads);\n    } else if (query instanceof DisjunctionMaxQuery) {\n\n      for (Iterator<Query> iterator = ((DisjunctionMaxQuery) query).iterator(); iterator\n          .hasNext();) {\n        queryToSpanQuery(iterator.next(), payloads);\n      }\n\n    } else if (query instanceof MultiPhraseQuery) {\n      final MultiPhraseQuery mpq = (MultiPhraseQuery) query;\n      final List<Term[]> termArrays = mpq.getTermArrays();\n      final int[] positions = mpq.getPositions();\n      if (positions.length > 0) {\n\n        int maxPosition = positions[positions.length - 1];\n        for (int i = 0; i < positions.length - 1; ++i) {\n          if (positions[i] > maxPosition) {\n            maxPosition = positions[i];\n          }\n        }\n\n        @SuppressWarnings(\"unchecked\") final List<Query>[] disjunctLists = new List[maxPosition + 1];\n        int distinctPositions = 0;\n\n        for (int i = 0; i < termArrays.size(); ++i) {\n          final Term[] termArray = termArrays.get(i);\n          List<Query> disjuncts = disjunctLists[positions[i]];\n          if (disjuncts == null) {\n            disjuncts = (disjunctLists[positions[i]] = new ArrayList<Query>(\n                termArray.length));\n            ++distinctPositions;\n          }\n          for (final Term term : termArray) {\n            disjuncts.add(new SpanTermQuery(term));\n          }\n        }\n\n        int positionGaps = 0;\n        int position = 0;\n        final SpanQuery[] clauses = new SpanQuery[distinctPositions];\n        for (int i = 0; i < disjunctLists.length; ++i) {\n          List<Query> disjuncts = disjunctLists[i];\n          if (disjuncts != null) {\n            clauses[position++] = new SpanOrQuery(disjuncts\n                .toArray(new SpanQuery[disjuncts.size()]));\n          } else {\n            ++positionGaps;\n          }\n        }\n\n        final int slop = mpq.getSlop();\n        final boolean inorder = (slop == 0);\n\n        SpanNearQuery sp = new SpanNearQuery(clauses, slop + positionGaps,\n            inorder);\n        sp.setBoost(query.getBoost());\n        getPayloads(payloads, sp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f63c5771d883c45d43e7d5ac11344582906f7d17":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f63c5771d883c45d43e7d5ac11344582906f7d17"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["f63c5771d883c45d43e7d5ac11344582906f7d17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef82ff03e4016c705811b2658e81471a645c0e49"],"f63c5771d883c45d43e7d5ac11344582906f7d17":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}