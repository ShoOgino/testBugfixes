{"path":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(boolean,String,Query,String,IndexSearcher,ScoreMode,GenericTermsCollector).mjava","commits":[{"id":"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7","date":1495529154,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(boolean,String,Query,String,IndexSearcher,ScoreMode,GenericTermsCollector).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(boolean,String,Query,IndexSearcher,ScoreMode,GenericTermsCollector).mjava","sourceNew":"  private static Query createJoinQuery(boolean multipleValuesPerDocument, String toField, Query fromQuery, String fromField,\n      IndexSearcher fromSearcher, ScoreMode scoreMode, final GenericTermsCollector collector) throws IOException {\n    \n    fromSearcher.search(fromQuery, collector);\n    switch (scoreMode) {\n      case None:\n        return new TermsQuery(toField, collector.getCollectedTerms(), fromField, fromQuery, fromSearcher.getTopReaderContext().id());\n      case Total:\n      case Max:\n      case Min:\n      case Avg:\n        return new TermsIncludingScoreQuery(\n            scoreMode,\n            toField,\n            multipleValuesPerDocument,\n            collector.getCollectedTerms(),\n            collector.getScoresPerTerm(),\n            fromField,\n            fromQuery,\n            fromSearcher.getTopReaderContext().id()\n        );\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"Score mode %s isn't supported.\", scoreMode));\n    }\n  }\n\n","sourceOld":"  private static Query createJoinQuery(boolean multipleValuesPerDocument, String toField, Query fromQuery,\n      IndexSearcher fromSearcher, ScoreMode scoreMode, final GenericTermsCollector collector)\n          throws IOException {\n    \n    fromSearcher.search(fromQuery, collector);\n    \n    switch (scoreMode) {\n      case None:\n        return new TermsQuery(toField, fromQuery, collector.getCollectedTerms());\n      case Total:\n      case Max:\n      case Min:\n      case Avg:\n        return new TermsIncludingScoreQuery(\n            toField,\n            multipleValuesPerDocument,\n            collector.getCollectedTerms(),\n            collector.getScoresPerTerm(),\n            fromQuery\n        );\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"Score mode %s isn't supported.\", scoreMode));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/JoinUtil#createJoinQuery(boolean,String,Query,String,IndexSearcher,ScoreMode,GenericTermsCollector).mjava","pathOld":"/dev/null","sourceNew":"  private static Query createJoinQuery(boolean multipleValuesPerDocument, String toField, Query fromQuery, String fromField,\n      IndexSearcher fromSearcher, ScoreMode scoreMode, final GenericTermsCollector collector) throws IOException {\n    \n    fromSearcher.search(fromQuery, collector);\n    switch (scoreMode) {\n      case None:\n        return new TermsQuery(toField, collector.getCollectedTerms(), fromField, fromQuery, fromSearcher.getTopReaderContext().id());\n      case Total:\n      case Max:\n      case Min:\n      case Avg:\n        return new TermsIncludingScoreQuery(\n            scoreMode,\n            toField,\n            multipleValuesPerDocument,\n            collector.getCollectedTerms(),\n            collector.getScoresPerTerm(),\n            fromField,\n            fromQuery,\n            fromSearcher.getTopReaderContext().id()\n        );\n      default:\n        throw new IllegalArgumentException(String.format(Locale.ROOT, \"Score mode %s isn't supported.\", scoreMode));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","00b0e2840ecbd8db96919cdfcdf2f451aa9ddfe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}