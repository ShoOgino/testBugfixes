{"path":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","commits":[{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1c5c000a4f7db9f84794088342aa428d80dfa37","date":1303079085,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return err(\".\" + namea + \"!=\" + nameb + \" (unordered or missing)\");\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return err(\".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":["0b57d1523f42368168ea21982dd84effd69453d3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return err(\".\" + namea + \"!=\" + nameb + \" (unordered or missing)\");\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return err(\".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"/dev/null","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return err(\".\" + namea + \"!=\" + nameb + \" (unordered or missing)\");\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return err(\".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped);\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return err(\".\" + namea + \"!=\" + nameb + \" (unordered or missing)\");\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return err(\".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped);\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return err(\".\" + namea + \"!=\" + nameb + \" (unordered or missing)\");\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return err(\".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#compare(NamedList,NamedList,int,Map[String,Integer]).mjava","sourceNew":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return \".\" + namea + \"!=\" + nameb + \" (unordered or missing)\";\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return \".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped;\n    }\n\n    return null;\n  }\n\n","sourceOld":"  public static String compare(NamedList a, NamedList b, int flags, Map<String, Integer> handle) {\n    boolean ordered = (flags & UNORDERED) == 0;\n\n    int posa = 0, posb = 0;\n    int aSkipped = 0, bSkipped = 0;\n\n    for (; ;) {\n      if (posa >= a.size() || posb >= b.size()) {\n        break;\n      }\n\n      String namea, nameb;\n      Object vala, valb = null;\n\n      int flagsa, flagsb;\n      for (; ;) {\n        namea = a.getName(posa);\n        vala = a.getVal(posa);\n        posa++;\n        flagsa = flags(handle, namea);\n        if ((flagsa & SKIP) != 0) {\n          aSkipped++;\n          continue;\n        }\n        break;\n      }\n\n      if (!ordered) posb = 0;  // reset if not ordered\n\n      while (posb < b.size()) {\n        nameb = b.getName(posb);\n        valb = b.getVal(posb);\n        posb++;\n        flagsb = flags(handle, nameb);\n        if ((flagsb & SKIP) != 0) {\n          bSkipped++;\n          continue;\n        }\n        if (eq(namea, nameb)) {\n          break;\n        }\n        if (ordered) {\n          return err(\".\" + namea + \"!=\" + nameb + \" (unordered or missing)\");\n        }\n        // if unordered, continue until we find the right field.\n      }\n\n      // ok, namea and nameb should be equal here already.\n      if ((flagsa & SKIPVAL) != 0) continue;  // keys matching is enough\n\n      String cmp = compare(vala, valb, flagsa, handle);\n      if (cmp != null) return \".\" + namea + cmp;\n    }\n\n\n    if (a.size() - aSkipped != b.size() - bSkipped) {\n      return err(\".size()==\" + a.size() + \",\" + b.size() + \"skipped=\" + aSkipped + \",\" + bSkipped);\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d20d5e40789b1c42f4f926e3174b271256c43657"],"c26f00b574427b55127e869b935845554afde1fa":["d1c5c000a4f7db9f84794088342aa428d80dfa37","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d20d5e40789b1c42f4f926e3174b271256c43657":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d1c5c000a4f7db9f84794088342aa428d80dfa37"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["45669a651c970812a680841b97a77cce06af559f","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"d1c5c000a4f7db9f84794088342aa428d80dfa37":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["45669a651c970812a680841b97a77cce06af559f","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"45669a651c970812a680841b97a77cce06af559f":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d1c5c000a4f7db9f84794088342aa428d80dfa37":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}