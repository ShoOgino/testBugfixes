{"path":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","commits":[{"id":"3128e6d07d9fef0d1aa24f58b07133c9293131b2","date":1342190719,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc >= 0 : \"invalid doc id: \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      return nextDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc >= 0 : \"invalid doc id: \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      return nextDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc >= 0 : \"invalid doc id: \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      return nextDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c6861cb029cd251d930aa4c4578c8ca21aa957","date":1364984125,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc >= 0 : \"invalid doc id: \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      return nextDoc;\n    }\n\n","bugFix":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af527d067afb6ca5bd58afc7b9a5fbc0f80979af","date":1366034882,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingLeafReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.AssertingDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() throws IOException {\n      assert state != DocsEnumState.FINISHED : \"nextDoc() called after NO_MORE_DOCS\";\n      int nextDoc = super.nextDoc();\n      assert nextDoc > doc : \"backwards nextDoc from \" + doc + \" to \" + nextDoc;\n      positionCount = 0;\n      if (nextDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        state = DocsEnumState.FINISHED;\n        positionMax = 0;\n      } else {\n        state = DocsEnumState.ITERATING;\n        positionMax = super.freq();\n      }\n      assert super.docID() == nextDoc;\n      return doc = nextDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af527d067afb6ca5bd58afc7b9a5fbc0f80979af":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3128e6d07d9fef0d1aa24f58b07133c9293131b2"],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["af527d067afb6ca5bd58afc7b9a5fbc0f80979af"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3128e6d07d9fef0d1aa24f58b07133c9293131b2":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","07c6861cb029cd251d930aa4c4578c8ca21aa957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}