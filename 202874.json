{"path":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4251b73be9d09c2f0ab17bc3925520f86b9bb4aa","date":1502760208,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n    System.out.println(\"ZK: \" + cluster.getZkServer().getZkAddress());\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 2));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/reporters/solr/SolrCloudReportersTest#testDefaultPlugins().mjava","sourceNew":"  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","sourceOld":"  @Test\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testDefaultPlugins() throws Exception {\n    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream(\"/solr/solr.xml\"), \"UTF-8\");\n    configureCluster(2)\n        .withSolrXml(solrXml).configure();\n    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), \"configsets\", \"minimal\", \"conf\"), \"test\");\n\n    CollectionAdminRequest.createCollection(\"test_collection\", \"test\", 2, 2)\n        .setMaxShardsPerNode(4)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"test_collection\", 2, 4);\n    waitForState(\"Expected test_collection with 2 shards and 2 replicas\", \"test_collection\", clusterShape(2, 4));\n    cluster.getJettySolrRunners().forEach(jetty -> {\n      CoreContainer cc = jetty.getCoreContainer();\n      SolrMetricManager metricManager = cc.getMetricManager();\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(\"solr.cluster\");\n      assertEquals(reporters.toString(), 0, reporters.size());\n      for (String registryName : metricManager.registryNames(\".*\\\\.shard[0-9]\\\\.replica.*\")) {\n        reporters = metricManager.getReporters(registryName);\n        jmxReporter = 0;\n        reporters.forEach((k, v) -> {\n          if (v instanceof SolrJmxReporter) {\n            jmxReporter++;\n          }\n        });\n        assertEquals(reporters.toString(), 0 + jmxReporter, reporters.size());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["4251b73be9d09c2f0ab17bc3925520f86b9bb4aa"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4251b73be9d09c2f0ab17bc3925520f86b9bb4aa"],"4251b73be9d09c2f0ab17bc3925520f86b9bb4aa":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"4251b73be9d09c2f0ab17bc3925520f86b9bb4aa":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"816521ebaad5add9cb96bb88c577394e2938c40b":["4251b73be9d09c2f0ab17bc3925520f86b9bb4aa"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}