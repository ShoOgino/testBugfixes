{"path":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","commits":[{"id":"fa1a999d6674423e5c4ac858b410283f6fe03f20","date":1294868331,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // TODO: wasteful to use whole byte for this (need just a 1 bit);\n    if (termsIn.readByte() == 1) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState _termState, boolean isIndexTerm) throws IOException {\n\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // TODO: wasteful to use whole byte for this (need just a 1 bit);\n    if (termsIn.readByte() == 1) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // TODO: wasteful to use whole byte for this (need just a 1 bit);\n    if (termsIn.readByte() == 1) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"510b1bab59313a7f87bbe48f2e273db6ca9d3f67","date":1295109995,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    \n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // TODO: wasteful to use whole byte for this (need just a 1 bit);\n    if (termsIn.readByte() == 1) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    \n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // TODO: wasteful to use whole byte for this (need just a 1 bit);\n    if (termsIn.readByte() == 1) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    \n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/pulsing/PulsingPostingsReaderImpl#readTerm(IndexInput,FieldInfo,PrefixCodedTermState,boolean).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      //System.out.println(\"  inlined\");\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termState.inlinedBytesReader.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      termState.inlinedBytesReader.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      //System.out.println(\"  not inlined\");\n      termState.postingsSize = -1;\n      // TODO: should we do full copyFrom?  much heavier...?\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.nextTerm(fieldInfo, termState.wrappedTermState);\n      termState.wrappedTermState.termCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, PrefixCodedTermState _termState, boolean isIndexTerm) throws IOException {\n    PulsingTermState termState = (PulsingTermState) _termState;\n\n    termState.pendingIndexTerm |= isIndexTerm;\n\n    // total TF, but in the omitTFAP case its computed based on docFreq.\n    long count = fieldInfo.omitTermFreqAndPositions ? termState.docFreq : termState.totalTermFreq;\n    \n    if (count <= maxPositions) {\n\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = termsIn.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      termsIn.readBytes(termState.postings, 0, termState.postingsSize);\n    } else {\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      wrappedPostingsReader.readTerm(termsIn, fieldInfo, termState.wrappedTermState, termState.pendingIndexTerm);\n      termState.pendingIndexTerm = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"510b1bab59313a7f87bbe48f2e273db6ca9d3f67":["fa1a999d6674423e5c4ac858b410283f6fe03f20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","510b1bab59313a7f87bbe48f2e273db6ca9d3f67"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["510b1bab59313a7f87bbe48f2e273db6ca9d3f67"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fa1a999d6674423e5c4ac858b410283f6fe03f20"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1add9ddc0005b07550d4350720aac22dc9886b3"]},"commit2Childs":{"510b1bab59313a7f87bbe48f2e273db6ca9d3f67":["16843358872ed92ba92888ab99df297550b9a36a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa1a999d6674423e5c4ac858b410283f6fe03f20","868da859b43505d9d2a023bfeae6dd0c795f5295"],"16843358872ed92ba92888ab99df297550b9a36a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"fa1a999d6674423e5c4ac858b410283f6fe03f20":["510b1bab59313a7f87bbe48f2e273db6ca9d3f67","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}