{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","commits":[{"id":"6fa0fff8102ba352427001188190711b7295a1c2","date":1559148790,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","pathOld":"/dev/null","sourceNew":"  protected void constructStreams() throws IOException {\n    try {\n\n      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext);\n\n      ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n      mParams = adjustParams(mParams);\n      mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n      String rows = mParams.get(ROWS);\n      int r = Integer.parseInt(rows);\n      int newRows = r/shardUrls.size();\n      mParams.set(ROWS, Integer.toString(newRows));\n      int seed = new Random().nextInt();\n      mParams.set(SORT, \"random_\"+Integer.toString(seed)+\" asc\");\n\n      int remainder = r - newRows*shardUrls.size();\n      for(String shardUrl : shardUrls) {\n        ModifiableSolrParams useParams = null;\n\n        if(solrStreams.size() == 0 && remainder > 0) {\n          useParams = new ModifiableSolrParams(mParams);\n          useParams.set(ROWS, newRows+remainder);\n        } else {\n          useParams = mParams;\n        }\n\n        SolrStream solrStream = new SolrStream(shardUrl, useParams);\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n        solrStream.setFieldMappings(this.fieldMappings);\n        solrStreams.add(solrStream);\n\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","pathOld":"/dev/null","sourceNew":"  protected void constructStreams() throws IOException {\n    try {\n\n      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext);\n\n      ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n      mParams = adjustParams(mParams);\n      mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n      String rows = mParams.get(ROWS);\n      int r = Integer.parseInt(rows);\n      int newRows = r/shardUrls.size();\n      mParams.set(ROWS, Integer.toString(newRows));\n      int seed = new Random().nextInt();\n      mParams.set(SORT, \"random_\"+Integer.toString(seed)+\" asc\");\n\n      int remainder = r - newRows*shardUrls.size();\n      for(String shardUrl : shardUrls) {\n        ModifiableSolrParams useParams = null;\n\n        if(solrStreams.size() == 0 && remainder > 0) {\n          useParams = new ModifiableSolrParams(mParams);\n          useParams.set(ROWS, newRows+remainder);\n        } else {\n          useParams = mParams;\n        }\n\n        SolrStream solrStream = new SolrStream(shardUrl, useParams);\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n        solrStream.setFieldMappings(this.fieldMappings);\n        solrStreams.add(solrStream);\n\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","sourceNew":"  protected void constructStreams() throws IOException {\n    try {\n      ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n      mParams = adjustParams(mParams);\n      mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n\n      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext, mParams);\n\n      String rows = mParams.get(ROWS);\n      int r = Integer.parseInt(rows);\n      int newRows = r/shardUrls.size();\n      mParams.set(ROWS, Integer.toString(newRows));\n      int seed = new Random().nextInt();\n      mParams.set(SORT, \"random_\"+Integer.toString(seed)+\" asc\");\n\n      int remainder = r - newRows*shardUrls.size();\n      for(String shardUrl : shardUrls) {\n        ModifiableSolrParams useParams = null;\n\n        if(solrStreams.size() == 0 && remainder > 0) {\n          useParams = new ModifiableSolrParams(mParams);\n          useParams.set(ROWS, newRows+remainder);\n        } else {\n          useParams = mParams;\n        }\n\n        SolrStream solrStream = new SolrStream(shardUrl, useParams);\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n        solrStream.setFieldMappings(this.fieldMappings);\n        solrStreams.add(solrStream);\n\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected void constructStreams() throws IOException {\n    try {\n\n      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext);\n\n      ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n      mParams = adjustParams(mParams);\n      mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n      String rows = mParams.get(ROWS);\n      int r = Integer.parseInt(rows);\n      int newRows = r/shardUrls.size();\n      mParams.set(ROWS, Integer.toString(newRows));\n      int seed = new Random().nextInt();\n      mParams.set(SORT, \"random_\"+Integer.toString(seed)+\" asc\");\n\n      int remainder = r - newRows*shardUrls.size();\n      for(String shardUrl : shardUrls) {\n        ModifiableSolrParams useParams = null;\n\n        if(solrStreams.size() == 0 && remainder > 0) {\n          useParams = new ModifiableSolrParams(mParams);\n          useParams.set(ROWS, newRows+remainder);\n        } else {\n          useParams = mParams;\n        }\n\n        SolrStream solrStream = new SolrStream(shardUrl, useParams);\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n        solrStream.setFieldMappings(this.fieldMappings);\n        solrStreams.add(solrStream);\n\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream#constructStreams().mjava","sourceNew":"  protected void constructStreams() throws IOException {\n    try {\n      ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n      mParams = adjustParams(mParams);\n      mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n\n      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext, mParams);\n\n      String rows = mParams.get(ROWS);\n      int r = Integer.parseInt(rows);\n      int newRows = r/shardUrls.size();\n      mParams.set(ROWS, Integer.toString(newRows));\n      int seed = new Random().nextInt();\n      mParams.set(SORT, \"random_\"+Integer.toString(seed)+\" asc\");\n\n      int remainder = r - newRows*shardUrls.size();\n      for(String shardUrl : shardUrls) {\n        ModifiableSolrParams useParams = null;\n\n        if(solrStreams.size() == 0 && remainder > 0) {\n          useParams = new ModifiableSolrParams(mParams);\n          useParams.set(ROWS, newRows+remainder);\n        } else {\n          useParams = mParams;\n        }\n\n        SolrStream solrStream = new SolrStream(shardUrl, useParams);\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n        solrStream.setFieldMappings(this.fieldMappings);\n        solrStreams.add(solrStream);\n\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","sourceOld":"  protected void constructStreams() throws IOException {\n    try {\n\n      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext);\n\n      ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n      mParams = adjustParams(mParams);\n      mParams.set(DISTRIB, \"false\"); // We are the aggregator.\n      String rows = mParams.get(ROWS);\n      int r = Integer.parseInt(rows);\n      int newRows = r/shardUrls.size();\n      mParams.set(ROWS, Integer.toString(newRows));\n      int seed = new Random().nextInt();\n      mParams.set(SORT, \"random_\"+Integer.toString(seed)+\" asc\");\n\n      int remainder = r - newRows*shardUrls.size();\n      for(String shardUrl : shardUrls) {\n        ModifiableSolrParams useParams = null;\n\n        if(solrStreams.size() == 0 && remainder > 0) {\n          useParams = new ModifiableSolrParams(mParams);\n          useParams.set(ROWS, newRows+remainder);\n        } else {\n          useParams = mParams;\n        }\n\n        SolrStream solrStream = new SolrStream(shardUrl, useParams);\n        if(streamContext != null) {\n          solrStream.setStreamContext(streamContext);\n        }\n        solrStream.setFieldMappings(this.fieldMappings);\n        solrStreams.add(solrStream);\n\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":["6fa0fff8102ba352427001188190711b7295a1c2","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"6fa0fff8102ba352427001188190711b7295a1c2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6fa0fff8102ba352427001188190711b7295a1c2"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["6fa0fff8102ba352427001188190711b7295a1c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"]},"commit2Childs":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"6fa0fff8102ba352427001188190711b7295a1c2":["993b0c7dda6341b437fe5685d35c6cc35eaac420","58af973abe9f7c0faa777c1a6285fc7f72c171c5","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6fa0fff8102ba352427001188190711b7295a1c2","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}