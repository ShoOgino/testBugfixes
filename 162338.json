{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#countHit(int).mjava","commits":[{"id":"b9bcfed304f4a24121ffcf592ea90abdda674363","date":1582808749,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#countHit(int).mjava","pathOld":"/dev/null","sourceNew":"    void countHit(int doc) throws IOException {\n      ++totalHits;\n      hitsThresholdChecker.incrementHitCount();\n\n      if (minScoreAcc != null && (totalHits & minScoreAcc.modInterval) == 0) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#countHit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#countHit(int).mjava","sourceNew":"    void countHit(int doc) throws IOException {\n      ++totalHits;\n      hitsThresholdChecker.incrementHitCount();\n\n      if (minScoreAcc != null && (totalHits & minScoreAcc.modInterval) == 0) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n\n      if (filteringLeafComparator != null && queueFull &&\n          hitsThresholdChecker.isThresholdReached() && totalHitsRelation == TotalHits.Relation.EQUAL_TO) {\n        // for the first time queue becomes full and hitsThreshold is reached,\n        // notify leaf comparator that its competitive iterator can be updated\n        filteringLeafComparator.setCanUpdateIterator();\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n\n","sourceOld":"    void countHit(int doc) throws IOException {\n      ++totalHits;\n      hitsThresholdChecker.incrementHitCount();\n\n      if (minScoreAcc != null && (totalHits & minScoreAcc.modInterval) == 0) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#countHit(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#countHit(int).mjava","sourceNew":"    void countHit(int doc) throws IOException {\n      ++totalHits;\n      hitsThresholdChecker.incrementHitCount();\n\n      if (minScoreAcc != null && (totalHits & minScoreAcc.modInterval) == 0) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n      if (scoreMode.isExhaustive() == false && totalHitsRelation == TotalHits.Relation.EQUAL_TO &&\n              hitsThresholdChecker.isThresholdReached()) {\n        // for the first time hitsThreshold is reached, notify comparator about this\n        comparator.setHitsThresholdReached();\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n\n","sourceOld":"    void countHit(int doc) throws IOException {\n      ++totalHits;\n      hitsThresholdChecker.incrementHitCount();\n\n      if (minScoreAcc != null && (totalHits & minScoreAcc.modInterval) == 0) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n\n      if (filteringLeafComparator != null && queueFull &&\n          hitsThresholdChecker.isThresholdReached() && totalHitsRelation == TotalHits.Relation.EQUAL_TO) {\n        // for the first time queue becomes full and hitsThreshold is reached,\n        // notify leaf comparator that its competitive iterator can be updated\n        filteringLeafComparator.setCanUpdateIterator();\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9bcfed304f4a24121ffcf592ea90abdda674363":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["b9bcfed304f4a24121ffcf592ea90abdda674363"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"b9bcfed304f4a24121ffcf592ea90abdda674363":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9bcfed304f4a24121ffcf592ea90abdda674363"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}