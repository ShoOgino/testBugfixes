{"path":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles#testFailIfUnreferencedFiles().mjava","commits":[{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles#testFailIfUnreferencedFiles().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFailIfUnreferencedFiles() {\n    Result r = JUnitCore.runClasses(Nested1.class);\n    Assert.assertEquals(1, r.getFailureCount());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3055db7728116e545cc3701344654fcb32ba7ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3055db7728116e545cc3701344654fcb32ba7ca1","date":1380011280,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles#testFailIfUnreferencedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles#testFailIfUnreferencedFiles().mjava","sourceNew":"  @Test\n  public void testFailIfUnreferencedFiles() {\n    Result r = JUnitCore.runClasses(Nested1.class);\n    RandomizedTest.assumeTrue(\"Ignoring nested test, very likely zombie threads present.\", \n        r.getIgnoreCount() == 0);\n\n    // We are suppressing output anyway so dump the failures.\n    for (Failure f : r.getFailures()) {\n      System.out.println(f.getTrace());\n    }\n\n    Assert.assertEquals(\"Expected exactly one failure.\", \n        1, r.getFailureCount());\n    Assert.assertTrue(\"Expected unreferenced files assertion.\", \n        r.getFailures().get(0).getTrace().contains(\"unreferenced files:\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFailIfUnreferencedFiles() {\n    Result r = JUnitCore.runClasses(Nested1.class);\n    Assert.assertEquals(1, r.getFailureCount());\n  }\n\n","bugFix":["9eae2a56dc810a17cf807d831f720dec931a03de"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/util/TestFailIfUnreferencedFiles#testFailIfUnreferencedFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/junitcompat/TestFailIfUnreferencedFiles#testFailIfUnreferencedFiles().mjava","sourceNew":"  @Test\n  public void testFailIfUnreferencedFiles() {\n    Result r = JUnitCore.runClasses(Nested1.class);\n    RandomizedTest.assumeTrue(\"Ignoring nested test, very likely zombie threads present.\", \n        r.getIgnoreCount() == 0);\n\n    // We are suppressing output anyway so dump the failures.\n    for (Failure f : r.getFailures()) {\n      System.out.println(f.getTrace());\n    }\n\n    Assert.assertEquals(\"Expected exactly one failure.\", \n        1, r.getFailureCount());\n    Assert.assertTrue(\"Expected unreferenced files assertion.\", \n        r.getFailures().get(0).getTrace().contains(\"unreferenced files:\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFailIfUnreferencedFiles() {\n    Result r = JUnitCore.runClasses(Nested1.class);\n    RandomizedTest.assumeTrue(\"Ignoring nested test, very likely zombie threads present.\", \n        r.getIgnoreCount() == 0);\n\n    // We are suppressing output anyway so dump the failures.\n    for (Failure f : r.getFailures()) {\n      System.out.println(f.getTrace());\n    }\n\n    Assert.assertEquals(\"Expected exactly one failure.\", \n        1, r.getFailureCount());\n    Assert.assertTrue(\"Expected unreferenced files assertion.\", \n        r.getFailures().get(0).getTrace().contains(\"unreferenced files:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9eae2a56dc810a17cf807d831f720dec931a03de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["3055db7728116e545cc3701344654fcb32ba7ca1"],"3055db7728116e545cc3701344654fcb32ba7ca1":["9eae2a56dc810a17cf807d831f720dec931a03de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"9eae2a56dc810a17cf807d831f720dec931a03de":["3055db7728116e545cc3701344654fcb32ba7ca1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9eae2a56dc810a17cf807d831f720dec931a03de"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3055db7728116e545cc3701344654fcb32ba7ca1":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}