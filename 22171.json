{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","pathOld":"/dev/null","sourceNew":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","pathOld":"/dev/null","sourceNew":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","pathOld":"/dev/null","sourceNew":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c066767cf781550d3a8f94fff30ed80464bc0ad","date":1481239747,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator() {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator().mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.LongsFromArray#iterator(Bits).mjava","sourceNew":"    public NumericDocValues iterator() {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","sourceOld":"    public NumericDocValues iterator(final Bits docsWithField) {\n      return new NumericDocValues() {\n        int docID = -1;\n\n        @Override\n        public int docID() {\n          return docID;\n        }\n\n        @Override\n        public int nextDoc() {\n          while (true) {\n            docID++;\n            if (docID >= values.size()) {\n              docID = NO_MORE_DOCS;\n              return docID;\n            }\n            if (docsWithField.get(docID)) {\n              return docID;\n            }\n          }\n        }\n\n        @Override\n        public int advance(int target) {\n          if (target < values.size()) {\n            docID = target;\n            if (docsWithField.get(docID)) {\n              return docID;\n            } else{\n              return nextDoc();\n            }\n          } else {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          docID = target;\n          return docsWithField.get(docID);\n        }\n\n        @Override\n        public long cost() {\n          return values.size();\n        }\n\n        @Override\n        public long longValue() {\n          return minValue + values.get(docID);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"9856095f7afb5a607bf5e65077615ed91273508c":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c066767cf781550d3a8f94fff30ed80464bc0ad"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}