{"path":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"/dev/null","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":null,"sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"/dev/null","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db","date":1287581040,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":["d1c2f76fc022aa441f0c9fed67189098870656a7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be8442e5675c8b74c443e2abb4fc210eeb36c20b","date":1295755110,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":["3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version='1.0' encoding='UTF-8'?>\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties);\n    }\n    w.write(\"<cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"</cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1c2f76fc022aa441f0c9fed67189098870656a7","date":1303317531,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":["8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db","3fd7a2b5cb9099ee2b1fbaa61264df2eb5ee3008","09a6cbf552ecdd63b030168a3ab8e13d88aa3db5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\",adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\",\"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\",defaultCoreName);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d2901bdb2faeb41d619d969ce5655adf783746d","date":1309912641,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":null,"sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":null,"sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer).mjava","sourceNew":null,"sourceOld":"  /** Write the cores configuration through a writer.*/\n  void persist(Writer w) throws IOException {\n    w.write(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" ?>\\n\");\n    w.write(\"<solr\");\n    if (this.libDir != null) {\n      writeAttribute(w,\"sharedLib\",libDir);\n    }\n    if(zkHost != null) writeAttribute(w, \"zkHost\", zkHost);\n    writeAttribute(w,\"persistent\",isPersistent());\n    w.write(\">\\n\");\n\n    if (containerProperties != null && !containerProperties.isEmpty())  {\n      writeProperties(w, containerProperties, \"  \");\n    }\n    w.write(\"  <cores\");\n    writeAttribute(w, \"adminPath\",adminPath);\n    if(adminHandler != null) writeAttribute(w, \"adminHandler\", adminHandler);\n    if(shareSchema) writeAttribute(w, \"shareSchema\", \"true\");\n    if(!defaultCoreName.equals(\"\")) writeAttribute(w, \"defaultCoreName\", defaultCoreName);\n    if(host != null) writeAttribute(w, \"host\", host);\n    if(hostPort != null) writeAttribute(w, \"hostPort\", hostPort);\n    if(zkClientTimeout != null) writeAttribute(w, \"zkClientTimeout\", zkClientTimeout);\n    if(hostContext != null) writeAttribute(w, \"hostContext\", hostContext);\n    w.write(\">\\n\");\n\n    synchronized(cores) {\n      for (SolrCore solrCore : cores.values()) {\n        persist(w,solrCore.getCoreDescriptor());\n      }\n    }\n\n    w.write(\"  </cores>\\n\");\n    w.write(\"</solr>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d1c2f76fc022aa441f0c9fed67189098870656a7":["be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","d1c2f76fc022aa441f0c9fed67189098870656a7"],"be8442e5675c8b74c443e2abb4fc210eeb36c20b":["8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db"],"8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","d1c2f76fc022aa441f0c9fed67189098870656a7"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["d1c2f76fc022aa441f0c9fed67189098870656a7","8d2901bdb2faeb41d619d969ce5655adf783746d"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","8d2901bdb2faeb41d619d969ce5655adf783746d"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["be8442e5675c8b74c443e2abb4fc210eeb36c20b","d1c2f76fc022aa441f0c9fed67189098870656a7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["8017ab6544f30f93b106e419e7298173bad77f69","be8442e5675c8b74c443e2abb4fc210eeb36c20b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d2901bdb2faeb41d619d969ce5655adf783746d":["d1c2f76fc022aa441f0c9fed67189098870656a7"],"8017ab6544f30f93b106e419e7298173bad77f69":["1da8d55113b689b06716246649de6f62430f15c0","8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d2901bdb2faeb41d619d969ce5655adf783746d"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d1c2f76fc022aa441f0c9fed67189098870656a7":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","8d2901bdb2faeb41d619d969ce5655adf783746d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"be8442e5675c8b74c443e2abb4fc210eeb36c20b":["d1c2f76fc022aa441f0c9fed67189098870656a7","bb9b72f7c3d7827c64dd4ec580ded81778da361d","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db":["be8442e5675c8b74c443e2abb4fc210eeb36c20b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8017ab6544f30f93b106e419e7298173bad77f69"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"1da8d55113b689b06716246649de6f62430f15c0":["8c99f43af5ceee3bc32feaeeacd0fbf5f29de6db","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","8017ab6544f30f93b106e419e7298173bad77f69"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"8d2901bdb2faeb41d619d969ce5655adf783746d":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8017ab6544f30f93b106e419e7298173bad77f69":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}