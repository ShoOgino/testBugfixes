{"path":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#solr4OldShapeSyntax().mjava","commits":[{"id":"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003","date":1390592414,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#solr4OldShapeSyntax().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void solr4OldShapeSyntax() throws Exception {\n    assumeFalse(\"Mostly just valid for prefix-tree\", fieldName.equals(\"pointvector\"));\n\n    //we also test that the old syntax is parsed in worldBounds in the schema\n    {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      AbstractSpatialFieldType type = (AbstractSpatialFieldType) schema.getFieldTypeByName(\"stqpt_u_oldworldbounds\");\n      SpatialContext ctx = type.getStrategy(\"foo\").getSpatialContext();\n      assertEquals(new RectangleImpl(0, 1000, 0, 1000, ctx), ctx.getWorldBounds());\n    }\n\n    //syntax supported in Solr 4 but not beyond\n    //   See Spatial4j LegacyShapeReadWriterFormat\n    String rect = \"-74.093 41.042 -69.347 44.558\";//minX minY maxX maxY\n    String circ = \"Circle(4.56,1.23 d=0.0710)\";\n\n    //show we can index this (without an error)\n    assertU(adoc(\"id\", \"rect\", fieldName, rect));\n    assertU(adoc(\"id\", \"circ\", fieldName, circ));\n    assertU(commit());\n\n    //only testing no error\n    assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + rect + \")\"));\n    assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + circ + \")\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["17727014530f6432ae28e319a0242b6030d3f18a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17727014530f6432ae28e319a0242b6030d3f18a","date":1416941348,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#solr4OldShapeSyntax().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#solr4OldShapeSyntax().mjava","sourceNew":"  @Test\n  public void solr4OldShapeSyntax() throws Exception {\n    assumeFalse(\"Mostly just valid for prefix-tree\", fieldName.equals(\"pointvector\"));\n\n    //we also test that the old syntax is parsed in worldBounds in the schema\n    {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      AbstractSpatialFieldType type = (AbstractSpatialFieldType) schema.getFieldTypeByName(\"stqpt_u_oldworldbounds\");\n      SpatialContext ctx = type.getStrategy(\"foo\").getSpatialContext();\n      assertEquals(new RectangleImpl(0, 1000, 0, 1000, ctx), ctx.getWorldBounds());\n    }\n\n    //syntax supported in Solr 4 but not beyond\n    //   See Spatial4j LegacyShapeReadWriterFormat\n    String rect = \"-74.093 41.042 -69.347 44.558\";//minX minY maxX maxY\n    String circ = \"Circle(4.56,1.23 d=0.0710)\";\n\n    //show we can index this (without an error)\n    assertU(adoc(\"id\", \"rect\", fieldName, rect));\n    if (!fieldName.equals(\"bbox\")) {\n      assertU(adoc(\"id\", \"circ\", fieldName, circ));\n      assertU(commit());\n    }\n\n    //only testing no error\n    assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + rect + \")\"));\n    if (!fieldName.equals(\"bbox\")) {\n      assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + circ + \")\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void solr4OldShapeSyntax() throws Exception {\n    assumeFalse(\"Mostly just valid for prefix-tree\", fieldName.equals(\"pointvector\"));\n\n    //we also test that the old syntax is parsed in worldBounds in the schema\n    {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      AbstractSpatialFieldType type = (AbstractSpatialFieldType) schema.getFieldTypeByName(\"stqpt_u_oldworldbounds\");\n      SpatialContext ctx = type.getStrategy(\"foo\").getSpatialContext();\n      assertEquals(new RectangleImpl(0, 1000, 0, 1000, ctx), ctx.getWorldBounds());\n    }\n\n    //syntax supported in Solr 4 but not beyond\n    //   See Spatial4j LegacyShapeReadWriterFormat\n    String rect = \"-74.093 41.042 -69.347 44.558\";//minX minY maxX maxY\n    String circ = \"Circle(4.56,1.23 d=0.0710)\";\n\n    //show we can index this (without an error)\n    assertU(adoc(\"id\", \"rect\", fieldName, rect));\n    assertU(adoc(\"id\", \"circ\", fieldName, circ));\n    assertU(commit());\n\n    //only testing no error\n    assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + rect + \")\"));\n    assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + circ + \")\"));\n  }\n\n","bugFix":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862fe0ddb727c373fe11596c809321056ffbc018","date":1421158638,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolr4Spatial#solr4OldShapeSyntax().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void solr4OldShapeSyntax() throws Exception {\n    assumeFalse(\"Mostly just valid for prefix-tree\", fieldName.equals(\"pointvector\"));\n\n    //we also test that the old syntax is parsed in worldBounds in the schema\n    {\n      IndexSchema schema = h.getCore().getLatestSchema();\n      AbstractSpatialFieldType type = (AbstractSpatialFieldType) schema.getFieldTypeByName(\"stqpt_u_oldworldbounds\");\n      SpatialContext ctx = type.getStrategy(\"foo\").getSpatialContext();\n      assertEquals(new RectangleImpl(0, 1000, 0, 1000, ctx), ctx.getWorldBounds());\n    }\n\n    //syntax supported in Solr 4 but not beyond\n    //   See Spatial4j LegacyShapeReadWriterFormat\n    String rect = \"-74.093 41.042 -69.347 44.558\";//minX minY maxX maxY\n    String circ = \"Circle(4.56,1.23 d=0.0710)\";\n\n    //show we can index this (without an error)\n    assertU(adoc(\"id\", \"rect\", fieldName, rect));\n    if (!fieldName.equals(\"bbox\")) {\n      assertU(adoc(\"id\", \"circ\", fieldName, circ));\n      assertU(commit());\n    }\n\n    //only testing no error\n    assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + rect + \")\"));\n    if (!fieldName.equals(\"bbox\")) {\n      assertJQ(req(\"q\", \"{!field f=\" + fieldName + \"}Intersects(\" + circ + \")\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"17727014530f6432ae28e319a0242b6030d3f18a":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"862fe0ddb727c373fe11596c809321056ffbc018":["17727014530f6432ae28e319a0242b6030d3f18a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862fe0ddb727c373fe11596c809321056ffbc018"]},"commit2Childs":{"17727014530f6432ae28e319a0242b6030d3f18a":["862fe0ddb727c373fe11596c809321056ffbc018"],"6bc65e9e84ac8f81b0861d2c7d8f56715adbf003":["17727014530f6432ae28e319a0242b6030d3f18a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6bc65e9e84ac8f81b0861d2c7d8f56715adbf003"],"862fe0ddb727c373fe11596c809321056ffbc018":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}