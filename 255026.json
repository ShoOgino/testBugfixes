{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int,boolean).mjava","commits":[{"id":"ce48e56956c287f0fdb295c2c2f5b7c68ae8798b","date":1138567903,"type":1,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int).mjava","sourceNew":"  private String getLocalizedDate(int year, int month, int day, boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","sourceOld":"  public String getLocalizedDate(int year, int month, int day) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(year, month, day);\n    return df.format(calendar.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6c356d9e7be4ba949f083ecd3fb65231bc64008","date":1251182916,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int,boolean).mjava","sourceNew":"  private String getLocalizedDate(int year, int month, int day, boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = new GregorianCalendar();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","sourceOld":"  private String getLocalizedDate(int year, int month, int day, boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = Calendar.getInstance();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","bugFix":["ce48e56956c287f0fdb295c2c2f5b7c68ae8798b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64a84446b679daf1e25d901bf647686ade7fc1f0","date":1260811919,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int).mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#getLocalizedDate(int,int,int,boolean).mjava","sourceNew":"  private String getLocalizedDate(int year, int month, int day) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = new GregorianCalendar();\n    calendar.clear();\n    calendar.set(year, month, day);\n    calendar.set(Calendar.HOUR_OF_DAY, 23);\n    calendar.set(Calendar.MINUTE, 59);\n    calendar.set(Calendar.SECOND, 59);\n    calendar.set(Calendar.MILLISECOND, 999);\n    return df.format(calendar.getTime());\n  }\n\n","sourceOld":"  private String getLocalizedDate(int year, int month, int day, boolean extendLastDate) {\n    DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);\n    Calendar calendar = new GregorianCalendar();\n    calendar.set(year, month, day);\n    if (extendLastDate) {\n      calendar.set(Calendar.HOUR_OF_DAY, 23);\n      calendar.set(Calendar.MINUTE, 59);\n      calendar.set(Calendar.SECOND, 59);\n      calendar.set(Calendar.MILLISECOND, 999);\n    }\n    return df.format(calendar.getTime());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64a84446b679daf1e25d901bf647686ade7fc1f0":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"ce48e56956c287f0fdb295c2c2f5b7c68ae8798b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["ce48e56956c287f0fdb295c2c2f5b7c68ae8798b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["64a84446b679daf1e25d901bf647686ade7fc1f0"]},"commit2Childs":{"64a84446b679daf1e25d901bf647686ade7fc1f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce48e56956c287f0fdb295c2c2f5b7c68ae8798b":["d6c356d9e7be4ba949f083ecd3fb65231bc64008"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce48e56956c287f0fdb295c2c2f5b7c68ae8798b"],"d6c356d9e7be4ba949f083ecd3fb65231bc64008":["64a84446b679daf1e25d901bf647686ade7fc1f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}