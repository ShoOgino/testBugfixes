{"path":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitIntRange().mjava","commits":[{"id":"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0","date":1234549621,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitIntRange().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x7fffec7f),\n      new Integer(0x80002510),new Integer(0x8000251c),\n      new Integer(0x7fffec8), new Integer(0x7fffecf),\n      new Integer(0x8000250), new Integer(0x8000250),\n      new Integer(0x7fffed),  new Integer(0x7fffef),\n      new Integer(0x800020),  new Integer(0x800024),\n      new Integer(0x7ffff),   new Integer(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x8000040), new Integer(0x8000043),\n      new Integer(0x800000),  new Integer(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      new Integer(0x00),new Integer(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x1)\n    }).iterator());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60dca40a2dbc1f396046c3f87a7a03a995cd157","date":1239722886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitIntRange().mjava","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitIntRange().mjava","sourceNew":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x7fffec7f),\n      new Integer(0x80002510),new Integer(0x8000251c),\n      new Integer(0x7fffec8), new Integer(0x7fffecf),\n      new Integer(0x8000250), new Integer(0x8000250),\n      new Integer(0x7fffed),  new Integer(0x7fffef),\n      new Integer(0x800020),  new Integer(0x800024),\n      new Integer(0x7ffff),   new Integer(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x8000040), new Integer(0x8000043),\n      new Integer(0x800000),  new Integer(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      new Integer(0x00),new Integer(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x8000251c),new Integer(0x8000251c)\n    }).iterator());\n  }\n\n","sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x7fffec7f),\n      new Integer(0x80002510),new Integer(0x8000251c),\n      new Integer(0x7fffec8), new Integer(0x7fffecf),\n      new Integer(0x8000250), new Integer(0x8000250),\n      new Integer(0x7fffed),  new Integer(0x7fffef),\n      new Integer(0x800020),  new Integer(0x800024),\n      new Integer(0x7ffff),   new Integer(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x8000040), new Integer(0x8000043),\n      new Integer(0x800000),  new Integer(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      new Integer(0x00),new Integer(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x1)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7997e20249c312f7420d4e348cde0a36c22d9a8c","date":1245413812,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queries/src/test/org/apache/lucene/search/trie/TestTrieUtils#testSplitIntRange().mjava","sourceNew":null,"sourceOld":"  public void testSplitIntRange() throws Exception {\n    // a hard-coded \"standard\" range\n    assertIntRangeSplit(-5000, 9500, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x7fffec7f),\n      new Integer(0x80002510),new Integer(0x8000251c),\n      new Integer(0x7fffec8), new Integer(0x7fffecf),\n      new Integer(0x8000250), new Integer(0x8000250),\n      new Integer(0x7fffed),  new Integer(0x7fffef),\n      new Integer(0x800020),  new Integer(0x800024),\n      new Integer(0x7ffff),   new Integer(0x80001)\n    }).iterator());\n    \n    // the same with no range splitting\n    assertIntRangeSplit(-5000, 9500, 32, true, Arrays.asList(new Integer[]{\n      new Integer(0x7fffec78),new Integer(0x8000251c)\n    }).iterator());\n    \n    // this tests optimized range splitting, if one of the inner bounds\n    // is also the bound of the next lower precision, it should be used completely\n    assertIntRangeSplit(0, 1024+63, 4, true, Arrays.asList(new Integer[]{\n      new Integer(0x8000040), new Integer(0x8000043),\n      new Integer(0x800000),  new Integer(0x800003)\n    }).iterator());\n    \n    // the full int range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 8, false, Arrays.asList(new Integer[]{\n      new Integer(0x00),new Integer(0xff)\n    }).iterator());\n\n    // the same with precisionStep=4\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0xf)\n    }).iterator());\n\n    // the same with precisionStep=2\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 2, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x3)\n    }).iterator());\n\n    // the same with precisionStep=1\n    assertIntRangeSplit(Integer.MIN_VALUE, Integer.MAX_VALUE, 1, false, Arrays.asList(new Integer[]{\n      new Integer(0x0),new Integer(0x1)\n    }).iterator());\n\n    // a inverse range should produce no sub-ranges\n    assertIntRangeSplit(9500, -5000, 4, false, Collections.EMPTY_LIST.iterator());    \n\n    // a 0-length range should reproduce the range itsself\n    assertIntRangeSplit(9500, 9500, 4, false, Arrays.asList(new Integer[]{\n      new Integer(0x8000251c),new Integer(0x8000251c)\n    }).iterator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["d60dca40a2dbc1f396046c3f87a7a03a995cd157"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d60dca40a2dbc1f396046c3f87a7a03a995cd157":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7997e20249c312f7420d4e348cde0a36c22d9a8c"]},"commit2Childs":{"7997e20249c312f7420d4e348cde0a36c22d9a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0":["d60dca40a2dbc1f396046c3f87a7a03a995cd157"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96d94e1c37d5c77edf3b5a3a8ee525ca98f50d0"],"d60dca40a2dbc1f396046c3f87a7a03a995cd157":["7997e20249c312f7420d4e348cde0a36c22d9a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}