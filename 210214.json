{"path":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) minMergeDocs=config.maxBufferedDocs;\n      if (config.maxMergeDocs != -1) maxMergeDocs=config.maxMergeDocs;\n      if (config.mergeFactor != -1)  mergeFactor =config.mergeFactor;\n      if (config.maxFieldLength != -1)  maxFieldLength =config.maxFieldLength;\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ac78cf31df87846ab011c963f669b453aea30703"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c7040334a42400ca67824559be90a1f2f2c9e63","date":1142276541,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) setMaxBufferedDocs(config.maxBufferedDocs);\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.mergeFactor != -1)  setMergeFactor(config.mergeFactor);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) minMergeDocs=config.maxBufferedDocs;\n      if (config.maxMergeDocs != -1) maxMergeDocs=config.maxMergeDocs;\n      if (config.mergeFactor != -1)  mergeFactor =config.mergeFactor;\n      if (config.maxFieldLength != -1)  maxFieldLength =config.maxFieldLength;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cad60981d89b1586848a954ee0528833641892e","date":1144251904,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) setMaxBufferedDocs(config.maxBufferedDocs);\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.mergeFactor != -1)  setMergeFactor(config.mergeFactor);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.writeLockTimeout != -1) setWriteLockTimeout(config.writeLockTimeout);\n      if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) setMaxBufferedDocs(config.maxBufferedDocs);\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.mergeFactor != -1)  setMergeFactor(config.mergeFactor);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["54dc467860e5a2eadb7148920c6c4f853f4f9ac7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54dc467860e5a2eadb7148920c6c4f853f4f9ac7","date":1177855521,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) setMaxBufferedDocs(config.maxBufferedDocs);\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.mergeFactor != -1)  setMergeFactor(config.mergeFactor);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) setMaxBufferedDocs(config.maxBufferedDocs);\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.mergeFactor != -1)  setMergeFactor(config.mergeFactor);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.writeLockTimeout != -1) setWriteLockTimeout(config.writeLockTimeout);\n      if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":["5cad60981d89b1586848a954ee0528833641892e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"41f7f08509420d59592367d932f6b559dd709ca7","date":1204748616,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getSolrConfig().getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getSolrConfig().getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      if (config.maxBufferedDocs != -1) setMaxBufferedDocs(config.maxBufferedDocs);\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.mergeFactor != -1)  setMergeFactor(config.mergeFactor);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00da8b51bdeae168a5b26ec506db372b219ca7a2","date":1221704186,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getSolrConfig().getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getSolrConfig().getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.fine(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getSolrConfig().getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getSolrConfig().getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72cd269b00ce636078acda21f4b6f920b75dba13","date":1225131045,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getSolrConfig().getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getSolrConfig().getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e0bc4832caa5a5ed426b1618dedc1faf34f43ec","date":1246908697,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c20f931a6f10b153366015604398a5eb7a4d17fa","date":1249615266,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = null;\n\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName, new String[]{}, new Class[]{IndexWriter.class}, new Object[] { this });\n\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName);\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5","date":1252758462,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = null;\n\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName, new String[]{}, new Class[]{IndexWriter.class}, new Object[] { this });\n\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = null;\n\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName, new String[]{}, new Class[]{IndexWriter.class}, new Object[] { this });\n\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"72795268249b27583ff50fb731db1179e4d4bdce","date":1253625275,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      if (config.mergePolicyClassName != null && SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME.equals(config.mergePolicyClassName) == false) {\n        MergePolicy policy = null;\n\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(config.mergePolicyClassName, new String[]{}, new Class[]{IndexWriter.class}, new Object[] { this });\n\n        setMergePolicy(policy);///hmm, is this really the best way to get a newInstance?\n      }\n      if (config.mergeFactor != -1 && getMergePolicy() instanceof LogMergePolicy) {\n        setMergeFactor(config.mergeFactor);\n      }\n      if (config.mergeSchedulerClassname != null && SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME.equals(config.mergeSchedulerClassname) == false) {\n        MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(config.mergeSchedulerClassname);\n        setMergeScheduler(scheduler);\n      }\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac78cf31df87846ab011c963f669b453aea30703","date":1254225665,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n      } else  {\n        log.warn(\"Use of compound file format cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      setUseCompoundFile(config.useCompoundFile);\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":["f2d498db48dab10fe3189cc64a80e334119d9683"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a840f67c1e5ab8c2726ef13ac78b8b196ed7253","date":1255028706,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n      } else  {\n        log.warn(\"Use of compound file format cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n      } else  {\n        log.warn(\"Use of compound file format cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        f.getParentFile().mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2d498db48dab10fe3189cc64a80e334119d9683","date":1258992732,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n      } else  {\n        log.warn(\"Use of compound file format cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":["ac78cf31df87846ab011c963f669b453aea30703"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","pathOld":"src/java/org/apache/solr/update/SolrIndexWriter#init(String,IndexSchema,SolrIndexConfig).mjava","sourceNew":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","sourceOld":"  private void init(String name, IndexSchema schema, SolrIndexConfig config) throws IOException {\n    log.debug(\"Opened Writer \" + name);\n    this.name = name;\n    this.schema = schema;\n    setSimilarity(schema.getSimilarity());\n    // setUseCompoundFile(false);\n\n    if (config != null) {\n      //only set maxBufferedDocs\n      if (config.maxBufferedDocs != -1) {\n        setMaxBufferedDocs(config.maxBufferedDocs);\n      }\n      if (config.ramBufferSizeMB != -1) {\n        setRAMBufferSizeMB(config.ramBufferSizeMB);\n      }\n      if (config.termIndexInterval != -1) {\n        setTermIndexInterval(config.termIndexInterval);\n        \n      }\n      if (config.maxMergeDocs != -1) setMaxMergeDocs(config.maxMergeDocs);\n      if (config.maxFieldLength != -1) setMaxFieldLength(config.maxFieldLength);\n      String className = config.mergePolicyInfo == null ? SolrIndexConfig.DEFAULT_MERGE_POLICY_CLASSNAME: config.mergePolicyInfo.className;\n      MergePolicy  policy = null;\n      try {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className, null, new Class[]{IndexWriter.class}, new Object[] { this });\n      } catch (Exception e) {\n        policy = (MergePolicy) schema.getResourceLoader().newInstance(className);\n      }\n      if(config.mergePolicyInfo != null) SolrPluginUtils.invokeSetters(policy,config.mergePolicyInfo.initArgs);\n      setMergePolicy(policy);\n\n      if (getMergePolicy() instanceof LogMergePolicy) {\n        setUseCompoundFile(config.useCompoundFile);\n        if (config.mergeFactor != -1) { setMergeFactor(config.mergeFactor); }\n      } else  {\n        log.warn(\"Use of compound file format or mergefactor cannot be configured if merge policy is not an instance \" +\n                \"of LogMergePolicy. The configured policy's defaults will be used.\");\n      }\n\n      className = config.mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME: config.mergeSchedulerInfo.className;\n      MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(className);\n      if(config.mergeSchedulerInfo != null) SolrPluginUtils.invokeSetters(scheduler,config.mergeSchedulerInfo.initArgs);\n      setMergeScheduler(scheduler);\n\n      String infoStreamFile = config.infoStreamFile;\n      if (infoStreamFile != null) {\n        File f = new File(infoStreamFile);\n        File parent = f.getParentFile();\n        if (parent != null) parent.mkdirs();\n        FileOutputStream fos = new FileOutputStream(f, true);\n        infoStream = new TimeLoggingPrintStream(fos, true);\n        setInfoStream(infoStream);\n      }\n      //if (config.commitLockTimeout != -1) setWriteLockTimeout(config.commitLockTimeout);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41f7f08509420d59592367d932f6b559dd709ca7":["54dc467860e5a2eadb7148920c6c4f853f4f9ac7"],"72795268249b27583ff50fb731db1179e4d4bdce":["aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c7040334a42400ca67824559be90a1f2f2c9e63":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"ac78cf31df87846ab011c963f669b453aea30703":["72795268249b27583ff50fb731db1179e4d4bdce"],"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["41f7f08509420d59592367d932f6b559dd709ca7"],"5cad60981d89b1586848a954ee0528833641892e":["7c7040334a42400ca67824559be90a1f2f2c9e63"],"c20f931a6f10b153366015604398a5eb7a4d17fa":["2e0bc4832caa5a5ed426b1618dedc1faf34f43ec"],"f2d498db48dab10fe3189cc64a80e334119d9683":["1a840f67c1e5ab8c2726ef13ac78b8b196ed7253"],"72cd269b00ce636078acda21f4b6f920b75dba13":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["f2d498db48dab10fe3189cc64a80e334119d9683"],"2e0bc4832caa5a5ed426b1618dedc1faf34f43ec":["72cd269b00ce636078acda21f4b6f920b75dba13"],"1a840f67c1e5ab8c2726ef13ac78b8b196ed7253":["ac78cf31df87846ab011c963f669b453aea30703"],"54dc467860e5a2eadb7148920c6c4f853f4f9ac7":["5cad60981d89b1586848a954ee0528833641892e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"41f7f08509420d59592367d932f6b559dd709ca7":["00da8b51bdeae168a5b26ec506db372b219ca7a2"],"72795268249b27583ff50fb731db1179e4d4bdce":["ac78cf31df87846ab011c963f669b453aea30703"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"7c7040334a42400ca67824559be90a1f2f2c9e63":["5cad60981d89b1586848a954ee0528833641892e"],"ac78cf31df87846ab011c963f669b453aea30703":["1a840f67c1e5ab8c2726ef13ac78b8b196ed7253"],"aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5":["72795268249b27583ff50fb731db1179e4d4bdce"],"00da8b51bdeae168a5b26ec506db372b219ca7a2":["72cd269b00ce636078acda21f4b6f920b75dba13"],"5cad60981d89b1586848a954ee0528833641892e":["54dc467860e5a2eadb7148920c6c4f853f4f9ac7"],"c20f931a6f10b153366015604398a5eb7a4d17fa":["aacbd58e1cc0b6a0cd2e2b615e9775fe114a93d5"],"f2d498db48dab10fe3189cc64a80e334119d9683":["ad94625fb8d088209f46650c8097196fec67f00c"],"72cd269b00ce636078acda21f4b6f920b75dba13":["2e0bc4832caa5a5ed426b1618dedc1faf34f43ec"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["7c7040334a42400ca67824559be90a1f2f2c9e63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e0bc4832caa5a5ed426b1618dedc1faf34f43ec":["c20f931a6f10b153366015604398a5eb7a4d17fa"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"54dc467860e5a2eadb7148920c6c4f853f4f9ac7":["41f7f08509420d59592367d932f6b559dd709ca7"],"1a840f67c1e5ab8c2726ef13ac78b8b196ed7253":["f2d498db48dab10fe3189cc64a80e334119d9683"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}