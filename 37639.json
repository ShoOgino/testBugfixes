{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","commits":[{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,Type).mjava","sourceNew":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link Type}.\n   * Codecs that use different implementations for a certain {@link Type} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link Type} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      Type type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41e5bbad683f7546e96f08ffe8bc50cf447f2586","date":1307113213,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link DocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link DocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link DocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected DocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    // nocommit this needs an IOContext too\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7","date":1309190785,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type, IOContext context) throws IOException {\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false, context);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount, context);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount, context);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, context);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, context);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, context);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, context);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, context);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, context);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    // nocommit this needs an IOContext too\n    switch (type) {\n    case INTS:\n      return Ints.getValues(dir, id, false);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @param sortComparator byte comparator used by sorted variants\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type, Comparator<BytesRef> sortComparator) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, sortComparator);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, sortComparator);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, sortComparator);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, sortComparator);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, sortComparator);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, sortComparator);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType,Comparator[BytesRef]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultDocValuesProducer#loadDocValues(int,Directory,String,ValueType).mjava","sourceNew":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @param sortComparator byte comparator used by sorted variants\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type, Comparator<BytesRef> sortComparator) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount, sortComparator);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount, sortComparator);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount, sortComparator);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount, sortComparator);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount, sortComparator);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount, sortComparator);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","sourceOld":"  /**\n   * Loads a {@link IndexDocValues} instance depending on the given {@link ValueType}.\n   * Codecs that use different implementations for a certain {@link ValueType} can\n   * simply override this method and return their custom implementations.\n   * \n   * @param docCount\n   *          number of documents in the segment\n   * @param dir\n   *          the {@link Directory} to load the {@link IndexDocValues} from\n   * @param id\n   *          the unique file ID within the segment\n   * @param type\n   *          the type to load\n   * @return a {@link IndexDocValues} instance for the given type\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   * @throws IllegalArgumentException\n   *           if the given {@link ValueType} is not supported\n   */\n  protected IndexDocValues loadDocValues(int docCount, Directory dir, String id,\n      ValueType type) throws IOException {\n    switch (type) {\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case FIXED_INTS_8:\n    case VAR_INTS:\n      return Ints.getValues(dir, id, docCount);\n    case FLOAT_32:\n      return Floats.getValues(dir, id, docCount);\n    case FLOAT_64:\n      return Floats.getValues(dir, id, docCount);\n    case BYTES_FIXED_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, true, docCount);\n    case BYTES_FIXED_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, true, docCount);\n    case BYTES_FIXED_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, true, docCount);\n    case BYTES_VAR_STRAIGHT:\n      return Bytes.getValues(dir, id, Bytes.Mode.STRAIGHT, false, docCount);\n    case BYTES_VAR_DEREF:\n      return Bytes.getValues(dir, id, Bytes.Mode.DEREF, false, docCount);\n    case BYTES_VAR_SORTED:\n      return Bytes.getValues(dir, id, Bytes.Mode.SORTED, false, docCount);\n    default:\n      throw new IllegalStateException(\"unrecognized index values mode \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"bc0b8069918917b33f361011899a1af0cdd2d462":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["2553b00f699380c64959ccb27991289aae87be2e","bc0b8069918917b33f361011899a1af0cdd2d462"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bc0b8069918917b33f361011899a1af0cdd2d462"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"bc0b8069918917b33f361011899a1af0cdd2d462":["f0b9507caf22f292ac0e5e59f62db4275adf4511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"2553b00f699380c64959ccb27991289aae87be2e":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["41e5bbad683f7546e96f08ffe8bc50cf447f2586"],"5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7":["bc0b8069918917b33f361011899a1af0cdd2d462","2553b00f699380c64959ccb27991289aae87be2e"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["5f709d06503a0d7b88fbc7fe89cdc51caadfdaa7"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","39d51e9acac1e629cffe47855e85dc6dedc4754d"],"b6f9be74ca7baaef11857ad002cad40419979516":[],"41e5bbad683f7546e96f08ffe8bc50cf447f2586":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f0b9507caf22f292ac0e5e59f62db4275adf4511","b6f9be74ca7baaef11857ad002cad40419979516","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}