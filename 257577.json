{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  static void cleanupReplicas(@SuppressWarnings({\"rawtypes\"})NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      String type = sourceReplica.getStr(ZkStateReader.REPLICA_TYPE);\n      log.info(\"Deleting replica type={} for collection={} shard={} on node={}\", type, coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}