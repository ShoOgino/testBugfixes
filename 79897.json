{"path":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","commits":[{"id":"a837c064b67fa63a9394136e31218b908cdcf783","date":1362186072,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {\n\n    PluginInfo info = null;\n    Map<String, String> attrs = new HashMap<String, String>();\n    NamedList args = new NamedList();\n    boolean haveHandler = false;\n    for (String s : solrProperties.stringPropertyNames()) {\n      String val = solrProperties.getProperty(s);\n      if (s.indexOf(SHARD_HANDLER_FACTORY) != -1) {\n        haveHandler = true;\n        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {\n          attrs.put(s, val);\n        } else {\n          args.add(s, val);\n        }\n      }\n    }\n\n    if (haveHandler) {\n      //  public PluginInfo(String type, Map<String, String> attrs ,NamedList initArgs, List<PluginInfo> children) {\n\n      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);\n    } else {\n      Map m = new HashMap();\n      m.put(\"class\", HttpShardHandlerFactory.class.getName());\n      info = new PluginInfo(\"shardHandlerFactory\", m, null, Collections.<PluginInfo>emptyList());\n    }\n    HttpShardHandlerFactory fac = new HttpShardHandlerFactory();\n    if (info != null) {\n      fac.init(info);\n    }\n    return fac;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0937e467e3a2e44c636e2b022b816b21257acb26","date":1363268855,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {\n\n    PluginInfo info = null;\n    Map<String, String> attrs = new HashMap<String, String>();\n    NamedList args = new NamedList();\n    boolean haveHandler = false;\n    for (String s : solrProperties.stringPropertyNames()) {\n      String val = solrProperties.getProperty(s);\n      int index = s.indexOf(SHARD_HANDLER_FACTORY);\n      if (index != -1) {\n        haveHandler = true;\n        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {\n          // remove shardHandlerFactory. prefix\n          attrs.put(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        } else {\n          // remove shardHandlerFactory. prefix\n          args.add(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        }\n      }\n    }\n\n    if (haveHandler) {\n      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);\n    } else {\n      Map m = new HashMap();\n      m.put(\"class\", HttpShardHandlerFactory.class.getName());\n      info = new PluginInfo(\"shardHandlerFactory\", m, null, Collections.<PluginInfo>emptyList());\n    }\n\n    assert loader != null;\n    ShardHandlerFactory fac;\n    try {\n      fac = loader.findClass(info.className, ShardHandlerFactory.class).newInstance();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Error instantiating shardHandlerFactory class \" + info.className);\n    }\n    if (fac instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized) fac).init(info);\n    }\n\n    return fac;\n  }\n\n","sourceOld":"  @Override\n  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {\n\n    PluginInfo info = null;\n    Map<String, String> attrs = new HashMap<String, String>();\n    NamedList args = new NamedList();\n    boolean haveHandler = false;\n    for (String s : solrProperties.stringPropertyNames()) {\n      String val = solrProperties.getProperty(s);\n      if (s.indexOf(SHARD_HANDLER_FACTORY) != -1) {\n        haveHandler = true;\n        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {\n          attrs.put(s, val);\n        } else {\n          args.add(s, val);\n        }\n      }\n    }\n\n    if (haveHandler) {\n      //  public PluginInfo(String type, Map<String, String> attrs ,NamedList initArgs, List<PluginInfo> children) {\n\n      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);\n    } else {\n      Map m = new HashMap();\n      m.put(\"class\", HttpShardHandlerFactory.class.getName());\n      info = new PluginInfo(\"shardHandlerFactory\", m, null, Collections.<PluginInfo>emptyList());\n    }\n    HttpShardHandlerFactory fac = new HttpShardHandlerFactory();\n    if (info != null) {\n      fac.init(info);\n    }\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec","date":1363621241,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","sourceNew":"  @Override\n  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {\n\n    PluginInfo info = null;\n    Map<String, String> attrs = new HashMap<String, String>();\n    NamedList args = new NamedList();\n    boolean haveHandler = false;\n    for (String s : solrProperties.stringPropertyNames()) {\n      String val = solrProperties.getProperty(s);\n      int index = s.indexOf(SHARD_HANDLER_FACTORY);\n      if (index != -1) {\n        haveHandler = true;\n        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {\n          // remove shardHandlerFactory. prefix\n          attrs.put(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        } else {\n          // remove shardHandlerFactory. prefix\n          args.add(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        }\n      }\n    }\n\n    if (haveHandler) {\n      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);\n    } else {\n      Map m = new HashMap();\n      m.put(\"class\", HttpShardHandlerFactory.class.getName());\n      info = new PluginInfo(\"shardHandlerFactory\", m, null, Collections.<PluginInfo>emptyList());\n    }\n\n    assert loader != null;\n    ShardHandlerFactory fac;\n    try {\n      fac = loader.findClass(info.className, ShardHandlerFactory.class).newInstance();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    if (fac instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized) fac).init(info);\n    }\n\n    return fac;\n  }\n\n","sourceOld":"  @Override\n  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {\n\n    PluginInfo info = null;\n    Map<String, String> attrs = new HashMap<String, String>();\n    NamedList args = new NamedList();\n    boolean haveHandler = false;\n    for (String s : solrProperties.stringPropertyNames()) {\n      String val = solrProperties.getProperty(s);\n      int index = s.indexOf(SHARD_HANDLER_FACTORY);\n      if (index != -1) {\n        haveHandler = true;\n        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {\n          // remove shardHandlerFactory. prefix\n          attrs.put(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        } else {\n          // remove shardHandlerFactory. prefix\n          args.add(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        }\n      }\n    }\n\n    if (haveHandler) {\n      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);\n    } else {\n      Map m = new HashMap();\n      m.put(\"class\", HttpShardHandlerFactory.class.getName());\n      info = new PluginInfo(\"shardHandlerFactory\", m, null, Collections.<PluginInfo>emptyList());\n    }\n\n    assert loader != null;\n    ShardHandlerFactory fac;\n    try {\n      fac = loader.findClass(info.className, ShardHandlerFactory.class).newInstance();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                              \"Error instantiating shardHandlerFactory class \" + info.className);\n    }\n    if (fac instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized) fac).init(info);\n    }\n\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9818efa55563ddfecdecafbdd43f4bee9f252e7d","date":1364853872,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/SolrProperties#initShardHandler().mjava","sourceNew":null,"sourceOld":"  @Override\n  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {\n\n    PluginInfo info = null;\n    Map<String, String> attrs = new HashMap<String, String>();\n    NamedList args = new NamedList();\n    boolean haveHandler = false;\n    for (String s : solrProperties.stringPropertyNames()) {\n      String val = solrProperties.getProperty(s);\n      int index = s.indexOf(SHARD_HANDLER_FACTORY);\n      if (index != -1) {\n        haveHandler = true;\n        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {\n          // remove shardHandlerFactory. prefix\n          attrs.put(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        } else {\n          // remove shardHandlerFactory. prefix\n          args.add(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);\n        }\n      }\n    }\n\n    if (haveHandler) {\n      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);\n    } else {\n      Map m = new HashMap();\n      m.put(\"class\", HttpShardHandlerFactory.class.getName());\n      info = new PluginInfo(\"shardHandlerFactory\", m, null, Collections.<PluginInfo>emptyList());\n    }\n\n    assert loader != null;\n    ShardHandlerFactory fac;\n    try {\n      fac = loader.findClass(info.className, ShardHandlerFactory.class).newInstance();\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n    }\n    if (fac instanceof PluginInfoInitialized) {\n      ((PluginInfoInitialized) fac).init(info);\n    }\n\n    return fac;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0937e467e3a2e44c636e2b022b816b21257acb26":["a837c064b67fa63a9394136e31218b908cdcf783"],"a837c064b67fa63a9394136e31218b908cdcf783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec":["0937e467e3a2e44c636e2b022b816b21257acb26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"]},"commit2Childs":{"9818efa55563ddfecdecafbdd43f4bee9f252e7d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a837c064b67fa63a9394136e31218b908cdcf783"],"0937e467e3a2e44c636e2b022b816b21257acb26":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"a837c064b67fa63a9394136e31218b908cdcf783":["0937e467e3a2e44c636e2b022b816b21257acb26"],"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec":["9818efa55563ddfecdecafbdd43f4bee9f252e7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}