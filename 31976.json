{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, createDocScorer(context));\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, createDocScorer(context));\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, createDocScorer(context));\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, createDocScorer(context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","date":1342645458,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, createDocScorer(context));\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, createDocScorer(context));\n      }\n    }\n\n","bugFix":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, createDocScorer(context));\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, createDocScorer(context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, createDocScorer(context));\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, createDocScorer(context));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      }\n    }\n\n","bugFix":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"bugIntro":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null, true);\n      if (docs != null) {\n        return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      } else {\n        // Index does not store freq info\n        docs = termsEnum.docs(acceptDocs, null, false);\n        assert docs != null;\n        return new MatchOnlyTermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactSimScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactSimScorer(stats, context), termsEnum.docFreq());\n    }\n\n","bugFix":["02331260bb246364779cb6f04919ca47900d01bb"],"bugIntro":["b799defcfda6d303cbb180917bf1e749089adf42"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.exactSimScorer(stats, context));\n    }\n\n","bugFix":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery.TermWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n      final TermsEnum termsEnum = getTermsEnum(context);\n      if (termsEnum == null) {\n        return null;\n      }\n      DocsEnum docs = termsEnum.docs(acceptDocs, null);\n      assert docs != null;\n      return new TermScorer(this, docs, similarity.simScorer(stats, context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["b799defcfda6d303cbb180917bf1e749089adf42"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["02331260bb246364779cb6f04919ca47900d01bb"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"],"b799defcfda6d303cbb180917bf1e749089adf42":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","02331260bb246364779cb6f04919ca47900d01bb"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["b799defcfda6d303cbb180917bf1e749089adf42","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"02331260bb246364779cb6f04919ca47900d01bb":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","02331260bb246364779cb6f04919ca47900d01bb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ea8268d5f00bb25a4ea1d0bac6e2ffe238712c45","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["b799defcfda6d303cbb180917bf1e749089adf42"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b799defcfda6d303cbb180917bf1e749089adf42":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02331260bb246364779cb6f04919ca47900d01bb":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}