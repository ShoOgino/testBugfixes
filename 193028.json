{"path":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null--\n     * in which case there is no bound on that side, but if there are\n     * two term, both terms <b>must</b> be for the same field.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab881ff578b14fb692d84b482febb5707f628f8","date":1063196645,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","sourceNew":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n\n        // if we have a lowerTerm, start there. otherwise, start at beginning\n        if (lowerTerm != null) {\n            this.lowerTerm = lowerTerm;\n        }\n        else {\n            this.lowerTerm = new Term(upperTerm.field(), \"\");\n        }\n\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","sourceOld":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null--\n     * in which case there is no bound on that side, but if there are\n     * two term, both terms <b>must</b> be for the same field.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n        this.lowerTerm = lowerTerm;\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d73678020862536617f065bb3d28a71d8c4020c","date":1219142439,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","sourceNew":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n\n        // if we have a lowerTerm, start there. otherwise, start at beginning\n        if (lowerTerm != null) {\n            this.lowerTerm = lowerTerm;\n        }\n        else {\n            this.lowerTerm = new Term(upperTerm.field());\n        }\n\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","sourceOld":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n\n        // if we have a lowerTerm, start there. otherwise, start at beginning\n        if (lowerTerm != null) {\n            this.lowerTerm = lowerTerm;\n        }\n        else {\n            this.lowerTerm = new Term(upperTerm.field(), \"\");\n        }\n\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","sourceNew":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     *\n     * @param lowerTerm The Term at the lower end of the range\n     * @param upperTerm The Term at the upper end of the range\n     * @param inclusive If true, both <code>lowerTerm</code> and\n     *  <code>upperTerm</code> will themselves be included in the range.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n\n        // if we have a lowerTerm, start there. otherwise, start at beginning\n        if (lowerTerm != null) {\n            this.lowerTerm = lowerTerm;\n        }\n        else {\n            this.lowerTerm = new Term(upperTerm.field());\n        }\n\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","sourceOld":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n\n        // if we have a lowerTerm, start there. otherwise, start at beginning\n        if (lowerTerm != null) {\n            this.lowerTerm = lowerTerm;\n        }\n        else {\n            this.lowerTerm = new Term(upperTerm.field());\n        }\n\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","sourceNew":"  /** @deprecated Please use {@link #RangeQuery(String,\n   *  String, String, boolean, boolean)} instead */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive) {\n    init(lowerTerm, upperTerm, inclusive, inclusive, null);\n  }\n\n","sourceOld":"    /** Constructs a query selecting all terms greater than\n     * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n     * There must be at least one term and either term may be null,\n     * in which case there is no bound on that side, but if there are\n     * two terms, both terms <b>must</b> be for the same field.\n     *\n     * @param lowerTerm The Term at the lower end of the range\n     * @param upperTerm The Term at the upper end of the range\n     * @param inclusive If true, both <code>lowerTerm</code> and\n     *  <code>upperTerm</code> will themselves be included in the range.\n     */\n    public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive)\n    {\n        if (lowerTerm == null && upperTerm == null)\n        {\n            throw new IllegalArgumentException(\"At least one term must be non-null\");\n        }\n        if (lowerTerm != null && upperTerm != null && lowerTerm.field() != upperTerm.field())\n        {\n            throw new IllegalArgumentException(\"Both terms must be for the same field\");\n        }\n\n        // if we have a lowerTerm, start there. otherwise, start at beginning\n        if (lowerTerm != null) {\n            this.lowerTerm = lowerTerm;\n        }\n        else {\n            this.lowerTerm = new Term(upperTerm.field());\n        }\n\n        this.upperTerm = upperTerm;\n        this.inclusive = inclusive;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","sourceNew":null,"sourceOld":"  /** @deprecated Please use {@link #RangeQuery(String,\n   *  String, String, boolean, boolean)} instead */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive) {\n    init(lowerTerm, upperTerm, inclusive, inclusive, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c","date":1246738520,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Constructs a query selecting all terms greater than\n   * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n   * There must be at least one term and either term may be null,\n   * in which case there is no bound on that side, but if there are\n   * two terms, both terms <b>must</b> be for the same field.\n   *\n   * @param lowerTerm The Term at the lower end of the range\n   * @param upperTerm The Term at the upper end of the range\n   * @param inclusive If true, both <code>lowerTerm</code> and\n   *  <code>upperTerm</code> will themselves be included in the range.\n   */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive) {\n    this(lowerTerm, upperTerm, inclusive, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da","date":1255296547,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/RangeQuery#RangeQuery(Term,Term,boolean).mjava","sourceNew":null,"sourceOld":"  /** Constructs a query selecting all terms greater than\n   * <code>lowerTerm</code> but less than <code>upperTerm</code>.\n   * There must be at least one term and either term may be null,\n   * in which case there is no bound on that side, but if there are\n   * two terms, both terms <b>must</b> be for the same field.\n   *\n   * @param lowerTerm The Term at the lower end of the range\n   * @param upperTerm The Term at the upper end of the range\n   * @param inclusive If true, both <code>lowerTerm</code> and\n   *  <code>upperTerm</code> will themselves be included in the range.\n   */\n  public RangeQuery(Term lowerTerm, Term upperTerm, boolean inclusive) {\n    this(lowerTerm, upperTerm, inclusive, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"b33dc4652df2747e38f9782fde82bd426b77c538":["9d73678020862536617f065bb3d28a71d8c4020c"],"cab881ff578b14fb692d84b482febb5707f628f8":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["b33dc4652df2747e38f9782fde82bd426b77c538"],"9d73678020862536617f065bb3d28a71d8c4020c":["cab881ff578b14fb692d84b482febb5707f628f8"]},"commit2Childs":{"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["cab881ff578b14fb692d84b482febb5707f628f8"],"80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c"],"b33dc4652df2747e38f9782fde82bd426b77c538":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"cab881ff578b14fb692d84b482febb5707f628f8":["9d73678020862536617f065bb3d28a71d8c4020c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"5d5a0b761c4f4d0c34ebb3a8e04b62c71b3a8c0c":["80cd6adbf2e684cfacc0cdd93d6ab1cb0d19d8da"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"9d73678020862536617f065bb3d28a71d8c4020c":["b33dc4652df2747e38f9782fde82bd426b77c538"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}