{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"/dev/null","sourceNew":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"bufferPools\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classLoading\");\n      metricManager.register(registry, new FileDescriptorRatioGauge(), true, \"fileDescriptorRatio\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"/dev/null","sourceNew":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"bufferPools\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classLoading\");\n      metricManager.register(registry, new FileDescriptorRatioGauge(), true, \"fileDescriptorRatio\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6b8086d510892eddfabded3e60641cbe8bd7884","date":1482320327,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(platformMBeanServer), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"bufferPools\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classLoading\");\n      metricManager.register(registry, new FileDescriptorRatioGauge(), true, \"fileDescriptorRatio\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(platformMBeanServer), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"bufferPools\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classLoading\");\n      metricManager.register(registry, new FileDescriptorRatioGauge(), true, \"fileDescriptorRatio\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(platformMBeanServer), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    final Set<String> hiddenSysProps = cores.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    final Set<String> hiddenSysProps = cores.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    MBeanServer platformMBeanServer = ManagementFactory.getPlatformMBeanServer();\n    SolrMetricManager metricManager = cores.getMetricManager();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm);\n      metricManager.registerAll(registry, new BufferPoolMetricSet(platformMBeanServer), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(platformMBeanServer), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa","date":1493907698,"type":5,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":"  private void setupJvmMetrics(CoreContainer coresInit)  {\n    SolrMetricManager metricManager = coresInit.getMetricManager();\n    final Set<String> hiddenSysProps = coresInit.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","sourceOld":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    final Set<String> hiddenSysProps = cores.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#setupJvmMetrics().mjava","sourceNew":null,"sourceOld":"  private void setupJvmMetrics()  {\n    SolrMetricManager metricManager = cores.getMetricManager();\n    final Set<String> hiddenSysProps = cores.getConfig().getHiddenSysProps();\n    try {\n      String registry = SolrMetricManager.getRegistryName(SolrInfoBean.Group.jvm);\n      metricManager.registerAll(registry, new AltBufferPoolMetricSet(), true, \"buffers\");\n      metricManager.registerAll(registry, new ClassLoadingGaugeSet(), true, \"classes\");\n      metricManager.registerAll(registry, new OperatingSystemMetricSet(), true, \"os\");\n      metricManager.registerAll(registry, new GarbageCollectorMetricSet(), true, \"gc\");\n      metricManager.registerAll(registry, new MemoryUsageGaugeSet(), true, \"memory\");\n      metricManager.registerAll(registry, new ThreadStatesGaugeSet(), true, \"threads\"); // todo should we use CachedThreadStatesGaugeSet instead?\n      MetricsMap sysprops = new MetricsMap((detailed, map) -> {\n        System.getProperties().forEach((k, v) -> {\n          if (!hiddenSysProps.contains(k)) {\n            map.put(String.valueOf(k), v);\n          }\n        });\n      });\n      metricManager.registerGauge(null, registry, sysprops, true, \"properties\", \"system\");\n    } catch (Exception e) {\n      log.warn(\"Error registering JVM metrics\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d6b8086d510892eddfabded3e60641cbe8bd7884"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"d6b8086d510892eddfabded3e60641cbe8bd7884":["0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["d6b8086d510892eddfabded3e60641cbe8bd7884"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d6b8086d510892eddfabded3e60641cbe8bd7884"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d6b8086d510892eddfabded3e60641cbe8bd7884"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6b8086d510892eddfabded3e60641cbe8bd7884":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}