{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","commits":[{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final Bucket bucket = buckets[i];\n    fakeScorer.freq = bucket.freq;\n    fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n    final int doc = base | i;\n    fakeScorer.doc = doc;\n    collector.collect(doc);\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    fakeScorer.freq = bucket.freq;\n    fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n    final int doc = base | i;\n    fakeScorer.doc = doc;\n    collector.collect(doc);\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final Bucket bucket = buckets[i];\n    fakeScorer.freq = bucket.freq;\n    fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n    final int doc = base | i;\n    fakeScorer.doc = doc;\n    collector.collect(doc);\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.freq = bucket.freq;\n      fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    fakeScorer.freq = bucket.freq;\n    fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n    final int doc = base | i;\n    fakeScorer.doc = doc;\n    collector.collect(doc);\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.freq = bucket.freq;\n      fakeScorer.score = (float) bucket.score;\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.freq = bucket.freq;\n      fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.freq = bucket.freq;\n      fakeScorer.score = (float) bucket.score;\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.freq = bucket.freq;\n      fakeScorer.score = (float) bucket.score * coordFactors[bucket.freq];\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc14da055888b63b4f8c922d0e1579f3cb315ad7","date":1510744456,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.score = (float) bucket.score;\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.freq = bucket.freq;\n      fakeScorer.score = (float) bucket.score;\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#scoreDocument(LeafCollector,int,int).mjava","sourceNew":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final ScoreAndDoc scoreAndDoc = this.scoreAndDoc;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      scoreAndDoc.score = (float) bucket.score;\n      final int doc = base | i;\n      scoreAndDoc.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","sourceOld":"  private void scoreDocument(LeafCollector collector, int base, int i) throws IOException {\n    final FakeScorer fakeScorer = this.fakeScorer;\n    final Bucket bucket = buckets[i];\n    if (bucket.freq >= minShouldMatch) {\n      fakeScorer.score = (float) bucket.score;\n      final int doc = base | i;\n      fakeScorer.doc = doc;\n      collector.collect(doc);\n    }\n    bucket.freq = 0;\n    bucket.score = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["c8a0e442f7b61f811680273b25da95994a724466"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["dc14da055888b63b4f8c922d0e1579f3cb315ad7"],"c8a0e442f7b61f811680273b25da95994a724466":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["251e6911800e3a02e1da3bfd4dc49a914aef9778","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"dc14da055888b63b4f8c922d0e1579f3cb315ad7":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c8a0e442f7b61f811680273b25da95994a724466":["dc14da055888b63b4f8c922d0e1579f3cb315ad7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}