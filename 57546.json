{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void stddevTest() throws Exception { \n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n    \n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n    \n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","sourceNew":"  @Test\n  public void stddevTest() throws Exception {\n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n\n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n\n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","sourceOld":"  @Test\n  public void stddevTest() throws Exception { \n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n    \n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n    \n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","sourceNew":"  @Test\n  public void stddevTest() throws Exception {\n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n\n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n\n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","sourceOld":"  @Test\n  public void stddevTest() throws Exception { \n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n    \n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n    \n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n    \n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyNoFacetCloudTest#stddevTest().mjava","sourceNew":"  @Test\n  public void stddevTest() throws Exception {\n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n\n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n\n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","sourceOld":"  @Test\n  public void stddevTest() throws Exception {\n    String[] params = new String[] {\n        \"o.str.s.int_id\", \"stddev(int_id)\",\n        \"o.str.s.long_ld\", \"stddev(long_ld)\",\n        \"o.str.s.float_fd\", \"stddev(float_fd)\",\n        \"o.str.s.double_dd\", \"stddev(double_dd)\"\n    };\n    NamedList<Object> response = queryLegacyCloudAnalytics(params);\n    String responseStr = response.toString();\n\n    //Int\n    Double intResult = getValue(response, \"str\", \"int_id\");\n    Double intTest = (Double)calculateNumberStat(intTestStart, \"stddev\");\n    assertEquals(responseStr, intResult, intTest, 0.00000000001);\n\n    //Long\n    Double longResult = getValue(response, \"str\", \"long_ld\");\n    Double longTest = (Double)calculateNumberStat(longTestStart, \"stddev\");\n    assertEquals(responseStr, longResult, longTest, 0.00000000001);\n\n    //Float\n    Double floatResult = getValue(response, \"str\", \"float_fd\");\n    Double floatTest = (Double)calculateNumberStat(floatTestStart, \"stddev\");\n    assertEquals(responseStr, floatResult, floatTest, 0.00000000001);\n\n\n    //Double\n    Double doubleResult = getValue(response, \"str\", \"double_dd\");\n    Double doubleTest = (Double)calculateNumberStat(doubleTestStart, \"stddev\");\n    assertEquals(responseStr, doubleResult, doubleTest, 0.00000000001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","f8061ddd97f3352007d927dae445884a6f3d857b"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}