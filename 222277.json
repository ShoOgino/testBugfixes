{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","commits":[{"id":"9fac11578d87e86ac41841e07ba8db185cedf92c","date":1471085468,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"deleting replica from from node {} \", Utils.toJSONString(sourceReplica));\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", \"could not delete because  \" + deleteResult.get(\"failure\") + \"  \" + Utils.toJSONString(sourceReplica));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.info(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.info(\"Waiting for deletes to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"deleting replica from from node {} \", Utils.toJSONString(sourceReplica));\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", \"could not delete because  \" + deleteResult.get(\"failure\") + \"  \" + Utils.toJSONString(sourceReplica));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.info(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.info(\"Waiting for deletes to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ocmh.deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","pathOld":"/dev/null","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858","date":1472733239,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":["558f47e41524183823173884b3aaf0c03653dec0","558f47e41524183823173884b3aaf0c03653dec0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","sourceNew":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh,\n                              String node,\n                              String async) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      String coll = sourceReplica.getStr(COLLECTION_PROP);\n      String shard = sourceReplica.getStr(SHARD_ID_PROP);\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", coll, shard, node);\n      NamedList deleteResult = new NamedList();\n      try {\n        if (async != null) sourceReplica = sourceReplica.plus(ASYNC, async);\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", coll, shard, node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteNodeCmd#cleanupReplicas(NamedList,ClusterState,List[ZkNodeProps],OverseerCollectionMessageHandler,String).mjava","sourceNew":null,"sourceOld":"  static void cleanupReplicas(NamedList results,\n                              ClusterState clusterState,\n                              List<ZkNodeProps> sourceReplicas,\n                              OverseerCollectionMessageHandler ocmh, String node) throws InterruptedException {\n    CountDownLatch cleanupLatch = new CountDownLatch(sourceReplicas.size());\n    for (ZkNodeProps sourceReplica : sourceReplicas) {\n      log.info(\"Deleting replica for collection={} shard={} on node={}\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node);\n      NamedList deleteResult = new NamedList();\n      try {\n        ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, sourceReplica.plus(\"parallel\", \"true\"), deleteResult, () -> {\n          cleanupLatch.countDown();\n          if (deleteResult.get(\"failure\") != null) {\n            synchronized (results) {\n              results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                  \" on node=%s\", sourceReplica.getStr(COLLECTION_PROP), sourceReplica.getStr(SHARD_ID_PROP), node));\n            }\n          }\n        });\n      } catch (KeeperException e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n      } catch (Exception e) {\n        log.warn(\"Error deleting \", e);\n        cleanupLatch.countDown();\n        throw e;\n      }\n    }\n    log.debug(\"Waiting for delete node action to complete\");\n    cleanupLatch.await(5, TimeUnit.MINUTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fac11578d87e86ac41841e07ba8db185cedf92c"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["403d05f7f8d69b65659157eff1bc1d2717f04c66","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","9fac11578d87e86ac41841e07ba8db185cedf92c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"ce0735cbef33a0057ccb0f6ccc3caaf1bd95e858":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"9fac11578d87e86ac41841e07ba8db185cedf92c":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}