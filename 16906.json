{"path":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"03d1c7f08294f7d7e9ecf082aa1459f38d77f277","date":1493688929,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = PayloadUtils.createSpanQuery(field, value, analyzer);\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21981d1c6aa8bd30a5fd577cdcda7700aebabc88","date":1493768484,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = PayloadUtils.createSpanQuery(field, value, analyzer);\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["fde37608cd70b4d772cda072953ab6e7aec60923"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fde37608cd70b4d772cda072953ab6e7aec60923","date":1502236361,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        String operator = localParams.get(\"operator\", DEFAULT_OPERATOR);\n        if (!(operator.equalsIgnoreCase(DEFAULT_OPERATOR) || operator.equalsIgnoreCase(\"or\"))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Supported operators are : or , phrase\");\n        }\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer, operator);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","bugFix":["21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        String operator = localParams.get(\"operator\", DEFAULT_OPERATOR);\n        if (!(operator.equalsIgnoreCase(DEFAULT_OPERATOR) || operator.equalsIgnoreCase(\"or\"))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Supported operators are : or , phrase\");\n        }\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer, operator);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        String operator = localParams.get(\"operator\", DEFAULT_OPERATOR);\n        if (!(operator.equalsIgnoreCase(DEFAULT_OPERATOR) || operator.equalsIgnoreCase(\"or\"))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Supported operators are : or , phrase\");\n        }\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer, operator);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query = null;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340d2a56d051f2e4d6d9c707e2d5614d3d81adf8","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PayloadScoreQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        String operator = localParams.get(\"operator\", DEFAULT_OPERATOR);\n        if (!(operator.equalsIgnoreCase(DEFAULT_OPERATOR) || operator.equalsIgnoreCase(\"or\"))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Supported operators are : or , phrase\");\n        }\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer, operator);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        PayloadDecoder payloadDecoder = req.getCore().getLatestSchema().getPayloadDecoder(field);\n        return new PayloadScoreQuery(query, payloadFunction, payloadDecoder, includeSpanScore);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String field = localParams.get(QueryParsing.F);\n        String value = localParams.get(QueryParsing.V);\n        String func = localParams.get(\"func\");\n        String operator = localParams.get(\"operator\", DEFAULT_OPERATOR);\n        if (!(operator.equalsIgnoreCase(DEFAULT_OPERATOR) || operator.equalsIgnoreCase(\"or\"))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Supported operators are : or , phrase\");\n        }\n        boolean includeSpanScore = localParams.getBool(\"includeSpanScore\", false);\n\n        if (field == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'f' not specified\");\n        }\n\n        if (value == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"query string missing\");\n        }\n\n        FieldType ft = req.getCore().getLatestSchema().getFieldType(field);\n        Analyzer analyzer = ft.getQueryAnalyzer();\n        SpanQuery query;\n        try {\n          query = PayloadUtils.createSpanQuery(field, value, analyzer, operator);\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);\n        }\n\n        if (query == null) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"SpanQuery is null\");\n        }\n\n        // note: this query(/parser) does not support func=first; 'first' is a payload() value source feature only\n        PayloadFunction payloadFunction = PayloadUtils.getPayloadFunction(func);\n        if (payloadFunction == null) throw new SyntaxError(\"Unknown payload function: \" + func);\n\n        return new PayloadScoreQuery(query, payloadFunction, includeSpanScore);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["21981d1c6aa8bd30a5fd577cdcda7700aebabc88","fde37608cd70b4d772cda072953ab6e7aec60923"],"fde37608cd70b4d772cda072953ab6e7aec60923":["21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"21981d1c6aa8bd30a5fd577cdcda7700aebabc88":["03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"340d2a56d051f2e4d6d9c707e2d5614d3d81adf8":["fde37608cd70b4d772cda072953ab6e7aec60923"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["e9017cf144952056066919f1ebc7897ff9bd71b1","fde37608cd70b4d772cda072953ab6e7aec60923"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["340d2a56d051f2e4d6d9c707e2d5614d3d81adf8"],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"fde37608cd70b4d772cda072953ab6e7aec60923":["58884af1f68e9d61c217c753fbd6266d86a63b14","340d2a56d051f2e4d6d9c707e2d5614d3d81adf8","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be"],"21981d1c6aa8bd30a5fd577cdcda7700aebabc88":["e9017cf144952056066919f1ebc7897ff9bd71b1","58884af1f68e9d61c217c753fbd6266d86a63b14","fde37608cd70b4d772cda072953ab6e7aec60923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","03d1c7f08294f7d7e9ecf082aa1459f38d77f277"],"340d2a56d051f2e4d6d9c707e2d5614d3d81adf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"03d1c7f08294f7d7e9ecf082aa1459f38d77f277":["21981d1c6aa8bd30a5fd577cdcda7700aebabc88"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}