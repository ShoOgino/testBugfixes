{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a24bff9b8b5990b2e39206b8742b848c8d88181","date":1330491455,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/strategy/prefix/PrefixCellsTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    int length = 0;\n    char[] buffer = termAtt.buffer();\n    while (true) {\n      char c = (char) input.read();\n      if (c < 0) break;\n      if (c == 'a' || c == 'A') {\n        buffer[length++] = 'A';\n        continue;\n      }\n      if (c == 'b' || c == 'B') {\n        buffer[length++] = 'B';\n        continue;\n      }\n      if (c == 'c' || c == 'C') {\n        buffer[length++] = 'C';\n        continue;\n      }\n      if (c == 'd' || c == 'D') {\n        buffer[length++] = 'D';\n        continue;\n      }\n      if (c == '*') {\n        buffer[length++] = '*';\n        continue;\n      }\n      if (c == '+') {\n        buffer[length++] = '+';\n        continue;\n      }\n\n      if (length > 0) {\n        // Skip any other character\n        break;\n      }\n    }\n\n    termAtt.setLength(length);\n    return length > 0; // should only happen at the end\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a24bff9b8b5990b2e39206b8742b848c8d88181":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6a24bff9b8b5990b2e39206b8742b848c8d88181":[],"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["6a24bff9b8b5990b2e39206b8742b848c8d88181"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6a24bff9b8b5990b2e39206b8742b848c8d88181","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}