{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","commits":[{"id":"8af96162d6e24bbd73a74cf381037e6aea675cd8","date":1422142293,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader());\n    rightReader = wrapReader(rightWriter.getReader());\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","sourceNew":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader(), false);\n    rightReader = wrapReader(rightWriter.getReader(), false);\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader());\n    rightReader = wrapReader(rightWriter.getReader());\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","sourceNew":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader(), false);\n    rightReader = wrapReader(rightWriter.getReader(), false);\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader());\n    rightReader = wrapReader(rightWriter.getReader());\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","sourceNew":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader());\n    rightReader = wrapReader(rightWriter.getReader());\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader(), false);\n    rightReader = wrapReader(rightWriter.getReader(), false);\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":["adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#testCrazyReaderEquals().mjava","sourceNew":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(20);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader());\n    rightReader = wrapReader(rightWriter.getReader());\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","sourceOld":"  public void testCrazyReaderEquals() throws IOException {\n    int numdocs = atLeast(100);\n    createRandomIndex(numdocs, leftWriter, seed);\n    createRandomIndex(numdocs, rightWriter, seed);\n\n    leftReader = wrapReader(leftWriter.getReader());\n    rightReader = wrapReader(rightWriter.getReader());\n    \n    // check that our readers are valid\n    TestUtil.checkReader(leftReader);\n    TestUtil.checkReader(rightReader);\n    \n    assertReaderEquals(info, leftReader, rightReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"8af96162d6e24bbd73a74cf381037e6aea675cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["8af96162d6e24bbd73a74cf381037e6aea675cd8","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["8af96162d6e24bbd73a74cf381037e6aea675cd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8af96162d6e24bbd73a74cf381037e6aea675cd8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8af96162d6e24bbd73a74cf381037e6aea675cd8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}