{"path":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","commits":[{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":0,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","pathOld":"/dev/null","sourceNew":"  public KuromojiTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","pathOld":"/dev/null","sourceNew":"  public KuromojiTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"769ef7b1e01bc4cdaee98074d5b8dd084bf9b7c0","date":1332418908,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","sourceNew":"  /**\n   * Create a new KuromojiTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public KuromojiTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":"  public KuromojiTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98d45c1ff2c99694b6de2201175f9b8b8b27b597","date":1332757908,"type":5,"author":"Christian Moen","isMerge":false,"pathNew":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer#JapaneseTokenizer(Reader,UserDictionary,boolean,Mode).mjava","pathOld":"modules/analysis/kuromoji/src/java/org/apache/lucene/analysis/kuromoji/KuromojiTokenizer#KuromojiTokenizer(Reader,UserDictionary,boolean,Mode).mjava","sourceNew":"  /**\n   * Create a new JapaneseTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public JapaneseTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","sourceOld":"  /**\n   * Create a new KuromojiTokenizer.\n   * \n   * @param input Reader containing text\n   * @param userDictionary Optional: if non-null, user dictionary.\n   * @param discardPunctuation true if punctuation tokens should be dropped from the output.\n   * @param mode tokenization mode.\n   */\n  public KuromojiTokenizer(Reader input, UserDictionary userDictionary, boolean discardPunctuation, Mode mode) {\n    super(input);\n    dictionary = TokenInfoDictionary.getInstance();\n    fst = dictionary.getFST();\n    unkDictionary = UnknownDictionary.getInstance();\n    characterDefinition = unkDictionary.getCharacterDefinition();\n    this.userDictionary = userDictionary;\n    costs = ConnectionCosts.getInstance();\n    fstReader = fst.getBytesReader(0);\n    if (userDictionary != null) {\n      userFST = userDictionary.getFST();\n      userFSTReader = userFST.getBytesReader(0);\n    } else {\n      userFST = null;\n      userFSTReader = null;\n    }\n    this.discardPunctuation = discardPunctuation;\n    switch(mode){\n      case SEARCH:\n        searchMode = true;\n        extendedMode = false;\n        outputCompounds = true;\n        break;\n      case EXTENDED:\n        searchMode = true;\n        extendedMode = true;\n        outputCompounds = false;\n        break;\n      default:\n        searchMode = false;\n        extendedMode = false;\n        outputCompounds = false;\n        break;\n    }\n    buffer.reset(input);\n\n    resetState();\n\n    dictionaryMap.put(Type.KNOWN, dictionary);\n    dictionaryMap.put(Type.UNKNOWN, unkDictionary);\n    dictionaryMap.put(Type.USER, userDictionary);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0984ad47974c2d5d354519ddb2aa8358973a6271"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["769ef7b1e01bc4cdaee98074d5b8dd084bf9b7c0"],"769ef7b1e01bc4cdaee98074d5b8dd084bf9b7c0":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","769ef7b1e01bc4cdaee98074d5b8dd084bf9b7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"98d45c1ff2c99694b6de2201175f9b8b8b27b597":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"769ef7b1e01bc4cdaee98074d5b8dd084bf9b7c0":["98d45c1ff2c99694b6de2201175f9b8b8b27b597"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}