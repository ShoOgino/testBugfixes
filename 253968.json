{"path":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","commits":[{"id":"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691","date":1516909549,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEROUTEDALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAliasUpdateProcessor\n        .formatCollectionNameFromInstant(aliasName, start\n        );\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasMetadata(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46589ed5cc841861bf6b5e2afc55f718ebcd02a0","date":1516984620,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEROUTEDALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasMetadata(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEROUTEDALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAliasUpdateProcessor\n        .formatCollectionNameFromInstant(aliasName, start\n        );\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasMetadata(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db21ceba3043cc8e4145472fef08e5b136892778","date":1520453762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasMetadata(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEROUTEDALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasMetadata(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","date":1520865397,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasMetadata(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3c9595c75582a7ea7efb585014102ed83f2d9c8b","date":1523581112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":["a980795a56f2fcbc94caeb3233071312d5684d59"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b87d1f8719d7f05be003f3477450b74af13706a","date":1523590376,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a980795a56f2fcbc94caeb3233071312d5684d59","date":1524255736,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":["3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","date":1529622176,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  //@BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 09-Apr-2018\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getSaferTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#testV1().mjava","sourceNew":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getSaferTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","sourceOld":"  @Test\n  public void testV1() throws Exception {\n    final String aliasName = getSaferTestName();\n    final String baseUrl = cluster.getRandomJetty(random()).getBaseUrl().toString();\n    Instant start = Instant.now().truncatedTo(ChronoUnit.HOURS); // mostly make sure no millis\n    HttpGet get = new HttpGet(baseUrl + \"/admin/collections?action=CREATEALIAS\" +\n        \"&wt=xml\" +\n        \"&name=\" + aliasName +\n        \"&router.field=evt_dt\" +\n        \"&router.name=time\" +\n        \"&router.start=\" + start +\n        \"&router.interval=%2B30MINUTE\" +\n        \"&create-collection.collection.configName=_default\" +\n        \"&create-collection.router.field=foo_s\" +\n        \"&create-collection.numShards=1\" +\n        \"&create-collection.replicationFactor=2\");\n    assertSuccess(get);\n\n    String initialCollectionName = TimeRoutedAlias.formatCollectionNameFromInstant(aliasName, start);\n    assertCollectionExists(initialCollectionName);\n\n    // Test created collection:\n    final DocCollection coll = solrClient.getClusterStateProvider().getState(initialCollectionName).get();\n    //TODO how do we assert the configSet ?\n    assertEquals(CompositeIdRouter.class, coll.getRouter().getClass());\n    assertEquals(\"foo_s\", ((Map)coll.get(\"router\")).get(\"field\"));\n    assertEquals(1, coll.getSlices().size()); // numShards\n    assertEquals(2, coll.getReplicationFactor().intValue()); // num replicas\n    //TODO SOLR-11877 assertEquals(2, coll.getStateFormat());\n\n    // Test Alias metadata\n    Aliases aliases = cluster.getSolrClient().getZkStateReader().getAliases();\n    Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();\n    String alias = collectionAliasMap.get(aliasName);\n    assertNotNull(alias);\n    Map<String, String> meta = aliases.getCollectionAliasProperties(aliasName);\n    assertNotNull(meta);\n    assertEquals(\"evt_dt\",meta.get(\"router.field\"));\n    assertEquals(\"_default\",meta.get(\"create-collection.collection.configName\"));\n    assertEquals(null,meta.get(\"start\"));\n  }\n\n","bugFix":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["db21ceba3043cc8e4145472fef08e5b136892778"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a980795a56f2fcbc94caeb3233071312d5684d59":["6b87d1f8719d7f05be003f3477450b74af13706a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a980795a56f2fcbc94caeb3233071312d5684d59","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6b87d1f8719d7f05be003f3477450b74af13706a":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767","3c9595c75582a7ea7efb585014102ed83f2d9c8b"],"db21ceba3043cc8e4145472fef08e5b136892778":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["a980795a56f2fcbc94caeb3233071312d5684d59"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a980795a56f2fcbc94caeb3233071312d5684d59","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767":["3c9595c75582a7ea7efb585014102ed83f2d9c8b","6b87d1f8719d7f05be003f3477450b74af13706a"],"46589ed5cc841861bf6b5e2afc55f718ebcd02a0":["db21ceba3043cc8e4145472fef08e5b136892778"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"3c9595c75582a7ea7efb585014102ed83f2d9c8b":["6b87d1f8719d7f05be003f3477450b74af13706a"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["46589ed5cc841861bf6b5e2afc55f718ebcd02a0"],"a980795a56f2fcbc94caeb3233071312d5684d59":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a7544ad4b63d1b5f556c3da8f9c63d332aa034e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"6b87d1f8719d7f05be003f3477450b74af13706a":["a980795a56f2fcbc94caeb3233071312d5684d59"],"db21ceba3043cc8e4145472fef08e5b136892778":["6f29e9eb6c1655cd0b273f3c0dcdf43bc0822767"],"7a7544ad4b63d1b5f556c3da8f9c63d332aa034e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}