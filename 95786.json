{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchHighlighter#testCustomFieldHighlightHandling().mjava","commits":[{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchHighlighter#testCustomFieldHighlightHandling().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomFieldHighlightHandling() throws IOException {\n    // Match highlighter is a showcase of individual components in this package, suitable\n    // to create any kind of field-display designs.\n    //\n    // In this example we will build a custom field highlighting handler that\n    // highlights matches over a multivalued field, shows that field's values if it received\n    // no matches and limits the number of values displayed to at most 2 (with an appropriate message).\n    new IndexBuilder(this::toField)\n        // Just one document, one field, four values.\n        .doc(FLD_TEXT1, \"foo bar\", \"bar foo baz\", \"bar baz foo\", \"baz baz baz\")\n        .build(analyzer, reader -> {\n          IndexSearcher searcher = new IndexSearcher(reader);\n          Sort sortOrder = Sort.INDEXORDER;\n\n          // Let's start with the simple predefined highlighter so that the field's value shows\n          // and is highlighted when it was part of the hit.\n          MatchHighlighter.FieldValueHighlighter highlighted = FieldValueHighlighters.highlighted(\n              80 * 3, 2, new PassageFormatter(\"...\", \">\", \"<\"), FLD_TEXT1::equals);\n          MatchHighlighter highlighter =\n              new MatchHighlighter(searcher, analyzer)\n                  .appendFieldHighlighter(highlighted)\n                  .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());\n\n          Query query = new TermQuery(new Term(FLD_TEXT1, \"foo\"));\n          TopDocs topDocs = searcher.search(query, 10, sortOrder);\n\n          // Note the highlighter is configured with at most 2 snippets so the match on the\n          // third value (\"bar baz foo\") is omitted. Ellipsis isn't inserted too because\n          // values are displayed in full.\n          assertHighlights(toDocList(highlighter.highlight(topDocs, query)),\n              \"0. text1: >foo< bar, bar >foo< baz\");\n\n          // So the above works fine if the field received a match but omits it otherwise. We can\n          // force the display of this field by chaining with verbatim value highlighter:\n          highlighter =\n              new MatchHighlighter(searcher, analyzer)\n                  .appendFieldHighlighter(highlighted.or(FieldValueHighlighters.verbatimValue(FLD_TEXT1)))\n                  .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());\n\n          assertHighlights(toDocList(highlighter.highlight(topDocs, new MatchAllDocsQuery())),\n              \"0. text1: foo bar, bar foo baz, bar baz foo, baz baz baz\");\n\n          // But this is not exactly what we'd like because we want to limit the display of values to the first two.\n          // Let's just write a custom field highlighter handler that does it.\n          class AtMostNValuesHighlighter implements MatchHighlighter.FieldValueHighlighter {\n            private final String field;\n            private final int limit;\n\n            AtMostNValuesHighlighter(String field, int limit) {\n              this.field = field;\n              this.limit = limit;\n            }\n\n            @Override\n            public boolean isApplicable(String field, boolean hasMatches) {\n              return Objects.equals(field, this.field);\n            }\n\n            @Override\n            public List<String> format(String field, String[] values, String contiguousValue,\n                                       List<OffsetRange> valueRanges, List<MatchHighlighter.QueryOffsetRange> matchOffsets) {\n              if (values.length <= limit) {\n                return Arrays.asList(values);\n              } else {\n                List<String> collected = Stream.of(values).limit(limit).collect(Collectors.toList());\n                int remaining = values.length - collected.size();\n                collected.add(String.format(Locale.ROOT, \"[%d omitted]\", remaining));\n                return collected;\n              }\n            }\n\n            @Override\n            public Collection<String> alwaysFetchedFields() {\n              return Collections.singleton(field);\n            }\n          }\n\n          // We can now chain it as usual and contemplate the result.\n          highlighter =\n              new MatchHighlighter(searcher, analyzer)\n                  .appendFieldHighlighter(highlighted.or(new AtMostNValuesHighlighter(FLD_TEXT1, 2)))\n                  .appendFieldHighlighter(FieldValueHighlighters.skipRemaining());\n\n          assertHighlights(toDocList(highlighter.highlight(topDocs, query)),\n              \"0. text1: >foo< bar, bar >foo< baz\");\n          assertHighlights(toDocList(highlighter.highlight(topDocs, new MatchAllDocsQuery())),\n              \"0. text1: foo bar, bar foo baz, [2 omitted]\");\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}