{"path":"solr/src/solrj/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","commits":[{"id":"e5ac9c2d15e75a72c2c461039fb6789654439323","date":1284413428,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/SolrServer#queryAndStreamResponse(SolrParams,StreamingResponseCallback).mjava","sourceNew":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","sourceOld":"  /**\n   * Query solr, and stream the results.  Unlike the standard query, this will \n   * send events for each Document rather then add them to the QueryResponse.\n   * \n   * Although this function returns a 'QueryResponse' it should be used with care\n   * since it excludes anything that was passed to callback.  Also note that\n   * future version may pass even more info to the callback and may not return \n   * the results in the QueryResponse.\n   *\n   * @since solr 4.0\n   */\n  public QueryResponse queryAndStreamResponse( SolrParams params, StreamingResponseCallback callback ) throws SolrServerException, IOException\n  {\n    ResponseParser parser = new StreamingBinaryResponseParser( callback );\n    QueryRequest req = new QueryRequest( params );\n    req.setStreamingResponseCallback( callback );\n    req.setResponseParser( parser );    \n    return req.process(this);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e5ac9c2d15e75a72c2c461039fb6789654439323":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e5ac9c2d15e75a72c2c461039fb6789654439323"],"c26f00b574427b55127e869b935845554afde1fa":["e5ac9c2d15e75a72c2c461039fb6789654439323","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e5ac9c2d15e75a72c2c461039fb6789654439323"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5ac9c2d15e75a72c2c461039fb6789654439323"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"e5ac9c2d15e75a72c2c461039fb6789654439323":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5ac9c2d15e75a72c2c461039fb6789654439323","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}