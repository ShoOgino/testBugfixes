{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, \"javabin\");\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n      \n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(60000);\n      client.setConnectionTimeout(15000);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new HttpSolrClient(masterUrl, myHttpClient)) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71475d88ea48a7d9a847f209667255318b3ea4c7","date":1461758968,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, \"/replication\");\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl).withHttpClient(myHttpClient).build()) {\n      client.setSoTimeout(soTimeout);\n      client.setConnectionTimeout(connTimeout);\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings(\"unchecked\")\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#getLatestVersion().mjava","sourceNew":"  /**\n   * Gets the latest commit version and generation from the leader\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(leaderUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets the latest commit version and generation from the master\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  NamedList getLatestVersion() throws IOException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(COMMAND, CMD_INDEX_VERSION);\n    params.set(CommonParams.WT, JAVABIN);\n    params.set(CommonParams.QT, ReplicationHandler.PATH);\n    QueryRequest req = new QueryRequest(params);\n\n    // TODO modify to use shardhandler\n    try (HttpSolrClient client = new Builder(masterUrl)\n        .withHttpClient(myHttpClient)\n        .withConnectionTimeout(connTimeout)\n        .withSocketTimeout(soTimeout)\n        .build()) {\n\n      return client.request(req);\n    } catch (SolrServerException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"43d1e498704edd2bba13548a189eed4dfccff11b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"859081acf00749f5dd462772c571d611d4a4d2db":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["71475d88ea48a7d9a847f209667255318b3ea4c7","43d1e498704edd2bba13548a189eed4dfccff11b"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["43d1e498704edd2bba13548a189eed4dfccff11b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"43d1e498704edd2bba13548a189eed4dfccff11b":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"1390137e395d2f07f9ba5b8c43d293befe84d563":["86290366cefc1b9d4eced13b430858c4a4c0421d","d2638f781be724518ff6c2263d14a48cf6e68017"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["71475d88ea48a7d9a847f209667255318b3ea4c7"],"71475d88ea48a7d9a847f209667255318b3ea4c7":["43d1e498704edd2bba13548a189eed4dfccff11b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}