{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","sourceOld":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5ec3c464e62e57df598ba20e010313bf6d5d7b4","date":1589998565,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      \n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","sourceOld":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d2c45da6e47ff0ada29a8f98566b76f0b278de","date":1591372739,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      \n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n\n      if (null != results.get(\"allBuckets\")) {\n        // if the response includes an allBuckets bucket, then there must not be an skg value\n        \n        // 'skg' key must not exist in th allBuckets bucket\n        assertEquals(facetKey + \" has skg in allBuckets: \" + results.get(\"allBuckets\"),\n                     Collections.emptyList(),\n                     ((NamedList)results.get(\"allBuckets\")).getAll(\"skg\"));\n      }\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","sourceOld":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      \n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG#assertFacetSKGsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  @SuppressWarnings({\"unchecked\"})\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         @SuppressWarnings({\"rawtypes\"})final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      \n      @SuppressWarnings({\"rawtypes\"})\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n\n      if (null != results.get(\"allBuckets\")) {\n        // if the response includes an allBuckets bucket, then there must not be an skg value\n        \n        // 'skg' key must not exist in th allBuckets bucket\n        assertEquals(facetKey + \" has skg in allBuckets: \" + results.get(\"allBuckets\"),\n                     Collections.emptyList(),\n                     ((NamedList)results.get(\"allBuckets\")).getAll(\"skg\"));\n      }\n      @SuppressWarnings({\"rawtypes\"})\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (@SuppressWarnings({\"rawtypes\"})NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      @SuppressWarnings({\"rawtypes\"})\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","sourceOld":"  /** \n   * Recursive helper method that walks the actual facet response, comparing the SKG results to \n   * the expected output based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetSKGsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                         final Map<String,TermFacet> expected,\n                                         final SolrParams baseParams,\n                                         final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      \n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n\n      if (null != results.get(\"allBuckets\")) {\n        // if the response includes an allBuckets bucket, then there must not be an skg value\n        \n        // 'skg' key must not exist in th allBuckets bucket\n        assertEquals(facetKey + \" has skg in allBuckets: \" + results.get(\"allBuckets\"),\n                     Collections.emptyList(),\n                     ((NamedList)results.get(\"allBuckets\")).getAll(\"skg\"));\n      }\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the background query does not match any docs with field X\n        final long docsWithField = getNumFound(params(\"_trace\", \"noBuckets\",\n                                                      \"rows\", \"0\",\n                                                      \"q\", facet.field+\":[* TO *]\",\n                                                      \"fq\", baseParams.get(\"back\")));\n\n        assertEquals(facetKey + \" has no buckets, but docs in background exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n\n      // NOTE: it's important that we do this depth first -- not just because it's the easiest way to do it,\n      // but because it means that our maxBucketsToCheck will ensure we do a lot of deep sub-bucket checking,\n      // not just all the buckets of the top level(s) facet(s)\n      for (NamedList bucket : buckets) {\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        verifySKGResults(facetKey, facet, baseParams, fieldVal, bucket);\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        final SolrParams verifyParams = SolrParams.wrapAppended(baseParams,\n                                                                params(\"fq\", facet.field + \":\" + fieldVal));\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetSKGsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    \n    { // make sure we don't have any facet keys we don't expect\n      // a little hackish because subfacets have extra keys...\n      final LinkedHashSet expectedKeys = new LinkedHashSet(expected.keySet());\n      expectedKeys.add(\"count\");\n      if (0 <= actualFacetResponse.indexOf(\"val\",0)) {\n        expectedKeys.add(\"val\");\n        expectedKeys.add(\"skg\");\n      }\n      assertEquals(\"Unexpected keys in facet response\",\n                   expectedKeys, actualFacetResponse.asShallowMap().keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"22d2c45da6e47ff0ada29a8f98566b76f0b278de":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"]},"commit2Childs":{"c5ec3c464e62e57df598ba20e010313bf6d5d7b4":["22d2c45da6e47ff0ada29a8f98566b76f0b278de"],"22d2c45da6e47ff0ada29a8f98566b76f0b278de":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["c5ec3c464e62e57df598ba20e010313bf6d5d7b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}