{"path":"src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream).mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  The incoming\n   * segmentInfos must have been loaded from a commit point\n   * and not yet modified.  This will remove any files not\n   * referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream)\n    throws CorruptIndexException, IOException {\n\n    this.infoStream = infoStream;\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    String[] files = directory.list();\n    if (files == null)\n      throw new IOException(\"cannot read directory \" + directory + \": list() returned null\");\n\n    CommitPoint currentCommitPoint = null;\n\n    for(int i=0;i<files.length;i++) {\n\n      String fileName = files[i];\n\n      if (filter.accept(null, fileName) && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n            if (infoStream != null) {\n              message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = new SegmentInfos();\n            sis.read(directory, fileName);\n            CommitPoint commitPoint = new CommitPoint(sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null) {\n      throw new CorruptIndexException(\"failed to locate current segments_N file\");\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    Collections.sort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    Iterator it = refCounts.keySet().iterator();\n    while(it.hasNext()) {\n      String fileName = (String) it.next();\n      RefCount rc = (RefCount) refCounts.get(fileName);\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // It's OK for the onInit to remove the current commit\n    // point; we just have to checkpoint our in-memory\n    // SegmentInfos to protect those files that it uses:\n    if (currentCommitPoint.deleted) {\n      checkpoint(segmentInfos, false);\n    }\n    \n    deleteCommits();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d54c7739bfe85d68f0352823cd70c10c619fad38","7dc11e5e2e108e6cdd85ae2693383a15f41cbf35","67006a60923e2124212d3baa0d29b444bcbd8373"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream,DocumentsWriter).mjava","pathOld":"src/java/org/apache/lucene/index/IndexFileDeleter#IndexFileDeleter(Directory,IndexDeletionPolicy,SegmentInfos,PrintStream).mjava","sourceNew":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  The incoming\n   * segmentInfos must have been loaded from a commit point\n   * and not yet modified.  This will remove any files not\n   * referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream, DocumentsWriter docWriter)\n    throws CorruptIndexException, IOException {\n\n    this.docWriter = docWriter;\n    this.infoStream = infoStream;\n\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    String[] files = directory.list();\n    if (files == null)\n      throw new IOException(\"cannot read directory \" + directory + \": list() returned null\");\n\n    CommitPoint currentCommitPoint = null;\n\n    for(int i=0;i<files.length;i++) {\n\n      String fileName = files[i];\n\n      if (filter.accept(null, fileName) && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n            if (infoStream != null) {\n              message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = new SegmentInfos();\n            sis.read(directory, fileName);\n            CommitPoint commitPoint = new CommitPoint(sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null) {\n      throw new CorruptIndexException(\"failed to locate current segments_N file\");\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    Collections.sort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    Iterator it = refCounts.keySet().iterator();\n    while(it.hasNext()) {\n      String fileName = (String) it.next();\n      RefCount rc = (RefCount) refCounts.get(fileName);\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // It's OK for the onInit to remove the current commit\n    // point; we just have to checkpoint our in-memory\n    // SegmentInfos to protect those files that it uses:\n    if (currentCommitPoint.deleted) {\n      checkpoint(segmentInfos, false);\n    }\n    \n    deleteCommits();\n  }\n\n","sourceOld":"  /**\n   * Initialize the deleter: find all previous commits in\n   * the Directory, incref the files they reference, call\n   * the policy to let it delete commits.  The incoming\n   * segmentInfos must have been loaded from a commit point\n   * and not yet modified.  This will remove any files not\n   * referenced by any of the commits.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public IndexFileDeleter(Directory directory, IndexDeletionPolicy policy, SegmentInfos segmentInfos, PrintStream infoStream)\n    throws CorruptIndexException, IOException {\n\n    this.infoStream = infoStream;\n    this.policy = policy;\n    this.directory = directory;\n\n    // First pass: walk the files and initialize our ref\n    // counts:\n    long currentGen = segmentInfos.getGeneration();\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    String[] files = directory.list();\n    if (files == null)\n      throw new IOException(\"cannot read directory \" + directory + \": list() returned null\");\n\n    CommitPoint currentCommitPoint = null;\n\n    for(int i=0;i<files.length;i++) {\n\n      String fileName = files[i];\n\n      if (filter.accept(null, fileName) && !fileName.equals(IndexFileNames.SEGMENTS_GEN)) {\n\n        // Add this file to refCounts with initial count 0:\n        getRefCount(fileName);\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n          if (SegmentInfos.generationFromSegmentsFileName(fileName) <= currentGen) {\n            if (infoStream != null) {\n              message(\"init: load commit \\\"\" + fileName + \"\\\"\");\n            }\n            SegmentInfos sis = new SegmentInfos();\n            sis.read(directory, fileName);\n            CommitPoint commitPoint = new CommitPoint(sis);\n            if (sis.getGeneration() == segmentInfos.getGeneration()) {\n              currentCommitPoint = commitPoint;\n            }\n            commits.add(commitPoint);\n            incRef(sis, true);\n          }\n        }\n      }\n    }\n\n    if (currentCommitPoint == null) {\n      throw new CorruptIndexException(\"failed to locate current segments_N file\");\n    }\n\n    // We keep commits list in sorted order (oldest to newest):\n    Collections.sort(commits);\n\n    // Now delete anything with ref count at 0.  These are\n    // presumably abandoned files eg due to crash of\n    // IndexWriter.\n    Iterator it = refCounts.keySet().iterator();\n    while(it.hasNext()) {\n      String fileName = (String) it.next();\n      RefCount rc = (RefCount) refCounts.get(fileName);\n      if (0 == rc.count) {\n        if (infoStream != null) {\n          message(\"init: removing unreferenced file \\\"\" + fileName + \"\\\"\");\n        }\n        deleteFile(fileName);\n      }\n    }\n\n    // Finally, give policy a chance to remove things on\n    // startup:\n    policy.onInit(commits);\n\n    // It's OK for the onInit to remove the current commit\n    // point; we just have to checkpoint our in-memory\n    // SegmentInfos to protect those files that it uses:\n    if (currentCommitPoint.deleted) {\n      checkpoint(segmentInfos, false);\n    }\n    \n    deleteCommits();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["8b6187898fc4413ccd18229711786550a280383c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"8b6187898fc4413ccd18229711786550a280383c":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}