{"path":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","commits":[{"id":"a7cdafed722b2359055d5edb6712713962bf6754","date":1178385262,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"/dev/null","sourceNew":"  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","pathOld":"src/test/org/apache/solr/servlet/SolrRequestParserTest#testStandardParseParamsAndFillStreams().mjava","sourceNew":"  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","sourceOld":"  public void testStandardParseParamsAndFillStreams() throws Exception\n  {\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>();\n    Map<String,String[]> params = new HashMap<String, String[]>();\n    params.put( \"q\", new String[] { \"hello\" } );\n    \n    // Set up the expected behavior\n    String[] ct = new String[] {\n        \"application/x-www-form-urlencoded\",\n        \"Application/x-www-form-urlencoded\",\n        \"application/x-www-form-urlencoded; charset=utf-8\",\n        \"application/x-www-form-urlencoded;\"\n    };\n    \n    for( String contentType : ct ) {\n      HttpServletRequest request = createMock(HttpServletRequest.class);\n      expect(request.getMethod()).andReturn(\"POST\").anyTimes();\n      expect(request.getContentType()).andReturn( contentType ).anyTimes();\n      expect(request.getParameterMap()).andReturn(params).anyTimes();\n      replay(request);\n      \n      MultipartRequestParser multipart = new MultipartRequestParser( 1000000 );\n      RawRequestParser raw = new RawRequestParser();\n      StandardRequestParser standard = new StandardRequestParser( multipart, raw );\n      \n      SolrParams p = standard.parseParamsAndFillStreams( request, streams );\n      \n      assertEquals( \"contentType: \"+contentType, \"hello\", p.get(\"q\") );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a7cdafed722b2359055d5edb6712713962bf6754"],"a7cdafed722b2359055d5edb6712713962bf6754":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a7cdafed722b2359055d5edb6712713962bf6754"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"a7cdafed722b2359055d5edb6712713962bf6754":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}