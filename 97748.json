{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,int,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, int readBufferSize, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         readBufferSize), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  readBufferSize), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          // nocommit don't cast to int..\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, (int) dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION),\n                                                                                  context), fieldInfos, true);\n\n        try {\n          int indexSize = 1+((int)indexEnum.size-1)/indexDivisor;  // otherwise read index\n\n          indexTerms = new Term[indexSize];\n          indexInfos = new TermInfo[indexSize];\n          indexPointers = new long[indexSize];\n\n          for (int i=0;indexEnum.next(); i++) {\n            indexTerms[i] = indexEnum.term();\n            assert indexTerms[i] != null;\n            assert indexTerms[i].text() != null;\n            assert indexTerms[i].field() != null;\n            indexInfos[i] = indexEnum.termInfo();\n            indexPointers[i] = indexEnum.indexPointer;\n        \n            for (int j = 1; j < indexDivisor; j++)\n              if (!indexEnum.next())\n                break;\n          }\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        indexTerms = null;\n        indexInfos = null;\n        indexPointers = null;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71211b3fb825ef145636d88b9b6016296ac8cfe5","date":1319749708,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          // nocommit don't cast to int..\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, (int) dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#TermInfosReader(Directory,String,FieldInfos,IOContext,int).mjava","sourceNew":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", Lucene3xPostingsFormat.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","sourceOld":"  TermInfosReader(Directory dir, String seg, FieldInfos fis, IOContext context, int indexDivisor)\n       throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    if (indexDivisor < 1 && indexDivisor != -1) {\n      throw new IllegalArgumentException(\"indexDivisor must be -1 (don't load terms index) or greater than 0: got \" + indexDivisor);\n    }\n\n    try {\n      directory = dir;\n      segment = seg;\n      fieldInfos = fis;\n\n      origEnum = new SegmentTermEnum(directory.openInput(IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_EXTENSION),\n                                                         context), fieldInfos, false);\n      size = origEnum.size;\n\n\n      if (indexDivisor != -1) {\n        // Load terms index\n        totalIndexInterval = origEnum.indexInterval * indexDivisor;\n\n        final String indexFileName = IndexFileNames.segmentFileName(segment, \"\", PreFlexCodec.TERMS_INDEX_EXTENSION);\n        final SegmentTermEnum indexEnum = new SegmentTermEnum(directory.openInput(indexFileName,\n                                                                                   context), fieldInfos, true);\n\n        try {\n          index = new TermInfosReaderIndex(indexEnum, indexDivisor, dir.fileLength(indexFileName), totalIndexInterval);\n          indexLength = index.length();\n        } finally {\n          indexEnum.close();\n        }\n      } else {\n        // Do not load terms index:\n        totalIndexInterval = -1;\n        index = null;\n        indexLength = -1;\n      }\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["71211b3fb825ef145636d88b9b6016296ac8cfe5"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"71211b3fb825ef145636d88b9b6016296ac8cfe5":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["71211b3fb825ef145636d88b9b6016296ac8cfe5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["39509e0276e70b38a5e76aa9d2c468955a1c7855","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"71211b3fb825ef145636d88b9b6016296ac8cfe5":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}