{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (matrix == null) {\n      matrix = new Matrix();\n      // fill matrix with maximumShingleSize columns\n      while (matrix.columns.size() < maximumShingleSize && readColumn()) {\n        // this loop looks ugly\n      }\n    }\n\n    // this loop exists in order to avoid recursive calls to the next method\n    // as the complexity of a large matrix\n    // then would require a multi gigabyte sized stack.\n    Token token;\n    do {\n      token = produceNextToken(reusableToken);\n    } while (token == request_next_token);\n    if (token == null) return false;\n\n    clearAttributes();\n    termAtt.setTermBuffer(token.termBuffer(), 0, token.termLength());\n    posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n    flagsAtt.setFlags(token.getFlags());\n    offsetAtt.setOffset(token.startOffset(), token.endOffset());\n    typeAtt.setType(token.type());\n    payloadAtt.setPayload(token.getPayload());\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}