{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","commits":[{"id":"e511b092029d56e0d4e30204fba8509c1c2647b6","date":1467838965,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleIndividualVersions(ShardResponse srsp, List<Long> otherVersions, SyncShardRequest sreq,\n      boolean completeList, long otherHigh, long otherHighest) {\n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    // TODO, do we really need to hold on to all the version numbers we requested.\n    // keeping track of totalRequestedUpdates should suffice for verification \n    sreq.requestedUpdates = toRequest;\n    sreq.totalRequestedUpdates = toRequest.size();\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, StrUtils.join(toRequest, ','), toRequest.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381eb1cd44d2e0defb52130de3295a576ac1e7b","date":1467840340,"type":0,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleIndividualVersions(ShardResponse srsp, List<Long> otherVersions, SyncShardRequest sreq,\n      boolean completeList, long otherHigh, long otherHighest) {\n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    // TODO, do we really need to hold on to all the version numbers we requested.\n    // keeping track of totalRequestedUpdates should suffice for verification \n    sreq.requestedUpdates = toRequest;\n    sreq.totalRequestedUpdates = toRequest.size();\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, StrUtils.join(toRequest, ','), toRequest.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","pathOld":"/dev/null","sourceNew":"  private boolean handleIndividualVersions(ShardResponse srsp, List<Long> otherVersions, SyncShardRequest sreq,\n      boolean completeList, long otherHigh, long otherHighest) {\n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    // TODO, do we really need to hold on to all the version numbers we requested.\n    // keeping track of totalRequestedUpdates should suffice for verification \n    sreq.requestedUpdates = toRequest;\n    sreq.totalRequestedUpdates = toRequest.size();\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, StrUtils.join(toRequest, ','), toRequest.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","sourceNew":null,"sourceOld":"  private boolean handleIndividualVersions(ShardResponse srsp, List<Long> otherVersions, SyncShardRequest sreq,\n      boolean completeList, long otherHigh, long otherHighest) {\n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    // TODO, do we really need to hold on to all the version numbers we requested.\n    // keeping track of totalRequestedUpdates should suffice for verification \n    sreq.requestedUpdates = toRequest;\n    sreq.totalRequestedUpdates = toRequest.size();\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, StrUtils.join(toRequest, ','), toRequest.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","sourceNew":null,"sourceOld":"  private boolean handleIndividualVersions(ShardResponse srsp, List<Long> otherVersions, SyncShardRequest sreq,\n      boolean completeList, long otherHigh, long otherHighest) {\n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    // TODO, do we really need to hold on to all the version numbers we requested.\n    // keeping track of totalRequestedUpdates should suffice for verification \n    sreq.requestedUpdates = toRequest;\n    sreq.totalRequestedUpdates = toRequest.size();\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, StrUtils.join(toRequest, ','), toRequest.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#handleIndividualVersions(ShardResponse,List[Long],SyncShardRequest,boolean,long,long).mjava","sourceNew":null,"sourceOld":"  private boolean handleIndividualVersions(ShardResponse srsp, List<Long> otherVersions, SyncShardRequest sreq,\n      boolean completeList, long otherHigh, long otherHighest) {\n    List<Long> toRequest = new ArrayList<>();\n    for (Long otherVersion : otherVersions) {\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersion) < ourLowThreshold) break;\n\n      if (ourUpdateSet.contains(otherVersion) || requestedUpdateSet.contains(otherVersion)) {\n        // we either have this update, or already requested it\n        // TODO: what if the shard we previously requested this from returns failure (because it goes\n        // down)\n        continue;\n      }\n\n      toRequest.add(otherVersion);\n      requestedUpdateSet.add(otherVersion);\n    }\n\n    // TODO, do we really need to hold on to all the version numbers we requested.\n    // keeping track of totalRequestedUpdates should suffice for verification \n    sreq.requestedUpdates = toRequest;\n    sreq.totalRequestedUpdates = toRequest.size();\n    \n    if (toRequest.isEmpty()) {\n      log.info(msg() + \" No additional versions requested. ourLowThreshold=\"+ourLowThreshold + \" otherHigh=\"+otherHigh+ \" ourHighest=\" + ourHighest + \" otherHighest=\" + otherHighest);\n\n      // we had (or already requested) all the updates referenced by the replica\n\n      // If we requested updates from another replica, we can't compare fingerprints yet with this replica, we need to defer\n      if (doFingerprint) {\n        sreq.doFingerprintComparison = true;\n      }\n\n      return true;\n    }\n    \n    if (toRequest.size() > maxUpdates) {\n      log.info(msg() + \" Failing due to needing too many updates:\" + maxUpdates);\n      return false;\n    }\n\n    return requestUpdates(srsp, StrUtils.join(toRequest, ','), toRequest.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e511b092029d56e0d4e30204fba8509c1c2647b6"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"8381eb1cd44d2e0defb52130de3295a576ac1e7b":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e511b092029d56e0d4e30204fba8509c1c2647b6":["8381eb1cd44d2e0defb52130de3295a576ac1e7b"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8381eb1cd44d2e0defb52130de3295a576ac1e7b","e511b092029d56e0d4e30204fba8509c1c2647b6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}