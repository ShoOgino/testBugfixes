{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","commits":[{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":"\t/**\n\t * Create ClusterState from json string that is typically stored in zookeeper.\n\t */\n\tpublic static ClusterState load(byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(liveNodes, state);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, Object>> sliceMap = (Map<String, Map<String, Object>>)collection.get(sliceName);\n        Map<String, Replica> shards = new LinkedHashMap<String,Replica>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new Replica(shardName, sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, String>> sliceMap = (Map<String, Map<String, String>>)collection.get(sliceName);\n        Map<String, ZkNodeProps> shards = new LinkedHashMap<String,ZkNodeProps>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new ZkNodeProps(sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","date":1347918051,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    // System.out.println(\"########## Loading ClusterState:\" + new String(bytes));\n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n\n      for (Entry<String,Object> sliceEntry : collection.entrySet()) {\n        Slice slice = new Slice(sliceEntry.getKey(), null, (Map<String,Object>)sliceEntry.getValue());\n        slices.put(slice.getName(), slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    \n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n      for(String sliceName: collection.keySet()) {\n        Map<String, Map<String, Object>> sliceMap = (Map<String, Map<String, Object>>)collection.get(sliceName);\n        Map<String, Replica> shards = new LinkedHashMap<String,Replica>();\n        for(String shardName: sliceMap.keySet()) {\n          shards.put(shardName, new Replica(shardName, sliceMap.get(shardName)));\n        }\n        Slice slice = new Slice(sliceName, shards);\n        slices.put(sliceName, slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    // System.out.println(\"########## Loading ClusterState:\" + new String(bytes));\n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n\n      for (Entry<String,Object> sliceEntry : collection.entrySet()) {\n        Slice slice = new Slice(sliceEntry.getKey(), null, (Map<String,Object>)sliceEntry.getValue());\n        slices.put(slice.getName(), slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, Map<String,Slice>>emptyMap());\n    }\n    // System.out.println(\"########## Loading ClusterState:\" + new String(bytes));\n    LinkedHashMap<String, Object> stateMap = (LinkedHashMap<String, Object>) ZkStateReader.fromJSON(bytes);\n    HashMap<String,Map<String, Slice>> state = new HashMap<String,Map<String,Slice>>();\n\n    for(String collectionName: stateMap.keySet()){\n      Map<String, Object> collection = (Map<String, Object>)stateMap.get(collectionName);\n      Map<String, Slice> slices = new LinkedHashMap<String,Slice>();\n\n      for (Entry<String,Object> sliceEntry : collection.entrySet()) {\n        Slice slice = new Slice(sliceEntry.getKey(), null, (Map<String,Object>)sliceEntry.getValue());\n        slices.put(slice.getName(), slice);\n      }\n      state.put(collectionName, slices);\n    }\n    return new ClusterState(version, liveNodes, state);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","date":1386334715,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],ZkStateReader).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, ZkStateReader stateReader) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap(),stateReader);\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<String,DocCollection>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue());\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState(version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @deprecated\n   */\n  @Deprecated\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes){\n    return load(version == null ? -1: version, bytes, liveNodes,null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a0f3ded0a0111490648d654ac53ced26f70124c","date":1397652066,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * @deprecated use {@link #load(Integer, byte[], Set, ZkStateReader)}\n   */\n  @Deprecated\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes){\n    return load(version == null ? -1: version, bytes, liveNodes,null);\n  }\n\n","sourceOld":"  /**\n   * @deprecated\n   */\n  @Deprecated\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes){\n    return load(version == null ? -1: version, bytes, liveNodes,null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * @deprecated use {@link #load(Integer, byte[], Set, ZkStateReader)}\n   */\n  @Deprecated\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes){\n    return load(version == null ? -1: version, bytes, liveNodes,null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * @deprecated use {@link #load(Integer, byte[], Set, ZkStateReader, String)}\n   */\n  @Deprecated\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes){\n    return load(version == null ? -1: version, bytes, liveNodes,null,null);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections);\n  }\n\n","sourceOld":"  /**\n   * @deprecated use {@link #load(Integer, byte[], Set, ZkStateReader, String)}\n   */\n  @Deprecated\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes){\n    return load(version == null ? -1: version, bytes, liveNodes,null,null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":"  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    return load(version, bytes, liveNodes, ZkStateReader.CLUSTER_STATE);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * Use {@link ClusterState#load(SolrZkClient, Set, ZkStateReader)} instead, unless you want to\n   * do something more when getting the data - such as get the stat, set watch, etc.\n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,DocCollection> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version);\n      collections.put(collectionName, coll);\n    }\n\n    // System.out.println(\"######## ClusterState.load result:\" + collections);\n    return new ClusterState( version, liveNodes, collections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String]).mjava","sourceNew":null,"sourceOld":"  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes) {\n    return load(version, bytes, liveNodes, ZkStateReader.CLUSTER_STATE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["9279b175e5e66258442d2123a50f052219a9cc1b"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["c5a558d54519c651068ddb202f03befefb1514a7"],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["fa64435b5902ce266c23755a4a00691a3285dab8"],"fa64435b5902ce266c23755a4a00691a3285dab8":["da94fd5fcff99442877e118f00fb42094b59f497"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d","c5a558d54519c651068ddb202f03befefb1514a7"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["3a0f3ded0a0111490648d654ac53ced26f70124c"],"3a0f3ded0a0111490648d654ac53ced26f70124c":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"c5a558d54519c651068ddb202f03befefb1514a7":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["c5a558d54519c651068ddb202f03befefb1514a7","ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"da94fd5fcff99442877e118f00fb42094b59f497":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ce7cfca1a733d2ed1f7089b339faf006bdcc7b70":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"7e7d59baa18f0aed2bb5f93a76ffce5343aee13d":["407687e67faf6e1f02a211ca078d8e3eed631027","c5a558d54519c651068ddb202f03befefb1514a7"],"fa64435b5902ce266c23755a4a00691a3285dab8":["7e7d59baa18f0aed2bb5f93a76ffce5343aee13d"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"3a0f3ded0a0111490648d654ac53ced26f70124c":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"9279b175e5e66258442d2123a50f052219a9cc1b":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c5a558d54519c651068ddb202f03befefb1514a7":["ce7cfca1a733d2ed1f7089b339faf006bdcc7b70","407687e67faf6e1f02a211ca078d8e3eed631027","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","da94fd5fcff99442877e118f00fb42094b59f497"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"da94fd5fcff99442877e118f00fb42094b59f497":["fa64435b5902ce266c23755a4a00691a3285dab8","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["3a0f3ded0a0111490648d654ac53ced26f70124c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}