{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && searcher.getIndexReader().getSequentialSubReaders().length == 1) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && searcher.getIndexReader().getSequentialSubReaders().length == 1) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bb50752d43a65ef1b623eabdb8e865983d3cd6","date":1304257984,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && \n          (searcher.getIndexReader().getSequentialSubReaders() == null || \n           searcher.getIndexReader().getSequentialSubReaders().length == 1)) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && searcher.getIndexReader().getSequentialSubReaders().length == 1) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && \n          (searcher.getIndexReader().getSequentialSubReaders() == null || \n           searcher.getIndexReader().getSequentialSubReaders().length == 1)) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && searcher.getIndexReader().getSequentialSubReaders().length == 1) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && \n          (searcher.getIndexReader().getSequentialSubReaders() == null || \n           searcher.getIndexReader().getSequentialSubReaders().length == 1)) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && searcher.getIndexReader().getSequentialSubReaders().length == 1) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    int lastTerms = 0;\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      int terms;\n      String type;\n      q.clearTotalNumberOfTerms();\n      f.clearTotalNumberOfTerms();\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          terms = q.getTotalNumberOfTerms();\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          terms = f.getTotalNumberOfTerms();\n          break;\n        default:\n          return;\n      }\n      if (VERBOSE) System.out.println(\"Found \"+terms+\" distinct terms in range for field '\"+field+\"'\"+type+\".\");\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      if (i>0 && \n          (searcher.getIndexReader().getSequentialSubReaders() == null || \n           searcher.getIndexReader().getSequentialSubReaders().length == 1)) {\n        assertEquals(\"Distinct term number is equal for all query types\", lastTerms, terms);\n      }\n      lastTerms = terms;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, Integer.parseInt(doc.get(field)) );\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, Integer.parseInt(doc.get(field)) );\n    }\n  }\n\n","bugFix":["65eb076d345a794256daba691a2b366657c807e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testRange(int).mjava","sourceNew":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","sourceOld":"  /** test for both constant score and boolean query, the other tests only use the constant score mode */\n  private void testRange(int precisionStep) throws Exception {\n    String field=\"field\"+precisionStep;\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(field, precisionStep, lower, upper, true, true);\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(field, precisionStep, lower, upper, true, true);\n    for (byte i=0; i<3; i++) {\n      TopDocs topDocs;\n      String type;\n      switch (i) {\n        case 0:\n          type = \" (constant score filter rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_FILTER_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 1:\n          type = \" (constant score boolean rewrite)\";\n          q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n          topDocs = searcher.search(q, null, noDocs, Sort.INDEXORDER);\n          break;\n        case 2:\n          type = \" (filter)\";\n          topDocs = searcher.search(new MatchAllDocsQuery(), f, noDocs, Sort.INDEXORDER);\n          break;\n        default:\n          return;\n      }\n      ScoreDoc[] sd = topDocs.scoreDocs;\n      assertNotNull(sd);\n      assertEquals(\"Score doc count\"+type, count, sd.length );\n      Document doc=searcher.doc(sd[0].doc);\n      assertEquals(\"First doc\"+type, 2*distance+startOffset, doc.getField(field).numericValue().intValue());\n      doc=searcher.doc(sd[sd.length-1].doc);\n      assertEquals(\"Last doc\"+type, (1+count)*distance+startOffset, doc.getField(field).numericValue().intValue());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c084e47df29de3330311d69dabf515ceaa989512","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c084e47df29de3330311d69dabf515ceaa989512","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"2a4965b25e439626b575c2281b39ad875f89d891":["c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"fa0f44f887719e97183771e977cfc4bfb485b766":["2a4965b25e439626b575c2281b39ad875f89d891"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32","c1bb50752d43a65ef1b623eabdb8e865983d3cd6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"2a4965b25e439626b575c2281b39ad875f89d891":["fa0f44f887719e97183771e977cfc4bfb485b766"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f4e87790277826a2aea119328600dfb07761f32":[],"c1bb50752d43a65ef1b623eabdb8e865983d3cd6":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","2a4965b25e439626b575c2281b39ad875f89d891"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}