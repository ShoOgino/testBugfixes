{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<State, HashSet<Transition>>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<State>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SpecialOperations#reverse(Automaton).mjava","sourceNew":null,"sourceOld":"  /**\n   * Reverses the language of the given (non-singleton) automaton while returning\n   * the set of new initial states.\n   */\n  public static Set<State> reverse(Automaton a) {\n    a.expandSingleton();\n    // reverse all edges\n    HashMap<State, HashSet<Transition>> m = new HashMap<>();\n    State[] states = a.getNumberedStates();\n    Set<State> accept = new HashSet<>();\n    for (State s : states)\n      if (s.isAccept())\n        accept.add(s);\n    for (State r : states) {\n      m.put(r, new HashSet<Transition>());\n      r.accept = false;\n    }\n    for (State r : states)\n      for (Transition t : r.getTransitions())\n        m.get(t.to).add(new Transition(t.min, t.max, r));\n    for (State r : states) {\n      Set<Transition> tr = m.get(r);\n      r.setTransitions(tr.toArray(new Transition[tr.size()]));\n    }\n    // make new initial+final states\n    a.initial.accept = true;\n    a.initial = new State();\n    for (State r : accept)\n      a.initial.addEpsilon(r); // ensures that all initial states are reachable\n    a.deterministic = false;\n    a.clearNumberedStates();\n    return accept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}