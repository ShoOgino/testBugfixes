{"path":"lucene/core/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link AtomicReader#fields()}\n   *         on the context's reader, for example.\n   *\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link AtomicReader#fields()}\n   *         on the context's reader, for example.\n   *\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link AtomicReader#fields()}\n   *         on the context's reader, for example.\n   *\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> <code>null</code> should be returned if\n   *         the filter doesn't accept any documents otherwise internal optimization might not apply\n   *         in the case an <i>empty</i> {@link DocIdSet} is returned.\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link AtomicReader#fields()}\n   *         on the context's reader, for example.\n   *\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> null can be returned if\n   *         no documents will be accepted by this Filter.\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/Filter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a {@link DocIdSet} enumerating the documents that should be\n   * permitted in search results. <b>NOTE:</b> null can be\n   * returned if no documents are accepted by this Filter.\n   * <p>\n   * Note: This method will be called once per segment in\n   * the index during searching.  The returned {@link DocIdSet}\n   * must refer to document IDs for that segment, not for\n   * the top-level reader.\n   * \n   * @param context a {@link AtomicReaderContext} instance opened on the index currently\n   *         searched on. Note, it is likely that the provided reader info does not\n   *         represent the whole underlying index i.e. if the index has more than\n   *         one segment the given reader only represents a single segment.\n   *         The provided context is always an atomic context, so you can call \n   *         {@link AtomicReader#fields()}\n   *         on the context's reader, for example.\n   *\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a DocIdSet that provides the documents which should be permitted or\n   *         prohibited in search results. <b>NOTE:</b> <code>null</code> should be returned if\n   *         the filter doesn't accept any documents otherwise internal optimization might not apply\n   *         in the case an <i>empty</i> {@link DocIdSet} is returned.\n   */\n  public abstract DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}