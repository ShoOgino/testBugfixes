{"path":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","commits":[{"id":"b627755385655c7cd3fb296f17593658805cf4d5","date":1552455143,"type":1,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","sourceNew":"  void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","sourceOld":"  private void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/RoutedAliasUpdateProcessorTest#assertUpdateResponse(UpdateResponse).mjava","sourceNew":"  void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    @SuppressWarnings({\"rawtypes\"})\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","sourceOld":"  void assertUpdateResponse(UpdateResponse rsp) {\n    // use of TolerantUpdateProcessor can cause non-thrown \"errors\" that we need to check for\n    List errors = (List) rsp.getResponseHeader().get(\"errors\");\n    assertTrue(\"Expected no errors: \" + errors,errors == null || errors.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b627755385655c7cd3fb296f17593658805cf4d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["b627755385655c7cd3fb296f17593658805cf4d5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b627755385655c7cd3fb296f17593658805cf4d5"],"b627755385655c7cd3fb296f17593658805cf4d5":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}