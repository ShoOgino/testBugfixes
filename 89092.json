{"path":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /** Order the subSpans within the same document by advancing all later spans\n   * after the previous one.\n   */\n  private boolean stretchToOrder() throws IOException {\n    matchDoc = subSpans[0].doc();\n    for (int i = 1; inSameDoc && (i < subSpans.length); i++) {\n      while (! docSpansOrdered(subSpans[i-1], subSpans[i])) {\n        if (! subSpans[i].next()) {\n          inSameDoc = false;\n          more = false;\n          break;\n        } else if (matchDoc != subSpans[i].doc()) {\n          inSameDoc = false;\n          break;\n        }\n      }\n    }\n    return inSameDoc;\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by advancing all later spans\n   * after the previous one.\n   */\n  private boolean stretchToOrder() throws IOException {\n    matchDoc = subSpans[0].doc();\n    for (int i = 1; inSameDoc && (i < subSpans.length); i++) {\n      while (! docSpansOrdered(subSpans[i-1], subSpans[i])) {\n        if (! subSpans[i].next()) {\n          inSameDoc = false;\n          more = false;\n          break;\n        } else if (matchDoc != subSpans[i].doc()) {\n          inSameDoc = false;\n          break;\n        }\n      }\n    }\n    return inSameDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77301f098b899884dd472e6b27fb5f8136189fe3","date":1415988476,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /** Order the subSpans within the same document by advancing all later spans\n   * after the previous one.\n   */\n  private boolean stretchToOrder() throws IOException {\n    matchDoc = subSpans[0].doc();\n    for (int i = 1; inSameDoc && (i < subSpans.length); i++) {\n      while (! docSpansOrderedNonOverlap(subSpans[i-1], subSpans[i])) {\n        if (! subSpans[i].next()) {\n          inSameDoc = false;\n          more = false;\n          break;\n        } else if (matchDoc != subSpans[i].doc()) {\n          inSameDoc = false;\n          break;\n        }\n      }\n    }\n    return inSameDoc;\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by advancing all later spans\n   * after the previous one.\n   */\n  private boolean stretchToOrder() throws IOException {\n    matchDoc = subSpans[0].doc();\n    for (int i = 1; inSameDoc && (i < subSpans.length); i++) {\n      while (! docSpansOrdered(subSpans[i-1], subSpans[i])) {\n        if (! subSpans[i].next()) {\n          inSameDoc = false;\n          more = false;\n          break;\n        } else if (matchDoc != subSpans[i].doc()) {\n          inSameDoc = false;\n          break;\n        }\n      }\n    }\n    return inSameDoc;\n  }\n\n","bugFix":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans.get(0);\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.size(); i++) {\n      Spans spans = subSpans.get(i);\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by advancing all later spans\n   * after the previous one.\n   */\n  private boolean stretchToOrder() throws IOException {\n    matchDoc = subSpans[0].doc();\n    for (int i = 1; inSameDoc && (i < subSpans.length); i++) {\n      while (! docSpansOrderedNonOverlap(subSpans[i-1], subSpans[i])) {\n        if (! subSpans[i].next()) {\n          inSameDoc = false;\n          more = false;\n          break;\n        } else if (matchDoc != subSpans[i].doc()) {\n          inSameDoc = false;\n          break;\n        }\n      }\n    }\n    return inSameDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans.get(0);\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.size(); i++) {\n      Spans spans = subSpans.get(i);\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by advancing all later spans\n   * after the previous one.\n   */\n  private boolean stretchToOrder() throws IOException {\n    matchDoc = subSpans[0].doc();\n    for (int i = 1; inSameDoc && (i < subSpans.length); i++) {\n      while (! docSpansOrderedNonOverlap(subSpans[i-1], subSpans[i])) {\n        if (! subSpans[i].next()) {\n          inSameDoc = false;\n          more = false;\n          break;\n        } else if (matchDoc != subSpans[i].doc()) {\n          inSameDoc = false;\n          break;\n        }\n      }\n    }\n    return inSameDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d1a832d7282403b4783b9435f19a5ba2e9dbdf7","date":1428071973,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans[0];\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.length; i++) {\n      Spans spans = subSpans[i];\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans.get(0);\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.size(); i++) {\n      Spans spans = subSpans.get(i);\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans[0];\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.length; i++) {\n      Spans spans = subSpans[i];\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans.get(0);\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.size(); i++) {\n      Spans spans = subSpans.get(i);\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6ee9d8242a0cf1c4d14c2252cba08a37562c806","date":1433925249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /**\n   * Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans[0];\n    matchStart = prevSpans.startPosition();\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    matchWidth = 0;\n    for (int i = 1; i < subSpans.length; i++) {\n      Spans spans = subSpans[i];\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n      }\n      matchWidth += (spans.startPosition() - prevSpans.endPosition());\n      prevSpans = spans;\n    }\n    matchEnd = subSpans[subSpans.length - 1].endPosition();\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","sourceOld":"  /** Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans[0];\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    for (int i = 1; i < subSpans.length; i++) {\n      Spans spans = subSpans[i];\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          return false;\n        }\n      }\n      prevSpans = spans;\n    }\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d93cbfb813cfdd4c109bb21027667b71ad40e0a2","date":1438704905,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered#stretchToOrder().mjava","sourceNew":"  /**\n   * Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans[0];\n    matchStart = prevSpans.startPosition();\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    matchWidth = 0;\n    for (int i = 1; i < subSpans.length; i++) {\n      Spans spans = subSpans[i];\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n      if (advancePosition(spans, prevSpans.endPosition()) == NO_MORE_POSITIONS) {\n        oneExhaustedInCurrentDoc = true;\n        return false;\n      }\n      matchWidth += (spans.startPosition() - prevSpans.endPosition());\n      prevSpans = spans;\n    }\n    matchEnd = subSpans[subSpans.length - 1].endPosition();\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","sourceOld":"  /**\n   * Order the subSpans within the same document by using nextStartPosition on all subSpans\n   * after the first as little as necessary.\n   * Return true when the subSpans could be ordered in this way,\n   * otherwise at least one is exhausted in the current doc.\n   */\n  private boolean stretchToOrder() throws IOException {\n    Spans prevSpans = subSpans[0];\n    matchStart = prevSpans.startPosition();\n    assert prevSpans.startPosition() != NO_MORE_POSITIONS : \"prevSpans no start position \"+prevSpans;\n    assert prevSpans.endPosition() != NO_MORE_POSITIONS;\n    matchWidth = 0;\n    for (int i = 1; i < subSpans.length; i++) {\n      Spans spans = subSpans[i];\n      assert spans.startPosition() != NO_MORE_POSITIONS;\n      assert spans.endPosition() != NO_MORE_POSITIONS;\n\n      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans\n        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {\n          oneExhaustedInCurrentDoc = true;\n          return false;\n        }\n      }\n      matchWidth += (spans.startPosition() - prevSpans.endPosition());\n      prevSpans = spans;\n    }\n    matchEnd = subSpans[subSpans.length - 1].endPosition();\n    return true; // all subSpans ordered and non overlapping\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d93cbfb813cfdd4c109bb21027667b71ad40e0a2":["d6ee9d8242a0cf1c4d14c2252cba08a37562c806"],"d6ee9d8242a0cf1c4d14c2252cba08a37562c806":["3d1a832d7282403b4783b9435f19a5ba2e9dbdf7"],"77301f098b899884dd472e6b27fb5f8136189fe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d1a832d7282403b4783b9435f19a5ba2e9dbdf7":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["fab172655716b96f7e42376116235017a922de3a","3d1a832d7282403b4783b9435f19a5ba2e9dbdf7"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["77301f098b899884dd472e6b27fb5f8136189fe3"],"fab172655716b96f7e42376116235017a922de3a":["77301f098b899884dd472e6b27fb5f8136189fe3","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d93cbfb813cfdd4c109bb21027667b71ad40e0a2"]},"commit2Childs":{"d93cbfb813cfdd4c109bb21027667b71ad40e0a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6ee9d8242a0cf1c4d14c2252cba08a37562c806":["d93cbfb813cfdd4c109bb21027667b71ad40e0a2"],"77301f098b899884dd472e6b27fb5f8136189fe3":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["77301f098b899884dd472e6b27fb5f8136189fe3"],"3d1a832d7282403b4783b9435f19a5ba2e9dbdf7":["d6ee9d8242a0cf1c4d14c2252cba08a37562c806","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3d1a832d7282403b4783b9435f19a5ba2e9dbdf7","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}