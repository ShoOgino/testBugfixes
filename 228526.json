{"path":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery#testFieldInToString().mjava","commits":[{"id":"947ff3caceb0d23c3c3f0c86bf22d6bee38553fb","date":1575303125,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery#testFieldInToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldInToString() throws IOException {\n    final IntervalQuery fieldW1 = new IntervalQuery(field, Intervals.term(\"w1\"));\n    assertTrue(fieldW1.toString().contains(field));\n    final String field2 = field+\"2\";\n    final IntervalQuery f2w1 = new IntervalQuery(field2, Intervals.term(\"w1\"));\n    assertTrue(f2w1.toString().contains(field2+\":\"));\n    assertFalse(\"suppress default field\",f2w1.toString(field2).contains(field2));\n    \n    final Explanation explain = searcher.explain(new IntervalQuery(field, \n        Intervals.ordered(Intervals.term(\"w1\"), Intervals.term(\"w2\"))), searcher.search(fieldW1, 1).scoreDocs[0].doc);\n    assertTrue(explain.toString().contains(field));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervalQuery#testFieldInToString().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldInToString() throws IOException {\n    final IntervalQuery fieldW1 = new IntervalQuery(field, Intervals.term(\"w1\"));\n    assertTrue(fieldW1.toString().contains(field));\n    final String field2 = field+\"2\";\n    final IntervalQuery f2w1 = new IntervalQuery(field2, Intervals.term(\"w1\"));\n    assertTrue(f2w1.toString().contains(field2+\":\"));\n    assertFalse(\"suppress default field\",f2w1.toString(field2).contains(field2));\n    \n    final Explanation explain = searcher.explain(new IntervalQuery(field, \n        Intervals.ordered(Intervals.term(\"w1\"), Intervals.term(\"w2\"))), searcher.search(fieldW1, 1).scoreDocs[0].doc);\n    assertTrue(explain.toString().contains(field));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","947ff3caceb0d23c3c3f0c86bf22d6bee38553fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"947ff3caceb0d23c3c3f0c86bf22d6bee38553fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["947ff3caceb0d23c3c3f0c86bf22d6bee38553fb"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3aa683bba99315838c968fefedf3d74f44aa993","947ff3caceb0d23c3c3f0c86bf22d6bee38553fb"],"947ff3caceb0d23c3c3f0c86bf22d6bee38553fb":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}