{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","commits":[{"id":"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","date":1301994806,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(IndexInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(IndexInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"/dev/null","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"/dev/null","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#FST(DataInput,Outputs[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#FST(DataInput,Outputs[T]).mjava","sourceNew":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","sourceOld":"  // create an existing FST\n  public FST(DataInput in, Outputs<T> outputs) throws IOException {\n    this.outputs = outputs;\n    writer = null;\n    CodecUtil.checkHeader(in, FILE_FORMAT_NAME, VERSION_START, VERSION_START);\n    if (in.readByte() == 1) {\n      // accepts empty string\n      int numBytes = in.readVInt();\n      // messy\n      bytes = new byte[numBytes];\n      in.readBytes(bytes, 0, numBytes);\n      emptyOutput = outputs.read(getBytesReader(numBytes-1));\n    } else {\n      emptyOutput = null;\n    }\n    final byte t = in.readByte();\n    switch(t) {\n      case 0:\n        inputType = INPUT_TYPE.BYTE1;\n        break;\n      case 1:\n        inputType = INPUT_TYPE.BYTE2;\n        break;\n      case 2:\n        inputType = INPUT_TYPE.BYTE4;\n        break;\n    default:\n      throw new IllegalStateException(\"invalid input type \" + t);\n    }\n    startNode = in.readVInt();\n    nodeCount = in.readVInt();\n    arcCount = in.readVInt();\n    arcWithOutputCount = in.readVInt();\n\n    bytes = new byte[in.readVInt()];\n    in.readBytes(bytes, 0, bytes.length);\n    NO_OUTPUT = outputs.getNoOutput();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","5a26f154aa4ead03cc4cb89ee0e9e4f9b79443f0","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"962d04139994fce5193143ef35615499a9a96d78":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}