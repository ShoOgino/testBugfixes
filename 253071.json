{"path":"sandbox/contributions/snowball/src/java/net/sf/snowball/ext/RussianStemmer#stem().mjava","commits":[{"id":"8497ea87d47a78ce96caf21099e6e5fd3536b512","date":1040423984,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"sandbox/contributions/snowball/src/java/net/sf/snowball/ext/RussianStemmer#stem().mjava","pathOld":"/dev/null","sourceNew":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            int v_3;\n            int v_4;\n            int v_5;\n            int v_6;\n            int v_7;\n            int v_8;\n            int v_9;\n            int v_10;\n            // (, line 238\n            // do, line 240\n            v_1 = cursor;\n            lab0: do {\n                // call mark_regions, line 240\n                if (!r_mark_regions())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = v_1;\n            // backwards, line 241\n            limit_backward = cursor; cursor = limit;\n            // setlimit, line 241\n            v_2 = limit - cursor;\n            // tomark, line 241\n            if (cursor < I_pV)\n            {\n                return false;\n            }\n            cursor = I_pV;\n            v_3 = limit_backward;\n            limit_backward = cursor;\n            cursor = limit - v_2;\n            // (, line 241\n            // do, line 242\n            v_4 = limit - cursor;\n            lab1: do {\n                // (, line 242\n                // or, line 243\n                lab2: do {\n                    v_5 = limit - cursor;\n                    lab3: do {\n                        // call perfective_gerund, line 243\n                        if (!r_perfective_gerund())\n                        {\n                            break lab3;\n                        }\n                        break lab2;\n                    } while (false);\n                    cursor = limit - v_5;\n                    // (, line 244\n                    // try, line 244\n                    v_6 = limit - cursor;\n                    lab4: do {\n                        // call reflexive, line 244\n                        if (!r_reflexive())\n                        {\n                            cursor = limit - v_6;\n                            break lab4;\n                        }\n                    } while (false);\n                    // or, line 245\n                    lab5: do {\n                        v_7 = limit - cursor;\n                        lab6: do {\n                            // call adjectival, line 245\n                            if (!r_adjectival())\n                            {\n                                break lab6;\n                            }\n                            break lab5;\n                        } while (false);\n                        cursor = limit - v_7;\n                        lab7: do {\n                            // call verb, line 245\n                            if (!r_verb())\n                            {\n                                break lab7;\n                            }\n                            break lab5;\n                        } while (false);\n                        cursor = limit - v_7;\n                        // call noun, line 245\n                        if (!r_noun())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                } while (false);\n            } while (false);\n            cursor = limit - v_4;\n            // try, line 248\n            v_8 = limit - cursor;\n            lab8: do {\n                // (, line 248\n                // [, line 248\n                ket = cursor;\n                // literal, line 248\n                if (!(eq_s_b(1, \"\\u00C9\")))\n                {\n                    cursor = limit - v_8;\n                    break lab8;\n                }\n                // ], line 248\n                bra = cursor;\n                // delete, line 248\n                slice_del();\n            } while (false);\n            // do, line 251\n            v_9 = limit - cursor;\n            lab9: do {\n                // call derivational, line 251\n                if (!r_derivational())\n                {\n                    break lab9;\n                }\n            } while (false);\n            cursor = limit - v_9;\n            // do, line 252\n            v_10 = limit - cursor;\n            lab10: do {\n                // call tidy_up, line 252\n                if (!r_tidy_up())\n                {\n                    break lab10;\n                }\n            } while (false);\n            cursor = limit - v_10;\n            limit_backward = v_3;\n            cursor = limit_backward;            return true;\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/snowball/src/java/net/sf/snowball/ext/RussianStemmer#stem().mjava","pathOld":"sandbox/contributions/snowball/src/java/net/sf/snowball/ext/RussianStemmer#stem().mjava","sourceNew":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            int v_3;\n            int v_4;\n            int v_5;\n            int v_6;\n            int v_7;\n            int v_8;\n            int v_9;\n            int v_10;\n            // (, line 238\n            // do, line 240\n            v_1 = cursor;\n            lab0: do {\n                // call mark_regions, line 240\n                if (!r_mark_regions())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = v_1;\n            // backwards, line 241\n            limit_backward = cursor; cursor = limit;\n            // setlimit, line 241\n            v_2 = limit - cursor;\n            // tomark, line 241\n            if (cursor < I_pV)\n            {\n                return false;\n            }\n            cursor = I_pV;\n            v_3 = limit_backward;\n            limit_backward = cursor;\n            cursor = limit - v_2;\n            // (, line 241\n            // do, line 242\n            v_4 = limit - cursor;\n            lab1: do {\n                // (, line 242\n                // or, line 243\n                lab2: do {\n                    v_5 = limit - cursor;\n                    lab3: do {\n                        // call perfective_gerund, line 243\n                        if (!r_perfective_gerund())\n                        {\n                            break lab3;\n                        }\n                        break lab2;\n                    } while (false);\n                    cursor = limit - v_5;\n                    // (, line 244\n                    // try, line 244\n                    v_6 = limit - cursor;\n                    lab4: do {\n                        // call reflexive, line 244\n                        if (!r_reflexive())\n                        {\n                            cursor = limit - v_6;\n                            break lab4;\n                        }\n                    } while (false);\n                    // or, line 245\n                    lab5: do {\n                        v_7 = limit - cursor;\n                        lab6: do {\n                            // call adjectival, line 245\n                            if (!r_adjectival())\n                            {\n                                break lab6;\n                            }\n                            break lab5;\n                        } while (false);\n                        cursor = limit - v_7;\n                        lab7: do {\n                            // call verb, line 245\n                            if (!r_verb())\n                            {\n                                break lab7;\n                            }\n                            break lab5;\n                        } while (false);\n                        cursor = limit - v_7;\n                        // call noun, line 245\n                        if (!r_noun())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                } while (false);\n            } while (false);\n            cursor = limit - v_4;\n            // try, line 248\n            v_8 = limit - cursor;\n            lab8: do {\n                // (, line 248\n                // [, line 248\n                ket = cursor;\n                // literal, line 248\n                if (!(eq_s_b(1, \"\\u00C9\")))\n                {\n                    cursor = limit - v_8;\n                    break lab8;\n                }\n                // ], line 248\n                bra = cursor;\n                // delete, line 248\n                slice_del();\n            } while (false);\n            // do, line 251\n            v_9 = limit - cursor;\n            lab9: do {\n                // call derivational, line 251\n                if (!r_derivational())\n                {\n                    break lab9;\n                }\n            } while (false);\n            cursor = limit - v_9;\n            // do, line 252\n            v_10 = limit - cursor;\n            lab10: do {\n                // call tidy_up, line 252\n                if (!r_tidy_up())\n                {\n                    break lab10;\n                }\n            } while (false);\n            cursor = limit - v_10;\n            limit_backward = v_3;\n            cursor = limit_backward;            return true;\n        }\n\n","sourceOld":"        public boolean stem() {\n            int v_1;\n            int v_2;\n            int v_3;\n            int v_4;\n            int v_5;\n            int v_6;\n            int v_7;\n            int v_8;\n            int v_9;\n            int v_10;\n            // (, line 238\n            // do, line 240\n            v_1 = cursor;\n            lab0: do {\n                // call mark_regions, line 240\n                if (!r_mark_regions())\n                {\n                    break lab0;\n                }\n            } while (false);\n            cursor = v_1;\n            // backwards, line 241\n            limit_backward = cursor; cursor = limit;\n            // setlimit, line 241\n            v_2 = limit - cursor;\n            // tomark, line 241\n            if (cursor < I_pV)\n            {\n                return false;\n            }\n            cursor = I_pV;\n            v_3 = limit_backward;\n            limit_backward = cursor;\n            cursor = limit - v_2;\n            // (, line 241\n            // do, line 242\n            v_4 = limit - cursor;\n            lab1: do {\n                // (, line 242\n                // or, line 243\n                lab2: do {\n                    v_5 = limit - cursor;\n                    lab3: do {\n                        // call perfective_gerund, line 243\n                        if (!r_perfective_gerund())\n                        {\n                            break lab3;\n                        }\n                        break lab2;\n                    } while (false);\n                    cursor = limit - v_5;\n                    // (, line 244\n                    // try, line 244\n                    v_6 = limit - cursor;\n                    lab4: do {\n                        // call reflexive, line 244\n                        if (!r_reflexive())\n                        {\n                            cursor = limit - v_6;\n                            break lab4;\n                        }\n                    } while (false);\n                    // or, line 245\n                    lab5: do {\n                        v_7 = limit - cursor;\n                        lab6: do {\n                            // call adjectival, line 245\n                            if (!r_adjectival())\n                            {\n                                break lab6;\n                            }\n                            break lab5;\n                        } while (false);\n                        cursor = limit - v_7;\n                        lab7: do {\n                            // call verb, line 245\n                            if (!r_verb())\n                            {\n                                break lab7;\n                            }\n                            break lab5;\n                        } while (false);\n                        cursor = limit - v_7;\n                        // call noun, line 245\n                        if (!r_noun())\n                        {\n                            break lab1;\n                        }\n                    } while (false);\n                } while (false);\n            } while (false);\n            cursor = limit - v_4;\n            // try, line 248\n            v_8 = limit - cursor;\n            lab8: do {\n                // (, line 248\n                // [, line 248\n                ket = cursor;\n                // literal, line 248\n                if (!(eq_s_b(1, \"\\u00C9\")))\n                {\n                    cursor = limit - v_8;\n                    break lab8;\n                }\n                // ], line 248\n                bra = cursor;\n                // delete, line 248\n                slice_del();\n            } while (false);\n            // do, line 251\n            v_9 = limit - cursor;\n            lab9: do {\n                // call derivational, line 251\n                if (!r_derivational())\n                {\n                    break lab9;\n                }\n            } while (false);\n            cursor = limit - v_9;\n            // do, line 252\n            v_10 = limit - cursor;\n            lab10: do {\n                // call tidy_up, line 252\n                if (!r_tidy_up())\n                {\n                    break lab10;\n                }\n            } while (false);\n            cursor = limit - v_10;\n            limit_backward = v_3;\n            cursor = limit_backward;            return true;\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["8497ea87d47a78ce96caf21099e6e5fd3536b512"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8497ea87d47a78ce96caf21099e6e5fd3536b512":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8497ea87d47a78ce96caf21099e6e5fd3536b512"],"8497ea87d47a78ce96caf21099e6e5fd3536b512":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}