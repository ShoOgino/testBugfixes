{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = DateFormatUtil.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = TrieDateField.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      defaultObject = DateMathParser.parseMath(null, arguments[1]);\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      try {\n        defaultObject = DateFormatUtil.parseDate(arguments[1]);\n      } catch (ParseException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a date.\",e);\n      }\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":4,"author":"Dennis Gove","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      defaultObject = DateMathParser.parseMath(null, arguments[1]);\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      defaultObject = DateMathParser.parseMath(null, arguments[1]);\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/statistics/StatsCollectorSupplierFactory#buildFilterSource(IndexSchema,String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds a default is missing source that wraps a given source. A missing value is required for all \n   * non-field value sources.\n   * @param schema the schema\n   * @param expressionString The name of the field to build a Field Source from.\n   * @param sourceType FIELD_TYPE for any type of field, NUMBER_TYPE for numeric fields, \n   * DATE_TYPE for date fields and STRING_TYPE for string fields.\n   * @return a value source\n   */\n  @SuppressWarnings(\"deprecation\")\n  private static ValueSource buildFilterSource(IndexSchema schema, String expressionString, int sourceType) {\n    String[] arguments = ExpressionFactory.getArguments(expressionString);\n    if (arguments.length!=2) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"Invalid arguments were given for \\\"\"+AnalyticsParams.FILTER+\"\\\".\");\n    }\n    ValueSource delegateSource = buildSourceTree(schema, arguments[0], sourceType);\n    if (delegateSource==null) {\n      return null;\n    }\n    Object defaultObject;\n\n    ValueSource src = delegateSource;\n    if (delegateSource instanceof FilterFieldSource) {\n      src = ((FilterFieldSource)delegateSource).getRootSource();\n    }\n    if ( src instanceof IntFieldSource) {\n      try {\n        defaultObject = new Integer(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into an integer.\",e);\n      }\n    } else if ( src instanceof DateFieldSource || src instanceof MultiDateFunction) {\n      defaultObject = DateMathParser.parseMath(null, arguments[1]);\n    } else if ( src instanceof LongFieldSource ) {\n      try {\n        defaultObject = new Long(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a long.\",e);\n      }\n    } else if ( src instanceof FloatFieldSource ) {\n      try {\n        defaultObject = new Float(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a float.\",e);\n      }\n    } else if ( src instanceof DoubleFieldSource || src instanceof SingleDoubleFunction ||\n                src instanceof DualDoubleFunction|| src instanceof MultiDoubleFunction) {\n      try {\n        defaultObject = new Double(arguments[1]);\n      } catch (NumberFormatException e) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The filter value \"+arguments[1]+\" cannot be converted into a double.\",e);\n      }\n    } else {\n      defaultObject = arguments[1];\n    }\n    return new FilterFieldSource(delegateSource,defaultObject);\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["d3f6c7717a0f1decd1668144537943efcc70cd95","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["d3f6c7717a0f1decd1668144537943efcc70cd95","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["0f719faa74f7213d4a395510dbc1f1b7cb178484"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}