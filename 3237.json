{"path":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","commits":[{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      writer.addDocument(\"test\", testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5d88b55f1b57feab6da94a5c635a224539bd2a","date":1095877947,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      writer.addDocument(\"test\", testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      writer.addDocument(\"test\", testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = new SegmentReader(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d189bc0061161fcd0242e1056416ace0bd3a4da7","date":1130650929,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      writer.addDocument(\"test\", testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n      fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n      fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      writer.addDocument(\"test\", testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7caf2a2db2b1e387d8457b623a4cd7e4172f4110","date":1130901721,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      String segName=\"test\";\n      writer.addDocument(segName, testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n      fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n      fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n      // test that the norm file is not present if omitNorms is true\n      for (int i=0; i<reader.fieldInfos.size(); i++) {\n        FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n        if (fi.isIndexed) {\n          assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n        }\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      writer.addDocument(\"test\", testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(\"test\", 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n      fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n      fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71776a043ec5499f36208dcdf114f371cbbb27f5","date":1132623984,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    String segName = \"test\";\n    writer.addDocument(segName, testDoc);\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Field [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norm file is not present if omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n      }\n    }\n\n    TermPositions termPositions = reader.termPositions(new Term(DocHelper.REPEATED_KEY, \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","sourceOld":"  public void testAddDocument() {\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    assertTrue(writer != null);\n    try {\n      String segName=\"test\";\n      writer.addDocument(segName, testDoc);\n      //After adding the document, we should be able to read it back in\n      SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n      assertTrue(reader != null);\n      Document doc = reader.document(0);\n      assertTrue(doc != null);\n      \n      //System.out.println(\"Document: \" + doc);\n      Field [] fields = doc.getFields(\"textField2\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == true);\n      \n      fields = doc.getFields(\"textField1\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n      assertTrue(fields[0].isTermVectorStored() == false);\n      \n      fields = doc.getFields(\"keyField\");\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n      fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n      fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n      assertTrue(fields != null && fields.length == 1);\n      assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n      // test that the norm file is not present if omitNorms is true\n      for (int i=0; i<reader.fieldInfos.size(); i++) {\n        FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n        if (fi.isIndexed) {\n          assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n        }\n      }\n\n    } catch (IOException e) {\n      e.printStackTrace();\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"295b91d4ec18af5246b31b5e7d5f17bc6f51e203","date":1132652158,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    String segName = \"test\";\n    writer.addDocument(segName, testDoc);\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Field [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norm file is not present if omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n      }\n    }\n\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Analyzer analyzer = new Analyzer() {\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new WhitespaceTokenizer(reader);\n      }\n\n      public int getPositionIncrementGap(String fieldName) {\n        return 500;\n      }\n    };\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    String segName = \"test\";\n    writer.addDocument(segName, testDoc);\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Field [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norm file is not present if omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n      }\n    }\n\n    TermPositions termPositions = reader.termPositions(new Term(DocHelper.REPEATED_KEY, \"repeated\"));\n    assertTrue(termPositions.next());\n    int freq = termPositions.freq();\n    assertEquals(2, freq);\n    assertEquals(0, termPositions.nextPosition());\n    assertEquals(502, termPositions.nextPosition());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12d40284fd9481f79444bc63bc5d13847caddd3d","date":1149902602,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    String segName = \"test\";\n    writer.addDocument(segName, testDoc);\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norm file is not present if omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n      }\n    }\n\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    String segName = \"test\";\n    writer.addDocument(segName, testDoc);\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Field [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norm file is not present if omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0","date":1185569419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.segmentInfos.info(writer.segmentInfos.size()-1);\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    DocumentWriter writer = new DocumentWriter(dir, analyzer, similarity, 50);\n    String segName = \"test\";\n    writer.addDocument(segName, testDoc);\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(new SegmentInfo(segName, 1, dir));\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norm file is not present if omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !dir.fileExists(segName + \".f\" + i));\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.segmentInfos.info(writer.segmentInfos.size()-1);\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d6229c48c0cbc7849950f7a240f07739812b2f","date":1199345558,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    Similarity similarity = Similarity.getDefault();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66f3dadb253a44f4cccc81c8a21b685b18b201fb","date":1247245699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1","date":1255502337,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.flush();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(info);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    Analyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","pathOld":"src/test/org/apache/lucene/index/TestDocumentWriter#testAddDocument().mjava","sourceNew":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","sourceOld":"  public void testAddDocument() throws Exception {\n    Document testDoc = new Document();\n    DocHelper.setupDoc(testDoc);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(testDoc);\n    writer.commit();\n    SegmentInfo info = writer.newestSegment();\n    writer.close();\n    //After adding the document, we should be able to read it back in\n    SegmentReader reader = SegmentReader.get(true, info, IndexReader.DEFAULT_TERMS_INDEX_DIVISOR);\n    assertTrue(reader != null);\n    Document doc = reader.document(0);\n    assertTrue(doc != null);\n\n    //System.out.println(\"Document: \" + doc);\n    Fieldable [] fields = doc.getFields(\"textField2\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_2_TEXT));\n    assertTrue(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"textField1\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_1_TEXT));\n    assertFalse(fields[0].isTermVectorStored());\n\n    fields = doc.getFields(\"keyField\");\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.KEYWORD_TEXT));\n\n    fields = doc.getFields(DocHelper.NO_NORMS_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.NO_NORMS_TEXT));\n\n    fields = doc.getFields(DocHelper.TEXT_FIELD_3_KEY);\n    assertTrue(fields != null && fields.length == 1);\n    assertTrue(fields[0].stringValue().equals(DocHelper.FIELD_3_TEXT));\n\n    // test that the norms are not present in the segment if\n    // omitNorms is true\n    for (int i = 0; i < reader.core.fieldInfos.size(); i++) {\n      FieldInfo fi = reader.core.fieldInfos.fieldInfo(i);\n      if (fi.isIndexed) {\n        assertTrue(fi.omitNorms == !reader.hasNorms(fi.name));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"71776a043ec5499f36208dcdf114f371cbbb27f5":["7caf2a2db2b1e387d8457b623a4cd7e4172f4110"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["d3d6229c48c0cbc7849950f7a240f07739812b2f"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["295b91d4ec18af5246b31b5e7d5f17bc6f51e203"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"295b91d4ec18af5246b31b5e7d5f17bc6f51e203":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"d3d6229c48c0cbc7849950f7a240f07739812b2f":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7caf2a2db2b1e387d8457b623a4cd7e4172f4110":["d189bc0061161fcd0242e1056416ace0bd3a4da7"]},"commit2Childs":{"71776a043ec5499f36208dcdf114f371cbbb27f5":["295b91d4ec18af5246b31b5e7d5f17bc6f51e203"],"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["d3d6229c48c0cbc7849950f7a240f07739812b2f"],"b20bed3506d9b128ea30a7a62e2a8b1d7df697b0":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["66f3dadb253a44f4cccc81c8a21b685b18b201fb"],"12d40284fd9481f79444bc63bc5d13847caddd3d":["b20bed3506d9b128ea30a7a62e2a8b1d7df697b0"],"d189bc0061161fcd0242e1056416ace0bd3a4da7":["7caf2a2db2b1e387d8457b623a4cd7e4172f4110"],"66f3dadb253a44f4cccc81c8a21b685b18b201fb":["be2419774ad2eb3c65ca1cb035c3a2ccc6ae7da1"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["6e5d88b55f1b57feab6da94a5c635a224539bd2a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"6e5d88b55f1b57feab6da94a5c635a224539bd2a":["d189bc0061161fcd0242e1056416ace0bd3a4da7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"295b91d4ec18af5246b31b5e7d5f17bc6f51e203":["12d40284fd9481f79444bc63bc5d13847caddd3d"],"d3d6229c48c0cbc7849950f7a240f07739812b2f":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"7caf2a2db2b1e387d8457b623a4cd7e4172f4110":["71776a043ec5499f36208dcdf114f371cbbb27f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}