{"path":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","commits":[{"id":"d4646f166374b438da68ac06972ca143d0a54d59","date":1294197416,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","pathOld":"lucene/contrib/spellchecker/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, new WhitespaceAnalyzer(Version.LUCENE_CURRENT)).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      if (searcher.maxDoc() > 0) {\n        new ReaderUtil.Gather(searcher.getIndexReader()) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seek(currentTerm, false) == TermsEnum.SeekStatus.FOUND) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["d4646f166374b438da68ac06972ca143d0a54d59"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4646f166374b438da68ac06972ca143d0a54d59"],"e230a61047bc041516c811baa08a7174d6f8322a":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","e230a61047bc041516c811baa08a7174d6f8322a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d4646f166374b438da68ac06972ca143d0a54d59","01e5948db9a07144112d2f08f28ca2e3cd880348"],"d4646f166374b438da68ac06972ca143d0a54d59":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","01e5948db9a07144112d2f08f28ca2e3cd880348"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4646f166374b438da68ac06972ca143d0a54d59"],"45669a651c970812a680841b97a77cce06af559f":["868da859b43505d9d2a023bfeae6dd0c795f5295","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"01e5948db9a07144112d2f08f28ca2e3cd880348":["e230a61047bc041516c811baa08a7174d6f8322a","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f"],"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"d4646f166374b438da68ac06972ca143d0a54d59":["01e5948db9a07144112d2f08f28ca2e3cd880348","70ad682703b8585f5d0a637efec044d57ec05efb","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","d4646f166374b438da68ac06972ca143d0a54d59","868da859b43505d9d2a023bfeae6dd0c795f5295"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}