{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"\"));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"\"));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, new CannedAnalyzer(INCR_0_DOC_TOKENS));\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", \"\"));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = IndexReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = new IndexSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.shutdown();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.shutdown();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT, null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.shutdown();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.shutdown();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer,false);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiPhraseQuery#doTestZeroPosIncrSloppy(Query,int).mjava","sourceNew":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits.value);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits.value;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestZeroPosIncrSloppy(Query q, int nExpected) throws IOException {\n    Directory dir = newDirectory(); // random dir\n    IndexWriterConfig cfg = newIndexWriterConfig(null);\n    IndexWriter writer = new IndexWriter(dir, cfg);\n    Document doc = new Document();\n    doc.add(new TextField(\"field\", new CannedTokenStream(INCR_0_DOC_TOKENS)));\n    writer.addDocument(doc);\n    IndexReader r = DirectoryReader.open(writer);\n    writer.close();\n    IndexSearcher s = newSearcher(r);\n    \n    if (VERBOSE) {\n      System.out.println(\"QUERY=\" + q);\n    }\n    \n    TopDocs hits = s.search(q, 1);\n    assertEquals(\"wrong number of results\", nExpected, hits.totalHits);\n    \n    if (VERBOSE) {\n      for(int hit=0;hit<hits.totalHits;hit++) {\n        ScoreDoc sd = hits.scoreDocs[hit];\n        System.out.println(\"  hit doc=\" + sd.doc + \" score=\" + sd.score);\n      }\n    }\n    \n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["2a1862266772deb28cdcb7d996b64d2177022687"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2a1862266772deb28cdcb7d996b64d2177022687"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}