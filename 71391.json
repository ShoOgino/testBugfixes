{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#initWriter(int,Random,Path).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#initWriter(int,Random,Path).mjava","pathOld":"/dev/null","sourceNew":"  private static IndexWriter initWriter(int id, Random random, Path indexPath) throws IOException {\n    Directory dir = SimpleReplicaNode.getDirectory(random, id, indexPath);\n\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random, 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = LuceneTestCase.newIndexWriterConfig(random, analyzer);\n\n    MergePolicy mp = iwc.getMergePolicy();\n    //iwc.setInfoStream(new PrintStreamInfoStream(System.out));\n\n    // Force more frequent merging so we stress merge warming:\n    if (mp instanceof TieredMergePolicy) {\n      TieredMergePolicy tmp = (TieredMergePolicy) mp;\n      tmp.setSegmentsPerTier(3);\n      tmp.setMaxMergeAtOnce(3);\n    } else if (mp instanceof LogMergePolicy) {\n      LogMergePolicy lmp = (LogMergePolicy) mp;\n      lmp.setMergeFactor(3);\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    TestUtil.reduceOpenFiles(writer);\n    return writer;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","date":1454767455,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#initWriter(int,Random,Path,boolean).mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/nrt/SimplePrimaryNode#initWriter(int,Random,Path).mjava","sourceNew":"  private static IndexWriter initWriter(int id, Random random, Path indexPath, boolean doCheckIndexOnClose) throws IOException {\n    Directory dir = SimpleReplicaNode.getDirectory(random, id, indexPath, doCheckIndexOnClose);\n\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random, 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = LuceneTestCase.newIndexWriterConfig(random, analyzer);\n\n    MergePolicy mp = iwc.getMergePolicy();\n    //iwc.setInfoStream(new PrintStreamInfoStream(System.out));\n\n    // Force more frequent merging so we stress merge warming:\n    if (mp instanceof TieredMergePolicy) {\n      TieredMergePolicy tmp = (TieredMergePolicy) mp;\n      tmp.setSegmentsPerTier(3);\n      tmp.setMaxMergeAtOnce(3);\n    } else if (mp instanceof LogMergePolicy) {\n      LogMergePolicy lmp = (LogMergePolicy) mp;\n      lmp.setMergeFactor(3);\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    TestUtil.reduceOpenFiles(writer);\n    return writer;\n  }\n\n","sourceOld":"  private static IndexWriter initWriter(int id, Random random, Path indexPath) throws IOException {\n    Directory dir = SimpleReplicaNode.getDirectory(random, id, indexPath);\n\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    analyzer.setMaxTokenLength(TestUtil.nextInt(random, 1, IndexWriter.MAX_TERM_LENGTH));\n    IndexWriterConfig iwc = LuceneTestCase.newIndexWriterConfig(random, analyzer);\n\n    MergePolicy mp = iwc.getMergePolicy();\n    //iwc.setInfoStream(new PrintStreamInfoStream(System.out));\n\n    // Force more frequent merging so we stress merge warming:\n    if (mp instanceof TieredMergePolicy) {\n      TieredMergePolicy tmp = (TieredMergePolicy) mp;\n      tmp.setSegmentsPerTier(3);\n      tmp.setMaxMergeAtOnce(3);\n    } else if (mp instanceof LogMergePolicy) {\n      LogMergePolicy lmp = (LogMergePolicy) mp;\n      lmp.setMergeFactor(3);\n    }\n\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    TestUtil.reduceOpenFiles(writer);\n    return writer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"38cf1409ac117286eb0df7d6ef31d9cfdad8cfec":[],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38cf1409ac117286eb0df7d6ef31d9cfdad8cfec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}