{"path":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","commits":[{"id":"54e743e1e17729a46f1b978b26d71fbed184132e","date":1351248573,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","pathOld":"/dev/null","sourceNew":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","pathOld":"/dev/null","sourceNew":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","sourceNew":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","sourceOld":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","sourceNew":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","sourceOld":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed","date":1590169220,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/FileFloatSource.Cache#refresh(IndexReader,Object).mjava","sourceNew":"    @SuppressWarnings({\"unchecked\"})\n    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        @SuppressWarnings({\"rawtypes\"})\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap<>();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","sourceOld":"    public void refresh(IndexReader reader, Object key) {\n      Object refreshedValues = createValue(reader, key);\n      synchronized (readerCache) {\n        Map innerCache = (Map) readerCache.get(reader);\n        if (innerCache == null) {\n          innerCache = new HashMap();\n          readerCache.put(reader, innerCache);\n        }\n        innerCache.put(key, refreshedValues);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["54e743e1e17729a46f1b978b26d71fbed184132e","19275ba31e621f6da1b83bf13af75233876fd3d4"],"54e743e1e17729a46f1b978b26d71fbed184132e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["54e743e1e17729a46f1b978b26d71fbed184132e"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54e743e1e17729a46f1b978b26d71fbed184132e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"54e743e1e17729a46f1b978b26d71fbed184132e":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54e743e1e17729a46f1b978b26d71fbed184132e","f2126b84bd093fa3d921582a109a0ee578c28126"],"ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ad85d58ffbb1e2cee380ba2a1bf78528ad0174ed"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}