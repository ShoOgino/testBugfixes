{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","commits":[{"id":"7a744f34b732efe0beb11df92bde24ccc01460dc","date":1094656002,"type":1,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,Analyzer,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,Analyzer,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field,\n                                Analyzer analyzer,\n                                String queryText,\n                                int slop)  throws ParseException {\n    Query query = getFieldQuery(field, analyzer, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01b9585922e829a4f49f41499e0202f20fbe3275","date":1100358686,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getFieldQuery(String,String,int).mjava","sourceNew":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Base implementation delegates to {@link #getFieldQuery(String,String)}.\n   * This method may be overridden, for example, to return\n   * a SpanNearQuery instead of a PhraseQuery.\n   *\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText, int slop)\n        throws ParseException {\n    Query query = getFieldQuery(field, queryText);\n\n    if (query instanceof PhraseQuery) {\n      ((PhraseQuery) query).setSlop(slop);\n    }\n    if (query instanceof MultiPhraseQuery) {\n      ((MultiPhraseQuery) query).setSlop(slop);\n    }\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"01b9585922e829a4f49f41499e0202f20fbe3275":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["01b9585922e829a4f49f41499e0202f20fbe3275"]},"commit2Childs":{"7a744f34b732efe0beb11df92bde24ccc01460dc":["01b9585922e829a4f49f41499e0202f20fbe3275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a744f34b732efe0beb11df92bde24ccc01460dc"],"01b9585922e829a4f49f41499e0202f20fbe3275":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}