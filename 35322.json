{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance squared from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param v is the vector.\n   * @return the linear distance squared.\n   */\n  public double linearDistanceSquared(final PlanetModel planetModel, final GeoPoint v, final Membership... bounds) {\n    return linearDistanceSquared(planetModel, v.x, v.y, v.z, bounds);\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance squared from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param v is the vector.\n   * @return the linear distance squared.\n   */\n  public double linearDistanceSquared(final PlanetModel planetModel, final GeoPoint v, final Membership... bounds) {\n    return linearDistanceSquared(planetModel, v.x, v.y, v.z, bounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance squared from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param v is the point.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance squared.\n   */\n  public double linearDistanceSquared(final PlanetModel planetModel, final GeoPoint v, final Membership... bounds) {\n    return linearDistanceSquared(planetModel, v.x, v.y, v.z, bounds);\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance squared from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param v is the vector.\n   * @return the linear distance squared.\n   */\n  public double linearDistanceSquared(final PlanetModel planetModel, final GeoPoint v, final Membership... bounds) {\n    return linearDistanceSquared(planetModel, v.x, v.y, v.z, bounds);\n  }\n\n","bugFix":["9908748d960ccb7706a20e81289a656237780b6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#linearDistanceSquared(PlanetModel,GeoPoint,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance squared from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param v is the point.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance squared.\n   */\n  public double linearDistanceSquared(final PlanetModel planetModel, final GeoPoint v, final Membership... bounds) {\n    return linearDistanceSquared(planetModel, v.x, v.y, v.z, bounds);\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance squared from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param v is the point.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance squared.\n   */\n  public double linearDistanceSquared(final PlanetModel planetModel, final GeoPoint v, final Membership... bounds) {\n    return linearDistanceSquared(planetModel, v.x, v.y, v.z, bounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"b4e444678504caf66a8060b1d514383aa4feac0c":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}