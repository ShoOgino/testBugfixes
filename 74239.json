{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  @Override\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  @Override\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8eba81f9fc6f997ecfc7c81d02f69af185e444","date":1451426453,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleSpanFragmenter#isNewFragment().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  @Override\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos <= position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (PositionSpan positionSpan : positionSpans) {\n        if (positionSpan.start == position) {\n          waitForPos = positionSpan.end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.search.highlight.Fragmenter#isNewFragment()\n   */\n  @Override\n  public boolean isNewFragment() {\n    position += posIncAtt.getPositionIncrement();\n\n    if (waitForPos == position) {\n      waitForPos = -1;\n    } else if (waitForPos != -1) {\n      return false;\n    }\n\n    WeightedSpanTerm wSpanTerm = queryScorer.getWeightedSpanTerm(termAtt.toString());\n\n    if (wSpanTerm != null) {\n      List<PositionSpan> positionSpans = wSpanTerm.getPositionSpans();\n\n      for (int i = 0; i < positionSpans.size(); i++) {\n        if (positionSpans.get(i).start == position) {\n          waitForPos = positionSpans.get(i).end + 1;\n          break;\n        }\n      }\n    }\n\n    boolean isNewFrag = offsetAtt.endOffset() >= (fragmentSize * currentNumFrags)\n        && (textSize - offsetAtt.endOffset()) >= (fragmentSize >>> 1);\n    \n    if (isNewFrag) {\n      currentNumFrags++;\n    }\n\n    return isNewFrag;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad8eba81f9fc6f997ecfc7c81d02f69af185e444":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad8eba81f9fc6f997ecfc7c81d02f69af185e444"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ad8eba81f9fc6f997ecfc7c81d02f69af185e444":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ad8eba81f9fc6f997ecfc7c81d02f69af185e444"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}