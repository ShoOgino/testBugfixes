{"path":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","commits":[{"id":"ddc1ae5ff40afa2c5136ee382632ebe602e050e6","date":1474097671,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb62cc3362417c3e5136f2f26d34a1072ad633eb","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1a94d02abb8cde5dd6ea0defbbc751ce71603","date":1521902895,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fa95fb629298e03fe5e3d71a0ce792f1256f711","date":1521903809,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.count(new MatchAllDocsQuery()));\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/RequestSyncShardOp#execute(CallInfo).mjava","sourceNew":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              if (log.isDebugEnabled()) {\n                log.debug(\"{} synched {}\", core.getCoreContainer().getZkController().getNodeName()\n                    , searcher.count(new MatchAllDocsQuery()));\n              }\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void execute(CallInfo it) throws Exception {\n    final SolrParams params = it.req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n\n    String cname = params.required().get(CoreAdminParams.CORE);\n\n    ZkController zkController = it.handler.coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreContainer());\n\n        Map<String, Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n\n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true).isSuccess();\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.count(new MatchAllDocsQuery()));\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6"],"575e66bd4b2349209027f6801184da7fc3cba13f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"ddc1ae5ff40afa2c5136ee382632ebe602e050e6":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"3fa95fb629298e03fe5e3d71a0ce792f1256f711":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ddc1ae5ff40afa2c5136ee382632ebe602e050e6","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["575e66bd4b2349209027f6801184da7fc3cba13f"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["3fa95fb629298e03fe5e3d71a0ce792f1256f711","63a1a94d02abb8cde5dd6ea0defbbc751ce71603"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"63a1a94d02abb8cde5dd6ea0defbbc751ce71603":["3fa95fb629298e03fe5e3d71a0ce792f1256f711"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}