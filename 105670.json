{"path":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","commits":[{"id":"0afa0bff72bc189cdf6fc95f80d80365a6417e3b","date":1118096970,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (&gt; 10) are best\n   * for batch index creation, and smaller values (&lt; 10) for indices that are\n   * interactively maintained.\n   * <p>This must never be less than 2.  The default value is 10.\n   * \n   * @see IndexWriter#setMergeFactor(int)\n   * @throws IllegalStateException if the index is closed\n   */\n  public void setMergeFactor(int mergeFactor) throws IOException {\n    synchronized(directory) {\n      assureOpen();\n      createIndexWriter();\n      indexWriter.setMergeFactor(mergeFactor);\n      this.mergeFactor = mergeFactor;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1c07442989a088ee318404ce08a4c3bce7845e8","date":1118098638,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","sourceNew":"  /**\n   * Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (&gt; 10) are best\n   * for batch index creation, and smaller values (&lt; 10) for indices that are\n   * interactively maintained.\n   * <p>This must never be less than 2.  The default value is 10.\n   * \n   * @see IndexWriter#setMergeFactor(int)\n   * @throws IllegalStateException if the index is closed\n   */\n  public void setMergeFactor(int mergeFactor) {\n    synchronized(directory) {\n      assureOpen();\n      if (indexWriter != null) {\n        indexWriter.setMergeFactor(mergeFactor);\n      }\n      this.mergeFactor = mergeFactor;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (&gt; 10) are best\n   * for batch index creation, and smaller values (&lt; 10) for indices that are\n   * interactively maintained.\n   * <p>This must never be less than 2.  The default value is 10.\n   * \n   * @see IndexWriter#setMergeFactor(int)\n   * @throws IllegalStateException if the index is closed\n   */\n  public void setMergeFactor(int mergeFactor) throws IOException {\n    synchronized(directory) {\n      assureOpen();\n      createIndexWriter();\n      indexWriter.setMergeFactor(mergeFactor);\n      this.mergeFactor = mergeFactor;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4799e29dc1305c733ee92a39063d29708c603d49","date":1134008065,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","sourceNew":"  /**\n   * Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (&gt; 10) are best\n   * for batch index creation, and smaller values (&lt; 10) for indices that are\n   * interactively maintained.\n   * <p>This must never be less than 2.  The default value is 10.\n   *\n   * @see IndexWriter#setMergeFactor(int)\n   * @throws IllegalStateException if the index is closed\n   */\n  public void setMergeFactor(int mergeFactor) {\n    synchronized(directory) {\n      assureOpen();\n      if (indexWriter != null) {\n        indexWriter.setMergeFactor(mergeFactor);\n      }\n      this.mergeFactor = mergeFactor;\n    }\n  }\n\n","sourceOld":"  /**\n   * Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (&gt; 10) are best\n   * for batch index creation, and smaller values (&lt; 10) for indices that are\n   * interactively maintained.\n   * <p>This must never be less than 2.  The default value is 10.\n   * \n   * @see IndexWriter#setMergeFactor(int)\n   * @throws IllegalStateException if the index is closed\n   */\n  public void setMergeFactor(int mergeFactor) {\n    synchronized(directory) {\n      assureOpen();\n      if (indexWriter != null) {\n        indexWriter.setMergeFactor(mergeFactor);\n      }\n      this.mergeFactor = mergeFactor;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexModifier#setMergeFactor(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines how often segment indices are merged by addDocument().  With\n   * smaller values, less RAM is used while indexing, and searches on\n   * unoptimized indices are faster, but indexing speed is slower.  With larger\n   * values, more RAM is used during indexing, and while searches on unoptimized\n   * indices are slower, indexing is faster.  Thus larger values (&gt; 10) are best\n   * for batch index creation, and smaller values (&lt; 10) for indices that are\n   * interactively maintained.\n   * <p>This must never be less than 2.  The default value is 10.\n   *\n   * @see IndexWriter#setMergeFactor(int)\n   * @throws IllegalStateException if the index is closed\n   */\n  public void setMergeFactor(int mergeFactor) {\n    synchronized(directory) {\n      assureOpen();\n      if (indexWriter != null) {\n        indexWriter.setMergeFactor(mergeFactor);\n      }\n      this.mergeFactor = mergeFactor;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["4799e29dc1305c733ee92a39063d29708c603d49"],"f1c07442989a088ee318404ce08a4c3bce7845e8":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"4799e29dc1305c733ee92a39063d29708c603d49":["f1c07442989a088ee318404ce08a4c3bce7845e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1c07442989a088ee318404ce08a4c3bce7845e8":["4799e29dc1305c733ee92a39063d29708c603d49"],"4799e29dc1305c733ee92a39063d29708c603d49":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["f1c07442989a088ee318404ce08a4c3bce7845e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}