{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    client.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    client.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      client.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(client, req);\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    server.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(server, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    server.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      server.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(server, req);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n\n    // test without request query params\n    DebugServlet.clear();\n    client.setQueryParams(setOf(\"serverOnly\"));\n    UpdateRequest req = new UpdateRequest();\n    setReqParamsOf(req, \"serverOnly\", \"notServer\");\n    try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test without server query params\n    DebugServlet.clear();\n    client.setQueryParams(setOf());\n    req = new UpdateRequest();\n    req.setQueryParams(setOf(\"requestOnly\"));\n    setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n    try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test with both request and server query params\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      client.request(req);\n    } catch (Throwable t) {}\n    verifyServletState(client, req);\n\n    // test with both request and server query params with single stream\n    DebugServlet.clear();\n    req = new UpdateRequest();\n    req.add(new SolrInputDocument());\n    client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n    req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n    setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n     try {\n      client.request(req);\n    } catch (Throwable t) {}\n    // NOTE: single stream requests send all the params\n    // as part of the query string.  So add \"neither\" to the request\n    // so it passes the verification step.\n    req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n    verifyServletState(client, req);\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["b4407017a35dea85f652ec066e4565818dd75436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    try {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4407017a35dea85f652ec066e4565818dd75436","date":1431296729,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n      } catch (Throwable t) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      expectThrows(ParseException.class, () -> client.request(req));\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      UpdateRequest req2 = new UpdateRequest();\n      req2.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req2, \"requestOnly\", \"notRequest\");\n      expectThrows(ParseException.class, () -> client.request(req2));\n      verifyServletState(client, req2);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      UpdateRequest req3 = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req3.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req3, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req3));\n      verifyServletState(client, req3);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      UpdateRequest req4 = new UpdateRequest();\n      req4.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req4, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req4));\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req4);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      expectThrows(ParseException.class, () -> client.request(req));\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      UpdateRequest req2 = new UpdateRequest();\n      req2.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req2, \"requestOnly\", \"notRequest\");\n      expectThrows(ParseException.class, () -> client.request(req2));\n      verifyServletState(client, req2);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      UpdateRequest req3 = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req3.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req3, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req3));\n      verifyServletState(client, req3);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      UpdateRequest req4 = new UpdateRequest();\n      req4.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req4, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req4));\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req4);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      expectThrows(ParseException.class, () -> client.request(req));\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      UpdateRequest req2 = new UpdateRequest();\n      req2.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req2, \"requestOnly\", \"notRequest\");\n      expectThrows(ParseException.class, () -> client.request(req2));\n      verifyServletState(client, req2);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      UpdateRequest req3 = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req3.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req3, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req3));\n      verifyServletState(client, req3);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      UpdateRequest req4 = new UpdateRequest();\n      req4.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req4, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req4));\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req4);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      req = new UpdateRequest();\n      req.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req, \"requestOnly\", \"notRequest\");\n      try {\n        client.request(req);\n      } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      verifyServletState(client, req);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      req = new UpdateRequest();\n      req.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n       try {\n        client.request(req);\n       } catch (ParseException ignored) {}\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testQueryString().mjava","sourceNew":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.request(req));\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      UpdateRequest req2 = new UpdateRequest();\n      req2.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req2, \"requestOnly\", \"notRequest\");\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.request(req2));\n      verifyServletState(client, req2);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      UpdateRequest req3 = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req3.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req3, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.request(req3));\n      verifyServletState(client, req3);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      UpdateRequest req4 = new UpdateRequest();\n      req4.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req4, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.request(req4));\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req4);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testQueryString() throws Exception {\n\n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try(HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // test without request query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf(\"serverOnly\"));\n      UpdateRequest req = new UpdateRequest();\n      setReqParamsOf(req, \"serverOnly\", \"notServer\");\n      expectThrows(ParseException.class, () -> client.request(req));\n      verifyServletState(client, req);\n  \n      // test without server query params\n      DebugServlet.clear();\n      client.setQueryParams(setOf());\n      UpdateRequest req2 = new UpdateRequest();\n      req2.setQueryParams(setOf(\"requestOnly\"));\n      setReqParamsOf(req2, \"requestOnly\", \"notRequest\");\n      expectThrows(ParseException.class, () -> client.request(req2));\n      verifyServletState(client, req2);\n  \n      // test with both request and server query params\n      DebugServlet.clear();\n      UpdateRequest req3 = new UpdateRequest();\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req3.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req3, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req3));\n      verifyServletState(client, req3);\n  \n      // test with both request and server query params with single stream\n      DebugServlet.clear();\n      UpdateRequest req4 = new UpdateRequest();\n      req4.add(new SolrInputDocument());\n      client.setQueryParams(setOf(\"serverOnly\", \"both\"));\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\"));\n      setReqParamsOf(req4, \"serverOnly\", \"requestOnly\", \"both\", \"neither\");\n      expectThrows(ParseException.class, () -> client.request(req4));\n      // NOTE: single stream requests send all the params\n      // as part of the query string.  So add \"neither\" to the request\n      // so it passes the verification step.\n      req4.setQueryParams(setOf(\"requestOnly\", \"both\", \"neither\"));\n      verifyServletState(client, req4);\n    }\n  }\n\n","bugFix":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b4407017a35dea85f652ec066e4565818dd75436"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b4407017a35dea85f652ec066e4565818dd75436","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"b4407017a35dea85f652ec066e4565818dd75436":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"f8061ddd97f3352007d927dae445884a6f3d857b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"b4407017a35dea85f652ec066e4565818dd75436":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b4407017a35dea85f652ec066e4565818dd75436"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}