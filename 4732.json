{"path":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testRoundTrip().mjava","commits":[{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DateMathParserTest#testRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Using dates in the canonical format, verify that parsing+formatting\n   * is an identify function\n   */\n  public void testRoundTrip() throws Exception {\n    // NOTE: the 2nd arg is what the round trip result looks like (may be null if same as input)\n\n    assertParseFormatEquals(\"1995-12-31T23:59:59.999666Z\",  \"1995-12-31T23:59:59.999Z\"); // beyond millis is truncated\n    assertParseFormatEquals(\"1995-12-31T23:59:59.999Z\",     \"1995-12-31T23:59:59.999Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.99Z\",      \"1995-12-31T23:59:59.990Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.9Z\",       \"1995-12-31T23:59:59.900Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59Z\",         \"1995-12-31T23:59:59Z\");\n\n    // here the input isn't in the canonical form, but we should be forgiving\n    assertParseFormatEquals(\"1995-12-31T23:59:59.990Z\", \"1995-12-31T23:59:59.990Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.900Z\", \"1995-12-31T23:59:59.900Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.90Z\",  \"1995-12-31T23:59:59.900Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.000Z\", \"1995-12-31T23:59:59Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.00Z\",  \"1995-12-31T23:59:59Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.0Z\",   \"1995-12-31T23:59:59Z\");\n\n    // kind of kludgy, but we have other tests for the actual date math\n    //assertParseFormatEquals(\"NOW/DAY\", p.parseMath(\"/DAY\").toInstant().toString());\n\n    // as of Solr 1.3\n    assertParseFormatEquals(\"1995-12-31T23:59:59Z/DAY\", \"1995-12-31T00:00:00Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.123Z/DAY\", \"1995-12-31T00:00:00Z\");\n    assertParseFormatEquals(\"1995-12-31T23:59:59.123999Z/DAY\", \"1995-12-31T00:00:00Z\");\n\n    // typical dates, various precision  (0,1,2,3 digits of millis)\n    assertParseFormatEquals(\"1995-12-31T23:59:59.987Z\", null);\n    assertParseFormatEquals(\"1995-12-31T23:59:59.98Z\", \"1995-12-31T23:59:59.980Z\");//add 0 ms\n    assertParseFormatEquals(\"1995-12-31T23:59:59.9Z\",  \"1995-12-31T23:59:59.900Z\");//add 00 ms\n    assertParseFormatEquals(\"1995-12-31T23:59:59Z\", null);\n    assertParseFormatEquals(\"1976-03-06T03:06:00Z\", null);\n    assertParseFormatEquals(\"1995-12-31T23:59:59.987654Z\", \"1995-12-31T23:59:59.987Z\");//truncate nanoseconds off\n\n    // dates with atypical years\n    assertParseFormatEquals(\"0001-01-01T01:01:01Z\", null);\n    assertParseFormatEquals(\"+12021-12-01T03:03:03Z\", null);\n\n    assertParseFormatEquals(\"0000-04-04T04:04:04Z\", null); // note: 0 AD is also known as 1 BC\n\n    // dates with negative years (BC)\n    assertParseFormatEquals(\"-0005-05-05T05:05:05Z\", null);\n    assertParseFormatEquals(\"-2021-12-01T04:04:04Z\", null);\n    assertParseFormatEquals(\"-12021-12-01T02:02:02Z\", null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}