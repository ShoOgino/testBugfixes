{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":["346d5897e4c4e77ed5dbd31f7730ff30973d5971"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94b4f4bf8892e6006d66f4231d6d1873bbe56e73","date":1352661595,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":["06584e6e98d592b34e1329b384182f368d2025e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64ffebe62143a8d4c37d99b6ece6d430d948ebc","date":1408382164,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":null,"sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge/s to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94b4f4bf8892e6006d66f4231d6d1873bbe56e73":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a64ffebe62143a8d4c37d99b6ece6d430d948ebc"]},"commit2Childs":{"94b4f4bf8892e6006d66f4231d6d1873bbe56e73":["407687e67faf6e1f02a211ca078d8e3eed631027","a64ffebe62143a8d4c37d99b6ece6d430d948ebc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73","fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027"],"a64ffebe62143a8d4c37d99b6ece6d430d948ebc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}