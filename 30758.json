{"path":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"/dev/null","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"new Integer(0x\"+Integer.toHexString(min>>>shift)+\"),new Integer(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d62b1ed69b2d54a65df6f993499b39562d1dc1f9","date":1255700561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      //@Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator[Integer]).mjava","pathOld":"src/test/org/apache/lucene/util/TestNumericUtils#assertIntRangeSplit(int,int,int,boolean,Iterator).mjava","sourceNew":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator<Integer> neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", neededBounds.next().intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", neededBounds.next().intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","sourceOld":"  /** Note: The neededBounds iterator must be unsigned (easier understanding what's happening) */\n  protected void assertIntRangeSplit(final int lower, final int upper, int precisionStep,\n    final boolean useBitSet, final Iterator neededBounds\n  ) throws Exception {\n    final OpenBitSet bits=useBitSet ? new OpenBitSet(upper-lower+1) : null;\n    \n    NumericUtils.splitIntRange(new NumericUtils.IntRangeBuilder() {\n      @Override\n      public void addRange(int min, int max, int shift) {\n        assertTrue(\"min, max should be inside bounds\", min>=lower && min<=upper && max>=lower && max<=upper);\n        if (useBitSet) for (int i=min; i<=max; i++) {\n          assertFalse(\"ranges should not overlap\", bits.getAndSet(i-lower) );\n        }\n        // make unsigned ints for easier display and understanding\n        min ^= 0x80000000;\n        max ^= 0x80000000;\n        //System.out.println(\"Integer.valueOf(0x\"+Integer.toHexString(min>>>shift)+\"),Integer.valueOf(0x\"+Integer.toHexString(max>>>shift)+\"),\");\n        assertEquals( \"inner min bound\", ((Integer)neededBounds.next()).intValue(), min>>>shift);\n        assertEquals( \"inner max bound\", ((Integer)neededBounds.next()).intValue(), max>>>shift);\n      }\n    }, precisionStep, lower, upper);\n    \n    if (useBitSet) {\n      // after flipping all bits in the range, the cardinality should be zero\n      bits.flip(0,upper-lower+1);\n      assertTrue(\"The sub-range concenated should match the whole range\", bits.isEmpty());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"6bcde5e3f23911110baa101ed062b544162825b5":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}