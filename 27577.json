{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertMetric(String n, Metric metric, PropertyFilter propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, propertyFilter, simple, compact, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, consumer);\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertMetric(String n, Metric metric, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      consumer.accept(n, convertCounter(counter, compact));\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, simple, compact, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, simple, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, skipHistograms, simple, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, simple, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, skipAggregateValues, simple, consumer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertMetric(String n, Metric metric, PropertyFilter propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, propertyFilter, simple, compact, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, consumer);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetric(String n, Metric metric, PropertyFilter propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, propertyFilter, simple, compact, separator, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, separator, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, separator, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, separator, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, separator, consumer);\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertMetric(String n, Metric metric, PropertyFilter propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, propertyFilter, simple, compact, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, consumer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,String,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetric(String,Metric,PropertyFilter,boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetric(String n, Metric metric, PropertyFilter propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, String separator, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, propertyFilter, simple, compact, separator, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, separator, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, separator, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, separator, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, separator, consumer);\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert a single instance of metric into a map or flattened object.\n   * @param n metric name\n   * @param metric metric instance\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertMetric(String n, Metric metric, PropertyFilter propertyFilter, boolean skipHistograms, boolean skipAggregateValues,\n                              boolean compact, boolean simple, BiConsumer<String, Object> consumer) {\n    if (metric instanceof Counter) {\n      Counter counter = (Counter) metric;\n      convertCounter(n, counter, propertyFilter, compact, consumer);\n    } else if (metric instanceof Gauge) {\n      Gauge gauge = (Gauge) metric;\n      try {\n        convertGauge(n, gauge, propertyFilter, simple, compact, consumer);\n      } catch (InternalError ie) {\n        if (n.startsWith(\"memory.\") && ie.getMessage().contains(\"Memory Pool not found\")) {\n          LOG.warn(\"Error converting gauge '\" + n + \"', possible JDK bug: SOLR-10362\", ie);\n          consumer.accept(n, null);\n        } else {\n          throw ie;\n        }\n      }\n    } else if (metric instanceof Meter) {\n      Meter meter = (Meter) metric;\n      convertMeter(n, meter, propertyFilter, simple, consumer);\n    } else if (metric instanceof Timer) {\n      Timer timer = (Timer) metric;\n      convertTimer(n, timer, propertyFilter, skipHistograms, simple, consumer);\n    } else if (metric instanceof Histogram) {\n      if (!skipHistograms) {\n        Histogram histogram = (Histogram) metric;\n        convertHistogram(n, histogram, propertyFilter, simple, consumer);\n      }\n    } else if (metric instanceof AggregateMetric) {\n      convertAggregateMetric(n, (AggregateMetric)metric, propertyFilter, skipAggregateValues, simple, consumer);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d6879a535f14bc53be7c86de58142558c4f9eee"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}