{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,int).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, int readBufferSize) throws IOException {\n      final IndexInput in = dir.openInput(fileName, readBufferSize);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,int).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, int readBufferSize) throws IOException {\n      final IndexInput in = dir.openInput(fileName, readBufferSize);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,int).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, int readBufferSize) throws IOException {\n      final IndexInput in = dir.openInput(fileName, readBufferSize);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#openInput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#openInput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public IntIndexInput openInput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexInput in = dir.openInput(fileName, context);\n      final int baseBlockSize = in.readInt();\n      return new VariableIntBlockIndexInput(in) {\n\n        @Override\n        protected BlockReader getBlockReader(final IndexInput in, final int[] buffer) throws IOException {\n          return new BlockReader() {\n            public void seek(long pos) {}\n            public int readBlock() throws IOException {\n              buffer[0] = in.readVInt();\n              final int count = buffer[0] <= 3 ? baseBlockSize-1 : 2*baseBlockSize-1;\n              assert buffer.length >= count: \"buffer.length=\" + buffer.length + \" count=\" + count;\n              for(int i=0;i<count;i++) {\n                buffer[i+1] = in.readVInt();\n              }\n              return 1+count;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}