{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random.nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random);\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random);\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = _TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(\"UTF-8\");\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","sourceNew":"  private void assertAutomaton(LightAutomaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStringsLight ras = new AutomatonTestUtil.RandomAcceptedStringsLight(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#assertAutomaton(LightAutomaton).mjava","sourceNew":"  private void assertAutomaton(Automaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","sourceOld":"  private void assertAutomaton(LightAutomaton automaton) throws Exception {\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n    final AutomatonTestUtil.RandomAcceptedStrings ras = new AutomatonTestUtil.RandomAcceptedStrings(automaton);\n    \n    int num = atLeast(1000);\n    for (int i = 0; i < num; i++) {\n      final String string;\n      if (random().nextBoolean()) {\n        // likely not accepted\n        string = TestUtil.randomUnicodeString(random());\n      } else {\n        // will be accepted\n        int[] codepoints = ras.getRandomAcceptedString(random());\n        try {\n          string = UnicodeUtil.newString(codepoints, 0, codepoints.length);\n        } catch (Exception e) {\n          System.out.println(codepoints.length + \" codepoints:\");\n          for(int j=0;j<codepoints.length;j++) {\n            System.out.println(\"  \" + Integer.toHexString(codepoints[j]));\n          }\n          throw e;\n        }\n      }\n      byte bytes[] = string.getBytes(StandardCharsets.UTF_8);\n      assertEquals(cra.run(string), bra.run(bytes, 0, bytes.length));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6613659748fe4411a7dcf85266e55db1f95f7315","7d89d7e4e5101347833eea558851bf4209218619"],"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7d89d7e4e5101347833eea558851bf4209218619":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}