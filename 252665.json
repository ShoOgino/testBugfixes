{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxFieldLength(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxFieldLength(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxFieldLength(int).mjava","sourceNew":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document. This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory. This setting refers to the number of running terms,\n   * not to the number of different terms.\n   * <p>\n   * <b>NOTE:</b> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document. If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size. If you set it to {@link #UNLIMITED_FIELD_LENGTH}, then\n   * the only limit is your memory, but you should anticipate an\n   * OutOfMemoryError.\n   * <p>\n   * By default it is set to {@link #UNLIMITED_FIELD_LENGTH}.\n   */\n  public IndexWriterConfig setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document. This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory. This setting refers to the number of running terms,\n   * not to the number of different terms.\n   * <p>\n   * <b>NOTE:</b> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document. If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size. If you set it to {@link #UNLIMITED_FIELD_LENGTH}, then\n   * the only limit is your memory, but you should anticipate an\n   * OutOfMemoryError.\n   * <p>\n   * By default it is set to {@link #UNLIMITED_FIELD_LENGTH}.\n   */\n  public IndexWriterConfig setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047784e704fe141e0ff36affac8a7cb6c7bbec","date":1295352100,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxFieldLength(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document. This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory. This setting refers to the number of running terms,\n   * not to the number of different terms.\n   * <p>\n   * <b>NOTE:</b> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document. If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size. If you set it to {@link #UNLIMITED_FIELD_LENGTH}, then\n   * the only limit is your memory, but you should anticipate an\n   * OutOfMemoryError.\n   * <p>\n   * By default it is set to {@link #UNLIMITED_FIELD_LENGTH}.\n   */\n  public IndexWriterConfig setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxFieldLength(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document. This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory. This setting refers to the number of running terms,\n   * not to the number of different terms.\n   * <p>\n   * <b>NOTE:</b> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document. If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size. If you set it to {@link #UNLIMITED_FIELD_LENGTH}, then\n   * the only limit is your memory, but you should anticipate an\n   * OutOfMemoryError.\n   * <p>\n   * By default it is set to {@link #UNLIMITED_FIELD_LENGTH}.\n   */\n  public IndexWriterConfig setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxFieldLength(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * The maximum number of terms that will be indexed for a single field in a\n   * document. This limits the amount of memory required for indexing, so that\n   * collections with very large files will not crash the indexing process by\n   * running out of memory. This setting refers to the number of running terms,\n   * not to the number of different terms.\n   * <p>\n   * <b>NOTE:</b> this silently truncates large documents, excluding from the\n   * index all terms that occur further in the document. If you know your source\n   * documents are large, be sure to set this value high enough to accomodate\n   * the expected size. If you set it to {@link #UNLIMITED_FIELD_LENGTH}, then\n   * the only limit is your memory, but you should anticipate an\n   * OutOfMemoryError.\n   * <p>\n   * By default it is set to {@link #UNLIMITED_FIELD_LENGTH}.\n   */\n  public IndexWriterConfig setMaxFieldLength(int maxFieldLength) {\n    this.maxFieldLength = maxFieldLength;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["9454a6510e2db155fb01faa5c049b06ece95fab9","c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2047784e704fe141e0ff36affac8a7cb6c7bbec"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047784e704fe141e0ff36affac8a7cb6c7bbec":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c2047784e704fe141e0ff36affac8a7cb6c7bbec","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}