{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","sourceNew":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query\n   * @return payloads Collection\n   * @throws IOException\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","sourceOld":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query\n   * @return payloads Collection\n   * @throws IOException\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","sourceNew":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","sourceOld":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query\n   * @return payloads Collection\n   * @throws IOException\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","sourceNew":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","sourceOld":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<byte[]>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/PayloadSpanUtil#getPayloadsForQuery(Query).mjava","sourceNew":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","sourceOld":"  /**\n   * Query should be rewritten for wild/fuzzy support.\n   * \n   * @param query rewritten query\n   * @return payloads Collection\n   * @throws IOException if there is a low-level I/O error\n   */\n  public Collection<byte[]> getPayloadsForQuery(Query query) throws IOException {\n    Collection<byte[]> payloads = new ArrayList<>();\n    queryToSpanQuery(query, payloads);\n    return payloads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}