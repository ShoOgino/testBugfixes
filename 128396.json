{"path":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","pathOld":"solr/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b57979cb590291ca31b9384e4d78a6799d29becc","date":1351214721,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMyServerId().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMyServerId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMyServerId().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SolrZkServerProps[SolrZkServer]#getMySeverId().mjava","sourceNew":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMyServerId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","sourceOld":"  // called by the modified version of parseProperties\n  // when the myid file is missing.\n  public Long getMySeverId() {\n    if (zkRun == null && solrPort == null) return null;\n\n    Map<Long, QuorumPeer.QuorumServer> slist = getServers();\n\n    String myHost = \"localhost\";\n    InetSocketAddress thisAddr = null;\n\n    if (zkRun != null && zkRun.length()>0) {\n      String parts[] = zkRun.split(\":\");\n      myHost = parts[0];\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(parts[1]) + 1);\n    } else {\n      // default to localhost:<solrPort+1001>\n      thisAddr = new InetSocketAddress(myHost, Integer.parseInt(solrPort)+1001);\n    }\n\n\n    // first try a straight match by host\n    Long me = null;\n    boolean multiple = false;\n    int port = 0;\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.getHostName().equals(myHost)) {\n        multiple = me!=null;\n        me = server.id;\n        port = server.addr.getPort();\n      }\n    }\n\n    if (!multiple) {\n      // only one host matched... assume it's me.\n      setClientPort(port - 1);\n      return me;\n    }\n\n    if (me == null) {\n      // no hosts matched.\n      return null;\n    }\n\n\n    // multiple matches... try to figure out by port.\n    for (QuorumPeer.QuorumServer server : slist.values()) {\n      if (server.addr.equals(thisAddr)) {\n        if (clientPortAddress == null || clientPortAddress.getPort() <= 0)\n          setClientPort(server.addr.getPort() - 1);\n        return server.id;\n      }\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["c26f00b574427b55127e869b935845554afde1fa","b57979cb590291ca31b9384e4d78a6799d29becc"],"b57979cb590291ca31b9384e4d78a6799d29becc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b57979cb590291ca31b9384e4d78a6799d29becc"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f2126b84bd093fa3d921582a109a0ee578c28126","b57979cb590291ca31b9384e4d78a6799d29becc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"b57979cb590291ca31b9384e4d78a6799d29becc":["f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}