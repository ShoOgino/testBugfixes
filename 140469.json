{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#perc20Test().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#perc20Test().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#perc20Test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void perc20Test() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void perc20Test() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#perc20Test().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#perc20Test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void perc20Test() throws Exception {\n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void perc20Test() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#perc20Test().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#perc20Test().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void perc20Test() throws Exception {\n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void perc20Test() throws Exception { \n    //Int Date\n    Collection<Integer> intDate = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"int\", \"int\");\n    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateStat(intDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n    //Int String\n    Collection<Integer> intString = getIntegerList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"int\", \"int\");\n    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateStat(intStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),intString,intStringTest);\n\n    //Long Date\n    Collection<Long> longDate = getLongList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"long\", \"long\");\n    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateStat(longDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longDate,longDateTest);\n    //Long String\n    Collection<Long> longString = getLongList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"long\", \"long\");\n    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateStat(longStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),longString,longStringTest);\n\n    //Float Date\n    Collection<Float> floatDate = getFloatList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"float\", \"float\");\n    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateStat(floatDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatDate,floatDateTest);\n    //Float String\n    Collection<Float> floatString = getFloatList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"float\", \"float\");\n    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateStat(floatStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),floatString,floatStringTest);\n\n    //Double Date\n    Collection<Double> doubleDate = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"date_dtd\", \"double\", \"double\");\n    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateStat(doubleDateTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleDate,doubleDateTest);\n    //Double String\n    Collection<Double> doubleString = getDoubleList(\"percentile_20n\",\"fieldFacets\", \"string_sd\", \"double\", \"double\");\n    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateStat(doubleStringTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),doubleString,doubleStringTest);\n\n    //Date Int\n    Collection<String> dateInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"date\", \"date\");\n    ArrayList<String> dateIntTest = (ArrayList<String>)calculateStat(dateIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateInt,dateIntTest);\n    //Date Long\n    Collection<String> dateString = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"date\", \"date\");\n    ArrayList<String> dateLongTest = (ArrayList<String>)calculateStat(dateLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),dateString,dateLongTest);\n\n    //String Int\n    Collection<String> stringInt = getStringList(\"percentile_20\",\"fieldFacets\", \"int_id\", \"str\", \"str\");\n    ArrayList<String> stringIntTest = (ArrayList<String>)calculateStat(stringIntTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringInt,stringIntTest);\n    //String Long\n    Collection<String> stringLong = getStringList(\"percentile_20\",\"fieldFacets\", \"long_ld\", \"str\", \"str\");\n    ArrayList<String> stringLongTest = (ArrayList<String>)calculateStat(stringLongTestStart, \"perc_20\");\n    assertEquals(getRawResponse(),stringLong,stringLongTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}