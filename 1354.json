{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#next(Token).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#next(Token).mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestMultiAnalyzerQPHelper.TestFilter#next(Token).mjava","sourceNew":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.analysis.TokenStream#next(org.apache.lucene.analysis\n     * .Token)\n     */\n    @Override\n    public Token next(Token reusableToken) throws IOException {\n\n      if (multiToken > 0) {\n        reusableToken.setTermBuffer(\"multi\" + (multiToken + 1));\n        reusableToken.setStartOffset(prevStartOffset);\n        reusableToken.setEndOffset(prevEndOffset);\n        reusableToken.setType(prevType);\n        reusableToken.setPositionIncrement(0);\n        multiToken--;\n        return reusableToken;\n      } else {\n        boolean next = (reusableToken = input.next(token)) != null;\n        if (next == false) {\n          return null;\n        }\n        prevType = reusableToken.type();\n        prevStartOffset = reusableToken.startOffset();\n        prevEndOffset = reusableToken.endOffset();\n        String text = reusableToken.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return reusableToken;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return reusableToken;\n        } else {\n          return reusableToken;\n        }\n      }\n\n    }\n\n","sourceOld":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.analysis.TokenStream#next(org.apache.lucene.analysis\n     * .Token)\n     */\n    @Override\n    public Token next(Token reusableToken) throws IOException {\n\n      if (multiToken > 0) {\n        reusableToken.setTermBuffer(\"multi\" + (multiToken + 1));\n        reusableToken.setStartOffset(prevStartOffset);\n        reusableToken.setEndOffset(prevEndOffset);\n        reusableToken.setType(prevType);\n        reusableToken.setPositionIncrement(0);\n        multiToken--;\n        return reusableToken;\n      } else {\n        boolean next = (reusableToken = input.next(token)) != null;\n        if (next == false) {\n          return null;\n        }\n        prevType = reusableToken.type();\n        prevStartOffset = reusableToken.startOffset();\n        prevEndOffset = reusableToken.endOffset();\n        String text = reusableToken.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return reusableToken;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return reusableToken;\n        } else {\n          return reusableToken;\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestMultiAnalyzerQPHelper.TestFilter#next(Token).mjava","sourceNew":null,"sourceOld":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.analysis.TokenStream#next(org.apache.lucene.analysis\n     * .Token)\n     */\n    @Override\n    public Token next(Token reusableToken) throws IOException {\n\n      if (multiToken > 0) {\n        reusableToken.setTermBuffer(\"multi\" + (multiToken + 1));\n        reusableToken.setStartOffset(prevStartOffset);\n        reusableToken.setEndOffset(prevEndOffset);\n        reusableToken.setType(prevType);\n        reusableToken.setPositionIncrement(0);\n        multiToken--;\n        return reusableToken;\n      } else {\n        boolean next = (reusableToken = input.next(token)) != null;\n        if (next == false) {\n          return null;\n        }\n        prevType = reusableToken.type();\n        prevStartOffset = reusableToken.startOffset();\n        prevEndOffset = reusableToken.endOffset();\n        String text = reusableToken.term();\n        if (text.equals(\"triplemulti\")) {\n          multiToken = 2;\n          return reusableToken;\n        } else if (text.equals(\"multi\")) {\n          multiToken = 1;\n          return reusableToken;\n        } else {\n          return reusableToken;\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}