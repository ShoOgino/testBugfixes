{"path":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    if (doBalanceRAM())\n      // Must call this w/o holding synchronized(this) else\n      // we'll hit deadlock:\n      balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    if (doBalanceRAM())\n      // Must call this w/o holding synchronized(this) else\n      // we'll hit deadlock:\n      balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#finishDocument(DocumentsWriterThreadState,DocWriter).mjava","sourceNew":null,"sourceOld":"  /** Does the synchronized work to finish/flush the\n   *  inverted document. */\n  private void finishDocument(DocumentsWriterThreadState perThread, DocWriter docWriter) throws IOException {\n\n    if (doBalanceRAM())\n      // Must call this w/o holding synchronized(this) else\n      // we'll hit deadlock:\n      balanceRAM();\n\n    synchronized(this) {\n\n      assert docWriter == null || docWriter.docID == perThread.docState.docID;\n\n      if (aborting) {\n\n        // We are currently aborting, and another thread is\n        // waiting for me to become idle.  We just forcefully\n        // idle this threadState; it will be fully reset by\n        // abort()\n        if (docWriter != null)\n          try {\n            docWriter.abort();\n          } catch (Throwable t) {\n          }\n\n        perThread.isIdle = true;\n        notifyAll();\n        return;\n      }\n\n      final boolean doPause;\n\n      if (docWriter != null)\n        doPause = waitQueue.add(docWriter);\n      else {\n        skipDocWriter.docID = perThread.docState.docID;\n        doPause = waitQueue.add(skipDocWriter);\n      }\n\n      if (doPause)\n        waitForWaitQueue();\n\n      if (bufferIsFull && !flushPending) {\n        flushPending = true;\n        perThread.doFlushAfter = true;\n      }\n\n      perThread.isIdle = true;\n      notifyAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}