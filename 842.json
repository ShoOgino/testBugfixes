{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map,Query).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\r\n   * \r\n   * @param terms\r\n   *          Map to place created WeightedSpanTerms in\r\n   * @param query\r\n   *          Query to extract Terms from\r\n   * @throws IOException\r\n   */\r\n  private void extractWeightedTerms(Map terms, Query query) throws IOException {\r\n    Set nonWeightedTerms = new HashSet();\r\n    query.extractTerms(nonWeightedTerms);\r\n\r\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\r\n      Term queryTerm = (Term) iter.next();\r\n\r\n      if (fieldNameComparator(queryTerm.field())) {\r\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\r\n        terms.put(queryTerm.text(), weightedSpanTerm);\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5d934099a6f0a3ae0285025a1e1b61b7b05fed8f","date":1211715535,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map,Query).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map,Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedTerms(Map terms, Query query) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    query.extractTerms(nonWeightedTerms);\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\r\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\r\n   * \r\n   * @param terms\r\n   *          Map to place created WeightedSpanTerms in\r\n   * @param query\r\n   *          Query to extract Terms from\r\n   * @throws IOException\r\n   */\r\n  private void extractWeightedTerms(Map terms, Query query) throws IOException {\r\n    Set nonWeightedTerms = new HashSet();\r\n    query.extractTerms(nonWeightedTerms);\r\n\r\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\r\n      Term queryTerm = (Term) iter.next();\r\n\r\n      if (fieldNameComparator(queryTerm.field())) {\r\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\r\n        terms.put(queryTerm.text(), weightedSpanTerm);\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":["296b8b38a87feb478921f77834a2302dfe77641c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map[String,WeightedSpanTerm],Query).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#extractWeightedTerms(Map,Query).mjava","sourceNew":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedTerms(Map<String,WeightedSpanTerm> terms, Query query) throws IOException {\n    Set<Term> nonWeightedTerms = new HashSet<Term>();\n    query.extractTerms(nonWeightedTerms);\n\n    for (final Term queryTerm : nonWeightedTerms) {\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Fills a <code>Map</code> with <@link WeightedSpanTerm>s using the terms from the supplied <code>Query</code>.\n   * \n   * @param terms\n   *          Map to place created WeightedSpanTerms in\n   * @param query\n   *          Query to extract Terms from\n   * @throws IOException\n   */\n  private void extractWeightedTerms(Map terms, Query query) throws IOException {\n    Set nonWeightedTerms = new HashSet();\n    query.extractTerms(nonWeightedTerms);\n\n    for (Iterator iter = nonWeightedTerms.iterator(); iter.hasNext();) {\n      Term queryTerm = (Term) iter.next();\n\n      if (fieldNameComparator(queryTerm.field())) {\n        WeightedSpanTerm weightedSpanTerm = new WeightedSpanTerm(query.getBoost(), queryTerm.text());\n        terms.put(queryTerm.text(), weightedSpanTerm);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d934099a6f0a3ae0285025a1e1b61b7b05fed8f":["296b8b38a87feb478921f77834a2302dfe77641c"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"5d934099a6f0a3ae0285025a1e1b61b7b05fed8f":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"296b8b38a87feb478921f77834a2302dfe77641c":["5d934099a6f0a3ae0285025a1e1b61b7b05fed8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}