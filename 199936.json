{"path":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","commits":[{"id":"9499b09dd7d06d975f31e59a9b00653a86f9cad2","date":1343325589,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8202a964e77292b3d78e5ac2b4aa21881d84df74","date":1344508470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Hash functions:\n    HashFunction.reloadHashFunctions(this.classLoader);\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Hash functions:\n    HashFunction.reloadHashFunctions(this.classLoader);\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Hash functions:\n    HashFunction.reloadHashFunctions(this.classLoader);\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","date":1346918556,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Hash functions:\n    HashFunction.reloadHashFunctions(this.classLoader);\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"addc47115aa3376d79985cd4abc9f8c6e212a032","date":1354202882,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    SimpleDocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    SimpleDocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33dd2fc33a7c6ae46d3decff17689539385ef33f","date":1364971259,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter,boolean)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5268b3b46fa91a88e4d8fdd00f16f42577e6da11","date":1368012863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String, FileFilter, boolean)}\n   * and {@link #addToClassLoader(String,FileFilter,boolean)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String)}\n   * and {@link #addToClassLoader(String,FileFilter,boolean)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(List)}\n   * and before using this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(String, FileFilter, boolean)}\n   * and {@link #addToClassLoader(String,FileFilter,boolean)} before using\n   * this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#reloadLuceneSPI().mjava","sourceNew":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(List)}\n   * and before using this ResourceLoader.\n   */\n  synchronized void reloadLuceneSPI() {\n    // TODO improve to use a static Set<URL> to check when we need to\n    if (!needToReloadLuceneSPI) {\n      return;\n    }\n    needToReloadLuceneSPI = false; // reset\n    log.debug(\"Reloading Lucene SPI\");\n\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","sourceOld":"  /**\n   * Reloads all Lucene SPI implementations using the new classloader.\n   * This method must be called after {@link #addToClassLoader(List)}\n   * and before using this ResourceLoader.\n   */\n  void reloadLuceneSPI() {\n    // Codecs:\n    PostingsFormat.reloadPostingsFormats(this.classLoader);\n    DocValuesFormat.reloadDocValuesFormats(this.classLoader);\n    Codec.reloadCodecs(this.classLoader);\n    // Analysis:\n    CharFilterFactory.reloadCharFilters(this.classLoader);\n    TokenFilterFactory.reloadTokenFilters(this.classLoader);\n    TokenizerFactory.reloadTokenizers(this.classLoader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"addc47115aa3376d79985cd4abc9f8c6e212a032":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["8202a964e77292b3d78e5ac2b4aa21881d84df74"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"8202a964e77292b3d78e5ac2b4aa21881d84df74":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["addc47115aa3376d79985cd4abc9f8c6e212a032"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","8202a964e77292b3d78e5ac2b4aa21881d84df74"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["aba371508186796cc6151d8223a5b4e16d02e26e","8202a964e77292b3d78e5ac2b4aa21881d84df74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"]},"commit2Childs":{"addc47115aa3376d79985cd4abc9f8c6e212a032":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"33dd2fc33a7c6ae46d3decff17689539385ef33f":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"3f1361ca6e7d39bfd5cf15485d8843ea798bdd30":["addc47115aa3376d79985cd4abc9f8c6e212a032","d4d69c535930b5cce125cff868d40f6373dc27d4"],"8202a964e77292b3d78e5ac2b4aa21881d84df74":["3f1361ca6e7d39bfd5cf15485d8843ea798bdd30","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["8202a964e77292b3d78e5ac2b4aa21881d84df74","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","9499b09dd7d06d975f31e59a9b00653a86f9cad2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}