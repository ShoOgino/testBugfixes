{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","commits":[{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Iterable<? extends Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n            AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return resources;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","sourceNew":"  @Override\n  public Iterable<? extends Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return resources;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Iterable<? extends Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (AtomicReaderContext context : searcher.getIndexReader().leaves()) {\n            AtomicReader reader = FilterAtomicReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return resources;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fca6c8418a91a6d30730ad418791ddf59ec3d07a","date":1418666585,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","sourceNew":"  @Override\n  public Iterable<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return resources;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Iterable<? extends Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return resources;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ba6ae8e3c153347cbb605024ca7550f5c91b178","date":1420215916,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","sourceNew":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Iterable<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return resources;\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cbf4928b28a4db03465b529b38a64ef29c91735","date":1483044697,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","sourceNew":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        SearcherManager mgr;\n        IndexSearcher searcher;\n        synchronized (searcherMgrLock) {\n          mgr = searcherMgr; // acquire & release on same SearcherManager, via local reference\n          searcher = mgr.acquire();\n        }\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          mgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de0b5d8cac74be1676bcc2f805bc0d0630176659","date":1483048659,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","sourceNew":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        SearcherManager mgr;\n        IndexSearcher searcher;\n        synchronized (searcherMgrLock) {\n          mgr = searcherMgr; // acquire & release on same SearcherManager, via local reference\n          searcher = mgr.acquire();\n        }\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          mgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#getChildResources().mjava","sourceNew":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        SearcherManager mgr;\n        IndexSearcher searcher;\n        synchronized (searcherMgrLock) {\n          mgr = searcherMgr; // acquire & release on same SearcherManager, via local reference\n          searcher = mgr.acquire();\n        }\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          mgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  @Override\n  public Collection<Accountable> getChildResources() {\n    List<Accountable> resources = new ArrayList<>();\n    try {\n      if (searcherMgr != null) {\n        IndexSearcher searcher = searcherMgr.acquire();\n        try {\n          for (LeafReaderContext context : searcher.getIndexReader().leaves()) {\n            LeafReader reader = FilterLeafReader.unwrap(context.reader());\n            if (reader instanceof SegmentReader) {\n              resources.add(Accountables.namedAccountable(\"segment\", (SegmentReader)reader));\n            }\n          }\n        } finally {\n          searcherMgr.release(searcher);\n        }\n      }\n      return Collections.unmodifiableList(resources);\n    } catch (IOException ioe) {\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ba6ae8e3c153347cbb605024ca7550f5c91b178":["fca6c8418a91a6d30730ad418791ddf59ec3d07a"],"fca6c8418a91a6d30730ad418791ddf59ec3d07a":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["8ba6ae8e3c153347cbb605024ca7550f5c91b178","5cbf4928b28a4db03465b529b38a64ef29c91735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"5cbf4928b28a4db03465b529b38a64ef29c91735":["8ba6ae8e3c153347cbb605024ca7550f5c91b178"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["8ba6ae8e3c153347cbb605024ca7550f5c91b178","de0b5d8cac74be1676bcc2f805bc0d0630176659"]},"commit2Childs":{"8ba6ae8e3c153347cbb605024ca7550f5c91b178":["de0b5d8cac74be1676bcc2f805bc0d0630176659","5cbf4928b28a4db03465b529b38a64ef29c91735","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"fca6c8418a91a6d30730ad418791ddf59ec3d07a":["8ba6ae8e3c153347cbb605024ca7550f5c91b178"],"de0b5d8cac74be1676bcc2f805bc0d0630176659":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["fca6c8418a91a6d30730ad418791ddf59ec3d07a"],"5cbf4928b28a4db03465b529b38a64ef29c91735":["de0b5d8cac74be1676bcc2f805bc0d0630176659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}