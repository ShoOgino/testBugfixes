{"path":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","commits":[{"id":"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","date":1466705968,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        // Make sure dfs is not in safe mode\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            // continue\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)// nodes\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n\n    docsSeed = random().nextLong();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        // Make sure dfs is not in safe mode\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            // continue\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)// nodes\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n\n    docsSeed = random().nextLong();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        // Make sure dfs is not in safe mode\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            // continue\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)// nodes\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        // Make sure dfs is not in safe mode\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            // continue\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)// nodes\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n\n    docsSeed = random().nextLong();\n  }\n\n","bugFix":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore#setupClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        // Make sure dfs is not in safe mode\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            // continue\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)// nodes\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        // Make sure dfs is not in safe mode\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            // continue\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)// nodes\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n\n","bugFix":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a51ab9b1f1b896f06b7ba61672f0fca2a4fce43b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}