{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      int lastNumFile = dir.list().length;\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n\n      int lastNumFile = dir.list().length;\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      int lastNumFile = dir.list().length;\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e","date":1191352543,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n\n      int lastNumFile = dir.list().length;\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      long lastGen = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        long gen = SegmentInfos.generationFromSegmentsFileName(SegmentInfos.getCurrentSegmentFileName(dir.list()));\n        if (j == 1)\n          lastGen = gen;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(gen, lastGen);\n        else if (10 == j) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(gen > lastGen);\n          lastGen = gen;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 30) {\n          assertEquals(gen, lastGen);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(gen> lastGen);\n          lastGen = gen;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastGen = gen;\n        } else if (j < 50) {\n          assertEquals(gen, lastGen);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(gen > lastGen);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void xxxtestChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void xxxtestChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure it's OK to change RAM buffer size and\n    // maxBufferedDocs in a write session\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriter.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testChangingRAMBuffer().mjava","sourceNew":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    /**\n     * Make sure it's OK to change RAM buffer size and // maxBufferedDocs in a\n     * write session\n     * \n     * @deprecated after all the setters on IW go away (4.0), this test can be\n     *             removed because changing ram buffer settings during a write\n     *             session won't be possible.\n     */\n    public void testChangingRAMBuffer() throws IOException {\n      RAMDirectory dir = new RAMDirectory();      \n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10).setRAMBufferSizeMB(\n        IndexWriterConfig.DISABLE_AUTO_FLUSH));\n\n      int lastFlushCount = -1;\n      for(int j=1;j<52;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"aaa\" + j, Field.Store.YES, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n        _TestUtil.syncConcurrentMerges(writer);\n        int flushCount = writer.getFlushCount();\n        if (j == 1)\n          lastFlushCount = flushCount;\n        else if (j < 10)\n          // No new files should be created\n          assertEquals(flushCount, lastFlushCount);\n        else if (10 == j) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 20) {\n          assertTrue(flushCount > lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (20 == j) {\n          writer.setRAMBufferSizeMB(16);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 30) {\n          assertEquals(flushCount, lastFlushCount);\n        } else if (30 == j) {\n          writer.setRAMBufferSizeMB(0.000001);\n          writer.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (j < 40) {\n          assertTrue(flushCount> lastFlushCount);\n          lastFlushCount = flushCount;\n        } else if (40 == j) {\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n          lastFlushCount = flushCount;\n        } else if (j < 50) {\n          assertEquals(flushCount, lastFlushCount);\n          writer.setMaxBufferedDocs(10);\n          writer.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n        } else if (50 == j) {\n          assertTrue(flushCount > lastFlushCount);\n        }\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e82780afe6097066eb5befb86e9432f077667e3d"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["09c482d1e63332617181729a225b215c452d8a79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"e82780afe6097066eb5befb86e9432f077667e3d":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["e82780afe6097066eb5befb86e9432f077667e3d"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"2558ddf9e14a97bc597f5b72bb3ecb5b7f6bba8e":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e82780afe6097066eb5befb86e9432f077667e3d":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"09c482d1e63332617181729a225b215c452d8a79":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}