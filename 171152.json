{"path":"src/test-deprecated/org/apache/lucene/search/TestDateFilter#testAfter().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Keyword(\"datefield\", DateField.timeToString(now + 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":null,"sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Keyword(\"datefield\", DateField.timeToString(now + 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}