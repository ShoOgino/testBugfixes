{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testMergePurelyToReclaimDeletes().mjava","commits":[{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testMergePurelyToReclaimDeletes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure that singleton merges are considered when the max number of deletes is crossed.\n   */\n  public void testMergePurelyToReclaimDeletes() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    // single 1GB segment with no deletes\n    infos.add(makeSegmentCommitInfo(\"_0\", 1_000_000, 0, 1024, IndexWriter.SOURCE_MERGE));\n\n    // not eligible for merging\n    assertNull(mergePolicy.findMerges(MergeTrigger.EXPLICIT, infos, new MockMergeContext(SegmentCommitInfo::getDelCount)));\n\n    // introduce 15% deletes, still not eligible\n    infos = applyDeletes(infos, (int) (0.15 * 1_000_000));\n    assertNull(mergePolicy.findMerges(MergeTrigger.EXPLICIT, infos, new MockMergeContext(SegmentCommitInfo::getDelCount)));\n\n    // now cross the delete threshold, becomes eligible\n    infos = applyDeletes(infos, (int) ((mergePolicy.getDeletesPctAllowed() - 15 + 1) / 100 * 1_000_000));\n    assertNotNull(mergePolicy.findMerges(MergeTrigger.EXPLICIT, infos, new MockMergeContext(SegmentCommitInfo::getDelCount)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#testMergePurelyToReclaimDeletes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure that singleton merges are considered when the max number of deletes is crossed.\n   */\n  public void testMergePurelyToReclaimDeletes() throws IOException {\n    TieredMergePolicy mergePolicy = mergePolicy();\n    SegmentInfos infos = new SegmentInfos(Version.LATEST.major);\n    // single 1GB segment with no deletes\n    infos.add(makeSegmentCommitInfo(\"_0\", 1_000_000, 0, 1024, IndexWriter.SOURCE_MERGE));\n\n    // not eligible for merging\n    assertNull(mergePolicy.findMerges(MergeTrigger.EXPLICIT, infos, new MockMergeContext(SegmentCommitInfo::getDelCount)));\n\n    // introduce 15% deletes, still not eligible\n    infos = applyDeletes(infos, (int) (0.15 * 1_000_000));\n    assertNull(mergePolicy.findMerges(MergeTrigger.EXPLICIT, infos, new MockMergeContext(SegmentCommitInfo::getDelCount)));\n\n    // now cross the delete threshold, becomes eligible\n    infos = applyDeletes(infos, (int) ((mergePolicy.getDeletesPctAllowed() - 15 + 1) / 100 * 1_000_000));\n    assertNotNull(mergePolicy.findMerges(MergeTrigger.EXPLICIT, infos, new MockMergeContext(SegmentCommitInfo::getDelCount)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}