{"path":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","commits":[{"id":"a57105180ca080c421baaa15400fcce41a615791","date":1362949009,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          synchronized (dirs) {\n            int sz = dirs.size();\n            List<Tracker> dirsList = new ArrayList<Tracker>();\n            dirsList.addAll(dirs.values());\n            if (sz > 0) {\n              Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                  random.nextInt(sz + 1)));\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextBoolean()) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            }\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4dcfb92697fbd03e488cf9e5155514e3270d0fc3","date":1363541819,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          synchronized (dirs) {\n            int sz = dirs.size();\n            List<Tracker> dirsList = new ArrayList<Tracker>();\n            dirsList.addAll(dirs.values());\n            if (sz > 0) {\n              Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                  random.nextInt(sz + 1)));\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextBoolean()) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            }\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          synchronized (dirs) {\n            int sz = dirs.size();\n            List<Tracker> dirsList = new ArrayList<Tracker>();\n            dirsList.addAll(dirs.values());\n            if (sz > 0) {\n              Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                  random.nextInt(sz + 1)));\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextBoolean()) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            }\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0471d0887ea55e42e2ed693cd5656136e34e3c25","date":1363930474,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          synchronized (dirs) {\n            int sz = dirs.size();\n            List<Tracker> dirsList = new ArrayList<Tracker>();\n            dirsList.addAll(dirs.values());\n            if (sz > 0) {\n              Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                  random.nextInt(sz + 1)));\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextInt(10) > 7) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            }\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          synchronized (dirs) {\n            int sz = dirs.size();\n            List<Tracker> dirsList = new ArrayList<Tracker>();\n            dirsList.addAll(dirs.values());\n            if (sz > 0) {\n              Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                  random.nextInt(sz + 1)));\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextBoolean()) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            }\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        \n        synchronized (dirs) {\n          int sz = dirs.size();\n          List<Tracker> dirsList = new ArrayList<Tracker>();\n          dirsList.addAll(dirs.values());\n          if (sz > 0) {\n            Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                random.nextInt(sz + 1)));\n            try {\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextInt(10) > 7) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                } else {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"path:\" + tracker.path + \"ref cnt:\" + tracker.refCnt, e);\n            }\n          }\n        }\n        \n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        try {\n          synchronized (dirs) {\n            int sz = dirs.size();\n            List<Tracker> dirsList = new ArrayList<Tracker>();\n            dirsList.addAll(dirs.values());\n            if (sz > 0) {\n              Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                  random.nextInt(sz + 1)));\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextInt(10) > 7) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            }\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n      }\n    }\n\n","bugFix":["a57105180ca080c421baaa15400fcce41a615791","4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/CachingDirectoryFactoryTest.ReleaseDirThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        \n        synchronized (dirs) {\n          int sz = dirs.size();\n          List<Tracker> dirsList = new ArrayList<>();\n          dirsList.addAll(dirs.values());\n          if (sz > 0) {\n            Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                random.nextInt(sz + 1)));\n            try {\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextInt(10) > 7) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                } else {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"path:\" + tracker.path + \"ref cnt:\" + tracker.refCnt, e);\n            }\n          }\n        }\n        \n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n      random = random();\n      while (!stop) {\n        try {\n          Thread.sleep(random.nextInt(50) + 1);\n        } catch (InterruptedException e1) {\n          throw new RuntimeException(e1);\n        }\n        \n        synchronized (dirs) {\n          int sz = dirs.size();\n          List<Tracker> dirsList = new ArrayList<Tracker>();\n          dirsList.addAll(dirs.values());\n          if (sz > 0) {\n            Tracker tracker = dirsList.get(Math.min(dirsList.size() - 1,\n                random.nextInt(sz + 1)));\n            try {\n              if (tracker.refCnt.get() > 0) {\n                if (random.nextInt(10) > 7) {\n                  df.doneWithDirectory(tracker.dir);\n                }\n                if (random.nextBoolean()) {\n                  df.remove(tracker.dir);\n                } else {\n                  df.remove(tracker.path);\n                }\n                tracker.refCnt.decrementAndGet();\n                df.release(tracker.dir);\n              }\n            } catch (Exception e) {\n              throw new RuntimeException(\"path:\" + tracker.path + \"ref cnt:\" + tracker.refCnt, e);\n            }\n          }\n        }\n        \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["058801f8673d53a5abac8088204860ec29a40f0d"],"058801f8673d53a5abac8088204860ec29a40f0d":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dcfb92697fbd03e488cf9e5155514e3270d0fc3":["a57105180ca080c421baaa15400fcce41a615791"],"a57105180ca080c421baaa15400fcce41a615791":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"058801f8673d53a5abac8088204860ec29a40f0d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a57105180ca080c421baaa15400fcce41a615791"],"4dcfb92697fbd03e488cf9e5155514e3270d0fc3":["0471d0887ea55e42e2ed693cd5656136e34e3c25"],"a57105180ca080c421baaa15400fcce41a615791":["4dcfb92697fbd03e488cf9e5155514e3270d0fc3"],"0471d0887ea55e42e2ed693cd5656136e34e3c25":["058801f8673d53a5abac8088204860ec29a40f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}