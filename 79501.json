{"path":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"/dev/null","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestIndexWriter#testNullLockFactory().mjava","sourceNew":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","sourceOld":"    // Make sure that a Directory implementation that does\n    // not use LockFactory at all (ie overrides makeLock and\n    // implements its own private locking) works OK.  This\n    // was raised on java-dev as loss of backwards\n    // compatibility.\n    public void testNullLockFactory() throws IOException {\n\n      final class MyRAMDirectory extends RAMDirectory {\n        private LockFactory myLockFactory;\n        MyRAMDirectory() {\n          lockFactory = null;\n          myLockFactory = new SingleInstanceLockFactory();\n        }\n        @Override\n        public Lock makeLock(String name) {\n          return myLockFactory.makeLock(name);\n        }\n      }\n      \n      Directory dir = new MyRAMDirectory();\n      IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      for (int i = 0; i < 100; i++) {\n        addDoc(writer);\n      }\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n      assertEquals(\"did not get right number of hits\", 100, hits.length);\n      writer.close();\n\n      writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}