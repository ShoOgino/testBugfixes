{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq = new BoostQuery(fq, b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (Map.Entry<String, Float> entry : ff.entrySet()) {\n          Query fq = subQuery(entry.getKey(), FunctionQParserPlugin.NAME).getQuery();\n          Float b = entry.getValue();\n          if (null != b) {\n            fq = new BoostQuery(fq, b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq = new BoostQuery(fq, b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f97fc3d287be2a8d7f513f0de3249b50dda47299"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}