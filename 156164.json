{"path":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","commits":[{"id":"e268f08b3f32b86396577dee4e99e0384af9fd70","date":1236792757,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean).mjava","sourceNew":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      if (commit == null) {\n        reader = (DirectoryIndexReader) finder.run();\n      } else {\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    if (hasChanges) {\n      // We have changes, which means we are not readOnly:\n      assert readOnly == false;\n      // and we hold the write lock:\n      assert writeLock != null;\n      // so no other writer holds the write lock, which\n      // means no changes could have been done to the index:\n      assert isCurrent();\n\n      if (openReadOnly) {\n        return (IndexReader) clone(openReadOnly);\n      } else {\n        return this;\n      }\n    } else if (isCurrent()) {\n      if (openReadOnly != readOnly) {\n        // Just fallback to clone\n        return (IndexReader) clone(openReadOnly);\n      } else {\n        return this;\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      reader = (DirectoryIndexReader) finder.run();\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ff8864209d2e972cb4393600c26082f9a6533d","date":1239297466,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","sourceNew":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      return writer.getReader();\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      if (commit == null) {\n        reader = (DirectoryIndexReader) finder.run();\n      } else {\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      if (commit == null) {\n        reader = (DirectoryIndexReader) finder.run();\n      } else {\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","sourceNew":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      IndexReader reader = writer.getReader();\n      reader.setDisableFakeNorms(getDisableFakeNorms());\n      return reader;\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      if (commit == null) {\n        reader = (DirectoryIndexReader) finder.run();\n      } else {\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n      reader.setDisableFakeNorms(getDisableFakeNorms());\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      return writer.getReader();\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      if (commit == null) {\n        reader = (DirectoryIndexReader) finder.run();\n      } else {\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#doReopen(boolean,IndexCommit).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#doReopen(boolean,IndexCommit).mjava","sourceNew":"  private synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      IndexReader reader = writer.getReader();\n      reader.setDisableFakeNorms(getDisableFakeNorms());\n      return reader;\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        return doReopen(infos, false, openReadOnly);\n      }\n    };\n\n    DirectoryReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      reader = (DirectoryReader) finder.run(commit);\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","sourceOld":"  // If there are no changes to the index, simply return\n  // ourself.  If there are changes, load the latest\n  // SegmentInfos and reopen based on that\n  protected final synchronized IndexReader doReopen(final boolean openReadOnly, IndexCommit commit) throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    assert commit == null || openReadOnly;\n\n    // If we were obtained by writer.getReader(), re-ask the\n    // writer to get a new reader.\n    if (writer != null) {\n      assert readOnly;\n\n      if (!openReadOnly) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() can only be reopened with openReadOnly=true (got false)\");\n      }\n\n      if (commit != null) {\n        throw new IllegalArgumentException(\"a reader obtained from IndexWriter.getReader() cannot currently accept a commit\");\n      }\n\n      if (!writer.isOpen(true)) {\n        throw new AlreadyClosedException(\"cannot reopen: the IndexWriter this reader was obtained from is now closed\");\n      }\n\n      // TODO: right now we *always* make a new reader; in\n      // the future we could have write make some effort to\n      // detect that no changes have occurred\n      IndexReader reader = writer.getReader();\n      reader.setDisableFakeNorms(getDisableFakeNorms());\n      return reader;\n    }\n\n    if (commit == null) {\n      if (hasChanges) {\n        // We have changes, which means we are not readOnly:\n        assert readOnly == false;\n        // and we hold the write lock:\n        assert writeLock != null;\n        // so no other writer holds the write lock, which\n        // means no changes could have been done to the index:\n        assert isCurrent();\n\n        if (openReadOnly) {\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      } else if (isCurrent()) {\n        if (openReadOnly != readOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    } else {\n      if (directory != commit.getDirectory())\n        throw new IOException(\"the specified commit does not match the specified Directory\");\n      if (segmentInfos != null && commit.getSegmentsFileName().equals(segmentInfos.getCurrentSegmentFileName())) {\n        if (readOnly != openReadOnly) {\n          // Just fallback to clone\n          return (IndexReader) clone(openReadOnly);\n        } else {\n          return this;\n        }\n      }\n    }\n\n    final SegmentInfos.FindSegmentsFile finder = new SegmentInfos.FindSegmentsFile(directory) {\n\n      protected Object doBody(String segmentFileName) throws CorruptIndexException, IOException {\n        SegmentInfos infos = new SegmentInfos();\n        infos.read(directory, segmentFileName);\n        DirectoryIndexReader newReader = doReopen(infos, false, openReadOnly);\n        \n        if (DirectoryIndexReader.this != newReader) {\n          newReader.init(directory, infos, closeDirectory, openReadOnly);\n          newReader.deletionPolicy = deletionPolicy;\n        }\n\n        return newReader;\n      }\n    };\n\n    DirectoryIndexReader reader = null;\n\n    // While trying to reopen, we temporarily mark our\n    // closeDirectory as false.  This way any exceptions hit\n    // partway while opening the reader, which is expected\n    // eg if writer is committing, won't close our\n    // directory.  We restore this value below:\n    final boolean myCloseDirectory = closeDirectory;\n    closeDirectory = false;\n\n    try {\n      if (commit == null) {\n        reader = (DirectoryIndexReader) finder.run();\n      } else {\n        reader = (DirectoryIndexReader) finder.doBody(commit.getSegmentsFileName());\n      }\n      reader.setDisableFakeNorms(getDisableFakeNorms());\n    } finally {\n      if (myCloseDirectory) {\n        assert directory instanceof FSDirectory;\n        // Restore my closeDirectory\n        closeDirectory = true;\n        if (reader != null && reader != this) {\n          // Success, and a new reader was actually opened\n          reader.closeDirectory = true;\n          // Clone the directory\n          reader.directory = FSDirectory.getDirectory(((FSDirectory) directory).getFile());\n        }\n      }\n    }\n\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e268f08b3f32b86396577dee4e99e0384af9fd70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["e268f08b3f32b86396577dee4e99e0384af9fd70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e268f08b3f32b86396577dee4e99e0384af9fd70"],"e268f08b3f32b86396577dee4e99e0384af9fd70":["c4ff8864209d2e972cb4393600c26082f9a6533d"],"c4ff8864209d2e972cb4393600c26082f9a6533d":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}