{"path":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","pathOld":"/dev/null","sourceNew":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n    inTitle = t1.image.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = t1.image.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = t1.image.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = t1.image.equalsIgnoreCase(\"<img\");    // keep track if in <IMG>\n    if (inScript) {                               // keep track if in <SCRIPT>\n      inScript = !t1.image.equalsIgnoreCase(\"</script\");\n    } else {\n      inScript = t1.image.equalsIgnoreCase(\"<script\");\n    }\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                addText(t2.image);\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6db31a28b572718e912d7cf7f43a85d98af0ce19","date":1069608272,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","pathOld":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","sourceNew":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n    if (inScript) {                               // keep track if in <SCRIPT>\n      inScript = !tagName.equalsIgnoreCase(\"</script\");\n    } else {\n      inScript = tagName.equalsIgnoreCase(\"<script\");\n    }\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                addText(t2.image);\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","sourceOld":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n    inTitle = t1.image.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = t1.image.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = t1.image.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = t1.image.equalsIgnoreCase(\"<img\");    // keep track if in <IMG>\n    if (inScript) {                               // keep track if in <SCRIPT>\n      inScript = !t1.image.equalsIgnoreCase(\"</script\");\n    } else {\n      inScript = t1.image.equalsIgnoreCase(\"<script\");\n    }\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                addText(t2.image);\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","bugFix":null,"bugIntro":["fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"330879298be052a382e9e092febebdf55728f46b","date":1069612652,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","pathOld":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","sourceNew":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                addText(t2.image);\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","sourceOld":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n    if (inScript) {                               // keep track if in <SCRIPT>\n      inScript = !tagName.equalsIgnoreCase(\"</script\");\n    } else {\n      inScript = tagName.equalsIgnoreCase(\"<script\");\n    }\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                addText(t2.image);\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d2e90ba81e23fe05fd4f37d3871c246495f695e","date":1082478444,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","pathOld":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","sourceNew":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n                if(currentMetaTag != null && currentMetaContent != null) {\n                addMetaTag();\n                }\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                currentMetaContent=t2.image.toLowerCase();\n                if(currentMetaTag != null && currentMetaContent != null) {\n                addMetaTag();\n                }\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","sourceOld":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                addText(t2.image);\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","bugFix":null,"bugIntro":["fb38e04906cc704c95b1bb9cdc7a960017b0cc25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","pathOld":"src/demo/org/apache/lucene/demo/html/HTMLParser#Tag().mjava","sourceNew":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n                if(currentMetaTag != null && currentMetaContent != null) {\n                addMetaTag();\n                }\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                currentMetaContent=t2.image.toLowerCase();\n                if(currentMetaTag != null && currentMetaContent != null) {\n                addMetaTag();\n                }\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","sourceOld":"  final public void Tag() throws ParseException, IOException {\n  Token t1, t2;\n  boolean inImg = false;\n    t1 = jj_consume_token(TagName);\n   String tagName = t1.image.toLowerCase();\n   if(Tags.WS_ELEMS.contains(tagName) ) {\n      addSpace();\n    }\n    inTitle = tagName.equalsIgnoreCase(\"<title\"); // keep track if in <TITLE>\n    inMetaTag = tagName.equalsIgnoreCase(\"<META\"); // keep track if in <META>\n    inStyle = tagName.equalsIgnoreCase(\"<STYLE\"); // keep track if in <STYLE>\n    inImg = tagName.equalsIgnoreCase(\"<img\");     // keep track if in <IMG>\n\n    label_2:\n    while (true) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgName:\n        ;\n        break;\n      default:\n        jj_la1[2] = jj_gen;\n        break label_2;\n      }\n      t1 = jj_consume_token(ArgName);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case ArgEquals:\n        jj_consume_token(ArgEquals);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case ArgValue:\n        case ArgQuote1:\n        case ArgQuote2:\n          t2 = ArgValue();\n       if (inImg && t1.image.equalsIgnoreCase(\"alt\") && t2 != null)\n         addText(\"[\" + t2.image + \"]\");\n\n        if(inMetaTag &&\n                        (  t1.image.equalsIgnoreCase(\"name\") ||\n                           t1.image.equalsIgnoreCase(\"HTTP-EQUIV\")\n                        )\n           && t2 != null)\n        {\n                currentMetaTag=t2.image.toLowerCase();\n                if(currentMetaTag != null && currentMetaContent != null) {\n                addMetaTag();\n                }\n        }\n        if(inMetaTag && t1.image.equalsIgnoreCase(\"content\") && t2 !=\nnull)\n        {\n                currentMetaContent=t2.image.toLowerCase();\n                if(currentMetaTag != null && currentMetaContent != null) {\n                addMetaTag();\n                }\n        }\n          break;\n        default:\n          jj_la1[3] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[4] = jj_gen;\n        ;\n      }\n    }\n    jj_consume_token(TagEnd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"330879298be052a382e9e092febebdf55728f46b":["6db31a28b572718e912d7cf7f43a85d98af0ce19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6db31a28b572718e912d7cf7f43a85d98af0ce19":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9d2e90ba81e23fe05fd4f37d3871c246495f695e"],"9d2e90ba81e23fe05fd4f37d3871c246495f695e":["330879298be052a382e9e092febebdf55728f46b"]},"commit2Childs":{"330879298be052a382e9e092febebdf55728f46b":["9d2e90ba81e23fe05fd4f37d3871c246495f695e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"6db31a28b572718e912d7cf7f43a85d98af0ce19":["330879298be052a382e9e092febebdf55728f46b"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["6db31a28b572718e912d7cf7f43a85d98af0ce19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d2e90ba81e23fe05fd4f37d3871c246495f695e":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}