{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testQueryEquals().mjava","commits":[{"id":"5839bca64b33c24668e37476ee168d00dc0bb96d","date":1457536035,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testQueryEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryEquals() throws Exception {\n    Query q = LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20);\n    assertEquals(q, LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20));\n    assertFalse(q.equals(LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 10)));\n\n    q = LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000);\n    assertEquals(q, LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000));\n    assertFalse(q.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 70, 11000)));\n    assertFalse(q.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 60, 10000)));\n\n                \n    double[] polyLats1 = new double[] {30, 40, 40, 30, 30};\n    double[] polyLons1 = new double[] {90, 90, -40, -40, 90};\n    double[] polyLats2 = new double[] {20, 40, 40, 20, 20};\n    q = LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1);\n    assertEquals(q, LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1));\n    assertFalse(q.equals(LatLonPoint.newPolygonQuery(\"field\", polyLats2, polyLons1)));\n  }     \n\n","sourceOld":null,"bugFix":null,"bugIntro":["606ea169579957651185909e7264798e99e714f9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testQueryEquals().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testQueryEquals().mjava","sourceNew":"  public void testQueryEquals() throws Exception {\n    Query q1 = LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20);\n    Query q2 = LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 10)));\n\n    q1 = LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000);\n    q2 = LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 70, 11000)));\n    assertFalse(q1.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 60, 10000)));\n\n                \n    double[] polyLats1 = new double[] {30, 40, 40, 30, 30};\n    double[] polyLons1 = new double[] {90, 90, -40, -40, 90};\n    double[] polyLats2 = new double[] {20, 40, 40, 20, 20};\n    q1 = LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1);\n    q2 = LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LatLonPoint.newPolygonQuery(\"field\", polyLats2, polyLons1)));\n  }     \n\n","sourceOld":"  public void testQueryEquals() throws Exception {\n    Query q = LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20);\n    assertEquals(q, LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20));\n    assertFalse(q.equals(LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 10)));\n\n    q = LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000);\n    assertEquals(q, LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000));\n    assertFalse(q.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 70, 11000)));\n    assertFalse(q.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 60, 10000)));\n\n                \n    double[] polyLats1 = new double[] {30, 40, 40, 30, 30};\n    double[] polyLons1 = new double[] {90, 90, -40, -40, 90};\n    double[] polyLats2 = new double[] {20, 40, 40, 20, 20};\n    q = LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1);\n    assertEquals(q, LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1));\n    assertFalse(q.equals(LatLonPoint.newPolygonQuery(\"field\", polyLats2, polyLons1)));\n  }     \n\n","bugFix":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6c59bc551f4e523ce6a321280cc6733424fb824","date":1458837690,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPoint#testQueryEquals().mjava","sourceNew":null,"sourceOld":"  public void testQueryEquals() throws Exception {\n    Query q1 = LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20);\n    Query q2 = LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 20);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LatLonPoint.newBoxQuery(\"field\", 50, 70, -40, 10)));\n\n    q1 = LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000);\n    q2 = LatLonPoint.newDistanceQuery(\"field\", 50, 70, 10000);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 70, 11000)));\n    assertFalse(q1.equals(LatLonPoint.newDistanceQuery(\"field\", 50, 60, 10000)));\n\n                \n    double[] polyLats1 = new double[] {30, 40, 40, 30, 30};\n    double[] polyLons1 = new double[] {90, 90, -40, -40, 90};\n    double[] polyLats2 = new double[] {20, 40, 40, 20, 20};\n    q1 = LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1);\n    q2 = LatLonPoint.newPolygonQuery(\"field\", polyLats1, polyLons1);\n    assertEquals(q1, q2);\n    assertEquals(q1.hashCode(), q2.hashCode());\n    assertFalse(q1.equals(LatLonPoint.newPolygonQuery(\"field\", polyLats2, polyLons1)));\n  }     \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5839bca64b33c24668e37476ee168d00dc0bb96d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"606ea169579957651185909e7264798e99e714f9":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["606ea169579957651185909e7264798e99e714f9"]},"commit2Childs":{"5839bca64b33c24668e37476ee168d00dc0bb96d":["606ea169579957651185909e7264798e99e714f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5839bca64b33c24668e37476ee168d00dc0bb96d"],"606ea169579957651185909e7264798e99e714f9":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d6c59bc551f4e523ce6a321280cc6733424fb824":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}