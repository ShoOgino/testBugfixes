{"path":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","commits":[{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return -1;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        int ord = -1;\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final int childOrd = values.getOrd(child);\n          switch (selection) {\n            case MIN:\n              if (ord == -1) {\n                ord = childOrd;\n              } else if (childOrd != -1) {\n                ord = Math.min(ord, childOrd);\n              }\n              break;\n            case MAX:\n              ord = Math.max(ord, childOrd);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        values.advance(prevParentDocID+1);\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return -1;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        int ord = -1;\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final int childOrd = values.getOrd(child);\n          switch (selection) {\n            case MIN:\n              if (ord == -1) {\n                ord = childOrd;\n              } else if (childOrd != -1) {\n                ord = Math.min(ord, childOrd);\n              }\n              break;\n            case MAX:\n              ord = Math.max(ord, childOrd);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":["67920bad8a02fd2ba23266b1e1325be911e012de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        values.advance(prevParentDocID+1);\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return -1;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        int ord = -1;\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final int childOrd = values.getOrd(child);\n          switch (selection) {\n            case MIN:\n              if (ord == -1) {\n                ord = childOrd;\n              } else if (childOrd != -1) {\n                ord = Math.min(ord, childOrd);\n              }\n              break;\n            case MAX:\n              ord = Math.max(ord, childOrd);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        values.advance(prevParentDocID+1);\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        values.advance(prevParentDocID+1);\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":["db447c88c3c3367999a54f10d9a207f3e63db201"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67920bad8a02fd2ba23266b1e1325be911e012de","date":1476448712,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        values.advance(prevParentDocID+1);\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        assert parents.get(docID) : \"this selector may only be used on parent documents\";\n\n        if (docID == 0) {\n          // no children\n          return -1;\n        }\n\n        final int firstChild = parents.prevSetBit(docID - 1) + 1;\n\n        int ord = -1;\n        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {\n          final int childOrd = values.getOrd(child);\n          switch (selection) {\n            case MIN:\n              if (ord == -1) {\n                ord = childOrd;\n              } else if (childOrd != -1) {\n                ord = Math.min(ord, childOrd);\n              }\n              break;\n            case MAX:\n              ord = Math.max(ord, childOrd);\n              break;\n            default:\n              throw new AssertionError();\n          }\n        }\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord = -1;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID < docID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + docID + \" target=\" + targetParentDocID);\n        }\n        int previousDocId = docID;\n        docID = targetParentDocID;\n        if (targetParentDocID == previousDocId) {\n          return ord != -1;\n        }\n        docID = targetParentDocID;\n        ord = -1;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = docID == 0 ? -1 : parents.prevSetBit(docID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= docID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            ord = values.ordValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                ord = Math.min(ord, values.ordValue());\n                break;\n              case MAX:\n                ord = Math.max(ord, values.ordValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord = -1;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID < docID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + docID + \" target=\" + targetParentDocID);\n        }\n        int previousDocId = docID;\n        docID = targetParentDocID;\n        if (targetParentDocID == previousDocId) {\n          return ord != -1;\n        }\n        docID = targetParentDocID;\n        ord = -1;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = docID == 0 ? -1 : parents.prevSetBit(docID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= docID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            ord = values.ordValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                ord = Math.min(ord, values.ordValue());\n                break;\n              case MAX:\n                ord = Math.max(ord, values.ordValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord = -1;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID < docID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + docID + \" target=\" + targetParentDocID);\n        }\n        int previousDocId = docID;\n        docID = targetParentDocID;\n        if (targetParentDocID == previousDocId) {\n          return ord != -1;\n        }\n        docID = targetParentDocID;\n        ord = -1;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = docID == 0 ? -1 : parents.prevSetBit(docID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= docID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            ord = values.ordValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                ord = Math.min(ord, values.ordValue());\n                break;\n              case MAX:\n                ord = Math.max(ord, values.ordValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181db58a040d7aebaeb7a74578bd9b9aa603af6c","date":1497965469,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  @Deprecated\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    return wrap(values, selection, parents, toIter(children));\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord = -1;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID < docID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + docID + \" target=\" + targetParentDocID);\n        }\n        int previousDocId = docID;\n        docID = targetParentDocID;\n        if (targetParentDocID == previousDocId) {\n          return ord != -1;\n        }\n        docID = targetParentDocID;\n        ord = -1;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = docID == 0 ? -1 : parents.prevSetBit(docID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= docID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            ord = values.ordValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                ord = Math.min(ord, values.ordValue());\n                break;\n              case MAX:\n                ord = Math.max(ord, values.ordValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BlockJoinSelector#wrap(SortedDocValues,Type,BitSet,BitSet).mjava","sourceNew":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  @Deprecated\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    return wrap(values, selection, parents, toIter(children));\n  }\n\n","sourceOld":"  /** Wraps the provided {@link SortedDocValues} in order to only select\n   *  one value per parent among its {@code children} using the configured\n   *  {@code selection} type. */\n  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {\n    if (values.docID() != -1) {\n      throw new IllegalArgumentException(\"values iterator was already consumed: values.docID=\" + values.docID());\n    }\n    return new SortedDocValues() {\n\n      private int ord = -1;\n      private int docID = -1;\n\n      @Override\n      public int docID() {\n        return docID;\n      }\n\n      @Override\n      public int nextDoc() throws IOException {\n        assert docID != NO_MORE_DOCS;\n        \n        if (values.docID() == -1) {\n          if (values.nextDoc() == NO_MORE_DOCS) {\n            docID = NO_MORE_DOCS;\n            return docID;\n          }\n        }\n\n        if (values.docID() == NO_MORE_DOCS) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        \n        int nextParentDocID = parents.nextSetBit(values.docID());\n        ord = values.ordValue();\n\n        while (true) {\n          int childDocID = values.nextDoc();\n          assert childDocID != nextParentDocID;\n          if (childDocID > nextParentDocID) {\n            break;\n          }\n          if (children.get(childDocID) == false) {\n            continue;\n          }\n          if (selection == Type.MIN) {\n            ord = Math.min(ord, values.ordValue());\n          } else if (selection == Type.MAX) {\n            ord = Math.max(ord, values.ordValue());\n          } else {\n            throw new AssertionError();\n          }\n        }\n\n        docID = nextParentDocID;\n        return docID;\n      }\n\n      @Override\n      public int advance(int target) throws IOException {\n        if (target >= parents.length()) {\n          docID = NO_MORE_DOCS;\n          return docID;\n        }\n        if (target == 0) {\n          assert docID() == -1;\n          return nextDoc();\n        }\n        int prevParentDocID = parents.prevSetBit(target-1);\n        if (values.docID() <= prevParentDocID) {\n          values.advance(prevParentDocID+1);\n        }\n        return nextDoc();\n      }\n\n      @Override\n      public boolean advanceExact(int targetParentDocID) throws IOException {\n        if (targetParentDocID < docID) {\n          throw new IllegalArgumentException(\"target must be after the current document: current=\" + docID + \" target=\" + targetParentDocID);\n        }\n        int previousDocId = docID;\n        docID = targetParentDocID;\n        if (targetParentDocID == previousDocId) {\n          return ord != -1;\n        }\n        docID = targetParentDocID;\n        ord = -1;\n        if (parents.get(targetParentDocID) == false) {\n          return false;\n        }\n        int prevParentDocId = docID == 0 ? -1 : parents.prevSetBit(docID - 1);\n        int childDoc = values.docID();\n        if (childDoc <= prevParentDocId) {\n          childDoc = values.advance(prevParentDocId + 1);\n        }\n        if (childDoc >= docID) {\n          return false;\n        }\n        \n        boolean hasValue = false;\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            ord = values.ordValue();\n            hasValue = true;\n            values.nextDoc();\n            break;\n          }\n        }\n        if (hasValue == false) {\n          return false;\n        }\n\n        for (int doc = values.docID(); doc < docID; doc = values.nextDoc()) {\n          if (children.get(doc)) {\n            switch (selection) {\n              case MIN:\n                ord = Math.min(ord, values.ordValue());\n                break;\n              case MAX:\n                ord = Math.max(ord, values.ordValue());\n                break;\n              default:\n                throw new AssertionError();\n            }\n          }\n        }\n        return true;\n      }\n\n      @Override\n      public int ordValue() {\n        return ord;\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) throws IOException {\n        return values.lookupOrd(ord);\n      }\n\n      @Override\n      public int getValueCount() {\n        return values.getValueCount();\n      }\n\n      @Override\n      public long cost() {\n        return values.cost();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"30c8e5574b55d57947e989443dfde611646530ee":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"67920bad8a02fd2ba23266b1e1325be911e012de":["f7558b5077dd4abd457be151475f13b541f4f13e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db447c88c3c3367999a54f10d9a207f3e63db201","67920bad8a02fd2ba23266b1e1325be911e012de"],"db447c88c3c3367999a54f10d9a207f3e63db201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["67920bad8a02fd2ba23266b1e1325be911e012de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["db447c88c3c3367999a54f10d9a207f3e63db201","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["db447c88c3c3367999a54f10d9a207f3e63db201"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["67920bad8a02fd2ba23266b1e1325be911e012de","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["181db58a040d7aebaeb7a74578bd9b9aa603af6c"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["67920bad8a02fd2ba23266b1e1325be911e012de"],"30c8e5574b55d57947e989443dfde611646530ee":[],"67920bad8a02fd2ba23266b1e1325be911e012de":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"db447c88c3c3367999a54f10d9a207f3e63db201":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db447c88c3c3367999a54f10d9a207f3e63db201"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["30c8e5574b55d57947e989443dfde611646530ee","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}