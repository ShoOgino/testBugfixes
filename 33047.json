{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","commits":[{"id":"f58dd714e47e4b20e7ddf69802a24d8278a50d3d","date":1270583819,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6;iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6*_TestUtil.getRandomMultiplier();iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6;iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6*_TestUtil.getRandomMultiplier();iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6*_TestUtil.getRandomMultiplier();iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  // nocommit - TODO: enable when flushing by RAM is implemented\n  public void _testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6*_TestUtil.getRandomMultiplier();iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6*_TestUtil.getRandomMultiplier();iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    for(int iter=0;iter<6*_TestUtil.getRandomMultiplier();iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = newRandom();\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory(random);\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = new MockRAMDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory(random);\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7740a3e0858e88aaf6b09efe52e35c04a0d717f7","date":1286877329,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    //w.setInfoStream(System.out);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54cdb3f871937873dd85ae388202af7a5efd5584","date":1294960319,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void _testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 1500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 1500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 2500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75e860e394e2df132144a3591b21f1bf43903433","date":1299677114,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 1500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(0.5).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 1500);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63b5d57e38bf07e9421a6309dc1f255446de9f22","date":1302191539,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9214d7961d272de9c4c9795f247025fd4f47b2","date":1303971736,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#_testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void _testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n\n    Directory dir = newDirectory();\n    FlushCountingIndexWriter w = new FlushCountingIndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.WHITESPACE, true, false)).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(-1).setMaxBufferedDeleteTerms(-1));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = 6 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.flushCount;\n        while(w.flushCount == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testIndexingThenDeleting().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testIndexingThenDeleting().mjava","sourceNew":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = atLeast(3);\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexingThenDeleting() throws Exception {\n    final Random r = random;\n    Directory dir = newDirectory();\n    // note this test explicitly disables payloads\n    final Analyzer analyzer = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n      }\n    };\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, analyzer).setRAMBufferSizeMB(1.0).setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH).setMaxBufferedDeleteTerms(IndexWriterConfig.DISABLE_AUTO_FLUSH));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    Document doc = new Document();\n    doc.add(newField(\"field\", \"go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\", Field.Store.NO, Field.Index.ANALYZED));\n    int num = TEST_NIGHTLY ? 6 * RANDOM_MULTIPLIER : 3 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      int count = 0;\n\n      final boolean doIndexing = r.nextBoolean();\n      if (VERBOSE) {\n        System.out.println(\"TEST: iter doIndexing=\" + doIndexing);\n      }\n      if (doIndexing) {\n        // Add docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.addDocument(doc);\n          count++;\n        }\n      } else {\n        // Delete docs until a flush is triggered\n        final int startFlushCount = w.getFlushCount();\n        while(w.getFlushCount() == startFlushCount) {\n          w.deleteDocuments(new Term(\"foo\", \"\"+count));\n          count++;\n        }\n      }\n      assertTrue(\"flush happened too quickly during \" + (doIndexing ? \"indexing\" : \"deleting\") + \" count=\" + count, count > 3000);\n    }\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["d572389229127c297dd1fa5ce4758e1cec41e799"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["6c18273ea5b3974d2f30117f46f1ae416c28f727","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"2e9214d7961d272de9c4c9795f247025fd4f47b2":["54cdb3f871937873dd85ae388202af7a5efd5584"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["63b5d57e38bf07e9421a6309dc1f255446de9f22"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"54cdb3f871937873dd85ae388202af7a5efd5584":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"63b5d57e38bf07e9421a6309dc1f255446de9f22":["75e860e394e2df132144a3591b21f1bf43903433"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2aafd88401639311b0404e67c94e829e123a0e45"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f2c5f0cb44df114db4228c8f77861714b5cabaea","2e9214d7961d272de9c4c9795f247025fd4f47b2"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"2aafd88401639311b0404e67c94e829e123a0e45":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","75e860e394e2df132144a3591b21f1bf43903433"],"75e860e394e2df132144a3591b21f1bf43903433":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["75e860e394e2df132144a3591b21f1bf43903433","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["132903c28af3aa6f67284b78de91c0f0a99488c2","7740a3e0858e88aaf6b09efe52e35c04a0d717f7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","69a6d2d525aeab53c867ed26934185e5bb627d0e","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7740a3e0858e88aaf6b09efe52e35c04a0d717f7","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["54cdb3f871937873dd85ae388202af7a5efd5584"],"7740a3e0858e88aaf6b09efe52e35c04a0d717f7":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"2e9214d7961d272de9c4c9795f247025fd4f47b2":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"f58dd714e47e4b20e7ddf69802a24d8278a50d3d":["2aafd88401639311b0404e67c94e829e123a0e45"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"54cdb3f871937873dd85ae388202af7a5efd5584":["2e9214d7961d272de9c4c9795f247025fd4f47b2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58dd714e47e4b20e7ddf69802a24d8278a50d3d"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["29ef99d61cda9641b6250bf9567329a6e65f901d","75e860e394e2df132144a3591b21f1bf43903433"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"63b5d57e38bf07e9421a6309dc1f255446de9f22":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"2aafd88401639311b0404e67c94e829e123a0e45":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"75e860e394e2df132144a3591b21f1bf43903433":["63b5d57e38bf07e9421a6309dc1f255446de9f22","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}