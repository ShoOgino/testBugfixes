{"path":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","commits":[{"id":"ef02613bb5b67b98ca5caf41e8d6e016a0158923","date":1283980033,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(NOW, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(NOW, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n    dmp.setNow(NOW);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1","aa62c79a7afa4d7f22e1f71b883659f3213d7db1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","date":1292210954,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","sourceNew":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(NOW, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(NOW, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n    dmp.setNow(NOW);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","sourceNew":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(NOW, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(NOW, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n    dmp.setNow(NOW);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"755f2f419306d7297c8feee10d1897addf4b2dd0","date":1294442354,"type":5,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList[Object]).mjava","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","sourceNew":"  public void getFacetDateCounts(String dateFacet, NamedList<Object> resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList<Object> resInner = new SimpleOrderedMap<Object>();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","sourceNew":null,"sourceOld":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetDateCounts(String,NamedList).mjava","sourceNew":null,"sourceOld":"  public void getFacetDateCounts(String dateFacet, NamedList resOuter)\n      throws IOException, ParseException {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    parseParams(FacetParams.FACET_DATE, dateFacet);\n    String f = facetValue;\n\n\n    final NamedList resInner = new SimpleOrderedMap();\n    resOuter.add(key, resInner);\n    final SchemaField sf = schema.getField(f);\n    if (! (sf.getType() instanceof DateField)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"Can not date facet on a field which is not a DateField: \" + f);\n    }\n    final DateField ft = (DateField) sf.getType();\n    final String startS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_START);\n    final Date start;\n    try {\n      start = ft.parseMath(null, startS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'start' is not a valid Date string: \" + startS, e);\n    }\n    final String endS\n        = required.getFieldParam(f,FacetParams.FACET_DATE_END);\n    Date end; // not final, hardend may change this\n    try {\n      end = ft.parseMath(null, endS);\n    } catch (SolrException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' is not a valid Date string: \" + endS, e);\n    }\n\n    if (end.before(start)) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'end' comes before 'start': \"+endS+\" < \"+startS);\n    }\n\n    final String gap = required.getFieldParam(f,FacetParams.FACET_DATE_GAP);\n    final DateMathParser dmp = new DateMathParser(ft.UTC, Locale.US);\n\n    final int minCount = params.getFieldInt(f,FacetParams.FACET_MINCOUNT, 0);\n\n    final EnumSet<FacetRangeInclude> include = FacetRangeInclude.parseParam\n        (params.getFieldParams(f,FacetParams.FACET_DATE_INCLUDE));\n\n    try {\n      Date low = start;\n      while (low.before(end)) {\n        dmp.setNow(low);\n        String label = ft.toExternal(low);\n\n        Date high = dmp.parseMath(gap);\n        if (end.before(high)) {\n          if (params.getFieldBool(f,FacetParams.FACET_DATE_HARD_END,false)) {\n            high = end;\n          } else {\n            end = high;\n          }\n        }\n        if (high.before(low)) {\n          throw new SolrException\n              (SolrException.ErrorCode.BAD_REQUEST,\n                  \"date facet infinite loop (is gap negative?)\");\n        }\n        final boolean includeLower =\n            (include.contains(FacetRangeInclude.LOWER) ||\n                (include.contains(FacetRangeInclude.EDGE) && low.equals(start)));\n        final boolean includeUpper =\n            (include.contains(FacetRangeInclude.UPPER) ||\n                (include.contains(FacetRangeInclude.EDGE) && high.equals(end)));\n\n        final int count = rangeCount(sf,low,high,includeLower,includeUpper);\n        if (count >= minCount) {\n          resInner.add(label, count);\n        }\n        low = high;\n      }\n    } catch (java.text.ParseException e) {\n      throw new SolrException\n          (SolrException.ErrorCode.BAD_REQUEST,\n              \"date facet 'gap' is not a valid Date Math string: \" + gap, e);\n    }\n\n    // explicitly return the gap and end so all the counts\n    // (including before/after/between) are meaningful - even if mincount\n    // has removed the neighboring ranges\n    resInner.add(\"gap\", gap);\n    resInner.add(\"start\", start);\n    resInner.add(\"end\", end);\n\n    final String[] othersP =\n        params.getFieldParams(f,FacetParams.FACET_DATE_OTHER);\n    if (null != othersP && 0 < othersP.length ) {\n      final Set<FacetRangeOther> others = EnumSet.noneOf(FacetRangeOther.class);\n\n      for (final String o : othersP) {\n        others.add(FacetRangeOther.get(o));\n      }\n\n      // no matter what other values are listed, we don't do\n      // anything if \"none\" is specified.\n      if (! others.contains(FacetRangeOther.NONE) ) {\n        boolean all = others.contains(FacetRangeOther.ALL);\n\n        if (all || others.contains(FacetRangeOther.BEFORE)) {\n          // include upper bound if \"outer\" or if first gap doesn't already include it\n          resInner.add(FacetRangeOther.BEFORE.toString(),\n              rangeCount(sf,null,start,\n                  false,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.LOWER) ||\n                          include.contains(FacetRangeInclude.EDGE))))));\n        }\n        if (all || others.contains(FacetRangeOther.AFTER)) {\n          // include lower bound if \"outer\" or if last gap doesn't already include it\n          resInner.add(FacetRangeOther.AFTER.toString(),\n              rangeCount(sf,end,null,\n                  (include.contains(FacetRangeInclude.OUTER) ||\n                      (! (include.contains(FacetRangeInclude.UPPER) ||\n                          include.contains(FacetRangeInclude.EDGE)))),\n                  false));\n        }\n        if (all || others.contains(FacetRangeOther.BETWEEN)) {\n          resInner.add(FacetRangeOther.BETWEEN.toString(),\n              rangeCount(sf,start,end,\n                  (include.contains(FacetRangeInclude.LOWER) ||\n                      include.contains(FacetRangeInclude.EDGE)),\n                  (include.contains(FacetRangeInclude.UPPER) ||\n                      include.contains(FacetRangeInclude.EDGE))));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","755f2f419306d7297c8feee10d1897addf4b2dd0"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["ef02613bb5b67b98ca5caf41e8d6e016a0158923"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","755f2f419306d7297c8feee10d1897addf4b2dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["755f2f419306d7297c8feee10d1897addf4b2dd0"]},"commit2Childs":{"ef02613bb5b67b98ca5caf41e8d6e016a0158923":["227a2cd43fc1affe16eb4c4ab4423fbc276bd81d","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"755f2f419306d7297c8feee10d1897addf4b2dd0":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef02613bb5b67b98ca5caf41e8d6e016a0158923","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"227a2cd43fc1affe16eb4c4ab4423fbc276bd81d":["755f2f419306d7297c8feee10d1897addf4b2dd0","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}