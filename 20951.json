{"path":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse, boolean needsOffsets) throws IOException {\n\n      if (needsOffsets) {\n        // Not until we can index offsets...\n        return null;\n      }\n      \n      if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}