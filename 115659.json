{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#createCenterPoint().mjava","commits":[{"id":"0fb9dbed1415914caa27460f8abb7afadaa61451","date":1429504289,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#createCenterPoint().mjava","pathOld":"/dev/null","sourceNew":"    protected void createCenterPoint() {\n        // In order to naively confirm that the polygon is convex, I would need to\n        // check every edge, and verify that every point (other than the edge endpoints)\n        // is within the edge's sided plane.  This is an order n^2 operation.  That's still\n        // not wrong, though, because everything else about polygons has a similar cost.\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            for (int pointIndex =0; pointIndex < points.size(); pointIndex++) {\n                if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex+1)) {\n                    if (!edge.isWithin(points.get(pointIndex)))\n                        throw new IllegalArgumentException(\"Polygon is not convex: Point \"+points.get(pointIndex)+\" Edge \"+edge);\n                }\n            }\n        }\n        edgePoints = new GeoPoint[]{points.get(0)};\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2997acf74723385bd84aff1ea0b12af4aefde77","date":1430745542,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#createCenterPoint().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#createCenterPoint().mjava","sourceNew":"  protected void createCenterPoint() {\n    // In order to naively confirm that the polygon is convex, I would need to\n    // check every edge, and verify that every point (other than the edge endpoints)\n    // is within the edge's sided plane.  This is an order n^2 operation.  That's still\n    // not wrong, though, because everything else about polygons has a similar cost.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      for (int pointIndex = 0; pointIndex < points.size(); pointIndex++) {\n        if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex + 1)) {\n          if (!edge.isWithin(points.get(pointIndex)))\n            throw new IllegalArgumentException(\"Polygon is not convex: Point \" + points.get(pointIndex) + \" Edge \" + edge);\n        }\n      }\n    }\n    edgePoints = new GeoPoint[]{points.get(0)};\n  }\n\n","sourceOld":"    protected void createCenterPoint() {\n        // In order to naively confirm that the polygon is convex, I would need to\n        // check every edge, and verify that every point (other than the edge endpoints)\n        // is within the edge's sided plane.  This is an order n^2 operation.  That's still\n        // not wrong, though, because everything else about polygons has a similar cost.\n        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n            final SidedPlane edge = edges[edgeIndex];\n            for (int pointIndex =0; pointIndex < points.size(); pointIndex++) {\n                if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex+1)) {\n                    if (!edge.isWithin(points.get(pointIndex)))\n                        throw new IllegalArgumentException(\"Polygon is not convex: Point \"+points.get(pointIndex)+\" Edge \"+edge);\n                }\n            }\n        }\n        edgePoints = new GeoPoint[]{points.get(0)};\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c921d81476f94b6686d3f216daa1f6b076b4a6c0","date":1430922284,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#createCenterPoint().mjava","pathOld":"/dev/null","sourceNew":"  protected void createCenterPoint() {\n    // In order to naively confirm that the polygon is convex, I would need to\n    // check every edge, and verify that every point (other than the edge endpoints)\n    // is within the edge's sided plane.  This is an order n^2 operation.  That's still\n    // not wrong, though, because everything else about polygons has a similar cost.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      for (int pointIndex = 0; pointIndex < points.size(); pointIndex++) {\n        if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex + 1)) {\n          if (!edge.isWithin(points.get(pointIndex)))\n            throw new IllegalArgumentException(\"Polygon is not convex: Point \" + points.get(pointIndex) + \" Edge \" + edge);\n        }\n      }\n    }\n    edgePoints = new GeoPoint[]{points.get(0)};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/GeoConvexPolygon#createCenterPoint().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/GeoConvexPolygon#createCenterPoint().mjava","sourceNew":"  protected void createCenterPoint() {\n    // In order to naively confirm that the polygon is convex, I would need to\n    // check every edge, and verify that every point (other than the edge endpoints)\n    // is within the edge's sided plane.  This is an order n^2 operation.  That's still\n    // not wrong, though, because everything else about polygons has a similar cost.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      for (int pointIndex = 0; pointIndex < points.size(); pointIndex++) {\n        if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex + 1)) {\n          if (!edge.isWithin(points.get(pointIndex)))\n            throw new IllegalArgumentException(\"Polygon is not convex: Point \" + points.get(pointIndex) + \" Edge \" + edge);\n        }\n      }\n    }\n    edgePoints = new GeoPoint[]{points.get(0)};\n  }\n\n","sourceOld":"  protected void createCenterPoint() {\n    // In order to naively confirm that the polygon is convex, I would need to\n    // check every edge, and verify that every point (other than the edge endpoints)\n    // is within the edge's sided plane.  This is an order n^2 operation.  That's still\n    // not wrong, though, because everything else about polygons has a similar cost.\n    for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {\n      final SidedPlane edge = edges[edgeIndex];\n      for (int pointIndex = 0; pointIndex < points.size(); pointIndex++) {\n        if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex + 1)) {\n          if (!edge.isWithin(points.get(pointIndex)))\n            throw new IllegalArgumentException(\"Polygon is not convex: Point \" + points.get(pointIndex) + \" Edge \" + edge);\n        }\n      }\n    }\n    edgePoints = new GeoPoint[]{points.get(0)};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["0fb9dbed1415914caa27460f8abb7afadaa61451"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2997acf74723385bd84aff1ea0b12af4aefde77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"0fb9dbed1415914caa27460f8abb7afadaa61451":["e2997acf74723385bd84aff1ea0b12af4aefde77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0fb9dbed1415914caa27460f8abb7afadaa61451","c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e2997acf74723385bd84aff1ea0b12af4aefde77":["c921d81476f94b6686d3f216daa1f6b076b4a6c0"],"c921d81476f94b6686d3f216daa1f6b076b4a6c0":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}