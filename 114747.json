{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    // if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    // if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    // if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    // if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    // if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    // if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsWriter#flushTermsBlock(int,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void flushTermsBlock(int start, int count) throws IOException {\n    // if (DEBUG) System.out.println(\"PW: flushTermsBlock start=\" + start + \" count=\" + count + \" pendingTerms.size()=\" + pendingTerms.size());\n    int wrappedCount = 0;\n    assert buffer.getFilePointer() == 0;\n    assert start >= count;\n\n    final int limit = pendingTerms.size() - start + count;\n\n    for(int idx=pendingTerms.size()-start; idx<limit; idx++) {\n      final PendingTerm term = pendingTerms.get(idx);\n      if (term == null) {\n        wrappedCount++;\n      } else {\n        buffer.writeVInt(term.bytes.length);\n        buffer.writeBytes(term.bytes, 0, term.bytes.length);\n      }\n    }\n\n    termsOut.writeVInt((int) buffer.getFilePointer());\n    buffer.writeTo(termsOut);\n    buffer.reset();\n\n    // TDOO: this could be somewhat costly since\n    // pendingTerms.size() could be biggish?\n    int futureWrappedCount = 0;\n    final int limit2 = pendingTerms.size();\n    for(int idx=limit;idx<limit2;idx++) {\n      if (pendingTerms.get(idx) == null) {\n        futureWrappedCount++;\n      }\n    }\n\n    // Remove the terms we just wrote:\n    pendingTerms.subList(pendingTerms.size()-start, limit).clear();\n\n    // if (DEBUG) System.out.println(\"PW:   len=\" + buffer.getFilePointer() + \" fp=\" + termsOut.getFilePointer() + \" futureWrappedCount=\" + futureWrappedCount + \" wrappedCount=\" + wrappedCount);\n    // TODO: can we avoid calling this if all terms\n    // were inlined...?  Eg for a \"primary key\" field, the\n    // wrapped codec is never invoked...\n    wrappedPostingsWriter.flushTermsBlock(futureWrappedCount+wrappedCount, wrappedCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f948dd442d23baa6cbb28daf77c8db78b351329"]},"commit2Childs":{"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}