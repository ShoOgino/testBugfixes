{"path":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery#BM25FQuery(BM25Similarity,TreeMap[String,FieldAndWeight],BytesRef[]).mjava","commits":[{"id":"15c07295375e0ec8be1c0ec46de21292455b3af8","date":1542792270,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery#BM25FQuery(BM25Similarity,TreeMap[String,FieldAndWeight],BytesRef[]).mjava","pathOld":"/dev/null","sourceNew":"  private BM25FQuery(BM25Similarity similarity, TreeMap<String, FieldAndWeight> fieldAndWeights, BytesRef[] terms) {\n    this.similarity = similarity;\n    this.fieldAndWeights = fieldAndWeights;\n    this.terms = terms;\n    int numFieldTerms = fieldAndWeights.size() * terms.length;\n    if (numFieldTerms > BooleanQuery.getMaxClauseCount()) {\n      throw new BooleanQuery.TooManyClauses();\n    }\n    this.fieldTerms = new Term[numFieldTerms];\n    Arrays.sort(terms);\n    int pos = 0;\n    for (String field : fieldAndWeights.keySet()) {\n      for (BytesRef term : terms) {\n        fieldTerms[pos++] = new Term(field, term);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36c70eb3b44de4355a7168b762cadc0f1cf194bc","date":1561542955,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery#BM25FQuery(BM25Similarity,TreeMap[String,FieldAndWeight],BytesRef[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery#BM25FQuery(BM25Similarity,TreeMap[String,FieldAndWeight],BytesRef[]).mjava","sourceNew":"  private BM25FQuery(BM25Similarity similarity, TreeMap<String, FieldAndWeight> fieldAndWeights, BytesRef[] terms) {\n    this.similarity = similarity;\n    this.fieldAndWeights = fieldAndWeights;\n    this.terms = terms;\n    int numFieldTerms = fieldAndWeights.size() * terms.length;\n    if (numFieldTerms > IndexSearcher.getMaxClauseCount()) {\n      throw new IndexSearcher.TooManyClauses();\n    }\n    this.fieldTerms = new Term[numFieldTerms];\n    Arrays.sort(terms);\n    int pos = 0;\n    for (String field : fieldAndWeights.keySet()) {\n      for (BytesRef term : terms) {\n        fieldTerms[pos++] = new Term(field, term);\n      }\n    }\n  }\n\n","sourceOld":"  private BM25FQuery(BM25Similarity similarity, TreeMap<String, FieldAndWeight> fieldAndWeights, BytesRef[] terms) {\n    this.similarity = similarity;\n    this.fieldAndWeights = fieldAndWeights;\n    this.terms = terms;\n    int numFieldTerms = fieldAndWeights.size() * terms.length;\n    if (numFieldTerms > BooleanQuery.getMaxClauseCount()) {\n      throw new BooleanQuery.TooManyClauses();\n    }\n    this.fieldTerms = new Term[numFieldTerms];\n    Arrays.sort(terms);\n    int pos = 0;\n    for (String field : fieldAndWeights.keySet()) {\n      for (BytesRef term : terms) {\n        fieldTerms[pos++] = new Term(field, term);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery#BM25FQuery(BM25Similarity,TreeMap[String,FieldAndWeight],BytesRef[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/BM25FQuery#BM25FQuery(BM25Similarity,TreeMap[String,FieldAndWeight],BytesRef[]).mjava","sourceNew":"  private BM25FQuery(BM25Similarity similarity, TreeMap<String, FieldAndWeight> fieldAndWeights, BytesRef[] terms) {\n    this.similarity = similarity;\n    this.fieldAndWeights = fieldAndWeights;\n    this.terms = terms;\n    int numFieldTerms = fieldAndWeights.size() * terms.length;\n    if (numFieldTerms > IndexSearcher.getMaxClauseCount()) {\n      throw new IndexSearcher.TooManyClauses();\n    }\n    this.fieldTerms = new Term[numFieldTerms];\n    Arrays.sort(terms);\n    int pos = 0;\n    for (String field : fieldAndWeights.keySet()) {\n      for (BytesRef term : terms) {\n        fieldTerms[pos++] = new Term(field, term);\n      }\n    }\n\n    this.ramBytesUsed = BASE_RAM_BYTES +\n        RamUsageEstimator.sizeOfObject(fieldAndWeights) +\n        RamUsageEstimator.sizeOfObject(fieldTerms) +\n        RamUsageEstimator.sizeOfObject(terms);\n  }\n\n","sourceOld":"  private BM25FQuery(BM25Similarity similarity, TreeMap<String, FieldAndWeight> fieldAndWeights, BytesRef[] terms) {\n    this.similarity = similarity;\n    this.fieldAndWeights = fieldAndWeights;\n    this.terms = terms;\n    int numFieldTerms = fieldAndWeights.size() * terms.length;\n    if (numFieldTerms > IndexSearcher.getMaxClauseCount()) {\n      throw new IndexSearcher.TooManyClauses();\n    }\n    this.fieldTerms = new Term[numFieldTerms];\n    Arrays.sort(terms);\n    int pos = 0;\n    for (String field : fieldAndWeights.keySet()) {\n      for (BytesRef term : terms) {\n        fieldTerms[pos++] = new Term(field, term);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe90d104db258964b96e50418b9caa0c156eafda":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15c07295375e0ec8be1c0ec46de21292455b3af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe90d104db258964b96e50418b9caa0c156eafda"]},"commit2Childs":{"fe90d104db258964b96e50418b9caa0c156eafda":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["36c70eb3b44de4355a7168b762cadc0f1cf194bc"],"36c70eb3b44de4355a7168b762cadc0f1cf194bc":["fe90d104db258964b96e50418b9caa0c156eafda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}