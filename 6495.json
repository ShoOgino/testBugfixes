{"path":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#quickSort(DocFieldProcessorPerField[],int,int).mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#quickSort(DocFieldProcessorPerField[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessorPerThread#quickSort(DocFieldProcessorPerField[],int,int).mjava","sourceNew":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","sourceOld":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#quickSort(DocFieldProcessorPerField[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#quickSort(DocFieldProcessorPerField[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e691ed72f2b1a463c0c263e323928b91976a5066","date":1304346142,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#quickSort(DocFieldProcessorPerField[],int,int).mjava","sourceNew":null,"sourceOld":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","date":1304347497,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#quickSort(DocFieldProcessorPerField[],int,int).mjava","sourceNew":null,"sourceOld":"  void quickSort(DocFieldProcessorPerField[] array, int lo, int hi) {\n    if (lo >= hi)\n      return;\n    else if (hi == 1+lo) {\n      if (array[lo].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n        final DocFieldProcessorPerField tmp = array[lo];\n        array[lo] = array[hi];\n        array[hi] = tmp;\n      }\n      return;\n    }\n\n    int mid = (lo + hi) >>> 1;\n\n    if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[lo];\n      array[lo] = array[mid];\n      array[mid] = tmp;\n    }\n\n    if (array[mid].fieldInfo.name.compareTo(array[hi].fieldInfo.name) > 0) {\n      DocFieldProcessorPerField tmp = array[mid];\n      array[mid] = array[hi];\n      array[hi] = tmp;\n\n      if (array[lo].fieldInfo.name.compareTo(array[mid].fieldInfo.name) > 0) {\n        DocFieldProcessorPerField tmp2 = array[lo];\n        array[lo] = array[mid];\n        array[mid] = tmp2;\n      }\n    }\n\n    int left = lo + 1;\n    int right = hi - 1;\n\n    if (left >= right)\n      return;\n\n    DocFieldProcessorPerField partition = array[mid];\n\n    for (; ;) {\n      while (array[right].fieldInfo.name.compareTo(partition.fieldInfo.name) > 0)\n        --right;\n\n      while (left < right && array[left].fieldInfo.name.compareTo(partition.fieldInfo.name) <= 0)\n        ++left;\n\n      if (left < right) {\n        DocFieldProcessorPerField tmp = array[left];\n        array[left] = array[right];\n        array[right] = tmp;\n        --right;\n      } else {\n        break;\n      }\n    }\n\n    quickSort(array, lo, left);\n    quickSort(array, left + 1, hi);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e691ed72f2b1a463c0c263e323928b91976a5066":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e":["135621f3a0670a9394eb563224a3b76cc4dddc0f","e691ed72f2b1a463c0c263e323928b91976a5066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e691ed72f2b1a463c0c263e323928b91976a5066"]},"commit2Childs":{"e691ed72f2b1a463c0c263e323928b91976a5066":["ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c18273ea5b3974d2f30117f46f1ae416c28f727":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ba1f0e2f00b4449f4f1fc7473a8287cb532d631e"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["e691ed72f2b1a463c0c263e323928b91976a5066","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"ba1f0e2f00b4449f4f1fc7473a8287cb532d631e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba1f0e2f00b4449f4f1fc7473a8287cb532d631e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}