{"path":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#solrDoc(int,SolrReturnFields).mjava","commits":[{"id":"96ecd141e96e7a7a65822d7fada5ddc585b21149","date":1534786652,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#solrDoc(int,SolrReturnFields).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This is an optimized version for populating a SolrDocument that:\n   *\n   * 1. fetches all fields from docValues if possible. If no decompression of the stored\n   * data is necessary, we can avoid a disk seek and decompression cycle.\n   * This step is only used if all requested fields are\n   * {code docValues=true stored=false multiValued=false}.\n   * This last restriction because multiValued docValues fields do not faithfully reflect\n   * the input order in all cases. the values are returned and no decompression is necessary.\n   *\n   * 2. if 1 is impossible, try to fetch all requested fields from the stored values. If\n   * the stored data has to be decompressed anyway, it's more efficient to\n   * just get all field values from the stored values. If we got all the requested fields, return.\n   *\n   * 3. add fields where docValues=true stored=false thus could not be fetched in step 2\n   *\n   * @param luceneDocId       The Lucene doc ID\n   * @param solrReturnFields  the structure holding the fields to be returned.\n   *                          The first time this method is called for a particular\n   *                          document list, it will be modified by adding a\n   *                          RetrieveFieldsOptimizer for use in future calls.\n   *\n   * @return The SolrDocument with values requested.\n   * <p>\n   * This method is designed to be as simple as possible to use, just call it. e.g.\n   * {code SolrDocument sdoc = docFetcher.solrDoc(id, solrReturnFields);}\n   * then process the resulting SolrDocument as usual. Subsequent calls with the same\n   * solrReturnFields will re-use the optimizer created the first time.\n   *\n   * NOTE: DO NOT re-use the same SolrReturnFields object if the fields requested change.\n   */\n\n  public SolrDocument solrDoc(int luceneDocId, SolrReturnFields solrReturnFields) {\n    Supplier<RetrieveFieldsOptimizer> rfoSupplier = () -> new RetrieveFieldsOptimizer(solrReturnFields);\n    return solrReturnFields.getFetchOptimizer(rfoSupplier).getSolrDoc(luceneDocId);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96ecd141e96e7a7a65822d7fada5ddc585b21149"]},"commit2Childs":{"96ecd141e96e7a7a65822d7fada5ddc585b21149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["96ecd141e96e7a7a65822d7fada5ddc585b21149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}