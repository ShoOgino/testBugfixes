{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#parseRanges(Object).mjava","commits":[{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#parseRanges(Object).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses the given list of maps and returns list of Ranges\n   *\n   * @param input - list of map containing the ranges\n   * @return list of {@link Range}\n   */\n  private List<Range> parseRanges(Object input) {\n    if (!(input instanceof List)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected List for ranges but got \" + input.getClass().getSimpleName() + \" = \" + input\n      );\n    }\n    List intervals = (List) input;\n    List<Range> ranges = new ArrayList<>();\n    for (Object obj : intervals) {\n      if (!(obj instanceof Map)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for range but got \" + obj.getClass().getSimpleName() + \" = \" + obj);\n      }\n      Range range;\n      Map<String, Object> interval = (Map<String, Object>) obj;\n      if (interval.containsKey(\"range\")) {\n        range = getRangeByOldFormat(interval);\n      } else {\n        range = getRangeByNewFormat(interval);\n      }\n      ranges.add(range);\n    }\n    return ranges;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56a9893014b284af4d1af451e6c02e7ffdf5b6e","date":1590065972,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor#parseRanges(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeProcessor[FacetRange]#parseRanges(Object).mjava","sourceNew":"  /**\n   * Parses the given list of maps and returns list of Ranges\n   *\n   * @param input - list of map containing the ranges\n   * @return list of {@link Range}\n   */\n  private List<Range> parseRanges(Object input) {\n    if (!(input instanceof List)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected List for ranges but got \" + input.getClass().getSimpleName() + \" = \" + input\n      );\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    List intervals = (List) input;\n    List<Range> ranges = new ArrayList<>();\n    for (Object obj : intervals) {\n      if (!(obj instanceof Map)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for range but got \" + obj.getClass().getSimpleName() + \" = \" + obj);\n      }\n      @SuppressWarnings({\"unchecked\"})\n      Range range;\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> interval = (Map<String, Object>) obj;\n      if (interval.containsKey(\"range\")) {\n        range = getRangeByOldFormat(interval);\n      } else {\n        range = getRangeByNewFormat(interval);\n      }\n      ranges.add(range);\n    }\n    return ranges;\n  }\n\n","sourceOld":"  /**\n   * Parses the given list of maps and returns list of Ranges\n   *\n   * @param input - list of map containing the ranges\n   * @return list of {@link Range}\n   */\n  private List<Range> parseRanges(Object input) {\n    if (!(input instanceof List)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected List for ranges but got \" + input.getClass().getSimpleName() + \" = \" + input\n      );\n    }\n    List intervals = (List) input;\n    List<Range> ranges = new ArrayList<>();\n    for (Object obj : intervals) {\n      if (!(obj instanceof Map)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Expected Map for range but got \" + obj.getClass().getSimpleName() + \" = \" + obj);\n      }\n      Range range;\n      Map<String, Object> interval = (Map<String, Object>) obj;\n      if (interval.containsKey(\"range\")) {\n        range = getRangeByOldFormat(interval);\n      } else {\n        range = getRangeByNewFormat(interval);\n      }\n      ranges.add(range);\n    }\n    return ranges;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"]},"commit2Childs":{"a56a9893014b284af4d1af451e6c02e7ffdf5b6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a56a9893014b284af4d1af451e6c02e7ffdf5b6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}