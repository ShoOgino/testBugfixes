{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","sourceNew":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","sourceNew":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEmptyEnums().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyEnums() throws Exception {\n    int count=3000;\n    int lower=(distance*3/2)+startOffset, upper=lower + count*distance + (distance/3);\n    // test empty enum\n    assert lower < upper;\n    assertTrue(0 < countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, upper, lower, true, true)));\n    // test empty enum outside of bounds\n    lower = distance*noDocs+startOffset;\n    upper = 2 * lower;\n    assert lower < upper;\n    assertEquals(0, countTerms(LegacyNumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}