{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestStringIntern#testStringIntern().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestStringIntern#testStringIntern().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestStringIntern#testStringIntern().mjava","sourceNew":"  public void testStringIntern() throws InterruptedException {\n    makeStrings(1024*10);  // something greater than the capacity of the default cache size\n    // makeStrings(100);  // realistic for perf testing\n    int nThreads = 20;\n    // final int iter=100000;\n    final int iter=1000000;\n    final boolean newStrings=true;\n    \n    // try native intern\n    // StringHelper.interner = new StringInterner();\n\n    Thread[] threads = new Thread[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      final int seed = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          Random rand = new Random(seed);\n          String[] myInterned = new String[testStrings.length];\n          for (int j=0; j<iter; j++) {\n            int idx = rand.nextInt(testStrings.length);\n            String s = testStrings[idx];\n            if (newStrings == true && rand.nextBoolean()) s = new String(s); // make a copy half of the time\n            String interned = StringHelper.intern(s);\n            String prevInterned = myInterned[idx];\n            String otherInterned = internedStrings[idx];\n\n            // test against other threads\n            if (otherInterned != null && otherInterned != interned) {\n              TestCase.fail();\n            }\n            internedStrings[idx] = interned;\n\n            // test against local copy\n            if (prevInterned != null && prevInterned != interned) {\n              TestCase.fail();\n            }\n            myInterned[idx] = interned;\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (int i=0; i<nThreads; i++) {\n      threads[i].join();\n    }\n  }\n\n","sourceOld":"  public void testStringIntern() throws InterruptedException {\n    makeStrings(1024*10);  // something greater than the capacity of the default cache size\n    // makeStrings(100);  // realistic for perf testing\n    int nThreads = 20;\n    // final int iter=100000;\n    final int iter=1000000;\n    final boolean newStrings=true;\n    \n    // try native intern\n    // StringHelper.interner = new StringInterner();\n\n    Thread[] threads = new Thread[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      final int seed = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          Random rand = new Random(seed);\n          String[] myInterned = new String[testStrings.length];\n          for (int j=0; j<iter; j++) {\n            int idx = rand.nextInt(testStrings.length);\n            String s = testStrings[idx];\n            if (newStrings == true && rand.nextBoolean()) s = new String(s); // make a copy half of the time\n            String interned = StringHelper.intern(s);\n            String prevInterned = myInterned[idx];\n            String otherInterned = internedStrings[idx];\n\n            // test against other threads\n            if (otherInterned != null && otherInterned != interned) {\n              TestCase.fail();\n            }\n            internedStrings[idx] = interned;\n\n            // test against local copy\n            if (prevInterned != null && prevInterned != interned) {\n              TestCase.fail();\n            }\n            myInterned[idx] = interned;\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (int i=0; i<nThreads; i++) {\n      threads[i].join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestStringIntern#testStringIntern().mjava","sourceNew":null,"sourceOld":"  public void testStringIntern() throws InterruptedException {\n    makeStrings(1024*10);  // something greater than the capacity of the default cache size\n    // makeStrings(100);  // realistic for perf testing\n    int nThreads = 20;\n    // final int iter=100000;\n    final int iter=1000000;\n    final boolean newStrings=true;\n    \n    // try native intern\n    // StringHelper.interner = new StringInterner();\n\n    Thread[] threads = new Thread[nThreads];\n    for (int i=0; i<nThreads; i++) {\n      final int seed = i;\n      threads[i] = new Thread() {\n        @Override\n        public void run() {\n          Random rand = new Random(seed);\n          String[] myInterned = new String[testStrings.length];\n          for (int j=0; j<iter; j++) {\n            int idx = rand.nextInt(testStrings.length);\n            String s = testStrings[idx];\n            if (newStrings == true && rand.nextBoolean()) s = new String(s); // make a copy half of the time\n            String interned = StringHelper.intern(s);\n            String prevInterned = myInterned[idx];\n            String otherInterned = internedStrings[idx];\n\n            // test against other threads\n            if (otherInterned != null && otherInterned != interned) {\n              TestCase.fail();\n            }\n            internedStrings[idx] = interned;\n\n            // test against local copy\n            if (prevInterned != null && prevInterned != interned) {\n              TestCase.fail();\n            }\n            myInterned[idx] = interned;\n          }\n        }\n      };\n\n      threads[i].start();\n    }\n\n    for (int i=0; i<nThreads; i++) {\n      threads[i].join();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}