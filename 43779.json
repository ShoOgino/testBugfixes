{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    if (getBoost() != 1.0) {\n      buffer.append(\"^\");\n      buffer.append(getBoost());\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery#toString(String).mjava","sourceNew":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    for (int i = 0 ; i < disjuncts.length; i++) {\n      Query subquery = disjuncts[i];\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != disjuncts.length-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prettyprint us.\n   * @param field the field to which we are applied\n   * @return a string that shows what we do, of the form \"(disjunct1 | disjunct2 | ... | disjunctn)^boost\"\n   */\n  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    buffer.append(\"(\");\n    int numDisjunctions = disjuncts.size();\n    for (int i = 0 ; i < numDisjunctions; i++) {\n      Query subquery = disjuncts.get(i);\n      if (subquery instanceof BooleanQuery) {   // wrap sub-bools in parens\n        buffer.append(\"(\");\n        buffer.append(subquery.toString(field));\n        buffer.append(\")\");\n      }\n      else buffer.append(subquery.toString(field));\n      if (i != numDisjunctions-1) buffer.append(\" | \");\n    }\n    buffer.append(\")\");\n    if (tieBreakerMultiplier != 0.0f) {\n      buffer.append(\"~\");\n      buffer.append(tieBreakerMultiplier);\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}