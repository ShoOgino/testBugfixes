{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#orDense(DocIdSetIterator).mjava","commits":[{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#orDense(DocIdSetIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@link #or(DocIdSetIterator)} impl that works best when <code>it</code> is dense\n   */\n  private void orDense(DocIdSetIterator it) throws IOException {\n    assertUnpositioned(it);\n    // The goal here is to try to take advantage of the ordering of documents\n    // to build the data-structure more efficiently\n    // NOTE: this heavily relies on the fact that shifts are mod 64\n    final int firstDoc = it.nextDoc();\n    if (firstDoc == DocIdSetIterator.NO_MORE_DOCS) {\n      return;\n    }\n    int i4096 = firstDoc >>> 12;\n    int i64 = firstDoc >>> 6;\n    long index = 1L << i64;\n    long currentLong = 1L << firstDoc;\n    // we store at most 64 longs per block so preallocate in order never to have to resize\n    long[] longs = new long[64];\n    int numLongs = 0;\n\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int doc64 = doc >>> 6;\n      if (doc64 == i64) {\n        // still in the same long, just set the bit\n        currentLong |= 1L << doc;\n      } else {\n        longs[numLongs++] = currentLong;\n\n        final int doc4096 = doc >>> 12;\n        if (doc4096 == i4096) {\n          index |= 1L << doc64;\n        } else {\n          // we are on a new block, flush what we buffered\n          or(i4096, index, longs, numLongs);\n          // and reset state for the new block\n          i4096 = doc4096;\n          index = 1L << doc64;\n          numLongs = 0;\n        }\n\n        // we are on a new long, reset state\n        i64 = doc64;\n        currentLong = 1L << doc;\n      }\n    }\n\n    // flush\n    longs[numLongs++] = currentLong;\n    or(i4096, index, longs, numLongs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a377baed0108974b7a40d37dbf9de4cb8d15e8e","date":1503384043,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#orDense(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#orDense(DocIdSetIterator).mjava","sourceNew":"  /**\n   * {@link #or(DocIdSetIterator)} impl that works best when <code>it</code> is dense\n   */\n  private void orDense(DocIdSetIterator it) throws IOException {\n    checkUnpositioned(it);\n    // The goal here is to try to take advantage of the ordering of documents\n    // to build the data-structure more efficiently\n    // NOTE: this heavily relies on the fact that shifts are mod 64\n    final int firstDoc = it.nextDoc();\n    if (firstDoc == DocIdSetIterator.NO_MORE_DOCS) {\n      return;\n    }\n    int i4096 = firstDoc >>> 12;\n    int i64 = firstDoc >>> 6;\n    long index = 1L << i64;\n    long currentLong = 1L << firstDoc;\n    // we store at most 64 longs per block so preallocate in order never to have to resize\n    long[] longs = new long[64];\n    int numLongs = 0;\n\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int doc64 = doc >>> 6;\n      if (doc64 == i64) {\n        // still in the same long, just set the bit\n        currentLong |= 1L << doc;\n      } else {\n        longs[numLongs++] = currentLong;\n\n        final int doc4096 = doc >>> 12;\n        if (doc4096 == i4096) {\n          index |= 1L << doc64;\n        } else {\n          // we are on a new block, flush what we buffered\n          or(i4096, index, longs, numLongs);\n          // and reset state for the new block\n          i4096 = doc4096;\n          index = 1L << doc64;\n          numLongs = 0;\n        }\n\n        // we are on a new long, reset state\n        i64 = doc64;\n        currentLong = 1L << doc;\n      }\n    }\n\n    // flush\n    longs[numLongs++] = currentLong;\n    or(i4096, index, longs, numLongs);\n  }\n\n","sourceOld":"  /**\n   * {@link #or(DocIdSetIterator)} impl that works best when <code>it</code> is dense\n   */\n  private void orDense(DocIdSetIterator it) throws IOException {\n    assertUnpositioned(it);\n    // The goal here is to try to take advantage of the ordering of documents\n    // to build the data-structure more efficiently\n    // NOTE: this heavily relies on the fact that shifts are mod 64\n    final int firstDoc = it.nextDoc();\n    if (firstDoc == DocIdSetIterator.NO_MORE_DOCS) {\n      return;\n    }\n    int i4096 = firstDoc >>> 12;\n    int i64 = firstDoc >>> 6;\n    long index = 1L << i64;\n    long currentLong = 1L << firstDoc;\n    // we store at most 64 longs per block so preallocate in order never to have to resize\n    long[] longs = new long[64];\n    int numLongs = 0;\n\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int doc64 = doc >>> 6;\n      if (doc64 == i64) {\n        // still in the same long, just set the bit\n        currentLong |= 1L << doc;\n      } else {\n        longs[numLongs++] = currentLong;\n\n        final int doc4096 = doc >>> 12;\n        if (doc4096 == i4096) {\n          index |= 1L << doc64;\n        } else {\n          // we are on a new block, flush what we buffered\n          or(i4096, index, longs, numLongs);\n          // and reset state for the new block\n          i4096 = doc4096;\n          index = 1L << doc64;\n          numLongs = 0;\n        }\n\n        // we are on a new long, reset state\n        i64 = doc64;\n        currentLong = 1L << doc;\n      }\n    }\n\n    // flush\n    longs[numLongs++] = currentLong;\n    or(i4096, index, longs, numLongs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#orDense(DocIdSetIterator).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#orDense(DocIdSetIterator).mjava","sourceNew":"  /**\n   * {@link #or(DocIdSetIterator)} impl that works best when <code>it</code> is dense\n   */\n  private void orDense(DocIdSetIterator it) throws IOException {\n    checkUnpositioned(it);\n    // The goal here is to try to take advantage of the ordering of documents\n    // to build the data-structure more efficiently\n    // NOTE: this heavily relies on the fact that shifts are mod 64\n    final int firstDoc = it.nextDoc();\n    if (firstDoc == DocIdSetIterator.NO_MORE_DOCS) {\n      return;\n    }\n    int i4096 = firstDoc >>> 12;\n    int i64 = firstDoc >>> 6;\n    long index = 1L << i64;\n    long currentLong = 1L << firstDoc;\n    // we store at most 64 longs per block so preallocate in order never to have to resize\n    long[] longs = new long[64];\n    int numLongs = 0;\n\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int doc64 = doc >>> 6;\n      if (doc64 == i64) {\n        // still in the same long, just set the bit\n        currentLong |= 1L << doc;\n      } else {\n        longs[numLongs++] = currentLong;\n\n        final int doc4096 = doc >>> 12;\n        if (doc4096 == i4096) {\n          index |= 1L << doc64;\n        } else {\n          // we are on a new block, flush what we buffered\n          or(i4096, index, longs, numLongs);\n          // and reset state for the new block\n          i4096 = doc4096;\n          index = 1L << doc64;\n          numLongs = 0;\n        }\n\n        // we are on a new long, reset state\n        i64 = doc64;\n        currentLong = 1L << doc;\n      }\n    }\n\n    // flush\n    longs[numLongs++] = currentLong;\n    or(i4096, index, longs, numLongs);\n  }\n\n","sourceOld":"  /**\n   * {@link #or(DocIdSetIterator)} impl that works best when <code>it</code> is dense\n   */\n  private void orDense(DocIdSetIterator it) throws IOException {\n    assertUnpositioned(it);\n    // The goal here is to try to take advantage of the ordering of documents\n    // to build the data-structure more efficiently\n    // NOTE: this heavily relies on the fact that shifts are mod 64\n    final int firstDoc = it.nextDoc();\n    if (firstDoc == DocIdSetIterator.NO_MORE_DOCS) {\n      return;\n    }\n    int i4096 = firstDoc >>> 12;\n    int i64 = firstDoc >>> 6;\n    long index = 1L << i64;\n    long currentLong = 1L << firstDoc;\n    // we store at most 64 longs per block so preallocate in order never to have to resize\n    long[] longs = new long[64];\n    int numLongs = 0;\n\n    for (int doc = it.nextDoc(); doc != DocIdSetIterator.NO_MORE_DOCS; doc = it.nextDoc()) {\n      final int doc64 = doc >>> 6;\n      if (doc64 == i64) {\n        // still in the same long, just set the bit\n        currentLong |= 1L << doc;\n      } else {\n        longs[numLongs++] = currentLong;\n\n        final int doc4096 = doc >>> 12;\n        if (doc4096 == i4096) {\n          index |= 1L << doc64;\n        } else {\n          // we are on a new block, flush what we buffered\n          or(i4096, index, longs, numLongs);\n          // and reset state for the new block\n          i4096 = doc4096;\n          index = 1L << doc64;\n          numLongs = 0;\n        }\n\n        // we are on a new long, reset state\n        i64 = doc64;\n        currentLong = 1L << doc;\n      }\n    }\n\n    // flush\n    longs[numLongs++] = currentLong;\n    or(i4096, index, longs, numLongs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","2a377baed0108974b7a40d37dbf9de4cb8d15e8e"],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a377baed0108974b7a40d37dbf9de4cb8d15e8e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a377baed0108974b7a40d37dbf9de4cb8d15e8e"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","2a377baed0108974b7a40d37dbf9de4cb8d15e8e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"2a377baed0108974b7a40d37dbf9de4cb8d15e8e":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}