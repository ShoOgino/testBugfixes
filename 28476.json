{"path":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}