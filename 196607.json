{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      try {\n        if (postingsReader != null) {\n          postingsReader.close();\n        }\n      } finally {\n        for(FieldReader field : fields.values()) {\n          field.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      try {\n        if (postingsReader != null) {\n          postingsReader.close();\n        }\n      } finally {\n        for(FieldReader field : fields.values()) {\n          field.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd1bfe3cedf815c14939d170d53031c88eb5c444","date":1295896578,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      try {\n        if (postingsReader != null) {\n          postingsReader.close();\n        }\n      } finally {\n        for(FieldReader field : fields.values()) {\n          field.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PrefixCodedTermsReader#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      try {\n        if (postingsReader != null) {\n          postingsReader.close();\n        }\n      } finally {\n        for(FieldReader field : fields.values()) {\n          field.close();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      try {\n        if (postingsReader != null) {\n          postingsReader.close();\n        }\n      } finally {\n        for(FieldReader field : fields.values()) {\n          field.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      if (postingsReader != null) {\n        postingsReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      try {\n        if (postingsReader != null) {\n          postingsReader.close();\n        }\n      } finally {\n        for(FieldReader field : fields.values()) {\n          field.close();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTermsReader#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTermsReader#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      if (postingsReader != null) {\n        postingsReader.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    try {\n      try {\n        if (indexReader != null) {\n          indexReader.close();\n        }\n      } finally {\n        // null so if an app hangs on to us (ie, we are not\n        // GCable, despite being closed) we still free most\n        // ram\n        indexReader = null;\n        if (in != null) {\n          in.close();\n        }\n      }\n    } finally {\n      if (postingsReader != null) {\n        postingsReader.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fd1bfe3cedf815c14939d170d53031c88eb5c444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e2297162a22c55456e200caef2cbcb00fe381120"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"fd1bfe3cedf815c14939d170d53031c88eb5c444":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e2297162a22c55456e200caef2cbcb00fe381120":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e2297162a22c55456e200caef2cbcb00fe381120"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd1bfe3cedf815c14939d170d53031c88eb5c444","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}