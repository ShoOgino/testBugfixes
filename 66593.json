{"path":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","commits":[{"id":"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444","date":1132159199,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer)\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? (Scorer) prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7be534ca83a593a45a836cbffd544f2671d9ca60","date":1237394690,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? (Scorer) prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer)\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? (Scorer) prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? (Scorer) prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer2#addProhibitedScorers(Scorer).mjava","sourceNew":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","sourceOld":"  /** Returns the scorer to be used for match counting and score summing.\n   * Uses the given required scorer and the prohibitedScorers.\n   * @param requiredCountingSumScorer A required scorer already built.\n   */\n  private Scorer addProhibitedScorers(Scorer requiredCountingSumScorer) throws IOException\n  {\n    return (prohibitedScorers.size() == 0)\n          ? requiredCountingSumScorer // no prohibited\n          : new ReqExclScorer(requiredCountingSumScorer,\n                              ((prohibitedScorers.size() == 1)\n                                ? prohibitedScorers.get(0)\n                                : new DisjunctionSumScorer(prohibitedScorers)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7be534ca83a593a45a836cbffd544f2671d9ca60":["60cdc0e643184821eb066795a8791cd82559f46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6bffc7c3c9ddfcefe91b728c0680af2a3a96444"],"b6bffc7c3c9ddfcefe91b728c0680af2a3a96444":["7be534ca83a593a45a836cbffd544f2671d9ca60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}