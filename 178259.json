{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","commits":[{"id":"122c889ac8944e19f984ba4306b02a8742e914a7","date":1502707353,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","pathOld":"/dev/null","sourceNew":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        LOG.warn(\"Unknown metric type \" + v.getClass().getName() + \" for metric '\" + k + \"', ignoring\");\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","pathOld":"/dev/null","sourceNew":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        LOG.warn(\"Unknown metric type \" + v.getClass().getName() + \" for metric '\" + k + \"', ignoring\");\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","sourceNew":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        log.warn(\"Unknown metric type \" + v.getClass().getName() + \" for metric '\" + k + \"', ignoring\");\n      }\n    });\n  }\n\n","sourceOld":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        LOG.warn(\"Unknown metric type \" + v.getClass().getName() + \" for metric '\" + k + \"', ignoring\");\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","sourceNew":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unknown metric type {} for metric '{}', ignoring\", v.getClass().getName(), k);\n        }\n      }\n    });\n  }\n\n","sourceOld":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        log.warn(\"Unknown metric type \" + v.getClass().getName() + \" for metric '\" + k + \"', ignoring\");\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/jmx/JmxMetricsReporter#start().mjava","sourceNew":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        log.warn(\"Unknown metric type {} for metric '{}', ignoring\", v.getClass().getName(), k);\n      }\n    });\n  }\n\n","sourceOld":"  public void start() {\n    registry.addListener(listener);\n    // process existing metrics\n    Map<String, Metric> metrics = new HashMap<>(registry.getMetrics());\n    metrics.forEach((k, v) -> {\n      if (v instanceof Counter) {\n        listener.onCounterAdded(k, (Counter)v);\n      } else if (v instanceof Meter) {\n        listener.onMeterAdded(k, (Meter)v);\n      } else if (v instanceof Histogram) {\n        listener.onHistogramAdded(k, (Histogram)v);\n      } else if (v instanceof Timer) {\n        listener.onTimerAdded(k, (Timer)v);\n      } else if (v instanceof Gauge) {\n        listener.onGaugeAdded(k, (Gauge)v);\n      } else {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unknown metric type {} for metric '{}', ignoring\", v.getClass().getName(), k);\n        }\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575e66bd4b2349209027f6801184da7fc3cba13f":["9df8125ba9193a2e2e285ed92157810b1952a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"9df8125ba9193a2e2e285ed92157810b1952a244":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["122c889ac8944e19f984ba4306b02a8742e914a7"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","122c889ac8944e19f984ba4306b02a8742e914a7"],"122c889ac8944e19f984ba4306b02a8742e914a7":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9df8125ba9193a2e2e285ed92157810b1952a244":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9df8125ba9193a2e2e285ed92157810b1952a244"]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}