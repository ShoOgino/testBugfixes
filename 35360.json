{"path":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","commits":[{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba","date":1459362686,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69","date":1459364429,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/DateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0982ea5c2b7f50890065ccf2b59068efc40eaafe","date":1538167811,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/extraction/src/java/org/apache/solr/handler/extraction/ExtractionDateUtil#parseDate(String,Collection[String],Date).mjava","sourceNew":null,"sourceOld":"  /**\n   * Slightly modified from org.apache.commons.httpclient.util.DateUtil.parseDate\n   * <p>\n   * Parses the date value using the given date formats.\n   *\n   * @param dateValue   the date value to parse\n   * @param dateFormats the date formats to use\n   * @param startDate   During parsing, two digit years will be placed in the range\n   *                    <code>startDate</code> to <code>startDate + 100 years</code>. This value may\n   *                    be <code>null</code>. When <code>null</code> is given as a parameter, year\n   *                    <code>2000</code> will be used.\n   * @return the parsed date\n   * @throws ParseException if none of the dataFormats could parse the dateValue\n   */\n  public static Date parseDate(\n          String dateValue,\n          Collection<String> dateFormats,\n          Date startDate\n  ) throws ParseException {\n\n    if (dateValue == null) {\n      throw new IllegalArgumentException(\"dateValue is null\");\n    }\n    if (dateFormats == null) {\n      dateFormats = DEFAULT_HTTP_CLIENT_PATTERNS;\n    }\n    if (startDate == null) {\n      startDate = DEFAULT_TWO_DIGIT_YEAR_START;\n    }\n    // trim single quotes around date if present\n    // see issue #5279\n    if (dateValue.length() > 1\n            && dateValue.startsWith(\"'\")\n            && dateValue.endsWith(\"'\")\n            ) {\n      dateValue = dateValue.substring(1, dateValue.length() - 1);\n    }\n\n    //TODO upgrade to Java 8 DateTimeFormatter. But how to deal with the GMT as a default?\n    SimpleDateFormat dateParser = null;\n    Iterator formatIter = dateFormats.iterator();\n\n    while (formatIter.hasNext()) {\n      String format = (String) formatIter.next();\n      if (dateParser == null) {\n        dateParser = new SimpleDateFormat(format, Locale.ENGLISH);\n        dateParser.setTimeZone(GMT);\n        dateParser.set2DigitYearStart(startDate);\n      } else {\n        dateParser.applyPattern(format);\n      }\n      try {\n        return dateParser.parse(dateValue);\n      } catch (ParseException pe) {\n        // ignore this exception, we will try the next format\n      }\n    }\n\n    // we were unable to parse the date\n    throw new ParseException(\"Unable to parse the date \" + dateValue, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69":["0982ea5c2b7f50890065ccf2b59068efc40eaafe"],"7b40fe5c31bfd6ee2e9f0237b5f45f2df5540eba":["7d60e61c65a1b9de0ec7baf2c94de9f228a9ba69"],"0982ea5c2b7f50890065ccf2b59068efc40eaafe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}