{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer).mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer,String).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + cc.getSolrHome());\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc, String solrHome) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + solrHome);\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#bootstrapConf(SolrZkClient,CoreContainer).mjava","sourceNew":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"bootstrapping config for {} cores into ZooKeeper using solr.xml from {}\", cds.size(), cc.getSolrHome());\n    }\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory {} with name {} for solrCore {}\", udir, confName, coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","sourceOld":"  /**\n   * If in SolrCloud mode, upload config sets for each SolrCore in solr.xml.\n   */\n  public static void bootstrapConf(SolrZkClient zkClient, CoreContainer cc) throws IOException {\n\n    ZkConfigManager configManager = new ZkConfigManager(zkClient);\n\n    //List<String> allCoreNames = cfg.getAllCoreNames();\n    List<CoreDescriptor> cds = cc.getCoresLocator().discover(cc);\n\n    log.info(\"bootstrapping config for \" + cds.size() + \" cores into ZooKeeper using solr.xml from \" + cc.getSolrHome());\n\n    for (CoreDescriptor cd : cds) {\n      String coreName = cd.getName();\n      String confName = cd.getCollectionName();\n      if (StringUtils.isEmpty(confName))\n        confName = coreName;\n      Path udir = cd.getInstanceDir().resolve(\"conf\");\n      log.info(\"Uploading directory \" + udir + \" with name \" + confName + \" for SolrCore \" + coreName);\n      configManager.uploadConfigDir(udir, confName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ad4957cde742defe6db19689abdc267c5d948066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}