{"path":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","commits":[{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  // nocommit jdocs\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","sourceNew":"  /** Like {@link\n   *  checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  // nocommit jdocs\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ace9b78896617dcee984890f3300d45c539c1b15","date":1337655022,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","sourceNew":"  /** Like {@link\n   *  #checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  /** Like {@link\n   *  checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Like {@link\n   *  #checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bcce0e518c0546269a896ca6124ba4313059185f","date":1340381078,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","sourceNew":"  /** Like {@link\n   *  #checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  /** Like {@link\n   *  #checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CodecUtil#checkHeaderNoMagic(DataInput,String,int,int).mjava","sourceNew":"  /** Like {@link\n   *  #checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","sourceOld":"  /** Like {@link\n   *  #checkHeader(DataInput,String,int,int)} except this\n   *  version assumes the first int has already been read\n   *  and validated from the input. */\n  public static int checkHeaderNoMagic(DataInput in, String codec, int minVersion, int maxVersion) throws IOException {\n    final String actualCodec = in.readString();\n    if (!actualCodec.equals(codec)) {\n      throw new CorruptIndexException(\"codec mismatch: actual codec=\" + actualCodec + \" vs expected codec=\" + codec + \" (resource: \" + in + \")\");\n    }\n\n    final int actualVersion = in.readInt();\n    if (actualVersion < minVersion) {\n      throw new IndexFormatTooOldException(in, actualVersion, minVersion, maxVersion);\n    }\n    if (actualVersion > maxVersion) {\n      throw new IndexFormatTooNewException(in, actualVersion, minVersion, maxVersion);\n    }\n\n    return actualVersion;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcce0e518c0546269a896ca6124ba4313059185f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ace9b78896617dcee984890f3300d45c539c1b15"],"4356000e349e38c9fb48034695b7c309abd54557":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","bcce0e518c0546269a896ca6124ba4313059185f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["4356000e349e38c9fb48034695b7c309abd54557"],"ace9b78896617dcee984890f3300d45c539c1b15":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bcce0e518c0546269a896ca6124ba4313059185f"]},"commit2Childs":{"bcce0e518c0546269a896ca6124ba4313059185f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["bcce0e518c0546269a896ca6124ba4313059185f","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"4356000e349e38c9fb48034695b7c309abd54557":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4356000e349e38c9fb48034695b7c309abd54557"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["ace9b78896617dcee984890f3300d45c539c1b15"],"ace9b78896617dcee984890f3300d45c539c1b15":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}