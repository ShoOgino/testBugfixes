{"path":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#resetForRecovery().mjava","commits":[{"id":"6776c9bdacef00ce712b87d1c8e999ae61c1c6a1","date":1448389841,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#resetForRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#reset().mjava","sourceNew":"  /**\n   * expert: Reset the update log before initialisation. This is called by\n   * {@link org.apache.solr.handler.IndexFetcher#moveTlogFiles(File)} during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   * @see #initForRecovery(File, long)\n   */\n  public BufferedUpdates resetForRecovery() {\n    synchronized (this) { // since we blocked updates in IndexFetcher, this synchronization shouldn't strictly be necessary.\n      // If we are buffering, we need to return the related information to the index fetcher\n      // for properly initialising the new update log - SOLR-8263\n      BufferedUpdates bufferedUpdates = new BufferedUpdates();\n      if (state == State.BUFFERING && tlog != null) {\n        bufferedUpdates.tlog = tlog.tlogFile; // file to keep\n        bufferedUpdates.offset = this.recoveryInfo.positionOfStart;\n      }\n\n      // Close readers\n      for (CdcrLogReader reader : logPointers.keySet()) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      tlogFiles = null;\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      return bufferedUpdates;\n    }\n  }\n\n","sourceOld":"  /**\n   * expert: Reset the update log before initialisation. This is needed by the IndexFetcher during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   */\n  public void reset() {\n    synchronized (this) {\n      // Close readers\n      for (CdcrLogReader reader : new ArrayList<>(logPointers.keySet())) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      // reset lastDataDir for triggering full #init()\n      lastDataDir = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfa6bab72dc1ef7209657e6685f9204e2e49bac8","date":1448391014,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#reset().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#resetForRecovery().mjava","sourceNew":"  /**\n   * expert: Reset the update log before initialisation. This is needed by the IndexFetcher during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   */\n  public void reset() {\n    synchronized (this) {\n      // Close readers\n      for (CdcrLogReader reader : new ArrayList<>(logPointers.keySet())) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      // reset lastDataDir for triggering full #init()\n      lastDataDir = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * expert: Reset the update log before initialisation. This is called by\n   * {@link org.apache.solr.handler.IndexFetcher#moveTlogFiles(File)} during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   * @see #initForRecovery(File, long)\n   */\n  public BufferedUpdates resetForRecovery() {\n    synchronized (this) { // since we blocked updates in IndexFetcher, this synchronization shouldn't strictly be necessary.\n      // If we are buffering, we need to return the related information to the index fetcher\n      // for properly initialising the new update log - SOLR-8263\n      BufferedUpdates bufferedUpdates = new BufferedUpdates();\n      if (state == State.BUFFERING && tlog != null) {\n        bufferedUpdates.tlog = tlog.tlogFile; // file to keep\n        bufferedUpdates.offset = this.recoveryInfo.positionOfStart;\n      }\n\n      // Close readers\n      for (CdcrLogReader reader : logPointers.keySet()) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      tlogFiles = null;\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      return bufferedUpdates;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cae179618908dcb534af567cdf3019505ada6c","date":1449365361,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#resetForRecovery().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#reset().mjava","sourceNew":"  /**\n   * expert: Reset the update log before initialisation. This is called by\n   * {@link org.apache.solr.handler.IndexFetcher#moveTlogFiles(File)} during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   * @see #initForRecovery(File, long)\n   */\n  public BufferedUpdates resetForRecovery() {\n    synchronized (this) { // since we blocked updates in IndexFetcher, this synchronization shouldn't strictly be necessary.\n      // If we are buffering, we need to return the related information to the index fetcher\n      // for properly initialising the new update log - SOLR-8263\n      BufferedUpdates bufferedUpdates = new BufferedUpdates();\n      if (state == State.BUFFERING && tlog != null) {\n        bufferedUpdates.tlog = tlog.tlogFile; // file to keep\n        bufferedUpdates.offset = this.recoveryInfo.positionOfStart;\n      }\n\n      // Close readers\n      for (CdcrLogReader reader : logPointers.keySet()) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      tlogFiles = null;\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      return bufferedUpdates;\n    }\n  }\n\n","sourceOld":"  /**\n   * expert: Reset the update log before initialisation. This is needed by the IndexFetcher during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   */\n  public void reset() {\n    synchronized (this) {\n      // Close readers\n      for (CdcrLogReader reader : new ArrayList<>(logPointers.keySet())) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      // reset lastDataDir for triggering full #init()\n      lastDataDir = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog#resetForRecovery().mjava","sourceNew":null,"sourceOld":"  /**\n   * expert: Reset the update log before initialisation. This is called by\n   * {@link org.apache.solr.handler.IndexFetcher#moveTlogFiles(File)} during a\n   * a Recovery operation in order to re-initialise the UpdateLog with a new set of tlog files.\n   * @see #initForRecovery(File, long)\n   */\n  public BufferedUpdates resetForRecovery() {\n    synchronized (this) { // since we blocked updates in IndexFetcher, this synchronization shouldn't strictly be necessary.\n      // If we are buffering, we need to return the related information to the index fetcher\n      // for properly initialising the new update log - SOLR-8263\n      BufferedUpdates bufferedUpdates = new BufferedUpdates();\n      if (state == State.BUFFERING && tlog != null) {\n        bufferedUpdates.tlog = tlog.tlogFile; // file to keep\n        bufferedUpdates.offset = this.recoveryInfo.positionOfStart;\n      }\n\n      // Close readers\n      for (CdcrLogReader reader : logPointers.keySet()) {\n        reader.close();\n      }\n      logPointers.clear();\n\n      // Close and clear logs\n      doClose(prevTlog);\n      doClose(tlog);\n\n      for (TransactionLog log : logs) {\n        if (log == prevTlog || log == tlog) continue;\n        doClose(log);\n      }\n\n      logs.clear();\n      newestLogsOnStartup.clear();\n      tlog = prevTlog = null;\n      prevMapLog = prevMapLog2 = null;\n\n      map.clear();\n      if (prevMap != null) prevMap.clear();\n      if (prevMap2 != null) prevMap2.clear();\n\n      tlogFiles = null;\n      numOldRecords = 0;\n\n      oldDeletes.clear();\n      deleteByQueries.clear();\n\n      return bufferedUpdates;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"77cae179618908dcb534af567cdf3019505ada6c":["cfa6bab72dc1ef7209657e6685f9204e2e49bac8"],"cfa6bab72dc1ef7209657e6685f9204e2e49bac8":["6776c9bdacef00ce712b87d1c8e999ae61c1c6a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6776c9bdacef00ce712b87d1c8e999ae61c1c6a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["77cae179618908dcb534af567cdf3019505ada6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"77cae179618908dcb534af567cdf3019505ada6c":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cfa6bab72dc1ef7209657e6685f9204e2e49bac8":["77cae179618908dcb534af567cdf3019505ada6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6776c9bdacef00ce712b87d1c8e999ae61c1c6a1"],"6776c9bdacef00ce712b87d1c8e999ae61c1c6a1":["cfa6bab72dc1ef7209657e6685f9204e2e49bac8"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}