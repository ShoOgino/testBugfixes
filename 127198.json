{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#concentrateProp(String).mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#concentrateProp(String).mjava","pathOld":"/dev/null","sourceNew":"  // use a simple heuristic to put as many replicas with the property on as few nodes as possible. The point is that\n  // then we can execute BALANCESHARDUNIQUE and be sure it worked correctly\n  private void concentrateProp(String prop) throws KeeperException, InterruptedException, IOException, SolrServerException {\n    // find all the live nodes\n    // for each slice, assign the leader to the first replica that is in the lowest position on live_nodes\n    List<String> liveNodes = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(liveNodes, random());\n\n    Map<String, String> uniquePropMap = new TreeMap<>();\n    forceUpdateCollectionStatus();\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n    for (Slice slice : docCollection.getSlices()) {\n      Replica changedRep = null;\n      int livePos = Integer.MAX_VALUE;\n      for (Replica rep : slice.getReplicas()) {\n        int pos = liveNodes.indexOf(rep.getNodeName());\n        if (pos >= 0 && pos < livePos) {\n          livePos = pos;\n          changedRep = rep;\n        }\n      }\n      if (livePos == Integer.MAX_VALUE) {\n        fail(\"Invalid state! We should have a replica to add the property to! \" + docCollection.toString());\n      }\n\n      uniquePropMap.put(slice.getName(), changedRep.getName());\n      // Now set the property on the \"lowest\" node in live_nodes.\n      setProp(slice, changedRep, prop);\n    }\n    verifyPropDistributedAsExpected(uniquePropMap, prop);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#concentrateProp(String).mjava","pathOld":"/dev/null","sourceNew":"  // use a simple heuristic to put as many replicas with the property on as few nodes as possible. The point is that\n  // then we can execute BALANCESHARDUNIQUE and be sure it worked correctly\n  private void concentrateProp(String prop) throws KeeperException, InterruptedException, IOException, SolrServerException {\n    // find all the live nodes\n    // for each slice, assign the leader to the first replica that is in the lowest position on live_nodes\n    List<String> liveNodes = new ArrayList<>(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes());\n    Collections.shuffle(liveNodes, random());\n\n    Map<String, String> uniquePropMap = new TreeMap<>();\n    forceUpdateCollectionStatus();\n    DocCollection docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);\n    for (Slice slice : docCollection.getSlices()) {\n      Replica changedRep = null;\n      int livePos = Integer.MAX_VALUE;\n      for (Replica rep : slice.getReplicas()) {\n        int pos = liveNodes.indexOf(rep.getNodeName());\n        if (pos >= 0 && pos < livePos) {\n          livePos = pos;\n          changedRep = rep;\n        }\n      }\n      if (livePos == Integer.MAX_VALUE) {\n        fail(\"Invalid state! We should have a replica to add the property to! \" + docCollection.toString());\n      }\n\n      uniquePropMap.put(slice.getName(), changedRep.getName());\n      // Now set the property on the \"lowest\" node in live_nodes.\n      setProp(slice, changedRep, prop);\n    }\n    verifyPropDistributedAsExpected(uniquePropMap, prop);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}