{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b25391c4edacd53174760022f46a27be00ef52b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff937985a3ef5bdbb2e12a9d4a02de6da424f2ef","date":1428009454,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ecb18e7a0316ea550446daf785b5fa65c049cdd","date":1428100837,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = atLeast(10);\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"792ab613448ccf6a4d9a68231d6eeaac230e19bb","date":1428431795,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + topScore, topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestPrefixCompletionQuery#testMostlyFilteredOutDocuments().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testSuggestOnMostlyFilteredOutDocuments().mjava","sourceNew":"  @Test\n  public void testMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(new SuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(query, num);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(query, num);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    query = new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"abc_\"), filter);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(query, 1);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int num = Math.min(1000, atLeast(10));\n    Document document = new Document();\n    for (int i = 0; i < num; i++) {\n      document.add(newSuggestField(\"suggest_field\", \"abc_\" + i, i));\n      document.add(new IntField(\"filter_int_fld\", i, Field.Store.NO));\n      iw.addDocument(document);\n      document.clear();\n\n      if (usually()) {\n        iw.commit();\n      }\n    }\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);\n\n    int topScore = num/2;\n    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, topScore, true, true));\n    Filter filter = randomAccessFilter(filterWrapper);\n    // if at most half of the top scoring documents have been filtered out\n    // the search should be admissible for a single segment\n    TopSuggestDocs suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertTrue(suggest.totalHits >= 1);\n    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo(\"abc_\" + topScore));\n    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", 0, 0, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if more than half of the top scoring documents have been filtered out\n    // search is not admissible, so # of suggestions requested is num instead of 1\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", num, filter);\n    assertSuggestions(suggest, new Entry(\"abc_0\", 0));\n\n    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange(\"filter_int_fld\", num - 1, num - 1, true, true));\n    filter = randomAccessFilter(filterWrapper);\n    // if only lower scoring documents are filtered out\n    // search is admissible\n    suggest = indexSearcher.suggest(\"suggest_field\", \"abc_\", 1, filter);\n    assertSuggestions(suggest, new Entry(\"abc_\" + (num - 1), num - 1));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1ecb18e7a0316ea550446daf785b5fa65c049cdd":["ff937985a3ef5bdbb2e12a9d4a02de6da424f2ef"],"792ab613448ccf6a4d9a68231d6eeaac230e19bb":["1ecb18e7a0316ea550446daf785b5fa65c049cdd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff937985a3ef5bdbb2e12a9d4a02de6da424f2ef":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ff937985a3ef5bdbb2e12a9d4a02de6da424f2ef"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["792ab613448ccf6a4d9a68231d6eeaac230e19bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"1ecb18e7a0316ea550446daf785b5fa65c049cdd":["792ab613448ccf6a4d9a68231d6eeaac230e19bb"],"792ab613448ccf6a4d9a68231d6eeaac230e19bb":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ff937985a3ef5bdbb2e12a9d4a02de6da424f2ef"],"ff937985a3ef5bdbb2e12a9d4a02de6da424f2ef":["1ecb18e7a0316ea550446daf785b5fa65c049cdd","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}