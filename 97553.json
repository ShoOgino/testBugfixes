{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}