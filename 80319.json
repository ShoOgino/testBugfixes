{"path":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Query#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Query other = (Query) obj;\n    if (Float.floatToIntBits(boost) != Float.floatToIntBits(other.boost))\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Query other = (Query) obj;\n    if (Float.floatToIntBits(boost) != Float.floatToIntBits(other.boost))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    Query other = (Query) obj;\n    if (Float.floatToIntBits(boost) != Float.floatToIntBits(other.boost))\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09dbf434973f311a489a2fcbc65a8cd695aebbe","date":1444385211,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object obj) {\n    if (obj == null)\n      return false;\n    return getClass() == obj.getClass();\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (obj == null)\n      return false;\n    if (getClass() != obj.getClass())\n      return false;\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","sourceNew":"  /**\n   * Override and implement query instance equivalence properly in a subclass. \n   * This is required so that {@link QueryCache} works properly.\n   * \n   * Typically a query will be equal to another only if it's an instance of \n   * the same class and its document-filtering properties are identical that other\n   * instance. Utility methods are provided for certain repetitive code. \n   * \n   * @see #sameClassAs(Object)\n   * @see #classHash()\n   */\n  @Override\n  public abstract boolean equals(Object obj);\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (obj == null)\n      return false;\n    return getClass() == obj.getClass();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Query#equals(Object).mjava","sourceNew":"  /**\n   * Override and implement query instance equivalence properly in a subclass. \n   * This is required so that {@link QueryCache} works properly.\n   * \n   * Typically a query will be equal to another only if it's an instance of \n   * the same class and its document-filtering properties are identical that other\n   * instance. Utility methods are provided for certain repetitive code. \n   * \n   * @see #sameClassAs(Object)\n   * @see #classHash()\n   */\n  @Override\n  public abstract boolean equals(Object obj);\n\n","sourceOld":"  @Override\n  public boolean equals(Object obj) {\n    if (obj == null)\n      return false;\n    return getClass() == obj.getClass();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b09dbf434973f311a489a2fcbc65a8cd695aebbe":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["b09dbf434973f311a489a2fcbc65a8cd695aebbe"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b09dbf434973f311a489a2fcbc65a8cd695aebbe","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"b09dbf434973f311a489a2fcbc65a8cd695aebbe":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b09dbf434973f311a489a2fcbc65a8cd695aebbe"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}