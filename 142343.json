{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    int numStates = a.getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i+1, a.isAccept(i));\n    }\n\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      result.addTransition(0, 1+t.dest, t.min, t.max);\n    }\n\n    for(int i=0;i<numStates;i++) {\n      count = a.initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        result.addTransition(1+t.source, 1+t.dest, t.min, t.max);\n      }\n    }\n\n    result.finish();\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c8cfaac638acc80d26d08288440ede37e6539e9","date":1402678000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    int numStates = a.getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i+1, a.isAccept(i));\n    }\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      result.addTransition(0, 1+t.dest, t.min, t.max);\n    }\n\n    for(int i=0;i<numStates;i++) {\n      count = a.initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        result.addTransition(1+t.source, 1+t.dest, t.min, t.max);\n      }\n    }\n\n    result.finish();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    int numStates = a.getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i+1, a.isAccept(i));\n    }\n\n    LightAutomaton.Transition t = new LightAutomaton.Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      result.addTransition(0, 1+t.dest, t.min, t.max);\n    }\n\n    for(int i=0;i<numStates;i++) {\n      count = a.initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        result.addTransition(1+t.source, 1+t.dest, t.min, t.max);\n      }\n    }\n\n    result.finish();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    int numStates = a.getNumStates();\n    for(int i=0;i<numStates;i++) {\n      result.createState();\n      result.setAccept(i+1, a.isAccept(i));\n    }\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      result.addTransition(0, 1+t.dest, t.min, t.max);\n    }\n\n    for(int i=0;i<numStates;i++) {\n      count = a.initTransition(i, t);\n      for(int j=0;j<count;j++) {\n        a.getNextTransition(t);\n        result.addTransition(1+t.source, 1+t.dest, t.min, t.max);\n      }\n    }\n\n    result.finish();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#optional(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#optionalLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton optional(Automaton a) {\n    Automaton result = new Automaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the union of the empty string and the\n   * language of the given automaton.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton optionalLight(LightAutomaton a) {\n    LightAutomaton result = new LightAutomaton();\n    result.createState();\n    result.setAccept(0, true);\n    if (a.getNumStates() > 0) {\n      result.copy(a);\n      result.addEpsilon(0, 1);\n    }\n    result.finishState();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"0c8cfaac638acc80d26d08288440ede37e6539e9":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"0c8cfaac638acc80d26d08288440ede37e6539e9":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["0c8cfaac638acc80d26d08288440ede37e6539e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}