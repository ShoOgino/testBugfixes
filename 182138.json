{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","commits":[{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // Preserve current readOnly\n    return doOpenIfChanged(readOnly, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b8414cdacb05e1277df96a30710f570f4251d9a","date":1323040348,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(true, null);\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // Preserve current readOnly\n    return doOpenIfChanged(readOnly, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326990249d982376dfa2e6fd97c28f4580df4e7c","date":1323042771,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(true, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // Preserve current readOnly\n    return doOpenIfChanged(readOnly, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    // Preserve current readOnly\n    return doOpenIfChanged(readOnly, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  @Override\n  protected final CompositeIndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  protected final DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","sourceOld":"  @Override\n  protected final CompositeIndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  protected final DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","sourceOld":"  @Override\n  protected final IndexReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","sourceOld":"  protected final DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException {\n    return doOpenIfChanged(null);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#doOpenIfChanged().mjava","sourceNew":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","sourceOld":"  /** Implement this method to support {@link #openIfChanged(DirectoryReader)}.\n   * If this reader does not support reopen, return {@code null}, so\n   * client code is happy. This should be consistent with {@link #isCurrent}\n   * (should always return {@code true}) if reopen is not supported.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @return null if there are no changes; else, a new\n   * DirectoryReader instance.\n   */\n  protected abstract DirectoryReader doOpenIfChanged() throws CorruptIndexException, IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","326990249d982376dfa2e6fd97c28f4580df4e7c"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["4b8414cdacb05e1277df96a30710f570f4251d9a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["4b8414cdacb05e1277df96a30710f570f4251d9a","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"4b8414cdacb05e1277df96a30710f570f4251d9a":["326990249d982376dfa2e6fd97c28f4580df4e7c"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"326990249d982376dfa2e6fd97c28f4580df4e7c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}