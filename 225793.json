{"path":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","commits":[{"id":"8d0c1d69778439d99fc635727129e99480e64f06","date":1232050859,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"/dev/null","sourceNew":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())) {\n        return null;\n\n      }\n\n      final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(updateRequest, baos);\n      List<ContentStream> l = new ArrayList<ContentStream>(1);\n      l.add(new ContentStream() {\n        public String getName() {\n          return null;\n        }\n\n        public String getSourceInfo() {\n          return \"javabin\";\n        }\n\n        public String getContentType() {\n          return \"application/octet-stream\";\n        }\n\n        public Long getSize() // size if we know it, otherwise null\n        {\n          return new Long(baos.size());\n        }\n\n        public InputStream getStream() throws IOException {\n          return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n        }\n\n        public Reader getReader() throws IOException {\n          throw new RuntimeException(\"No reader available . this is a binarystream\");\n        }\n      });\n\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d","date":1235571180,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())) {\n        return null;\n\n      }\n\n      final BAOS baos = new BAOS();\n      new JavaBinUpdateRequestCodec().marshal(updateRequest, baos);\n      List<ContentStream> l = new ArrayList<ContentStream>(1);\n      l.add(new ContentStream() {\n        public String getName() {\n          return null;\n        }\n\n        public String getSourceInfo() {\n          return \"javabin\";\n        }\n\n        public String getContentType() {\n          return \"application/octet-stream\";\n        }\n\n        public Long getSize() // size if we know it, otherwise null\n        {\n          return new Long(baos.size());\n        }\n\n        public InputStream getStream() throws IOException {\n          return new ByteArrayInputStream(baos.getbuf(), 0, baos.size());\n        }\n\n        public Reader getReader() throws IOException {\n          throw new RuntimeException(\"No reader available . this is a binarystream\");\n        }\n      });\n\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed6d8c5d4a7a15ca41307188b42215913e14922b","date":1237454110,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/BinaryRequestWriter#getContentStreams(SolrRequest).mjava","sourceNew":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","sourceOld":"  public Collection<ContentStream> getContentStreams(SolrRequest req) throws IOException {\n    if (req instanceof UpdateRequest) {\n      UpdateRequest updateRequest = (UpdateRequest) req;\n      if (isNull(updateRequest.getDocuments()) &&\n              isNull(updateRequest.getDeleteById()) &&\n              isNull(updateRequest.getDeleteQuery())\n              && (updateRequest.getDocIterator() == null) ) {\n        return null;\n      }\n      List<ContentStream> l = new ArrayList<ContentStream>();\n      l.add(new LazyContentStream(updateRequest));\n      return l;\n    } else {\n      return super.getContentStreams(req);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d0c1d69778439d99fc635727129e99480e64f06":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d":["8d0c1d69778439d99fc635727129e99480e64f06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ed6d8c5d4a7a15ca41307188b42215913e14922b":["18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d"],"ad94625fb8d088209f46650c8097196fec67f00c":["ed6d8c5d4a7a15ca41307188b42215913e14922b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d0c1d69778439d99fc635727129e99480e64f06":["18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d"],"18bcd844d3ecd5d5e92d8cbf350a1cb6d337d54d":["ed6d8c5d4a7a15ca41307188b42215913e14922b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8d0c1d69778439d99fc635727129e99480e64f06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ed6d8c5d4a7a15ca41307188b42215913e14922b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}