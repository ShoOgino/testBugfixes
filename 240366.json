{"path":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed50c8be6f41a006d8f93268765de9ad91908419","date":1340353054,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for (float valSrcScore : valSrcScores) {\n      score *= valSrcScore;\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for (float valSrcScore : valSrcScores) {\n      score *= valSrcScore;\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87778e49fc2a9683c4dc9217a451004dc7edf6da","date":1361489436,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of {@link FunctionQuery function queries} is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the {@link FunctionQuery}.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for (float valSrcScore : valSrcScores) {\n      score *= valSrcScore;\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for (float valSrcScore : valSrcScores) {\n      score *= valSrcScore;\n    }\n    return score;\n  }\n\n","bugFix":["89fe79450a321df64750e98df6442d2c4d30da52","dc9d6e5105d53eb1e16d7786185b78581f04adaf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82662cae660e76ded4de1e9b451633e523d83e1","date":1513619223,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link org.apache.lucene.queries.function.FunctionQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of {@link FunctionQuery function queries} is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the {@link FunctionQuery}.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for (float valSrcScore : valSrcScores) {\n      score *= valSrcScore;\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ed50c8be6f41a006d8f93268765de9ad91908419":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a82662cae660e76ded4de1e9b451633e523d83e1":["87778e49fc2a9683c4dc9217a451004dc7edf6da"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ed50c8be6f41a006d8f93268765de9ad91908419"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87778e49fc2a9683c4dc9217a451004dc7edf6da":["ed50c8be6f41a006d8f93268765de9ad91908419"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a82662cae660e76ded4de1e9b451633e523d83e1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ed50c8be6f41a006d8f93268765de9ad91908419","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"ed50c8be6f41a006d8f93268765de9ad91908419":["fe33227f6805edab2036cbb80645cc4e2d1fa424","87778e49fc2a9683c4dc9217a451004dc7edf6da"],"a82662cae660e76ded4de1e9b451633e523d83e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"87778e49fc2a9683c4dc9217a451004dc7edf6da":["a82662cae660e76ded4de1e9b451633e523d83e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}