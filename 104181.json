{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.transitions.add(new Transition(Character.MIN_VALUE, Character.MAX_VALUE,\n        s));\n    for (State p : getStates()) {\n      int maxi = Character.MIN_VALUE;\n      for (Transition t : p.getSortedTransitions(false)) {\n        if (t.min > maxi) p.transitions.add(new Transition((char) maxi,\n            (char) (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_VALUE) p.transitions.add(new Transition(\n          (char) maxi, Character.MAX_VALUE, s));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","sourceNew":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","sourceOld":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.transitions.add(new Transition(Character.MIN_VALUE, Character.MAX_VALUE,\n        s));\n    for (State p : getStates()) {\n      int maxi = Character.MIN_VALUE;\n      for (Transition t : p.getSortedTransitions(false)) {\n        if (t.min > maxi) p.transitions.add(new Transition((char) maxi,\n            (char) (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_VALUE) p.transitions.add(new Transition(\n          (char) maxi, Character.MAX_VALUE, s));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#totalize().mjava","sourceNew":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","sourceOld":"  /**\n   * Adds transitions to explicit crash state to ensure that transition function\n   * is total.\n   */\n  void totalize() {\n    State s = new State();\n    s.addTransition(new Transition(Character.MIN_CODE_POINT, Character.MAX_CODE_POINT,\n        s));\n    for (State p : getNumberedStates()) {\n      int maxi = Character.MIN_CODE_POINT;\n      p.sortTransitions(Transition.CompareByMinMaxThenDest);\n      for (Transition t : p.getTransitions()) {\n        if (t.min > maxi) p.addTransition(new Transition(maxi,\n            (t.min - 1), s));\n        if (t.max + 1 > maxi) maxi = t.max + 1;\n      }\n      if (maxi <= Character.MAX_CODE_POINT) p.addTransition(new Transition(\n          maxi, Character.MAX_CODE_POINT, s));\n    }\n    clearNumberedStates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}