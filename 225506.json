{"path":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","commits":[{"id":"073a74201a21520f4fc543c9f6d1d87c19a467b2","date":1472788663,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not  remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not  remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not  remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"/dev/null","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not  remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not  remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not  remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","sourceNew":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(OverseerCollectionMessageHandler.ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","sourceOld":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteReplicaCmd#deleteCore(Slice,String,String,ZkNodeProps,String,NamedList,Runnable,boolean).mjava","sourceNew":null,"sourceOld":"  void deleteCore(Slice slice, String collectionName, String replicaName,ZkNodeProps message, String shard, NamedList results, Runnable onComplete, boolean parallel) throws KeeperException, InterruptedException {\n\n    Replica replica = slice.getReplica(replicaName);\n    if (replica == null) {\n      ArrayList<String> l = new ArrayList<>();\n      for (Replica r : slice.getReplicas())\n        l.add(r.getName());\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid replica : \" +  replicaName + \" in shard/collection : \" +\n              shard  + \"/\" + collectionName + \" available replicas are \" +  StrUtils.join(l, ','));\n    }\n\n    // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true\n    // on the command.\n    if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Attempted to remove replica : \" + collectionName + \"/\"  + shard + \"/\" + replicaName +\n              \" with onlyIfDown='true', but state is '\" + replica.getStr(ZkStateReader.STATE_PROP) + \"'\");\n    }\n\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);\n    String asyncId = message.getStr(ASYNC);\n    AtomicReference<Map<String, String>> requestMap = new AtomicReference<>(null);\n    if (asyncId != null) {\n      requestMap.set(new HashMap<>(1, 1.0f));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.UNLOAD.toString());\n    params.add(CoreAdminParams.CORE, core);\n\n    params.set(CoreAdminParams.DELETE_INDEX, message.getBool(CoreAdminParams.DELETE_INDEX, true));\n    params.set(CoreAdminParams.DELETE_INSTANCE_DIR, message.getBool(CoreAdminParams.DELETE_INSTANCE_DIR, true));\n    params.set(CoreAdminParams.DELETE_DATA_DIR, message.getBool(CoreAdminParams.DELETE_DATA_DIR, true));\n\n    boolean isLive = ocmh.zkStateReader.getClusterState().getLiveNodes().contains(replica.getNodeName());\n    if (isLive) {\n      ocmh.sendShardRequest(replica.getNodeName(), params, shardHandler, asyncId, requestMap.get());\n    }\n\n    Callable<Boolean> callable = () -> {\n      try {\n        if (isLive) {\n          ocmh.processResponses(results, shardHandler, false, null, asyncId, requestMap.get());\n\n          //check if the core unload removed the corenode zk entry\n          if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 5000)) return Boolean.TRUE;\n        }\n\n        // try and ensure core info is removed from cluster state\n        ocmh.deleteCoreNode(collectionName, replicaName, replica, core);\n        if (ocmh.waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return Boolean.TRUE;\n        return Boolean.FALSE;\n      } catch (Exception e) {\n        results.add(\"failure\", \"Could not complete delete \" + e.getMessage());\n        throw e;\n      } finally {\n        if (onComplete != null) onComplete.run();\n      }\n    };\n\n    if (!parallel) {\n      try {\n        if (!callable.call())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not remove replica : \" + collectionName + \"/\" + shard + \"/\" + replicaName);\n      } catch (InterruptedException | KeeperException e) {\n        throw e;\n      } catch (Exception ex) {\n        throw new SolrException(SolrException.ErrorCode.UNKNOWN, \"Error waiting for corenode gone\", ex);\n      }\n\n    } else {\n      ocmh.tpe.submit(callable);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b94236357aaa22b76c10629851fe4e376e0cea82":["ecb39e783dd104116a9502e8b0ab3df89f35ac19","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","073a74201a21520f4fc543c9f6d1d87c19a467b2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"073a74201a21520f4fc543c9f6d1d87c19a467b2":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073a74201a21520f4fc543c9f6d1d87c19a467b2","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["b94236357aaa22b76c10629851fe4e376e0cea82","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}