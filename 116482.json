{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","commits":[{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell2/TestDictionary#testCompressedDictionary().mjava","sourceNew":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3, new BytesRef()).length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3, new BytesRef()).length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testCompressedHunspellDictionary_loadDicAff().mjava","sourceNew":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3, new BytesRef()).length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCompressedHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"testCompressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"testCompressed.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b58bd8dd457a9b46b007c641d5b6e747afb8904a","date":1393616676,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","sourceNew":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3, new BytesRef()).length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testCompressedDictionary().mjava","sourceNew":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Directory tempDir = getDirectory();\n    Dictionary dictionary = new Dictionary(tempDir, \"dictionary\", affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n    tempDir.close();\n  }\n\n","sourceOld":"  public void testCompressedDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"compressed.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"compressed.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    IntsRef ordList = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3);\n    BytesRef ref = new BytesRef();\n    dictionary.flagLookup.get(ordList.ints[0], ref);\n    char flags[] = Dictionary.decodeFlags(ref);\n    assertEquals(1, flags.length);\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"ba791bce8103c79e38f957e9c5a53a75871bd918":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}