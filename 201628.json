{"path":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream).mjava","pathOld":"/dev/null","sourceNew":"    private void assertSameStreams(String msg, \n                                   InputStream expected, \n                                   InputStream test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(), \n                                        test.getFilePointer());\n        \n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n        \n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer, \n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1acbe60842541f8c38e2d60b03591478c9f91546","date":1066055498,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream).mjava","sourceNew":"    private void assertSameStreams(String msg,\n                                   InputStream expected,\n                                   InputStream test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(),\n                                        test.getFilePointer());\n\n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n\n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer,\n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","sourceOld":"    private void assertSameStreams(String msg, \n                                   InputStream expected, \n                                   InputStream test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(), \n                                        test.getFilePointer());\n        \n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n        \n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer, \n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":5,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,IndexInput,IndexInput).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#assertSameStreams(String,InputStream,InputStream).mjava","sourceNew":"    private void assertSameStreams(String msg,\n                                   IndexInput expected,\n                                   IndexInput test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(),\n                                        test.getFilePointer());\n\n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n\n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer,\n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","sourceOld":"    private void assertSameStreams(String msg,\n                                   InputStream expected,\n                                   InputStream test)\n    throws IOException\n    {\n        assertNotNull(msg + \" null expected\", expected);\n        assertNotNull(msg + \" null test\", test);\n        assertEquals(msg + \" length\", expected.length(), test.length());\n        assertEquals(msg + \" position\", expected.getFilePointer(),\n                                        test.getFilePointer());\n\n        byte expectedBuffer[] = new byte[512];\n        byte testBuffer[] = new byte[expectedBuffer.length];\n\n        long remainder = expected.length() - expected.getFilePointer();\n        while(remainder > 0) {\n            int readLen = (int) Math.min(remainder, expectedBuffer.length);\n            expected.readBytes(expectedBuffer, 0, readLen);\n            test.readBytes(testBuffer, 0, readLen);\n            assertEqualArrays(msg + \", remainder \" + remainder, expectedBuffer,\n                testBuffer, 0, readLen);\n            remainder -= readLen;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["1acbe60842541f8c38e2d60b03591478c9f91546"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1acbe60842541f8c38e2d60b03591478c9f91546":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e971ba25509e21a130fef61f0687be0446ca27a0"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"1acbe60842541f8c38e2d60b03591478c9f91546":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["1acbe60842541f8c38e2d60b03591478c9f91546"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}