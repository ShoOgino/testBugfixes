{"path":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","commits":[{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/spatial4j/geo3d/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute arc distance from plane to a vector.\n   * @param x is the x vector value.\n   * @param y is the y vector value.\n   * @param z is the z vector value.\n   * @return the arc distance.\n   */\n  public double arcDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.arcDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n\n  }\n\n","sourceOld":"  /**\n   * Compute arc distance from plane to a vector.\n   * @param x is the x vector value.\n   * @param y is the y vector value.\n   * @param z is the z vector value.\n   * @return the arc distance.\n   */\n  public double arcDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.arcDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d48c2726dec3381fb15aa3b90f7857635b6bdf74","date":1436825583,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute arc distance from plane to a vector.\n   * @param planetModel is the planet model.\n   * @param x is the x vector value.\n   * @param y is the y vector value.\n   * @param z is the z vector value.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the arc distance.\n   */\n  public double arcDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.arcDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n\n  }\n\n","sourceOld":"  /**\n   * Compute arc distance from plane to a vector.\n   * @param x is the x vector value.\n   * @param y is the y vector value.\n   * @param z is the z vector value.\n   * @return the arc distance.\n   */\n  public double arcDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.arcDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#arcDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute arc distance from plane to a vector.\n   * @param planetModel is the planet model.\n   * @param x is the x vector value.\n   * @param y is the y vector value.\n   * @param z is the z vector value.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the arc distance.\n   */\n  public double arcDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.arcDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n\n  }\n\n","sourceOld":"  /**\n   * Compute arc distance from plane to a vector.\n   * @param planetModel is the planet model.\n   * @param x is the x vector value.\n   * @param y is the y vector value.\n   * @param z is the z vector value.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the arc distance.\n   */\n  public double arcDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.arcDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3022be5842502b7c2a57a5124199bbc30236f0a0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"b4e444678504caf66a8060b1d514383aa4feac0c":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e444678504caf66a8060b1d514383aa4feac0c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["d48c2726dec3381fb15aa3b90f7857635b6bdf74"],"d48c2726dec3381fb15aa3b90f7857635b6bdf74":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}