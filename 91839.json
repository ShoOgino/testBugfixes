{"path":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","commits":[{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00b21520fafb9860ce0318d7be5ea84619c185ad","date":1300444600,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","sourceNew":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","sourceNew":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","sourceNew":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","sourceNew":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for forceMerge. (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for optimize(). (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMergePolicy(MergePolicy).mjava","sourceNew":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for forceMerge. (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: {@link MergePolicy} is invoked whenever there are changes to the\n   * segments in the index. Its role is to select which merges to do, if any,\n   * and return a {@link MergePolicy.MergeSpecification} describing the merges.\n   * It also selects merges to do for forceMerge. (The default is\n   * {@link LogByteSizeMergePolicy}.\n   *\n   * <p>Only takes effect when IndexWriter is first created. */\n  public IndexWriterConfig setMergePolicy(MergePolicy mergePolicy) {\n    this.mergePolicy = mergePolicy == null ? new LogByteSizeMergePolicy() : mergePolicy;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7ab99e8c71442b92c320e218141dee04a9b91ce8","00b21520fafb9860ce0318d7be5ea84619c185ad"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["7ab99e8c71442b92c320e218141dee04a9b91ce8","00b21520fafb9860ce0318d7be5ea84619c185ad"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["00b21520fafb9860ce0318d7be5ea84619c185ad"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","00b21520fafb9860ce0318d7be5ea84619c185ad"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"00b21520fafb9860ce0318d7be5ea84619c185ad":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}