{"path":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","commits":[{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","pathOld":"/dev/null","sourceNew":"  private void skipField(int toRead) throws IOException {\n    fieldsStream.seek(fieldsStream.getFilePointer() + toRead);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab0e9f7ce724e6aea1fea746dded19e76d231cf8","date":1304774078,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","sourceNew":"  /**\n   * Skip the field.  We still have to read some of the information about the field, but can skip past the actual content.\n   * This will have the most payoff on large fields.\n   */\n  private void skipField(int numeric) throws IOException {\n    final int numBytes;\n    switch(numeric) {\n      case 0:\n        numBytes = fieldsStream.readVInt();\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        numBytes = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        numBytes = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    \n    skipFieldBytes(numBytes);\n  }\n\n","sourceOld":"  private void skipField(int toRead) throws IOException {\n    fieldsStream.seek(fieldsStream.getFilePointer() + toRead);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","sourceNew":"  /**\n   * Skip the field.  We still have to read some of the information about the field, but can skip past the actual content.\n   * This will have the most payoff on large fields.\n   */\n  private void skipField(int numeric) throws IOException {\n    final int numBytes;\n    switch(numeric) {\n      case 0:\n        numBytes = fieldsStream.readVInt();\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        numBytes = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        numBytes = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    \n    skipFieldBytes(numBytes);\n  }\n\n","sourceOld":"  private void skipField(int toRead) throws IOException {\n    fieldsStream.seek(fieldsStream.getFilePointer() + toRead);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","sourceNew":"  /**\n   * Skip the field.  We still have to read some of the information about the field, but can skip past the actual content.\n   * This will have the most payoff on large fields.\n   */\n  private void skipField(int numeric) throws IOException {\n    final int numBytes;\n    switch(numeric) {\n      case 0:\n        numBytes = fieldsStream.readVInt();\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        numBytes = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        numBytes = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    \n    skipFieldBytes(numBytes);\n  }\n\n","sourceOld":"  private void skipField(int toRead) throws IOException {\n    fieldsStream.seek(fieldsStream.getFilePointer() + toRead);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b1110660886afcc62f57e9af901cd3f5dd294bc","date":1317830374,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldsReader#skipField(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldsReader#skipField(int).mjava","sourceNew":"  /**\n   * Skip the field.  We still have to read some of the information about the field, but can skip past the actual content.\n   * This will have the most payoff on large fields.\n   */\n  private void skipField(int numeric) throws IOException {\n    final int numBytes;\n    switch(numeric) {\n      case 0:\n        numBytes = fieldsStream.readVInt();\n        break;\n      case DefaultFieldsWriter.FIELD_IS_NUMERIC_INT:\n      case DefaultFieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        numBytes = 4;\n        break;\n      case DefaultFieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case DefaultFieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        numBytes = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    \n    skipFieldBytes(numBytes);\n  }\n\n","sourceOld":"  /**\n   * Skip the field.  We still have to read some of the information about the field, but can skip past the actual content.\n   * This will have the most payoff on large fields.\n   */\n  private void skipField(int numeric) throws IOException {\n    final int numBytes;\n    switch(numeric) {\n      case 0:\n        numBytes = fieldsStream.readVInt();\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_INT:\n      case FieldsWriter.FIELD_IS_NUMERIC_FLOAT:\n        numBytes = 4;\n        break;\n      case FieldsWriter.FIELD_IS_NUMERIC_LONG:\n      case FieldsWriter.FIELD_IS_NUMERIC_DOUBLE:\n        numBytes = 8;\n        break;\n      default:\n        throw new FieldReaderException(\"Invalid numeric type: \" + Integer.toHexString(numeric));\n    }\n    \n    skipFieldBytes(numBytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6267e1ce56c2eec111425690cd04e251b6f14952":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["6267e1ce56c2eec111425690cd04e251b6f14952"],"a3776dccca01c11e7046323cfad46a3b4a471233":["6267e1ce56c2eec111425690cd04e251b6f14952","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["6267e1ce56c2eec111425690cd04e251b6f14952","ab0e9f7ce724e6aea1fea746dded19e76d231cf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b1110660886afcc62f57e9af901cd3f5dd294bc"]},"commit2Childs":{"6267e1ce56c2eec111425690cd04e251b6f14952":["ab0e9f7ce724e6aea1fea746dded19e76d231cf8","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"ab0e9f7ce724e6aea1fea746dded19e76d231cf8":["a3776dccca01c11e7046323cfad46a3b4a471233","4b1110660886afcc62f57e9af901cd3f5dd294bc","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6267e1ce56c2eec111425690cd04e251b6f14952"],"4b1110660886afcc62f57e9af901cd3f5dd294bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}