{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","commits":[{"id":"75ac8571c2d82c574e446c3729251b994c69a55c","date":1402523781,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","sourceNew":"  LightAutomaton toLevenshteinAutomata(LightAutomaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    LightAutomaton subs[] = new LightAutomaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeStringLight(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        LightAutomaton prefix = BasicAutomata.makeStringLight(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        LightAutomaton levAutomaton = lev.toLightAutomaton(maxEdits);\n        LightAutomaton combined = BasicOperations.concatenateLight(prefix, levAutomaton);\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmptyLight(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      LightAutomaton a = BasicOperations.unionLight(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return BasicOperations.determinize(a);\n    }\n  }\n\n","sourceOld":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        Automaton prefix = BasicAutomata.makeString(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        Automaton levAutomaton = lev.toAutomaton(maxEdits);\n        Automaton combined = BasicOperations.concatenate(Arrays.asList(prefix, levAutomaton));\n        combined.setDeterministic(true); // its like the special case in concatenate itself, except we cloneExpanded already\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = BasicOperations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      BasicOperations.determinize(a);\n\n      return a;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","sourceNew":"  LightAutomaton toLevenshteinAutomata(LightAutomaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    LightAutomaton subs[] = new LightAutomaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeStringLight(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmptyLight(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      LightAutomaton a = BasicOperations.unionLight(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return BasicOperations.determinize(a);\n    }\n  }\n\n","sourceOld":"  LightAutomaton toLevenshteinAutomata(LightAutomaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    LightAutomaton subs[] = new LightAutomaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeStringLight(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        LightAutomaton prefix = BasicAutomata.makeStringLight(path.ints, path.offset, nonFuzzyPrefix);\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        LightAutomaton levAutomaton = lev.toLightAutomaton(maxEdits);\n        LightAutomaton combined = BasicOperations.concatenateLight(prefix, levAutomaton);\n        subs[upto] = combined;\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmptyLight(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      LightAutomaton a = BasicOperations.unionLight(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return BasicOperations.determinize(a);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(Automaton).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FuzzySuggester#toLevenshteinAutomata(LightAutomaton).mjava","sourceNew":"  Automaton toLevenshteinAutomata(Automaton automaton) {\n    final Set<IntsRef> ref = Operations.getFiniteStrings(automaton, -1);\n    Automaton subs[] = new Automaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = Automata.makeString(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return Automata.makeEmpty(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      Automaton a = Operations.union(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return Operations.determinize(a);\n    }\n  }\n\n","sourceOld":"  LightAutomaton toLevenshteinAutomata(LightAutomaton automaton) {\n    final Set<IntsRef> ref = SpecialOperations.getFiniteStrings(automaton, -1);\n    LightAutomaton subs[] = new LightAutomaton[ref.size()];\n    int upto = 0;\n    for (IntsRef path : ref) {\n      if (path.length <= nonFuzzyPrefix || path.length < minFuzzyLength) {\n        subs[upto] = BasicAutomata.makeStringLight(path.ints, path.offset, path.length);\n        upto++;\n      } else {\n        int ints[] = new int[path.length-nonFuzzyPrefix];\n        System.arraycopy(path.ints, path.offset+nonFuzzyPrefix, ints, 0, ints.length);\n        // TODO: maybe add alphaMin to LevenshteinAutomata,\n        // and pass 1 instead of 0?  We probably don't want\n        // to allow the trailing dedup bytes to be\n        // edited... but then 0 byte is \"in general\" allowed\n        // on input (but not in UTF8).\n        LevenshteinAutomata lev = new LevenshteinAutomata(ints, unicodeAware ? Character.MAX_CODE_POINT : 255, transpositions);\n        subs[upto] = lev.toAutomaton(maxEdits, UnicodeUtil.newString(path.ints, path.offset, nonFuzzyPrefix));\n        upto++;\n      }\n    }\n\n    if (subs.length == 0) {\n      // automaton is empty, there is no accepted paths through it\n      return BasicAutomata.makeEmptyLight(); // matches nothing\n    } else if (subs.length == 1) {\n      // no synonyms or anything: just a single path through the tokenstream\n      return subs[0];\n    } else {\n      // multiple paths: this is really scary! is it slow?\n      // maybe we should not do this and throw UOE?\n      LightAutomaton a = BasicOperations.unionLight(Arrays.asList(subs));\n      // TODO: we could call toLevenshteinAutomata() before det? \n      // this only happens if you have multiple paths anyway (e.g. synonyms)\n      return BasicOperations.determinize(a);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"75ac8571c2d82c574e446c3729251b994c69a55c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["75ac8571c2d82c574e446c3729251b994c69a55c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"75ac8571c2d82c574e446c3729251b994c69a55c":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ac8571c2d82c574e446c3729251b994c69a55c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}