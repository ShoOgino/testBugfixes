{"path":"src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","commits":[{"id":"bf0e17cfd70114fa265a0ac990861cc37685024e","date":1268618829,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"/dev/null","sourceNew":"  public static final Version parseLuceneVersionString(String matchVersion) {\n    matchVersion = matchVersion.toUpperCase();\n    \n    final Version version;\n    try {\n      version = Version.valueOf(matchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"' property, valid values are: \" + Arrays.toString(Version.values()), iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6800be51f3a10a5b74a1c45f78b817f13ac275ed","date":1268645710,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(String matchVersion) {\n    matchVersion = matchVersion.toUpperCase();\n    \n    final Version version;\n    try {\n      version = Version.valueOf(matchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"' property, valid values are: \" + Arrays.toString(Version.values()), iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","pathOld":"src/java/org/apache/solr/core/Config#parseLuceneVersionString(String).mjava","sourceNew":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","sourceOld":"  public static final Version parseLuceneVersionString(final String matchVersion) {\n    String parsedMatchVersion = matchVersion.toUpperCase();\n    \n    // be lenient with the supplied version parameter\n    parsedMatchVersion = parsedMatchVersion.replaceFirst(\"^(\\\\d)\\\\.(\\\\d)$\", \"LUCENE_$1$2\");\n    \n    final Version version;\n    try {\n      version = Version.valueOf(parsedMatchVersion);\n    } catch (IllegalArgumentException iae) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n        \"Invalid luceneMatchVersion '\" + matchVersion +\n        \"', valid values are: \" + Arrays.toString(Version.values()) +\n        \" or a string in format 'V.V'\", iae, false);    \n    }\n    \n    if (version == Version.LUCENE_CURRENT && !versionWarningAlreadyLogged.getAndSet(true)) {\n      log.warn(\n        \"You should not use LUCENE_CURRENT as luceneMatchVersion property: \"+\n        \"if you use this setting, and then Solr upgrades to a newer release of Lucene, \"+\n        \"sizable changes may happen. If precise back compatibility is important \"+\n        \"then you should instead explicitly specify an actual Lucene version.\"\n      );\n    }\n    \n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6800be51f3a10a5b74a1c45f78b817f13ac275ed":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"bf0e17cfd70114fa265a0ac990861cc37685024e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["6800be51f3a10a5b74a1c45f78b817f13ac275ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6800be51f3a10a5b74a1c45f78b817f13ac275ed":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bf0e17cfd70114fa265a0ac990861cc37685024e"],"bf0e17cfd70114fa265a0ac990861cc37685024e":["6800be51f3a10a5b74a1c45f78b817f13ac275ed"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}