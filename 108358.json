{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#createData(String,byte[],CreateMode).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#createData(String,byte[],CreateMode).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#createData(String,byte[],CreateMode).mjava","sourceNew":"  @Override\n  public String createData(String path, byte[] data, CreateMode mode) throws AlreadyExistsException, NoSuchElementException, IOException {\n    if ((CreateMode.EPHEMERAL == mode || CreateMode.PERSISTENT == mode) && hasData(path)) {\n      throw new AlreadyExistsException(path);\n    }\n\n    String relPath = path.charAt(0) == '/' ? path.substring(1) : path;\n    if (relPath.length() == 0) { //Trying to create root-node, return null.\n      // TODO should trying to create a root node throw an exception since its always init'd in the ctor?\n      return null;\n    }\n\n    String[] elements = relPath.split(\"/\");\n    StringBuilder parentStringBuilder = new StringBuilder();\n    Node parentNode = null;\n    if (elements.length == 1) { // Direct descendant of '/'.\n      parentNode = getRoot();\n    } else { // Indirect descendant of '/', lookup parent node\n      for (int i = 0; i < elements.length - 1; i++) {\n        parentStringBuilder.append('/');\n        parentStringBuilder.append(elements[i]);\n      }\n      if (!hasData(parentStringBuilder.toString())) {\n        throw new NoSuchElementException(parentStringBuilder.toString());\n      }\n      parentNode = traverse(parentStringBuilder.toString(), false, mode);\n    }\n\n    multiLock.lock();\n    try {\n      String nodeName = elements[elements.length-1];\n      Node childNode = createNode(parentNode, mode, parentStringBuilder.append(\"/\"), nodeName, data,false);\n      parentNode.setChild(childNode.name, childNode);\n      return childNode.path;\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public String createData(String path, byte[] data, CreateMode mode) throws AlreadyExistsException, NoSuchElementException, IOException {\n    if ((CreateMode.EPHEMERAL == mode || CreateMode.PERSISTENT == mode) && hasData(path)) {\n      throw new AlreadyExistsException(path);\n    }\n\n    String relPath = path.charAt(0) == '/' ? path.substring(1) : path;\n    if (relPath.length() == 0) { //Trying to create root-node, return null.\n      // TODO should trying to create a root node throw an exception since its always init'd in the ctor?\n      return null;\n    }\n\n    String[] elements = relPath.split(\"/\");\n    StringBuilder parentStringBuilder = new StringBuilder();\n    Node parentNode = null;\n    if (elements.length == 1) { // Direct descendant of '/'.\n      parentNode = getRoot();\n    } else { // Indirect descendant of '/', lookup parent node\n      for (int i = 0; i < elements.length - 1; i++) {\n        parentStringBuilder.append('/');\n        parentStringBuilder.append(elements[i]);\n      }\n      if (!hasData(parentStringBuilder.toString())) {\n        throw new NoSuchElementException(parentStringBuilder.toString());\n      }\n      parentNode = traverse(parentStringBuilder.toString(), false, mode);\n    }\n\n    multiLock.lock();\n    try {\n      String nodeName = elements[elements.length-1];\n      Node childNode = createNode(parentNode, mode, parentStringBuilder.append(\"/\"), nodeName, data,false);\n      parentNode.setChild(childNode.name, childNode);\n      return childNode.path;\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#createData(String,byte[],CreateMode).mjava","sourceNew":null,"sourceOld":"  @Override\n  public String createData(String path, byte[] data, CreateMode mode) throws AlreadyExistsException, NoSuchElementException, IOException {\n    if ((CreateMode.EPHEMERAL == mode || CreateMode.PERSISTENT == mode) && hasData(path)) {\n      throw new AlreadyExistsException(path);\n    }\n\n    String relPath = path.charAt(0) == '/' ? path.substring(1) : path;\n    if (relPath.length() == 0) { //Trying to create root-node, return null.\n      // TODO should trying to create a root node throw an exception since its always init'd in the ctor?\n      return null;\n    }\n\n    String[] elements = relPath.split(\"/\");\n    StringBuilder parentStringBuilder = new StringBuilder();\n    Node parentNode = null;\n    if (elements.length == 1) { // Direct descendant of '/'.\n      parentNode = getRoot();\n    } else { // Indirect descendant of '/', lookup parent node\n      for (int i = 0; i < elements.length - 1; i++) {\n        parentStringBuilder.append('/');\n        parentStringBuilder.append(elements[i]);\n      }\n      if (!hasData(parentStringBuilder.toString())) {\n        throw new NoSuchElementException(parentStringBuilder.toString());\n      }\n      parentNode = traverse(parentStringBuilder.toString(), false, mode);\n    }\n\n    multiLock.lock();\n    try {\n      String nodeName = elements[elements.length-1];\n      Node childNode = createNode(parentNode, mode, parentStringBuilder.append(\"/\"), nodeName, data,false);\n      parentNode.setChild(childNode.name, childNode);\n      return childNode.path;\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}