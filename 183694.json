{"path":"solr/core/src/test/org/apache/solr/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","sourceNew":"  public void testAddToNamedListPrimitiveTypes() throws Exception {\n    NamedList<Object> namedList = new SimpleOrderedMap<Object>();\n    DOMUtil.addToNamedList( getNode( \"<str name=\\\"String\\\">STRING</str>\", \"/str\" ), namedList, null );\n    assertTypeAndValue( namedList, \"String\", \"STRING\" );\n    DOMUtil.addToNamedList( getNode( \"<int name=\\\"Integer\\\">100</int>\", \"/int\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Integer\", Integer.valueOf( 100 ) );\n    DOMUtil.addToNamedList( getNode( \"<long name=\\\"Long\\\">200</long>\", \"/long\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Long\", Long.valueOf( 200 ) );\n    DOMUtil.addToNamedList( getNode( \"<float name=\\\"Float\\\">300</float>\", \"/float\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Float\", Float.valueOf( 300 ) );\n    DOMUtil.addToNamedList( getNode( \"<double name=\\\"Double\\\">400</double>\", \"/double\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Double\", Double.valueOf( 400 ) );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">true</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">on</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">yes</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">false</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">off</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">no</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n  }\n\n","sourceOld":"  public void testAddToNamedListPrimitiveTypes() throws Exception {\n    NamedList<Object> namedList = new SimpleOrderedMap<Object>();\n    DOMUtil.addToNamedList( getNode( \"<str name=\\\"String\\\">STRING</str>\", \"/str\" ), namedList, null );\n    assertTypeAndValue( namedList, \"String\", \"STRING\" );\n    DOMUtil.addToNamedList( getNode( \"<int name=\\\"Integer\\\">100</int>\", \"/int\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Integer\", Integer.valueOf( 100 ) );\n    DOMUtil.addToNamedList( getNode( \"<long name=\\\"Long\\\">200</long>\", \"/long\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Long\", Long.valueOf( 200 ) );\n    DOMUtil.addToNamedList( getNode( \"<float name=\\\"Float\\\">300</float>\", \"/float\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Float\", Float.valueOf( 300 ) );\n    DOMUtil.addToNamedList( getNode( \"<double name=\\\"Double\\\">400</double>\", \"/double\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Double\", Double.valueOf( 400 ) );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">true</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">on</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">yes</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">false</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">off</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">no</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","sourceNew":"  public void testAddToNamedListPrimitiveTypes() throws Exception {\n    NamedList<Object> namedList = new SimpleOrderedMap<>();\n    DOMUtil.addToNamedList( getNode( \"<str name=\\\"String\\\">STRING</str>\", \"/str\" ), namedList, null );\n    assertTypeAndValue( namedList, \"String\", \"STRING\" );\n    DOMUtil.addToNamedList( getNode( \"<int name=\\\"Integer\\\">100</int>\", \"/int\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Integer\", Integer.valueOf( 100 ) );\n    DOMUtil.addToNamedList( getNode( \"<long name=\\\"Long\\\">200</long>\", \"/long\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Long\", Long.valueOf( 200 ) );\n    DOMUtil.addToNamedList( getNode( \"<float name=\\\"Float\\\">300</float>\", \"/float\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Float\", Float.valueOf( 300 ) );\n    DOMUtil.addToNamedList( getNode( \"<double name=\\\"Double\\\">400</double>\", \"/double\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Double\", Double.valueOf( 400 ) );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">true</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">on</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">yes</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">false</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">off</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">no</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n  }\n\n","sourceOld":"  public void testAddToNamedListPrimitiveTypes() throws Exception {\n    NamedList<Object> namedList = new SimpleOrderedMap<Object>();\n    DOMUtil.addToNamedList( getNode( \"<str name=\\\"String\\\">STRING</str>\", \"/str\" ), namedList, null );\n    assertTypeAndValue( namedList, \"String\", \"STRING\" );\n    DOMUtil.addToNamedList( getNode( \"<int name=\\\"Integer\\\">100</int>\", \"/int\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Integer\", Integer.valueOf( 100 ) );\n    DOMUtil.addToNamedList( getNode( \"<long name=\\\"Long\\\">200</long>\", \"/long\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Long\", Long.valueOf( 200 ) );\n    DOMUtil.addToNamedList( getNode( \"<float name=\\\"Float\\\">300</float>\", \"/float\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Float\", Float.valueOf( 300 ) );\n    DOMUtil.addToNamedList( getNode( \"<double name=\\\"Double\\\">400</double>\", \"/double\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Double\", Double.valueOf( 400 ) );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">true</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">on</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">yes</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">false</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">off</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">no</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23a18981fcc2648fd6e83e9e84e8fa023eb0484b","date":1602334330,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/DOMUtilTest#testAddToNamedListPrimitiveTypes().mjava","sourceNew":"  public void testAddToNamedListPrimitiveTypes() throws Exception {\n    NamedList<Object> namedList = new SimpleOrderedMap<>();\n    DOMUtil.addToNamedList( getNode( \"<str name=\\\"String\\\">STRING</str>\", \"/str\" ), namedList, null );\n    assertTypeAndValue( namedList, \"String\", \"STRING\" );\n    DOMUtil.addToNamedList( getNode( \"<int name=\\\"Integer\\\">100</int>\", \"/int\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Integer\", Integer.valueOf( 100 ) );\n    DOMUtil.addToNamedList( getNode( \"<long name=\\\"Long\\\">200</long>\", \"/long\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Long\", Long.valueOf( 200 ) );\n    DOMUtil.addToNamedList( getNode( \"<float name=\\\"Float\\\">300</float>\", \"/float\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Float\", Float.valueOf( 300 ) );\n    DOMUtil.addToNamedList( getNode( \"<double name=\\\"Double\\\">400</double>\", \"/double\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Double\", Double.valueOf( 400 ) );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">true</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">on</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">yes</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">false</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">off</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">no</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n  }\n\n","sourceOld":"  public void testAddToNamedListPrimitiveTypes() throws Exception {\n    NamedList<Object> namedList = new SimpleOrderedMap<>();\n    DOMUtil.addToNamedList( getNode( \"<str name=\\\"String\\\">STRING</str>\", \"/str\" ), namedList, null );\n    assertTypeAndValue( namedList, \"String\", \"STRING\" );\n    DOMUtil.addToNamedList( getNode( \"<int name=\\\"Integer\\\">100</int>\", \"/int\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Integer\", Integer.valueOf( 100 ) );\n    DOMUtil.addToNamedList( getNode( \"<long name=\\\"Long\\\">200</long>\", \"/long\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Long\", Long.valueOf( 200 ) );\n    DOMUtil.addToNamedList( getNode( \"<float name=\\\"Float\\\">300</float>\", \"/float\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Float\", Float.valueOf( 300 ) );\n    DOMUtil.addToNamedList( getNode( \"<double name=\\\"Double\\\">400</double>\", \"/double\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Double\", Double.valueOf( 400 ) );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">true</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">on</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">yes</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", true );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">false</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">off</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n    DOMUtil.addToNamedList( getNode( \"<bool name=\\\"Boolean\\\">no</bool>\", \"/bool\" ), namedList, null );\n    assertTypeAndValue( namedList, \"Boolean\", false );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"]},"commit2Childs":{"23a18981fcc2648fd6e83e9e84e8fa023eb0484b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["23a18981fcc2648fd6e83e9e84e8fa023eb0484b"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}