{"path":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      // reuse ordinalmap\n      r = ((SolrIndexSearcher)o).getAtomicReader();\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  // TODO: this is trappy? perhaps this query instead should make you pass a slow reader yourself?\n  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n    final AtomicReader r = SlowCompositeReaderWrapper.wrap(topReader);\n    final int off = readerContext.docBase;\n\n    final SortedDocValues sindex = DocValues.getSorted(r, field);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8b89f40d84573f3342b8fee0d8ff5408444c7e","date":1400051147,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // its a single-valued numeric field: we must currently create insanity :(\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      // reuse ordinalmap\n      r = ((SolrIndexSearcher)o).getAtomicReader();\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // its a single-valued numeric field: we must currently create insanity :(\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // its a single-valued numeric field: we must currently create insanity :(\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        // its a single-valued numeric field: we must currently create insanity :(\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        // reuse ordinalmap\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    // if its e.g. tokenized/multivalued, emulate old behavior of single-valued fc\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e8b89f40d84573f3342b8fee0d8ff5408444c7e"],"7e8b89f40d84573f3342b8fee0d8ff5408444c7e":["9274621789ce990dbfef455dabdf026bb3184821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["7e8b89f40d84573f3342b8fee0d8ff5408444c7e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7e8b89f40d84573f3342b8fee0d8ff5408444c7e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9274621789ce990dbfef455dabdf026bb3184821","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}