{"path":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","sourceNew":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","sourceNew":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","sourceNew":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","sourceNew":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n      indexWriter.close();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n      indexWriter.shutdown();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","pathOld":"lucene/replicator/src/test/org/apache/lucene/replicator/IndexAndTaxonomyRevisionTest#testSegmentsFileLast().mjava","sourceNew":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS));\n      }\n      indexWriter.close();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSegmentsFileLast() throws Exception {\n    Directory indexDir = newDirectory();\n    IndexWriterConfig conf = new IndexWriterConfig(null);\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(conf.getIndexDeletionPolicy()));\n    IndexWriter indexWriter = new IndexWriter(indexDir, conf);\n    \n    Directory taxoDir = newDirectory();\n    SnapshotDirectoryTaxonomyWriter taxoWriter = new SnapshotDirectoryTaxonomyWriter(taxoDir);\n    try {\n      indexWriter.addDocument(newDocument(taxoWriter));\n      indexWriter.commit();\n      taxoWriter.commit();\n      Revision rev = new IndexAndTaxonomyRevision(indexWriter, taxoWriter);\n      Map<String,List<RevisionFile>> sourceFiles = rev.getSourceFiles();\n      assertEquals(2, sourceFiles.size());\n      for (List<RevisionFile> files : sourceFiles.values()) {\n        String lastFile = files.get(files.size() - 1).fileName;\n        assertTrue(lastFile.startsWith(IndexFileNames.SEGMENTS) && !lastFile.equals(IndexFileNames.SEGMENTS_GEN));\n      }\n      indexWriter.close();\n    } finally {\n      IOUtils.close(indexWriter, taxoWriter, taxoDir, indexDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}