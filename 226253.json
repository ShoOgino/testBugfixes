{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive#shutdownNowAndAwaitTermination(ExecutorService).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/GoLive#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  private void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","sourceOld":"  private void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive#shutdownNowAndAwaitTermination(ExecutorService).mjava","pathOld":"/dev/null","sourceNew":"  private void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d","date":1440987729,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ExecutorUtil#shutdownWithInterruptAndAwaitTermination(ExecutorService).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/GoLive#shutdownNowAndAwaitTermination(ExecutorService).mjava","sourceNew":"  // ** This will interrupt the threads! ** Lucene and Solr do not like this because it can close channels, so only use\n  // this if you know what you are doing - you probably want shutdownAndAwaitTermination.\n  // Marked as Deprecated to discourage use.\n  @Deprecated\n  public static void shutdownWithInterruptAndAwaitTermination(ExecutorService pool) {\n    pool.shutdownNow(); // Cancel currently executing tasks - NOTE: this interrupts!\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n","sourceOld":"  private void shutdownNowAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    pool.shutdownNow(); // Cancel currently executing tasks\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(5, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n      if (!shutdown) {\n        pool.shutdownNow(); // Cancel currently executing tasks\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"70d61fdc6a5871f80a74c0e2e55bb8a94e9ac59d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}