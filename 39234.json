{"path":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingFilterCachingPolicy#isCostly(Filter).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper;\n  }\n\n","sourceOld":"  static boolean isCostly(Filter filter) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return filter instanceof QueryWrapperFilter && ((QueryWrapperFilter) filter).getQuery() instanceof MultiTermQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"/dev/null","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof DimensionalRangeQuery;\n  }\n\n","sourceOld":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof PointRangeQuery;\n  }\n\n","sourceOld":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof DimensionalRangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e851eb05e8d5b14195ca22a2542534c4720d8622","date":1456740177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        isPointQuery(query) ||\n        // can't refer to TermsQuery directly as it is in another module\n        \"TermsQuery\".equals(query.getClass().getSimpleName());\n  }\n\n","sourceOld":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof PointRangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        isPointQuery(query) ||\n        // can't refer to TermsQuery directly as it is in another module\n        \"TermsQuery\".equals(query.getClass().getSimpleName());\n  }\n\n","sourceOld":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof PointRangeQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d73510b39df24d6b65de48e56f8dccb136b9d01","date":1483971905,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof TermInSetQuery ||\n        isPointQuery(query);\n  }\n\n","sourceOld":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        isPointQuery(query) ||\n        // can't refer to TermsQuery directly as it is in another module\n        \"TermsQuery\".equals(query.getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#isCostly(Query).mjava","sourceNew":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        query instanceof TermInSetQuery ||\n        isPointQuery(query);\n  }\n\n","sourceOld":"  static boolean isCostly(Query query) {\n    // This does not measure the cost of iterating over the filter (for this we\n    // already have the DocIdSetIterator#cost API) but the cost to build the\n    // DocIdSet in the first place\n    return query instanceof MultiTermQuery ||\n        query instanceof MultiTermQueryConstantScoreWrapper ||\n        isPointQuery(query) ||\n        // can't refer to TermsQuery directly as it is in another module\n        \"TermsQuery\".equals(query.getClass().getSimpleName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","e851eb05e8d5b14195ca22a2542534c4720d8622"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["af2638813028b254a88b418ebeafb541afb49653"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["af2638813028b254a88b418ebeafb541afb49653","8d73510b39df24d6b65de48e56f8dccb136b9d01"],"e851eb05e8d5b14195ca22a2542534c4720d8622":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"770342641f7b505eaa8dccdc666158bff2419109":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d73510b39df24d6b65de48e56f8dccb136b9d01"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["8d73510b39df24d6b65de48e56f8dccb136b9d01","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["af2638813028b254a88b418ebeafb541afb49653","e851eb05e8d5b14195ca22a2542534c4720d8622"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"8d73510b39df24d6b65de48e56f8dccb136b9d01":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"e851eb05e8d5b14195ca22a2542534c4720d8622":["af2638813028b254a88b418ebeafb541afb49653"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}