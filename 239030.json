{"path":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","commits":[{"id":"b443dda8f84ed86d67aeecb48ce98151c485dbe6","date":1179405523,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (IOException e) {\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        \r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    String s = new String(tp.getPayload(new byte[5], 0));\r\n                    assertEquals(s, terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    String s = new String(tp.getPayload(new byte[5], 0));\r\n                    assertEquals(s, terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","sourceOld":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (IOException e) {\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        \r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    String s = new String(tp.getPayload(new byte[5], 0));\r\n                    assertEquals(s, terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    String s = new String(tp.getPayload(new byte[5], 0));\r\n                    assertEquals(s, terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","sourceOld":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer());\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    String s = new String(tp.getPayload(new byte[5], 0));\r\n                    assertEquals(s, terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ed626d23ec6bd80237bbb4c78808e8220e10761","date":1211011929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","sourceOld":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    String s = new String(tp.getPayload(new byte[5], 0));\r\n                    assertEquals(s, terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws IOException {\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n            try {\n                ingesters[i].join();\n            } catch (InterruptedException e) {}\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws IOException {\r\n        final int numThreads = 5;\r\n        final int numDocs = 50;\r\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\r\n        \r\n        Directory dir = new RAMDirectory();\r\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\r\n        final String field = \"test\";\r\n        \r\n        Thread[] ingesters = new Thread[numThreads];\r\n        for (int i = 0; i < numThreads; i++) {\r\n            ingesters[i] = new Thread() {\r\n                public void run() {\r\n                    try {\r\n                        for (int j = 0; j < numDocs; j++) {\r\n                            Document d = new Document();\r\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\r\n                            writer.addDocument(d);\r\n                        }\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                        fail(e.toString());\r\n                    }\r\n                }\r\n            };\r\n            ingesters[i].start();\r\n        }\r\n        \r\n        for (int i = 0; i < numThreads; i++) {\r\n            try {\r\n                ingesters[i].join();\r\n            } catch (InterruptedException e) {}\r\n        }\r\n        writer.close();\r\n        IndexReader reader = IndexReader.open(dir);\r\n        TermEnum terms = reader.terms();\r\n        while (terms.next()) {\r\n            TermPositions tp = reader.termPositions(terms.term());\r\n            while(tp.next()) {\r\n                int freq = tp.freq();\r\n                for (int i = 0; i < freq; i++) {\r\n                    tp.nextPosition();\r\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\r\n                }\r\n            }\r\n            tp.close();\r\n        }\r\n        terms.close();\r\n        reader.close();\r\n        \r\n        assertEquals(pool.size(), numThreads);\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb1066f2afe9450585d0d10063ea4450085236f1","date":1233870820,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws IOException {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n            try {\n                ingesters[i].join();\n            } catch (InterruptedException e) {}\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws IOException {\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n            try {\n                ingesters[i].join();\n            } catch (InterruptedException e) {}\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws IOException {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n            try {\n                ingesters[i].join();\n            } catch (InterruptedException e) {}\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","pathOld":"src/test/org/apache/lucene/index/TestPayloads#testThreadSafety().mjava","sourceNew":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","sourceOld":"    public void testThreadSafety() throws Exception {\n        rnd = newRandom();\n        final int numThreads = 5;\n        final int numDocs = 50;\n        final ByteArrayPool pool = new ByteArrayPool(numThreads, 5);\n        \n        Directory dir = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        final String field = \"test\";\n        \n        Thread[] ingesters = new Thread[numThreads];\n        for (int i = 0; i < numThreads; i++) {\n            ingesters[i] = new Thread() {\n                @Override\n                public void run() {\n                    try {\n                        for (int j = 0; j < numDocs; j++) {\n                            Document d = new Document();\n                            d.add(new Field(field, new PoolingPayloadTokenStream(pool)));\n                            writer.addDocument(d);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                        fail(e.toString());\n                    }\n                }\n            };\n            ingesters[i].start();\n        }\n        \n        for (int i = 0; i < numThreads; i++) {\n          ingesters[i].join();\n        }\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, true);\n        TermEnum terms = reader.terms();\n        while (terms.next()) {\n            TermPositions tp = reader.termPositions(terms.term());\n            while(tp.next()) {\n                int freq = tp.freq();\n                for (int i = 0; i < freq; i++) {\n                    tp.nextPosition();\n                    assertEquals(pool.bytesToString(tp.getPayload(new byte[5], 0)), terms.term().text);\n                }\n            }\n            tp.close();\n        }\n        terms.close();\n        reader.close();\n        \n        assertEquals(pool.size(), numThreads);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb1066f2afe9450585d0d10063ea4450085236f1":["2123bddbd65dea198cac380540636ce43a880403"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"2123bddbd65dea198cac380540636ce43a880403":["7ed626d23ec6bd80237bbb4c78808e8220e10761"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["cb1066f2afe9450585d0d10063ea4450085236f1"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["b443dda8f84ed86d67aeecb48ce98151c485dbe6"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"b443dda8f84ed86d67aeecb48ce98151c485dbe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7ed626d23ec6bd80237bbb4c78808e8220e10761":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"cb1066f2afe9450585d0d10063ea4450085236f1":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"2123bddbd65dea198cac380540636ce43a880403":["cb1066f2afe9450585d0d10063ea4450085236f1"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["7ed626d23ec6bd80237bbb4c78808e8220e10761"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b443dda8f84ed86d67aeecb48ce98151c485dbe6":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b443dda8f84ed86d67aeecb48ce98151c485dbe6"],"7ed626d23ec6bd80237bbb4c78808e8220e10761":["2123bddbd65dea198cac380540636ce43a880403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}