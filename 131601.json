{"path":"src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","commits":[{"id":"b77550c47735d804ddb8767848f5af9b02b88c84","date":1162245631,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)tnum)), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a251547210ad8523f10c15c461496a2ad4bb3df4","date":1195837134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)tnum)), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":["b77550c47735d804ddb8767848f5af9b02b88c84"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestScorerPerf#doSloppyPhrase(IndexSearcher,int,int,int).mjava","sourceNew":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","sourceOld":"    public int doSloppyPhrase(IndexSearcher s,\n                                int termsInIndex,\n                                int maxClauses,\n                                int iter\n  ) throws IOException {\n    int ret=0;\n\n    for (int i=0; i<iter; i++) {\n      int nClauses = r.nextInt(maxClauses-1)+2; // min 2 clauses\n      PhraseQuery q = new PhraseQuery();\n      for (int j=0; j<nClauses; j++) {\n        int tnum = r.nextInt(termsInIndex);\n        q.add(new Term(\"f\",Character.toString((char)(tnum+'A'))), j);\n      }\n      q.setSlop(termsInIndex);  // this could be random too\n\n      CountingHitCollector hc = new CountingHitCollector();\n      s.search(q, hc);\n      ret += hc.getSum();\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["b77550c47735d804ddb8767848f5af9b02b88c84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a251547210ad8523f10c15c461496a2ad4bb3df4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b77550c47735d804ddb8767848f5af9b02b88c84"],"b77550c47735d804ddb8767848f5af9b02b88c84":["a251547210ad8523f10c15c461496a2ad4bb3df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}