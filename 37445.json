{"path":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","commits":[{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,String,File,File,SortedMap[ServletHolder,String],SortedMap[Class,String],SSLConfig).mjava","sourceNew":"  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(jettyConfig);\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * \"Mini\" SolrCloud cluster to be used for testing\n   * @param numServers number of Solr servers to start\n   * @param hostContext context path of Solr servers used by Jetty\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param extraServlets Extra servlets to be started by Jetty\n   * @param extraRequestFilters extra filters to be started by Jetty\n   * @param sslConfig SSL configuration\n   */\n  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,\n      SortedMap<ServletHolder, String> extraServlets,\n      SortedMap<Class, String> extraRequestFilters,\n      SSLConfig sslConfig) throws Exception {\n    testDir = baseDir;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<JettySolrRunner>();\n    for (int i = 0; i < numServers; ++i) {\n      if (sslConfig == null) {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);\n      } else {\n        startJettySolrRunner(hostContext, extraServlets, extraRequestFilters, sslConfig);\n      }\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637b23b829464a8bf4e017500d5ecf8034efc3ee","date":1425892557,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","sourceNew":"  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(jettyConfig);\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(jettyConfig);\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ae1e051eb54651f97786343944abe292d64b50","date":1425934288,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    jettys = new LinkedList<>();\n    for (int i = 0; i < numServers; ++i) {\n      startJettySolrRunner(jettyConfig);\n    }\n    \n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5960c28d37af85cb74fce4b484ec35b9bf60da8a","date":1432730908,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f9bf0405a1117d91d112b095f83c2df500c7b3c","date":1437869727,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"solr.solrxml.location\",\"zookeeper\");\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n    this(numServers, baseDir, solrXml, jettyConfig, null);\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n\n    this.testDir = baseDir;\n    this.jettyConfig = jettyConfig;\n\n    String zkDir = testDir.getAbsolutePath() + File.separator\n      + \"zookeeper/server1/data\";\n    zkServer = new ZkTestServer(zkDir);\n    zkServer.run();\n    \n    try(SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      zkClient.makePath(\"/solr/solr.xml\", solrXml, false, true);\n      if (jettyConfig.sslConfig != null && jettyConfig.sslConfig.isSSLMode()) {\n        zkClient.makePath(\"/solr\" + ZkStateReader.CLUSTER_PROPS, \"{'urlScheme':'https'}\".getBytes(Charsets.UTF_8), true);\n      }\n    }\n\n    // tell solr to look in zookeeper for solr.xml\n    System.setProperty(\"zkHost\", zkServer.getZkAddress());\n\n    List<Callable<JettySolrRunner>> startups = new ArrayList<>(numServers);\n    for (int i = 0; i < numServers; ++i) {\n      startups.add(new Callable<JettySolrRunner>() {\n        @Override\n        public JettySolrRunner call() throws Exception {\n          return startJettySolrRunner(jettyConfig);\n        }\n      });\n    }\n\n    Collection<Future<JettySolrRunner>> futures = executor.invokeAll(startups);\n    Exception startupError = checkForExceptions(\"Error starting up MiniSolrCloudCluster\", futures);\n    if (startupError != null) {\n      try {\n        this.shutdown();\n      }\n      catch (Throwable t) {\n        startupError.addSuppressed(t);\n      }\n      throw startupError;\n    }\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkHost(),\n        AbstractZkTestCase.TIMEOUT, 45000, null)) {\n      int numliveNodes = 0;\n      int retries = 60;\n      String liveNodesPath = \"/solr/live_nodes\";\n      // Wait up to 60 seconds for number of live_nodes to match up number of servers\n      do {\n        if (zkClient.exists(liveNodesPath, true)) {\n          numliveNodes = zkClient.getChildren(liveNodesPath, null, true).size();\n          if (numliveNodes == numServers) {\n            break;\n          }\n        }\n        retries--;\n        if (retries == 0) {\n          throw new IllegalStateException(\"Solr servers failed to register with ZK.\"\n              + \" Current count: \" + numliveNodes + \"; Expected count: \" + numServers);\n        }\n\n        Thread.sleep(1000);\n      } while (numliveNodes != numServers);\n    }\n\n    solrClient = buildSolrClient();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,Path,String,JettyConfig).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/MiniSolrCloudCluster#MiniSolrCloudCluster(int,File,File,JettyConfig).mjava","sourceNew":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, Path baseDir, String solrXml, JettyConfig jettyConfig) throws Exception {\n    this(numServers, baseDir, solrXml, jettyConfig, null);\n  }\n\n","sourceOld":"  /**\n   * Create a MiniSolrCloudCluster\n   *\n   * @param numServers number of Solr servers to start\n   * @param baseDir base directory that the mini cluster should be run from\n   * @param solrXml solr.xml file to be uploaded to ZooKeeper\n   * @param jettyConfig Jetty configuration\n   *\n   * @throws Exception if there was an error starting the cluster\n   */\n  public MiniSolrCloudCluster(int numServers, File baseDir, File solrXml, JettyConfig jettyConfig) throws Exception {\n    this(numServers, baseDir, solrXml, jettyConfig, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","82ae1e051eb54651f97786343944abe292d64b50"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["0f9bf0405a1117d91d112b095f83c2df500c7b3c"],"82ae1e051eb54651f97786343944abe292d64b50":["637b23b829464a8bf4e017500d5ecf8034efc3ee"],"5960c28d37af85cb74fce4b484ec35b9bf60da8a":["82ae1e051eb54651f97786343944abe292d64b50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9bf0405a1117d91d112b095f83c2df500c7b3c":["5960c28d37af85cb74fce4b484ec35b9bf60da8a"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"637b23b829464a8bf4e017500d5ecf8034efc3ee":["c66158bb16e902a21272772f1b911f04b1a55abb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2209af2c265d2258ec4b29c8cc78622d36994a15":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"82ae1e051eb54651f97786343944abe292d64b50":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5960c28d37af85cb74fce4b484ec35b9bf60da8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"5960c28d37af85cb74fce4b484ec35b9bf60da8a":["0f9bf0405a1117d91d112b095f83c2df500c7b3c"],"0f9bf0405a1117d91d112b095f83c2df500c7b3c":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"637b23b829464a8bf4e017500d5ecf8034efc3ee":["82ae1e051eb54651f97786343944abe292d64b50"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c66158bb16e902a21272772f1b911f04b1a55abb":["637b23b829464a8bf4e017500d5ecf8034efc3ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}