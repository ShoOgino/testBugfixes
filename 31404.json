{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#split(NamedList[Object]).mjava","commits":[{"id":"20c968c14aace7cf49843bf2c1fafc7fd3845659","date":1533133859,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#split(NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  public void split(NamedList<Object> results) throws IOException {\n    SolrCore parentCore = searcher.getCore();\n    Directory parentDirectory = searcher.getRawReader().directory();\n    Lock parentDirectoryLock = null;\n    UpdateLog ulog = parentCore.getUpdateHandler().getUpdateLog();\n    if (ulog == null && splitMethod == SplitMethod.LINK) {\n      log.warn(\"No updateLog in parent core, switching to use potentially slower 'splitMethod=rewrite'\");\n      splitMethod = SplitMethod.REWRITE;\n    }\n    if (splitMethod == SplitMethod.LINK) {\n      RTimerTree t = timings.sub(\"closeParentIW\");\n      try {\n        // start buffering updates\n        ulog.bufferUpdates();\n        parentCore.getSolrCoreState().closeIndexWriter(parentCore, false);\n        // make sure we can lock the directory for our exclusive use\n        parentDirectoryLock = parentDirectory.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n        log.info(\"Splitting in 'link' mode: closed parent IndexWriter...\");\n        t.stop();\n      } catch (Exception e) {\n        if (parentDirectoryLock != null) {\n          IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        }\n        try {\n          parentCore.getSolrCoreState().openIndexWriter(parentCore);\n          ulog.applyBufferedUpdates();\n        } catch (Exception e1) {\n          log.error(\"Error reopening IndexWriter after failed close\", e1);\n          log.error(\"Original error closing IndexWriter:\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reopening IndexWriter after failed close\", e1);\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing current IndexWriter, aborting offline split...\", e);\n      }\n    }\n    boolean success = false;\n    try {\n      RTimerTree t = timings.sub(\"doSplit\");\n      doSplit();\n      t.stop();\n      success = true;\n    } catch (Exception e) {\n      results.add(\"failed\", e.toString());\n      throw e;\n    } finally {\n      if (splitMethod == SplitMethod.LINK) {\n        IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        RTimerTree t = timings.sub(\"reopenParentIW\");\n        parentCore.getSolrCoreState().openIndexWriter(parentCore);\n        t.stop();\n        t = timings.sub(\"parentApplyBufferedUpdates\");\n        ulog.applyBufferedUpdates();\n        t.stop();\n        log.info(\"Splitting in 'offline' mode \" + (success? \"finished\" : \"FAILED\") +\n            \": re-opened parent IndexWriter.\");\n      }\n    }\n    results.add(CommonParams.TIMING, timings.asNamedList());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cac1f2920f8057198f04505797cbabf74dd9a97","date":1546884894,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#split(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#split(NamedList[Object]).mjava","sourceNew":"  public void split(NamedList<Object> results) throws IOException {\n    SolrCore parentCore = searcher.getCore();\n    Directory parentDirectory = searcher.getRawReader().directory();\n    Lock parentDirectoryLock = null;\n    UpdateLog ulog = parentCore.getUpdateHandler().getUpdateLog();\n    if (ulog == null && splitMethod == SplitMethod.LINK) {\n      log.warn(\"No updateLog in parent core, switching to use potentially slower 'splitMethod=rewrite'\");\n      splitMethod = SplitMethod.REWRITE;\n    }\n    if (splitMethod == SplitMethod.LINK) {\n      RTimerTree t = timings.sub(\"closeParentIW\");\n      try {\n        // start buffering updates\n        ulog.bufferUpdates();\n        parentCore.getSolrCoreState().closeIndexWriter(parentCore, false);\n        // make sure we can lock the directory for our exclusive use\n        parentDirectoryLock = parentDirectory.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n        log.info(\"Splitting in 'link' mode: closed parent IndexWriter...\");\n        t.stop();\n      } catch (Exception e) {\n        if (parentDirectoryLock != null) {\n          IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        }\n        try {\n          parentCore.getSolrCoreState().openIndexWriter(parentCore);\n          ulog.applyBufferedUpdates();\n        } catch (Exception e1) {\n          log.error(\"Error reopening IndexWriter after failed close\", e1);\n          log.error(\"Original error closing IndexWriter:\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reopening IndexWriter after failed close\", e1);\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing current IndexWriter, aborting 'link' split...\", e);\n      }\n    }\n    boolean success = false;\n    try {\n      RTimerTree t = timings.sub(\"doSplit\");\n      doSplit();\n      t.stop();\n      success = true;\n    } catch (Exception e) {\n      results.add(\"failed\", e.toString());\n      throw e;\n    } finally {\n      if (splitMethod == SplitMethod.LINK) {\n        IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        RTimerTree t = timings.sub(\"reopenParentIW\");\n        parentCore.getSolrCoreState().openIndexWriter(parentCore);\n        t.stop();\n        t = timings.sub(\"parentApplyBufferedUpdates\");\n        ulog.applyBufferedUpdates();\n        t.stop();\n        log.info(\"Splitting in 'link' mode \" + (success? \"finished\" : \"FAILED\") +\n            \": re-opened parent IndexWriter.\");\n      }\n    }\n    results.add(CommonParams.TIMING, timings.asNamedList());\n  }\n\n","sourceOld":"  public void split(NamedList<Object> results) throws IOException {\n    SolrCore parentCore = searcher.getCore();\n    Directory parentDirectory = searcher.getRawReader().directory();\n    Lock parentDirectoryLock = null;\n    UpdateLog ulog = parentCore.getUpdateHandler().getUpdateLog();\n    if (ulog == null && splitMethod == SplitMethod.LINK) {\n      log.warn(\"No updateLog in parent core, switching to use potentially slower 'splitMethod=rewrite'\");\n      splitMethod = SplitMethod.REWRITE;\n    }\n    if (splitMethod == SplitMethod.LINK) {\n      RTimerTree t = timings.sub(\"closeParentIW\");\n      try {\n        // start buffering updates\n        ulog.bufferUpdates();\n        parentCore.getSolrCoreState().closeIndexWriter(parentCore, false);\n        // make sure we can lock the directory for our exclusive use\n        parentDirectoryLock = parentDirectory.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n        log.info(\"Splitting in 'link' mode: closed parent IndexWriter...\");\n        t.stop();\n      } catch (Exception e) {\n        if (parentDirectoryLock != null) {\n          IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        }\n        try {\n          parentCore.getSolrCoreState().openIndexWriter(parentCore);\n          ulog.applyBufferedUpdates();\n        } catch (Exception e1) {\n          log.error(\"Error reopening IndexWriter after failed close\", e1);\n          log.error(\"Original error closing IndexWriter:\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reopening IndexWriter after failed close\", e1);\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing current IndexWriter, aborting offline split...\", e);\n      }\n    }\n    boolean success = false;\n    try {\n      RTimerTree t = timings.sub(\"doSplit\");\n      doSplit();\n      t.stop();\n      success = true;\n    } catch (Exception e) {\n      results.add(\"failed\", e.toString());\n      throw e;\n    } finally {\n      if (splitMethod == SplitMethod.LINK) {\n        IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        RTimerTree t = timings.sub(\"reopenParentIW\");\n        parentCore.getSolrCoreState().openIndexWriter(parentCore);\n        t.stop();\n        t = timings.sub(\"parentApplyBufferedUpdates\");\n        ulog.applyBufferedUpdates();\n        t.stop();\n        log.info(\"Splitting in 'offline' mode \" + (success? \"finished\" : \"FAILED\") +\n            \": re-opened parent IndexWriter.\");\n      }\n    }\n    results.add(CommonParams.TIMING, timings.asNamedList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#split(NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexSplitter#split(NamedList[Object]).mjava","sourceNew":"  public void split(NamedList<Object> results) throws IOException {\n    SolrCore parentCore = searcher.getCore();\n    Directory parentDirectory = searcher.getRawReader().directory();\n    Lock parentDirectoryLock = null;\n    UpdateLog ulog = parentCore.getUpdateHandler().getUpdateLog();\n    if (ulog == null && splitMethod == SplitMethod.LINK) {\n      log.warn(\"No updateLog in parent core, switching to use potentially slower 'splitMethod=rewrite'\");\n      splitMethod = SplitMethod.REWRITE;\n    }\n    if (splitMethod == SplitMethod.LINK) {\n      RTimerTree t = timings.sub(\"closeParentIW\");\n      try {\n        // start buffering updates\n        ulog.bufferUpdates();\n        parentCore.getSolrCoreState().closeIndexWriter(parentCore, false);\n        // make sure we can lock the directory for our exclusive use\n        parentDirectoryLock = parentDirectory.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n        log.info(\"Splitting in 'link' mode: closed parent IndexWriter...\");\n        t.stop();\n      } catch (Exception e) {\n        if (parentDirectoryLock != null) {\n          IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        }\n        try {\n          parentCore.getSolrCoreState().openIndexWriter(parentCore);\n          ulog.applyBufferedUpdates();\n        } catch (Exception e1) {\n          log.error(\"Error reopening IndexWriter after failed close\", e1);\n          log.error(\"Original error closing IndexWriter:\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reopening IndexWriter after failed close\", e1);\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing current IndexWriter, aborting 'link' split...\", e);\n      }\n    }\n    boolean success = false;\n    try {\n      RTimerTree t = timings.sub(\"doSplit\");\n      doSplit();\n      t.stop();\n      success = true;\n    } catch (Exception e) {\n      results.add(\"failed\", e.toString());\n      throw e;\n    } finally {\n      if (splitMethod == SplitMethod.LINK) {\n        IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        RTimerTree t = timings.sub(\"reopenParentIW\");\n        parentCore.getSolrCoreState().openIndexWriter(parentCore);\n        t.stop();\n        t = timings.sub(\"parentApplyBufferedUpdates\");\n        ulog.applyBufferedUpdates();\n        t.stop();\n        if (log.isInfoEnabled()) {\n          log.info(\"Splitting in 'link' mode {}: re-opened parent IndexWriter.\", (success ? \"finished\" : \"FAILED\"));\n        }\n      }\n    }\n    results.add(CommonParams.TIMING, timings.asNamedList());\n  }\n\n","sourceOld":"  public void split(NamedList<Object> results) throws IOException {\n    SolrCore parentCore = searcher.getCore();\n    Directory parentDirectory = searcher.getRawReader().directory();\n    Lock parentDirectoryLock = null;\n    UpdateLog ulog = parentCore.getUpdateHandler().getUpdateLog();\n    if (ulog == null && splitMethod == SplitMethod.LINK) {\n      log.warn(\"No updateLog in parent core, switching to use potentially slower 'splitMethod=rewrite'\");\n      splitMethod = SplitMethod.REWRITE;\n    }\n    if (splitMethod == SplitMethod.LINK) {\n      RTimerTree t = timings.sub(\"closeParentIW\");\n      try {\n        // start buffering updates\n        ulog.bufferUpdates();\n        parentCore.getSolrCoreState().closeIndexWriter(parentCore, false);\n        // make sure we can lock the directory for our exclusive use\n        parentDirectoryLock = parentDirectory.obtainLock(IndexWriter.WRITE_LOCK_NAME);\n        log.info(\"Splitting in 'link' mode: closed parent IndexWriter...\");\n        t.stop();\n      } catch (Exception e) {\n        if (parentDirectoryLock != null) {\n          IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        }\n        try {\n          parentCore.getSolrCoreState().openIndexWriter(parentCore);\n          ulog.applyBufferedUpdates();\n        } catch (Exception e1) {\n          log.error(\"Error reopening IndexWriter after failed close\", e1);\n          log.error(\"Original error closing IndexWriter:\", e);\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error reopening IndexWriter after failed close\", e1);\n        }\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error closing current IndexWriter, aborting 'link' split...\", e);\n      }\n    }\n    boolean success = false;\n    try {\n      RTimerTree t = timings.sub(\"doSplit\");\n      doSplit();\n      t.stop();\n      success = true;\n    } catch (Exception e) {\n      results.add(\"failed\", e.toString());\n      throw e;\n    } finally {\n      if (splitMethod == SplitMethod.LINK) {\n        IOUtils.closeWhileHandlingException(parentDirectoryLock);\n        RTimerTree t = timings.sub(\"reopenParentIW\");\n        parentCore.getSolrCoreState().openIndexWriter(parentCore);\n        t.stop();\n        t = timings.sub(\"parentApplyBufferedUpdates\");\n        ulog.applyBufferedUpdates();\n        t.stop();\n        log.info(\"Splitting in 'link' mode \" + (success? \"finished\" : \"FAILED\") +\n            \": re-opened parent IndexWriter.\");\n      }\n    }\n    results.add(CommonParams.TIMING, timings.asNamedList());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7cac1f2920f8057198f04505797cbabf74dd9a97":["740d649f013f07efbeb73ca854f106c60166e7c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20c968c14aace7cf49843bf2c1fafc7fd3845659"],"20c968c14aace7cf49843bf2c1fafc7fd3845659":["7cac1f2920f8057198f04505797cbabf74dd9a97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}