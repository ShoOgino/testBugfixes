{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int).mjava","commits":[{"id":"d9e959ce5e0805c43916e999d21f2018a2b475ab","date":1337958990,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : 0;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500052b00ecd22d5bd8b0efd25666d035ef55f85","date":1340322005,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int).mjava","sourceNew":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : 0;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int).mjava","sourceNew":null,"sourceOld":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : 0;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9e959ce5e0805c43916e999d21f2018a2b475ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d9e959ce5e0805c43916e999d21f2018a2b475ab","500052b00ecd22d5bd8b0efd25666d035ef55f85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"500052b00ecd22d5bd8b0efd25666d035ef55f85":["d9e959ce5e0805c43916e999d21f2018a2b475ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500052b00ecd22d5bd8b0efd25666d035ef55f85"]},"commit2Childs":{"d9e959ce5e0805c43916e999d21f2018a2b475ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","500052b00ecd22d5bd8b0efd25666d035ef55f85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9e959ce5e0805c43916e999d21f2018a2b475ab"],"500052b00ecd22d5bd8b0efd25666d035ef55f85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}