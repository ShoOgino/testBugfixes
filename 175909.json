{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger.SearchRateEvent#SearchRateEvent(String,long,Map[String,Double],Map[String,Double],Map[String,Map[String,Double]],List[ReplicaInfo],Map[String,String]).mjava","commits":[{"id":"1cc58dbf9573e66a3054c7c372862b8e5a77a9da","date":1504796681,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger.SearchRateEvent#SearchRateEvent(String,long,Map[String,Double],Map[String,Double],Map[String,Map[String,Double]],List[ReplicaInfo],Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger.SearchRateEvent#SearchRateEvent(String,long,Map[String,Double],Map[String,Double],Map[String,Map[String,Double]],List[ReplicaInfo]).mjava","sourceNew":"    public SearchRateEvent(String source, long eventTime, Map<String, Double> hotNodes,\n                           Map<String, Double> hotCollections,\n                           Map<String, Map<String, Double>> hotShards, List<ReplicaInfo> hotReplicas,\n                           Map<String, String> warmShards) {\n      super(TriggerEventType.SEARCHRATE, source, eventTime, null);\n      properties.put(AutoScalingParams.COLLECTION, hotCollections);\n      properties.put(AutoScalingParams.SHARD, hotShards);\n      properties.put(AutoScalingParams.REPLICA, hotReplicas);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      properties.put(AutoScalingParams.WARM_SHARD, warmShards);\n    }\n\n","sourceOld":"    public SearchRateEvent(String source, long eventTime, Map<String, Double> hotNodes,\n                           Map<String, Double> hotCollections,\n                           Map<String, Map<String, Double>> hotShards, List<ReplicaInfo> hotReplicas) {\n      super(TriggerEventType.SEARCHRATE, source, eventTime, null);\n      properties.put(AutoScalingParams.COLLECTION, hotCollections);\n      properties.put(AutoScalingParams.SHARD, hotShards);\n      properties.put(AutoScalingParams.REPLICA, hotReplicas);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e412fed1b23292038553fbe85fe61cd7aa8472","date":1505751927,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger.SearchRateEvent#SearchRateEvent(String,long,Map[String,Double],Map[String,Double],Map[String,Map[String,Double]],List[ReplicaInfo]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/SearchRateTrigger.SearchRateEvent#SearchRateEvent(String,long,Map[String,Double],Map[String,Double],Map[String,Map[String,Double]],List[ReplicaInfo],Map[String,String]).mjava","sourceNew":"    public SearchRateEvent(String source, long eventTime, Map<String, Double> hotNodes,\n                           Map<String, Double> hotCollections,\n                           Map<String, Map<String, Double>> hotShards, List<ReplicaInfo> hotReplicas) {\n      super(TriggerEventType.SEARCHRATE, source, eventTime, null);\n      properties.put(AutoScalingParams.COLLECTION, hotCollections);\n      properties.put(AutoScalingParams.SHARD, hotShards);\n      properties.put(AutoScalingParams.REPLICA, hotReplicas);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n    }\n\n","sourceOld":"    public SearchRateEvent(String source, long eventTime, Map<String, Double> hotNodes,\n                           Map<String, Double> hotCollections,\n                           Map<String, Map<String, Double>> hotShards, List<ReplicaInfo> hotReplicas,\n                           Map<String, String> warmShards) {\n      super(TriggerEventType.SEARCHRATE, source, eventTime, null);\n      properties.put(AutoScalingParams.COLLECTION, hotCollections);\n      properties.put(AutoScalingParams.SHARD, hotShards);\n      properties.put(AutoScalingParams.REPLICA, hotReplicas);\n      properties.put(AutoScalingParams.NODE, hotNodes);\n      properties.put(AutoScalingParams.WARM_SHARD, warmShards);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1cc58dbf9573e66a3054c7c372862b8e5a77a9da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1cc58dbf9573e66a3054c7c372862b8e5a77a9da":["a4e412fed1b23292038553fbe85fe61cd7aa8472"],"a4e412fed1b23292038553fbe85fe61cd7aa8472":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a4e412fed1b23292038553fbe85fe61cd7aa8472","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}