{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","commits":[{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(SORT, comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream#toExpression(StreamFactory,boolean).mjava","sourceNew":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(SORT, comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","sourceOld":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // n\n    expression.addParameter(new StreamExpressionNamedParameter(\"n\", Integer.toString(size)));\n    \n    if(includeStreams){\n      // stream\n      if(stream instanceof Expressible){\n        expression.addParameter(((Expressible)stream).toExpression(factory));\n      }\n      else{\n        throw new IOException(\"This RankStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n    }\n        \n    // sort\n    expression.addParameter(new StreamExpressionNamedParameter(\"sort\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"01624b85de12fb02335810bdf325124e59040772":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["01624b85de12fb02335810bdf325124e59040772"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"01624b85de12fb02335810bdf325124e59040772":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}