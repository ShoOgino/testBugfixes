{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(File f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      if (lf != null) {\n        wrapped.setLockFactory(lf);\n      }\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cbd49d01e70938f9b96aab93ccf87d92ef5e807","date":1417114695,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n      if (fsdirClass.equals(\"SimpleFSDirectory\")) {\n        // pick again\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n      }\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n      if (fsdirClass.equals(\"SimpleFSDirectory\")) {\n        // pick again\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n      }\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3903dde7d803465e019a1aaf678febe1c763ec27","date":1560266875,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n        List<String> fileExtensions =\n            Arrays.asList(\"fdt\", \"fdx\", \"tim\", \"tip\", \"si\", \"fnm\", \"pos\", \"dii\", \"dim\", \"nvm\", \"nvd\", \"dvm\", \"dvd\");\n        Collections.shuffle(fileExtensions, random());\n        fileExtensions = fileExtensions.subList(0, 1 + random().nextInt(fileExtensions.size()));\n        fsdir = new FileSwitchDirectory(new HashSet<>(fileExtensions), fsdir, newFSDirectoryImpl(clazz, f, lf), true);\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add665d72d31f385b8eac973ca2d1d03d217a7c9","date":1560281565,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n// LUCENE-8853: FileSwitchDirectory is broken for tmp outputs.\n//      if (rarely()) {\n//        List<String> fileExtensions =\n//            Arrays.asList(\"fdt\", \"fdx\", \"tim\", \"tip\", \"si\", \"fnm\", \"pos\", \"dii\", \"dim\", \"nvm\", \"nvd\", \"dvm\", \"dvd\");\n//        Collections.shuffle(fileExtensions, random());\n//        fileExtensions = fileExtensions.subList(0, 1 + random().nextInt(fileExtensions.size()));\n//        fsdir = new FileSwitchDirectory(new HashSet<>(fileExtensions), fsdir, newFSDirectoryImpl(clazz, f, lf), true);\n//      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n        List<String> fileExtensions =\n            Arrays.asList(\"fdt\", \"fdx\", \"tim\", \"tip\", \"si\", \"fnm\", \"pos\", \"dii\", \"dim\", \"nvm\", \"nvd\", \"dvm\", \"dvd\");\n        Collections.shuffle(fileExtensions, random());\n        fileExtensions = fileExtensions.subList(0, 1 + random().nextInt(fileExtensions.size()));\n        fsdir = new FileSwitchDirectory(new HashSet<>(fileExtensions), fsdir, newFSDirectoryImpl(clazz, f, lf), true);\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90671118e7e92007dbc908dd155b24990f315e82","date":1560840479,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n        List<String> fileExtensions =\n            Arrays.asList(\"fdt\", \"fdx\", \"tim\", \"tip\", \"si\", \"fnm\", \"pos\", \"dii\", \"dim\", \"nvm\", \"nvd\", \"dvm\", \"dvd\");\n        Collections.shuffle(fileExtensions, random());\n        fileExtensions = fileExtensions.subList(0, 1 + random().nextInt(fileExtensions.size()));\n        fsdir = new FileSwitchDirectory(new HashSet<>(fileExtensions), fsdir, newFSDirectoryImpl(clazz, f, lf), true);\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n// LUCENE-8853: FileSwitchDirectory is broken for tmp outputs.\n//      if (rarely()) {\n//        List<String> fileExtensions =\n//            Arrays.asList(\"fdt\", \"fdx\", \"tim\", \"tip\", \"si\", \"fnm\", \"pos\", \"dii\", \"dim\", \"nvm\", \"nvd\", \"dvm\", \"dvd\");\n//        Collections.shuffle(fileExtensions, random());\n//        fileExtensions = fileExtensions.subList(0, 1 + random().nextInt(fileExtensions.size()));\n//        fsdir = new FileSwitchDirectory(new HashSet<>(fileExtensions), fsdir, newFSDirectoryImpl(clazz, f, lf), true);\n//      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":["8dffb29c521092508345dceee6c6491e07410c76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8dffb29c521092508345dceee6c6491e07410c76","date":1560870921,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n        List<String> fileExtensions =\n            Arrays.asList(\"fdt\", \"fdx\", \"tim\", \"tip\", \"si\", \"fnm\", \"pos\", \"dii\", \"dim\", \"nvm\", \"nvd\", \"dvm\", \"dvd\");\n        Collections.shuffle(fileExtensions, random());\n        fileExtensions = fileExtensions.subList(0, 1 + random().nextInt(fileExtensions.size()));\n        fsdir = new FileSwitchDirectory(new HashSet<>(fileExtensions), fsdir, newFSDirectoryImpl(clazz, f, lf), true);\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":["90671118e7e92007dbc908dd155b24990f315e82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702","date":1578318221,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare, true);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(Path,LockFactory,boolean).mjava","sourceNew":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare, true);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","sourceOld":"  private static BaseDirectoryWrapper newFSDirectory(Path f, LockFactory lf, boolean bare) {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES); \n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = RandomPicks.randomFrom(random(), FS_DIRECTORIES);\n        clazz = CommandLineUtil.loadFSDirectoryClass(fsdirClass);\n      }\n\n      Directory fsdir = newFSDirectoryImpl(clazz, f, lf);\n      if (rarely()) {\n\n      }\n      BaseDirectoryWrapper wrapped = wrapDirectory(random(), fsdir, bare);\n      return wrapped;\n    } catch (Exception e) {\n      Rethrow.rethrow(e);\n      throw null; // dummy to prevent compiler failure\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8dffb29c521092508345dceee6c6491e07410c76":["90671118e7e92007dbc908dd155b24990f315e82"],"3903dde7d803465e019a1aaf678febe1c763ec27":["51f5280f31484820499077f41fcdfe92d527d9dc"],"90671118e7e92007dbc908dd155b24990f315e82":["add665d72d31f385b8eac973ca2d1d03d217a7c9"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f4abec28b874149a7223e32cc7a01704c27790de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702":["8dffb29c521092508345dceee6c6491e07410c76"],"4cbd49d01e70938f9b96aab93ccf87d92ef5e807":["285cdc737de75b7cc7c284a156b20214deb67bca"],"add665d72d31f385b8eac973ca2d1d03d217a7c9":["3903dde7d803465e019a1aaf678febe1c763ec27"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51f5280f31484820499077f41fcdfe92d527d9dc":["4cbd49d01e70938f9b96aab93ccf87d92ef5e807"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["8dffb29c521092508345dceee6c6491e07410c76","e7b7b37c556b53f91c7690ec4fc7f11a41f6b702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b7b37c556b53f91c7690ec4fc7f11a41f6b702"]},"commit2Childs":{"8dffb29c521092508345dceee6c6491e07410c76":["e7b7b37c556b53f91c7690ec4fc7f11a41f6b702","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"3903dde7d803465e019a1aaf678febe1c763ec27":["add665d72d31f385b8eac973ca2d1d03d217a7c9"],"90671118e7e92007dbc908dd155b24990f315e82":["8dffb29c521092508345dceee6c6491e07410c76"],"285cdc737de75b7cc7c284a156b20214deb67bca":["4cbd49d01e70938f9b96aab93ccf87d92ef5e807"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"e7b7b37c556b53f91c7690ec4fc7f11a41f6b702":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cbd49d01e70938f9b96aab93ccf87d92ef5e807":["51f5280f31484820499077f41fcdfe92d527d9dc"],"add665d72d31f385b8eac973ca2d1d03d217a7c9":["90671118e7e92007dbc908dd155b24990f315e82"],"f4abec28b874149a7223e32cc7a01704c27790de":["285cdc737de75b7cc7c284a156b20214deb67bca"],"51f5280f31484820499077f41fcdfe92d527d9dc":["3903dde7d803465e019a1aaf678febe1c763ec27"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}