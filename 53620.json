{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseFilter#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseFilter#next().mjava","sourceNew":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n            String text = nextToken.term();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return nextToken;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return nextToken;\n                }\n\n            }\n\n        }\n        return null;\n    }\n\n","sourceOld":"    public final Token next() throws java.io.IOException {\n\n        for (Token token = input.next(); token != null; token = input.next()) {\n            String text = token.termText();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return token;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return token;\n                }\n\n            }\n\n        }\n        return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/cn/ChineseFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/ChineseFilter#next(Token).mjava","sourceNew":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n            String text = nextToken.term();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return nextToken;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return nextToken;\n                }\n\n            }\n\n        }\n        return null;\n    }\n\n","sourceOld":"    public final Token next(final Token reusableToken) throws java.io.IOException {\n        assert reusableToken != null;\n\n        for (Token nextToken = input.next(reusableToken); nextToken != null; nextToken = input.next(reusableToken)) {\n            String text = nextToken.term();\n\n          // why not key off token type here assuming ChineseTokenizer comes first?\n            if (stopTable.get(text) == null) {\n                switch (Character.getType(text.charAt(0))) {\n\n                case Character.LOWERCASE_LETTER:\n                case Character.UPPERCASE_LETTER:\n\n                    // English word/token should larger than 1 character.\n                    if (text.length()>1) {\n                        return nextToken;\n                    }\n                    break;\n                case Character.OTHER_LETTER:\n\n                    // One Chinese character as one Chinese word.\n                    // Chinese word extraction to be added later here.\n\n                    return nextToken;\n                }\n\n            }\n\n        }\n        return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}