{"path":"src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Spans,Spans).mjava","commits":[{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Spans,Spans).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Object,Object).mjava","sourceNew":"    protected final boolean lessThan(Spans spans1, Spans spans2) {\n      if (spans1.doc() == spans2.doc()) {\n        if (spans1.start() == spans2.start()) {\n          return spans1.end() < spans2.end();\n        } else {\n          return spans1.start() < spans2.start();\n        }\n      } else {\n        return spans1.doc() < spans2.doc();\n      }\n    }\n\n","sourceOld":"    protected final boolean lessThan(Object o1, Object o2) {\n      Spans spans1 = (Spans)o1;\n      Spans spans2 = (Spans)o2;\n      if (spans1.doc() == spans2.doc()) {\n        if (spans1.start() == spans2.start()) {\n          return spans1.end() < spans2.end();\n        } else {\n          return spans1.start() < spans2.start();\n        }\n      } else {\n        return spans1.doc() < spans2.doc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Spans,Spans).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Spans,Spans).mjava","sourceNew":"    @Override\n    protected final boolean lessThan(Spans spans1, Spans spans2) {\n      if (spans1.doc() == spans2.doc()) {\n        if (spans1.start() == spans2.start()) {\n          return spans1.end() < spans2.end();\n        } else {\n          return spans1.start() < spans2.start();\n        }\n      } else {\n        return spans1.doc() < spans2.doc();\n      }\n    }\n\n","sourceOld":"    protected final boolean lessThan(Spans spans1, Spans spans2) {\n      if (spans1.doc() == spans2.doc()) {\n        if (spans1.start() == spans2.start()) {\n          return spans1.end() < spans2.end();\n        } else {\n          return spans1.start() < spans2.start();\n        }\n      } else {\n        return spans1.doc() < spans2.doc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Spans,Spans).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanOrQuery.SpanQueue#lessThan(Spans,Spans).mjava","sourceNew":"    @Override\n    protected final boolean lessThan(Spans spans1, Spans spans2) {\n      if (spans1.doc() == spans2.doc()) {\n        if (spans1.start() == spans2.start()) {\n          return spans1.end() < spans2.end();\n        } else {\n          return spans1.start() < spans2.start();\n        }\n      } else {\n        return spans1.doc() < spans2.doc();\n      }\n    }\n\n","sourceOld":"    @Override\n    protected final boolean lessThan(Spans spans1, Spans spans2) {\n      if (spans1.doc() == spans2.doc()) {\n        if (spans1.start() == spans2.start()) {\n          return spans1.end() < spans2.end();\n        } else {\n          return spans1.start() < spans2.start();\n        }\n      } else {\n        return spans1.doc() < spans2.doc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}