{"path":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","commits":[{"id":"f58d67a8f4d66d0872915c9bb14606874988efc3","date":1132166857,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","pathOld":"/dev/null","sourceNew":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        int i=0;\r\n        while ( i<subScorers.size() ) {\r\n            if ( ((Scorer) subScorers.get(i)).doc() < target ) {\r\n                if ( ((Scorer) subScorers.get(i)).skipTo(target) ) i++;\r\n                else subScorers.remove(i);\r\n            } else i++;\r\n        }\r\n        if ( i == 0 ) return false;\r\n        sortSubScorers();\r\n        return true;\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca9e1c07be7f899d56eb37b44a2e4ca252744a52","date":1134440386,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","sourceNew":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\r\n            if (((Scorer)subScorers.get(0)).skipTo(target))\r\n                heapAdjust(0);\r\n            else\r\n                heapRemoveRoot();\r\n        }\r\n        if ((subScorers.size()==0))\r\n            return (more = false);\r\n        return true;\r\n    }\r\n\n","sourceOld":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        int i=0;\r\n        while ( i<subScorers.size() ) {\r\n            if ( ((Scorer) subScorers.get(i)).doc() < target ) {\r\n                if ( ((Scorer) subScorers.get(i)).skipTo(target) ) i++;\r\n                else subScorers.remove(i);\r\n            } else i++;\r\n        }\r\n        if ( i == 0 ) return false;\r\n        sortSubScorers();\r\n        return true;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aabae793f43472efdf1dcdaae4e01e28cfc23ccd","date":1161750034,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","sourceNew":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        if (firstTime) {\r\n          if (!more) return false;\r\n          heapify();\r\n          firstTime = false;\r\n          return true;   // more would have been false if no subScorers had any docs\r\n        }\r\n\r\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\r\n            if (((Scorer)subScorers.get(0)).skipTo(target))\r\n                heapAdjust(0);\r\n            else\r\n                heapRemoveRoot();\r\n        }\r\n        if ((subScorers.size()==0))\r\n            return (more = false);\r\n        return true;\r\n    }\r\n\n","sourceOld":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\r\n            if (((Scorer)subScorers.get(0)).skipTo(target))\r\n                heapAdjust(0);\r\n            else\r\n                heapRemoveRoot();\r\n        }\r\n        if ((subScorers.size()==0))\r\n            return (more = false);\r\n        return true;\r\n    }\r\n\n","bugFix":null,"bugIntro":["e176989d7a276039fff52855ee93de9370e40ad5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e176989d7a276039fff52855ee93de9370e40ad5","date":1181182622,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","sourceNew":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        if (firstTime) {\r\n          if (!more) return false;\r\n          heapify();\r\n          firstTime = false;\r\n        }\r\n\r\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\r\n            if (((Scorer)subScorers.get(0)).skipTo(target))\r\n                heapAdjust(0);\r\n            else\r\n                heapRemoveRoot();\r\n        }\r\n        if ((subScorers.size()==0))\r\n            return (more = false);\r\n        return true;\r\n    }\r\n\n","sourceOld":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        if (firstTime) {\r\n          if (!more) return false;\r\n          heapify();\r\n          firstTime = false;\r\n          return true;   // more would have been false if no subScorers had any docs\r\n        }\r\n\r\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\r\n            if (((Scorer)subScorers.get(0)).skipTo(target))\r\n                heapAdjust(0);\r\n            else\r\n                heapRemoveRoot();\r\n        }\r\n        if ((subScorers.size()==0))\r\n            return (more = false);\r\n        return true;\r\n    }\r\n\n","bugFix":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","sourceNew":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\n     * @param target the minimum number of the next desired document\n     * @return true iff there is a document to be generated whose number is at least target\n     */\n    public boolean skipTo(int target) throws IOException {\n        if (firstTime) {\n          if (!more) return false;\n          heapify();\n          firstTime = false;\n        }\n\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\n            if (((Scorer)subScorers.get(0)).skipTo(target))\n                heapAdjust(0);\n            else\n                heapRemoveRoot();\n        }\n        if ((subScorers.size()==0))\n            return (more = false);\n        return true;\n    }\n\n","sourceOld":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\r\n     * @param target the minimum number of the next desired document\r\n     * @return true iff there is a document to be generated whose number is at least target\r\n     */\r\n    public boolean skipTo(int target) throws IOException {\r\n        if (firstTime) {\r\n          if (!more) return false;\r\n          heapify();\r\n          firstTime = false;\r\n        }\r\n\r\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\r\n            if (((Scorer)subScorers.get(0)).skipTo(target))\r\n                heapAdjust(0);\r\n            else\r\n                heapRemoveRoot();\r\n        }\r\n        if ((subScorers.size()==0))\r\n            return (more = false);\r\n        return true;\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a558487f2298c2c19ceca9103c1b6865d64708","date":1244393921,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","sourceNew":"  /**\n   * Advance to the first document beyond the current whose number is greater\n   * than or equal to target.\n   * \n   * @param target\n   *          the minimum number of the next desired document\n   * @return true iff there is a document to be generated whose number is at\n   *         least target\n   * @deprecated use {@link #advance(int)} instead.\n   */\n  public boolean skipTo(int target) throws IOException {\n    return advance(target) != NO_MORE_DOCS;\n  }\n\n","sourceOld":"    /** Advance to the first document beyond the current whose number is greater than or equal to target.\n     * @param target the minimum number of the next desired document\n     * @return true iff there is a document to be generated whose number is at least target\n     */\n    public boolean skipTo(int target) throws IOException {\n        if (firstTime) {\n          if (!more) return false;\n          heapify();\n          firstTime = false;\n        }\n\n        while (subScorers.size()>0 && ((Scorer)subScorers.get(0)).doc()<target) {\n            if (((Scorer)subScorers.get(0)).skipTo(target))\n                heapAdjust(0);\n            else\n                heapRemoveRoot();\n        }\n        if ((subScorers.size()==0))\n            return (more = false);\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438aef2dc00a23f2716882753fe225fbce4cfbfc","date":1255281460,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#skipTo(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Advance to the first document beyond the current whose number is greater\n   * than or equal to target.\n   * \n   * @param target\n   *          the minimum number of the next desired document\n   * @return true iff there is a document to be generated whose number is at\n   *         least target\n   * @deprecated use {@link #advance(int)} instead.\n   */\n  public boolean skipTo(int target) throws IOException {\n    return advance(target) != NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30a558487f2298c2c19ceca9103c1b6865d64708":["2123bddbd65dea198cac380540636ce43a880403"],"e176989d7a276039fff52855ee93de9370e40ad5":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["30a558487f2298c2c19ceca9103c1b6865d64708"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["e176989d7a276039fff52855ee93de9370e40ad5"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["438aef2dc00a23f2716882753fe225fbce4cfbfc"]},"commit2Childs":{"30a558487f2298c2c19ceca9103c1b6865d64708":["438aef2dc00a23f2716882753fe225fbce4cfbfc"],"e176989d7a276039fff52855ee93de9370e40ad5":["2123bddbd65dea198cac380540636ce43a880403"],"f58d67a8f4d66d0872915c9bb14606874988efc3":["ca9e1c07be7f899d56eb37b44a2e4ca252744a52"],"438aef2dc00a23f2716882753fe225fbce4cfbfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f58d67a8f4d66d0872915c9bb14606874988efc3"],"ca9e1c07be7f899d56eb37b44a2e4ca252744a52":["aabae793f43472efdf1dcdaae4e01e28cfc23ccd"],"2123bddbd65dea198cac380540636ce43a880403":["30a558487f2298c2c19ceca9103c1b6865d64708"],"aabae793f43472efdf1dcdaae4e01e28cfc23ccd":["e176989d7a276039fff52855ee93de9370e40ad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}