{"path":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","commits":[{"id":"a48e06ad71e6dcb230e678c6304facd688202735","date":1280070785,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testPhrase() {\r\n    // should generate a phrase of \"now cow\" and match only one doc\r\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='1']\"\r\n    );\r\n    // should generate a query of (now OR cow) and match both docs\r\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='2']\"\r\n    );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testPhrase() {\r\n    // should generate a phrase of \"now cow\" and match only one doc\r\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='1']\"\r\n    );\r\n    // should generate a query of (now OR cow) and match both docs\r\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='2']\"\r\n    );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\r\n  public void testPhrase() {\r\n    // should generate a phrase of \"now cow\" and match only one doc\r\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='1']\"\r\n    );\r\n    // should generate a query of (now OR cow) and match both docs\r\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='2']\"\r\n    );\r\n  }\r\n\n","bugFix":null,"bugIntro":["7d959d418bddfa46d8eea54f0d8b855165586838","7d959d418bddfa46d8eea54f0d8b855165586838","7d959d418bddfa46d8eea54f0d8b855165586838"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\r\n  public void testPhrase() {\r\n    // should generate a phrase of \"now cow\" and match only one doc\r\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='1']\"\r\n    );\r\n    // should generate a query of (now OR cow) and match both docs\r\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\r\n        ,\"//*[@numFound='2']\"\r\n    );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestSolrQueryParser#testPhrase().mjava","sourceNew":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testPhrase() {\n    // should generate a phrase of \"now cow\" and match only one doc\n    assertQ(req(\"q\",\"text:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='1']\"\n    );\n    // should generate a query of (now OR cow) and match both docs\n    assertQ(req(\"q\",\"text_np:now-cow\", \"indent\",\"true\")\n        ,\"//*[@numFound='2']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["a48e06ad71e6dcb230e678c6304facd688202735"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a48e06ad71e6dcb230e678c6304facd688202735"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"c26f00b574427b55127e869b935845554afde1fa":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a48e06ad71e6dcb230e678c6304facd688202735":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a48e06ad71e6dcb230e678c6304facd688202735":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","3242a09f703274d3b9283f2064a1a33064b53a1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","a48e06ad71e6dcb230e678c6304facd688202735"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}