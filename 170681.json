{"path":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean,LockFactory).mjava","commits":[{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean,LockFactory).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the directory instance for the named location, using the\n   * provided LockFactory implementation.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @param lockFactory instance of  {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create,\n                                         LockFactory lockFactory)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, create, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n\n        if (create) {\n          dir.create();\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean,LockFactory).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean,LockFactory).mjava","sourceNew":"  public static FSDirectory getDirectory(File file, boolean create,\n                                         LockFactory lockFactory)\n    throws IOException\n  {\n    return getDirectory(file, create, lockFactory, true);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location, using the\n   * provided LockFactory implementation.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param file the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @param lockFactory instance of  {@link LockFactory} providing the\n   *        locking implementation.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(File file, boolean create,\n                                         LockFactory lockFactory)\n    throws IOException {\n    file = new File(file.getCanonicalPath());\n    FSDirectory dir;\n    synchronized (DIRECTORIES) {\n      dir = (FSDirectory)DIRECTORIES.get(file);\n      if (dir == null) {\n        try {\n          dir = (FSDirectory)IMPL.newInstance();\n        } catch (Exception e) {\n          throw new RuntimeException(\"cannot load FSDirectory class: \" + e.toString(), e);\n        }\n        dir.init(file, create, lockFactory);\n        DIRECTORIES.put(file, dir);\n      } else {\n\n        // Catch the case where a Directory is pulled from the cache, but has a\n        // different LockFactory instance.\n        if (lockFactory != null && lockFactory != dir.getLockFactory()) {\n          throw new IOException(\"Directory was previously created with a different LockFactory instance; please pass null as the lockFactory instance and use setLockFactory to change it\");\n        }\n\n        if (create) {\n          dir.create();\n        }\n      }\n    }\n    synchronized (dir) {\n      dir.refCount++;\n    }\n    return dir;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(File,boolean,LockFactory).mjava","sourceNew":null,"sourceOld":"  public static FSDirectory getDirectory(File file, boolean create,\n                                         LockFactory lockFactory)\n    throws IOException\n  {\n    return getDirectory(file, create, lockFactory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66b12ba4967665216eeb706b58d424c51fb3641a":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66b12ba4967665216eeb706b58d424c51fb3641a"]},"commit2Childs":{"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"66b12ba4967665216eeb706b58d424c51fb3641a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}