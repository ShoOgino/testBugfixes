{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JoinStream#loadEqualTupleGroup(PushBackStream,LinkedList[Tuple],StreamComparator).mjava","commits":[{"id":"333d804f5abfaf34c57493306a4cb2e01e55662d","date":1447206304,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JoinStream#loadEqualTupleGroup(PushBackStream,LinkedList[Tuple],StreamComparator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given the stream, start from beginning and load group with all tuples that are equal to the first in stream\n   * (including the first one in the stream). All matched tuples are removed from the stream. Result is at least one\n   * tuple will be read from the stream and 0 or more tuples will exist in the group. If the first tuple is EOF then the\n   * group will have 0 items. Else it will have at least one item. The first group member is returned.\n   * \n   * @param group\n   *          - should be empty\n   */\n  protected Tuple loadEqualTupleGroup(PushBackStream stream, LinkedList<Tuple> group, StreamComparator groupComparator)\n      throws IOException {\n    // Find next set of same tuples from the stream\n    Tuple firstMember = stream.read();\n    \n    if (!firstMember.EOF) {\n      // first in group, implicitly a member\n      group.add(firstMember);\n      \n      BREAKPOINT: while (true) {\n        Tuple nMember = stream.read();\n        if (!nMember.EOF && 0 == groupComparator.compare(firstMember, nMember)) {\n          // they are in same group\n          group.add(nMember);\n        } else {\n          stream.pushBack(nMember);\n          break BREAKPOINT;\n        }\n      }\n    }\n    \n    return firstMember;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["333d804f5abfaf34c57493306a4cb2e01e55662d"]},"commit2Childs":{"333d804f5abfaf34c57493306a4cb2e01e55662d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["333d804f5abfaf34c57493306a4cb2e01e55662d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}