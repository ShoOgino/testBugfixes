{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8bb0f45246d2d999b5b8b9136efd068fcece5c4","date":1308601169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits skipDocs, DocsAndPositionsEnum reuse) {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, skipDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c3cbbfae0960dc46f1483c96fbfb5ed938773bb","date":1310269216,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.omitTermFreqAndPositions, field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.omitTermFreqAndPositions, field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.omitTermFreqAndPositions) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#docsAndPositions(Bits,DocsAndPositionsEnum).mjava","sourceNew":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","sourceOld":"    @Override\n    public DocsAndPositionsEnum docsAndPositions(Bits liveDocs, DocsAndPositionsEnum reuse) throws IOException {\n      if (field.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        return null;\n      }\n      decodeMetaData();\n      FSTDocsAndPositionsEnum docsAndPositionsEnum;\n      if (reuse == null || !(reuse instanceof FSTDocsAndPositionsEnum)) {\n        docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n      } else {\n        docsAndPositionsEnum = (FSTDocsAndPositionsEnum) reuse;        \n        if (!docsAndPositionsEnum.canReuse(field.storePayloads)) {\n          docsAndPositionsEnum = new FSTDocsAndPositionsEnum(field.storePayloads);\n        }\n      }\n      if (VERBOSE) System.out.println(\"D&P reset this=\" + this);\n      return docsAndPositionsEnum.reset(current.output, liveDocs, docFreq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["9c3cbbfae0960dc46f1483c96fbfb5ed938773bb"],"7b91922b55d15444d554721b352861d028eb8278":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"c8bb0f45246d2d999b5b8b9136efd068fcece5c4":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9c3cbbfae0960dc46f1483c96fbfb5ed938773bb":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","9c3cbbfae0960dc46f1483c96fbfb5ed938773bb","817d8435e9135b756f08ce6710ab0baac51bdf88"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"c8bb0f45246d2d999b5b8b9136efd068fcece5c4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9c3cbbfae0960dc46f1483c96fbfb5ed938773bb":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c8bb0f45246d2d999b5b8b9136efd068fcece5c4","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}