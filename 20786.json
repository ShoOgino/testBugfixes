{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","commits":[{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","sourceNew":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public long cost() {\n            return size;\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","sourceNew":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public long cost() {\n            return size;\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public long cost() {\n            return size;\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/MatchingDocsAsScoredDocIDs#getDocIDs().mjava","sourceNew":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public long cost() {\n            return size;\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocIdSet getDocIDs() {\n    return new DocIdSet() {\n      \n      final Iterator<MatchingDocs> mdIter = matchingDocs.iterator();\n      int doc = 0;\n      MatchingDocs current;\n      int currentLength;\n      boolean done = false;\n      \n      @Override\n      public DocIdSetIterator iterator() throws IOException {\n        return new DocIdSetIterator() {\n          \n          @Override\n          public int nextDoc() throws IOException {\n            if (done) {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n            \n            while (current == null) {\n              if (!mdIter.hasNext()) {\n                done = true;\n                return DocIdSetIterator.NO_MORE_DOCS;\n              }\n              current = mdIter.next();\n              currentLength = current.bits.length();\n              doc = 0;\n              \n              if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n                current = null;\n              } else {\n                doc = -1; // we're calling nextSetBit later on\n              }\n            }\n            \n            ++doc;\n            if (doc >= currentLength || (doc = current.bits.nextSetBit(doc)) == -1) {\n              current = null;\n              return nextDoc();\n            }\n            \n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public int docID() {\n            return doc + current.context.docBase;\n          }\n          \n          @Override\n          public long cost() {\n            return size;\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            throw new UnsupportedOperationException(\"not supported\");\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}