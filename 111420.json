{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory(random);\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory(random);\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":["527cc14542789f47d75da436cb4287d1ab887e34"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","date":1290247889,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // try to keep open file count down:\n    LogMergePolicy lmp = (LogMergePolicy) mainWriter.getMergePolicy();\n    if (lmp.getMergeFactor() > 5) {\n      lmp.setMergeFactor(5);\n    }\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35fccc6fabc57267490c7aef14b9e52c67feef82","date":1290263266,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    // try to keep open file count down:\n    LogMergePolicy lmp = (LogMergePolicy) mainWriter.getMergePolicy();\n    if (lmp.getMergeFactor() > 5) {\n      lmp.setMergeFactor(5);\n    }\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a37d7952ff54064a735708748444570f9963683e","date":1309331473,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.NUM_THREADS\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    mainWriter.setInfoStream(infoStream);\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir, true);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader#testAddIndexesAndDoDeletesThreads().mjava","sourceNew":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testAddIndexesAndDoDeletesThreads() throws Throwable {\n    final int numIter = 2;\n    int numDirs = 3;\n    \n    Directory mainDir = newDirectory();\n    IndexWriter mainWriter = new IndexWriter(mainDir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(mainWriter);\n\n    AddDirectoriesThreads addDirThreads = new AddDirectoriesThreads(numIter, mainWriter);\n    addDirThreads.launchThreads(numDirs);\n    addDirThreads.joinThreads();\n    \n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, addDirThreads.mainWriter.numDocs());\n    assertEquals(addDirThreads.count.intValue(), addDirThreads.mainWriter.numDocs());\n\n    addDirThreads.close(true);\n    \n    assertTrue(addDirThreads.failures.size() == 0);\n\n    _TestUtil.checkIndex(mainDir);\n\n    IndexReader reader = IndexReader.open(mainDir);\n    assertEquals(addDirThreads.count.intValue(), reader.numDocs());\n    //assertEquals(100 + numDirs * (3 * numIter / 4) * addDirThreads.numThreads\n    //    * addDirThreads.NUM_INIT_DOCS, reader.numDocs());\n    reader.close();\n\n    addDirThreads.closeDir();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["06584e6e98d592b34e1329b384182f368d2025e8","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["06584e6e98d592b34e1329b384182f368d2025e8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","35fccc6fabc57267490c7aef14b9e52c67feef82"],"c19f985e36a65cc969e8e564fe337a0d41512075":["35fccc6fabc57267490c7aef14b9e52c67feef82"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a37d7952ff54064a735708748444570f9963683e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"06584e6e98d592b34e1329b384182f368d2025e8":["a37d7952ff54064a735708748444570f9963683e"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a37d7952ff54064a735708748444570f9963683e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","a37d7952ff54064a735708748444570f9963683e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["06584e6e98d592b34e1329b384182f368d2025e8","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"35fccc6fabc57267490c7aef14b9e52c67feef82":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","35fccc6fabc57267490c7aef14b9e52c67feef82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5":["35fccc6fabc57267490c7aef14b9e52c67feef82"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a37d7952ff54064a735708748444570f9963683e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["8cac9bbcf5acbef2d0d83f6e9e32a22d71301db5","3bb13258feba31ab676502787ab2e1779f129b7a"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a37d7952ff54064a735708748444570f9963683e":["06584e6e98d592b34e1329b384182f368d2025e8","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"06584e6e98d592b34e1329b384182f368d2025e8":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"35fccc6fabc57267490c7aef14b9e52c67feef82":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}