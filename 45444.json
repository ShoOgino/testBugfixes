{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e04cd57d69cd012c394228709e3ebd001ed9cde5","date":1271710130,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.array = clonedTermAtt.buffer();\n    charIterator.offset = 0;\n    charIterator.count = clonedTermAtt.length();\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (thaiState != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        restoreState(thaiState);\n        termAtt.setTermBuffer(termAtt.termBuffer(), start, end - start);\n        offsetAtt.setOffset(offsetAtt.startOffset() + start, offsetAtt.startOffset() + end);\n        return true;\n      }\n      thaiState = null;\n    }\n\n    if (input.incrementToken() == false || termAtt.termLength() == 0)\n      return false;\n\n    String text = termAtt.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      termAtt.setTermBuffer(text.toLowerCase());\n      return true;\n    }\n    \n    thaiState = captureState();\n\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setTermBuffer(text, 0, end);\n      offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset() + end);\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["3873cfa0d4054c121a5f727f84dba2cffd567167"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.array = clonedTermAtt.buffer();\n    charIterator.offset = 0;\n    charIterator.count = clonedTermAtt.length();\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (hasMoreTokensInClone) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        clonedToken.copyTo(this);\n        termAtt.copyBuffer(clonedTermAtt.buffer(), start, end - start);\n        offsetAtt.setOffset(clonedOffsetAtt.startOffset() + start, clonedOffsetAtt.startOffset() + end);\n        if (handlePosIncr) posAtt.setPositionIncrement(1);\n        return true;\n      }\n      hasMoreTokensInClone = false;\n    }\n\n    if (!input.incrementToken()) {\n      return false;\n    }\n    \n    if (termAtt.length() == 0 || UnicodeBlock.of(termAtt.charAt(0)) != UnicodeBlock.THAI) {\n      return true;\n    }\n    \n    hasMoreTokensInClone = true;\n\n    // we lazy init the cloned token, as in ctor not all attributes may be added\n    if (clonedToken == null) {\n      clonedToken = cloneAttributes();\n      clonedTermAtt = clonedToken.getAttribute(CharTermAttribute.class);\n      clonedOffsetAtt = clonedToken.getAttribute(OffsetAttribute.class);\n    } else {\n      this.copyTo(clonedToken);\n    }\n    \n    // reinit CharacterIterator\n    charIterator.array = clonedTermAtt.buffer();\n    charIterator.offset = 0;\n    charIterator.count = clonedTermAtt.length();\n    breaker.setText(charIterator);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      termAtt.setLength(end);\n      offsetAtt.setOffset(clonedOffsetAtt.startOffset(), clonedOffsetAtt.startOffset() + end);\n      // position increment keeps as it is for first token\n      return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["e04cd57d69cd012c394228709e3ebd001ed9cde5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"e04cd57d69cd012c394228709e3ebd001ed9cde5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e04cd57d69cd012c394228709e3ebd001ed9cde5":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e04cd57d69cd012c394228709e3ebd001ed9cde5"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}