{"path":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#writeUTF16toUTF8(CharSequence,int,int,OutputStream,byte[]).mjava","commits":[{"id":"22d9fc178be3022bbd023370506ccb3b2fded03d","date":1441309358,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#writeUTF16toUTF8(CharSequence,int,int,OutputStream,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Writes UTF8 into the given OutputStream by first writing to the given scratch array\n   * and then writing the contents of the scratch array to the OutputStream. The given scratch byte array\n   * is used to buffer intermediate data before it is written to the byte buffer.\n   *\n   * @return the number of bytes written\n   */\n  public static int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch) throws IOException {\n    final int end = offset + len;\n\n    int upto = 0, totalBytes = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (upto > scratch.length - 4)  {\n        // a code point may take upto 4 bytes and we don't have enough space, so reset\n        totalBytes += upto;\n        fos.write(scratch, 0, upto);\n        upto = 0;\n      }\n\n      if (code < 0x80)\n        scratch[upto++] = (byte) code;\n      else if (code < 0x800) {\n        scratch[upto++] = (byte) (0xC0 | (code >> 6));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        scratch[upto++] = (byte)(0xE0 | (code >> 12));\n        scratch[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            scratch[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        scratch[upto++] = (byte) 0xEF;\n        scratch[upto++] = (byte) 0xBF;\n        scratch[upto++] = (byte) 0xBD;\n      }\n    }\n\n    totalBytes += upto;\n    fos.write(scratch, 0, upto);\n\n    return totalBytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"331d25a12dcfcbfb714cb2ab26ffe42d092504fe","date":1441313842,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#writeUTF16toUTF8(CharSequence,int,int,OutputStream,byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#writeUTF16toUTF8(CharSequence,int,int,OutputStream,byte[]).mjava","sourceNew":"  /** Writes UTF8 into the given OutputStream by first writing to the given scratch array\n   * and then writing the contents of the scratch array to the OutputStream. The given scratch byte array\n   * is used to buffer intermediate data before it is written to the output stream.\n   *\n   * @return the number of bytes written\n   */\n  public static int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch) throws IOException {\n    final int end = offset + len;\n\n    int upto = 0, totalBytes = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (upto > scratch.length - 4)  {\n        // a code point may take upto 4 bytes and we don't have enough space, so reset\n        totalBytes += upto;\n        fos.write(scratch, 0, upto);\n        upto = 0;\n      }\n\n      if (code < 0x80)\n        scratch[upto++] = (byte) code;\n      else if (code < 0x800) {\n        scratch[upto++] = (byte) (0xC0 | (code >> 6));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        scratch[upto++] = (byte)(0xE0 | (code >> 12));\n        scratch[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            scratch[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        scratch[upto++] = (byte) 0xEF;\n        scratch[upto++] = (byte) 0xBF;\n        scratch[upto++] = (byte) 0xBD;\n      }\n    }\n\n    totalBytes += upto;\n    fos.write(scratch, 0, upto);\n\n    return totalBytes;\n  }\n\n","sourceOld":"  /** Writes UTF8 into the given OutputStream by first writing to the given scratch array\n   * and then writing the contents of the scratch array to the OutputStream. The given scratch byte array\n   * is used to buffer intermediate data before it is written to the byte buffer.\n   *\n   * @return the number of bytes written\n   */\n  public static int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch) throws IOException {\n    final int end = offset + len;\n\n    int upto = 0, totalBytes = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (upto > scratch.length - 4)  {\n        // a code point may take upto 4 bytes and we don't have enough space, so reset\n        totalBytes += upto;\n        fos.write(scratch, 0, upto);\n        upto = 0;\n      }\n\n      if (code < 0x80)\n        scratch[upto++] = (byte) code;\n      else if (code < 0x800) {\n        scratch[upto++] = (byte) (0xC0 | (code >> 6));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        scratch[upto++] = (byte)(0xE0 | (code >> 12));\n        scratch[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            scratch[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        scratch[upto++] = (byte) 0xEF;\n        scratch[upto++] = (byte) 0xBF;\n        scratch[upto++] = (byte) 0xBD;\n      }\n    }\n\n    totalBytes += upto;\n    fos.write(scratch, 0, upto);\n\n    return totalBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#writeUTF16toUTF8(CharSequence,int,int,OutputStream,byte[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/ByteUtils#writeUTF16toUTF8(CharSequence,int,int,OutputStream,byte[]).mjava","sourceNew":"  /** Writes UTF8 into the given OutputStream by first writing to the given scratch array\n   * and then writing the contents of the scratch array to the OutputStream. The given scratch byte array\n   * is used to buffer intermediate data before it is written to the output stream.\n   *\n   * @return the number of bytes written\n   */\n  public static int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch) throws IOException {\n    final int end = offset + len;\n\n    int upto = 0, totalBytes = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (upto > scratch.length - 4)  {\n        // a code point may take upto 4 bytes and we don't have enough space, so reset\n        totalBytes += upto;\n        if(fos == null) throw new IOException(\"buffer over flow\");\n        fos.write(scratch, 0, upto);\n        upto = 0;\n      }\n\n      if (code < 0x80)\n        scratch[upto++] = (byte) code;\n      else if (code < 0x800) {\n        scratch[upto++] = (byte) (0xC0 | (code >> 6));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        scratch[upto++] = (byte)(0xE0 | (code >> 12));\n        scratch[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            scratch[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        scratch[upto++] = (byte) 0xEF;\n        scratch[upto++] = (byte) 0xBF;\n        scratch[upto++] = (byte) 0xBD;\n      }\n    }\n\n    totalBytes += upto;\n    if(fos != null) fos.write(scratch, 0, upto);\n\n    return totalBytes;\n  }\n\n","sourceOld":"  /** Writes UTF8 into the given OutputStream by first writing to the given scratch array\n   * and then writing the contents of the scratch array to the OutputStream. The given scratch byte array\n   * is used to buffer intermediate data before it is written to the output stream.\n   *\n   * @return the number of bytes written\n   */\n  public static int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch) throws IOException {\n    final int end = offset + len;\n\n    int upto = 0, totalBytes = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (upto > scratch.length - 4)  {\n        // a code point may take upto 4 bytes and we don't have enough space, so reset\n        totalBytes += upto;\n        fos.write(scratch, 0, upto);\n        upto = 0;\n      }\n\n      if (code < 0x80)\n        scratch[upto++] = (byte) code;\n      else if (code < 0x800) {\n        scratch[upto++] = (byte) (0xC0 | (code >> 6));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        scratch[upto++] = (byte)(0xE0 | (code >> 12));\n        scratch[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        scratch[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) {\n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            scratch[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            scratch[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        scratch[upto++] = (byte) 0xEF;\n        scratch[upto++] = (byte) 0xBF;\n        scratch[upto++] = (byte) 0xBD;\n      }\n    }\n\n    totalBytes += upto;\n    fos.write(scratch, 0, upto);\n\n    return totalBytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"331d25a12dcfcbfb714cb2ab26ffe42d092504fe":["22d9fc178be3022bbd023370506ccb3b2fded03d"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["331d25a12dcfcbfb714cb2ab26ffe42d092504fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d9fc178be3022bbd023370506ccb3b2fded03d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"]},"commit2Childs":{"331d25a12dcfcbfb714cb2ab26ffe42d092504fe":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d9fc178be3022bbd023370506ccb3b2fded03d"],"22d9fc178be3022bbd023370506ccb3b2fded03d":["331d25a12dcfcbfb714cb2ab26ffe42d092504fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}