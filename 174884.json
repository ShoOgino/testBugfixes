{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      j += nextToken.getPositionIncrement();\n      String termText = nextToken.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      j += nextToken.getPositionIncrement();\n      String termText = nextToken.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    final Token reusableToken = new Token();\n    for (Token nextToken = ts.next(reusableToken); nextToken != null; nextToken = ts.next(reusableToken)) {\n      j += nextToken.getPositionIncrement();\n      String termText = nextToken.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = (TermAttribute) ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    Hits hits = searcher.search(q);\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(Version.LUCENE_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapperTest#testShingleAnalyzerWrapperPhraseQuery().mjava","sourceNew":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","sourceOld":"  /*\n   * This shows how to construct a phrase query containing shingles.\n   */\n  public void testShingleAnalyzerWrapperPhraseQuery() throws Exception {\n    Analyzer analyzer = new ShingleAnalyzerWrapper(new WhitespaceAnalyzer(TEST_VERSION_CURRENT), 2);\n    searcher = setUpSearcher(analyzer);\n\n    PhraseQuery q = new PhraseQuery();\n\n    TokenStream ts = analyzer.tokenStream(\"content\",\n                                          new StringReader(\"this sentence\"));\n    int j = -1;\n    \n    PositionIncrementAttribute posIncrAtt = ts.addAttribute(PositionIncrementAttribute.class);\n    TermAttribute termAtt = ts.addAttribute(TermAttribute.class);\n    \n    while (ts.incrementToken()) {\n      j += posIncrAtt.getPositionIncrement();\n      String termText = termAtt.term();\n      q.add(new Term(\"content\", termText), j);\n    }\n\n    ScoreDoc[] hits = searcher.search(q, null, 1000).scoreDocs;\n    int[] ranks = new int[] { 0 };\n    compareRanks(hits, ranks);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}