{"path":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","commits":[{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      } finally {\n        req.close();\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      } finally {\n        req.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","sourceNew":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      try (SolrQueryRequest req = req(common)){\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      try (SolrQueryRequest req = req(common)) {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      } finally {\n        req.close();\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      } finally {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","sourceNew":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      try (SolrQueryRequest req = req(common)){\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      try (SolrQueryRequest req = req(common)) {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      } finally {\n        req.close();\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      } finally {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest#testStatsFieldWhitebox().mjava","sourceNew":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      try (SolrQueryRequest req = req(common)){\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      try (SolrQueryRequest req = req(common)) {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Whitebox test of {@link StatsField} parsing to ensure expected equivilence \n   * operations hold up\n   */\n  public void testStatsFieldWhitebox() throws Exception {\n    StatsComponent component = new StatsComponent();\n    List<SearchComponent> components = new ArrayList<>(1);\n    components.add(component);\n    SolrParams common = params(\"stats\", \"true\", \"q\", \"*:*\", \"nested\",\"foo_t:cow\");\n\n    // all of these should produce the same SchemaField based StatsField\n    for (String param : new String[] { \n        \"foo_i\", \"{!func}field(\\\"foo_i\\\")\", \"{!lucene}_val_:\\\"field(foo_i)\\\"\"\n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"value source of: \" + param, sf.getValueSource());\n        assertNotNull(\"schema field of: \" + param, sf.getSchemaField());\n\n        assertEquals(\"field name of: \" + param,\n                     \"foo_i\", sf.getSchemaField().getName());\n      } finally {\n        req.close();\n      }\n    }\n\n    // all of these should produce the same QueryValueSource based StatsField\n    for (String param : new String[] { \n        \"{!lucene}foo_t:cow\", \"{!func}query($nested)\", \"{!field f=foo_t}cow\", \n      }) {\n      SolrQueryRequest req = req(common);\n      try {\n        ResponseBuilder rb = new ResponseBuilder(req, new SolrQueryResponse(), components);\n        \n        StatsField sf = new StatsField(rb, param);\n        \n        assertNull(\"schema field of: \" + param, sf.getSchemaField());\n        assertNotNull(\"value source of: \" + param, sf.getValueSource());\n        assertTrue(sf.getValueSource().getClass() + \" is vs type of: \" + param,\n                   sf.getValueSource() instanceof QueryValueSource);\n        QueryValueSource qvs = (QueryValueSource) sf.getValueSource();\n        assertEquals(\"query of :\" + param,\n                     new TermQuery(new Term(\"foo_t\",\"cow\")),\n                     qvs.getQuery());\n      } finally {\n        req.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["283ff02f401ec3e7a2fad73643970f052383fb0c","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["283ff02f401ec3e7a2fad73643970f052383fb0c","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}