{"path":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","commits":[{"id":"71130cfca9e17db547b4f78cce4b0ad0af72f638","date":1362280541,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","pathOld":"/dev/null","sourceNew":"  private void getServers() throws Exception {\n    jetty.start();\n    url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr/\";\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","sourceNew":"  private void getServers() throws Exception {\n    jetty.start();\n    url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr/\";\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","sourceOld":"  private void getServers() throws Exception {\n    jetty.start();\n    url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr/\";\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","sourceNew":"  private void getServers() throws Exception {\n    jetty.start();\n    url = \"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + jetty.getLocalPort() + \"/solr/\";\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","sourceOld":"  private void getServers() throws Exception {\n    jetty.start();\n    url = \"http://127.0.0.1:\" + jetty.getLocalPort() + \"/solr/\";\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ec897f0eb789ef9536a8130d1cdb9337ef108a","date":1392217884,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","sourceNew":"  private void getServers() throws Exception {\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","sourceOld":"  private void getServers() throws Exception {\n    jetty.start();\n    url = \"http\" + (isSSLMode() ? \"s\" : \"\") + \"://127.0.0.1:\" + jetty.getLocalPort() + \"/solr/\";\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#buildClients().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/OpenCloseCoreStressTest#getServers().mjava","sourceNew":"  private void buildClients() throws Exception {\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(60000);\n      indexingClients.add(client);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrClient client = new HttpSolrClient(url);\n      client.setDefaultMaxConnectionsPerHost(25);\n      client.setConnectionTimeout(30000);\n      client.setSoTimeout(30000);\n      queryingClients.add(client);\n    }\n\n  }\n\n","sourceOld":"  private void getServers() throws Exception {\n    jetty.start();\n    url = buildUrl(jetty.getLocalPort(), \"/solr/\");\n\n    // Mostly to keep annoying logging messages from being sent out all the time.\n\n    for (int idx = 0; idx < indexingThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(60000);\n      indexingServers.add(server);\n    }\n    for (int idx = 0; idx < queryThreads; ++idx) {\n      HttpSolrServer server = new HttpSolrServer(url);\n      server.setDefaultMaxConnectionsPerHost(25);\n      server.setConnectionTimeout(30000);\n      server.setSoTimeout(30000);\n      queryServers.add(server);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"bafca15d8e408346a67f4282ad1143b88023893b":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["81ec897f0eb789ef9536a8130d1cdb9337ef108a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71130cfca9e17db547b4f78cce4b0ad0af72f638"],"71130cfca9e17db547b4f78cce4b0ad0af72f638":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"81ec897f0eb789ef9536a8130d1cdb9337ef108a":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}