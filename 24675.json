{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields,NormsProducer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields,NormsProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields).mjava","sourceNew":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","sourceOld":"    @Override\n    public void write(Fields fields) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.MemoryFieldsConsumer#write(Fields,NormsProducer).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void write(Fields fields, NormsProducer norms) throws IOException {\n      for(String field : fields) {\n\n        Terms terms = fields.terms(field);\n        if (terms == null) {\n          continue;\n        }\n\n        TermsEnum termsEnum = terms.iterator();\n\n        FieldInfo fieldInfo = state.fieldInfos.fieldInfo(field);\n        TermsWriter termsWriter = new TermsWriter(out, fieldInfo);\n\n        FixedBitSet docsSeen = new FixedBitSet(state.segmentInfo.maxDoc());\n        long sumTotalTermFreq = 0;\n        long sumDocFreq = 0;\n        PostingsEnum postingsEnum = null;\n        PostingsEnum posEnum = null;\n        int enumFlags;\n\n        IndexOptions indexOptions = fieldInfo.getIndexOptions();\n        boolean writeFreqs = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n        boolean writePositions = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;\n        boolean writeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n        boolean writePayloads = fieldInfo.hasPayloads();\n\n        if (writeFreqs == false) {\n          enumFlags = 0;\n        } else if (writePositions == false) {\n          enumFlags = PostingsEnum.FREQS;\n        } else if (writeOffsets == false) {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS;\n          }\n          else {\n            enumFlags = PostingsEnum.POSITIONS;\n          }\n        } else {\n          if (writePayloads) {\n            enumFlags = PostingsEnum.PAYLOADS | PostingsEnum.OFFSETS;\n          } else {\n            enumFlags = PostingsEnum.OFFSETS;\n          }\n        }\n\n        while (true) {\n          BytesRef term = termsEnum.next();\n          if (term == null) {\n            break;\n          }\n          termsWriter.postingsWriter.reset();\n\n          if (writePositions) {\n            posEnum = termsEnum.postings(posEnum, enumFlags);\n            postingsEnum = posEnum;\n          } else {\n            postingsEnum = termsEnum.postings(postingsEnum, enumFlags);\n            posEnum = null;\n          }\n\n          int docFreq = 0;\n          long totalTermFreq = 0;\n          while (true) {\n            int docID = postingsEnum.nextDoc();\n            if (docID == PostingsEnum.NO_MORE_DOCS) {\n              break;\n            }\n            docsSeen.set(docID);\n            docFreq++;\n\n            int freq;\n            if (writeFreqs) {\n              freq = postingsEnum.freq();\n              totalTermFreq += freq;\n            } else {\n              freq = -1;\n            }\n\n            termsWriter.postingsWriter.startDoc(docID, freq);\n            if (writePositions) {\n              for (int i=0;i<freq;i++) {\n                int pos = posEnum.nextPosition();\n                BytesRef payload = writePayloads ? posEnum.getPayload() : null;\n                int startOffset;\n                int endOffset;\n                if (writeOffsets) {\n                  startOffset = posEnum.startOffset();\n                  endOffset = posEnum.endOffset();\n                } else {\n                  startOffset = -1;\n                  endOffset = -1;\n                }\n                termsWriter.postingsWriter.addPosition(pos, payload, startOffset, endOffset);\n              }\n            }\n          }\n          termsWriter.finishTerm(term, new TermStats(docFreq, totalTermFreq));\n          sumDocFreq += docFreq;\n          sumTotalTermFreq += totalTermFreq;\n        }\n\n        termsWriter.finish(sumTotalTermFreq, sumDocFreq, docsSeen.cardinality());\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24f89e8a6aac05753cde4c83d62a74356098200d":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["24f89e8a6aac05753cde4c83d62a74356098200d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}