{"path":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getCloudState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getCloudState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getCloudState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getCloudState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,String> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    ZkNodeProps props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getShardProps(collection,  ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"513a0d1afdd0a58de1fc3a87654e66fb6694d02a","date":1355808434,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getReplicaProps(ZkController,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":"  private Map<String,Object> getReplicaProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica replica = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(replica!=null) {\n      return replica.getProperties();\n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","sourceOld":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/SolrLogFormatter#getCoreProps(ZkController,SolrCore).mjava","sourceNew":null,"sourceOld":"  private Map<String,Object> getCoreProps(ZkController zkController, SolrCore core) {\n    final String collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    Replica props = zkController.getClusterState().getReplica(collection, ZkStateReader.getCoreNodeName(zkController.getNodeName(), core.getName()));\n    if(props!=null) {\n      return props.getProperties(); \n    }\n    return Collections.EMPTY_MAP;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"fa64435b5902ce266c23755a4a00691a3285dab8":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"c5a558d54519c651068ddb202f03befefb1514a7":["fa64435b5902ce266c23755a4a00691a3285dab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["fa64435b5902ce266c23755a4a00691a3285dab8","c5a558d54519c651068ddb202f03befefb1514a7"],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"513a0d1afdd0a58de1fc3a87654e66fb6694d02a":["c5a558d54519c651068ddb202f03befefb1514a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["513a0d1afdd0a58de1fc3a87654e66fb6694d02a"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","513a0d1afdd0a58de1fc3a87654e66fb6694d02a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"513a0d1afdd0a58de1fc3a87654e66fb6694d02a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}