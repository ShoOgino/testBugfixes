{"path":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader,AttributeSource).mjava","commits":[{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8dd2a69747e9f2922fd8b6970bd1661b26a692d","date":1291080135,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(Terms,AttributeSource).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader,AttributeSource).mjava","sourceNew":"  @Override\n  protected TermsEnum getTermsEnum(Terms terms, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    TermsEnum tenum = terms.iterator();\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      return tenum;\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(tenum, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(tenum, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, tenum, isFinite, commonSuffixRef);\n  }\n\n","sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonQuery#getTermsEnum(IndexReader,AttributeSource).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected TermsEnum getTermsEnum(IndexReader reader, AttributeSource atts) throws IOException {\n    // matches nothing\n    if (BasicOperations.isEmpty(automaton)) {\n      return TermsEnum.EMPTY;\n    }\n    \n    // matches all possible strings\n    if (BasicOperations.isTotal(automaton)) {\n      // NOTE: for now, MultiTermQuery enums terms at the\n      // MultiReader level, so we must use MultiFields here:\n      return MultiFields.getTerms(reader, getField()).iterator();\n    }\n    \n    // matches a fixed string in singleton representation\n    String singleton = automaton.getSingleton();\n    if (singleton != null)\n      return new SingleTermsEnum(reader, term.createTerm(singleton));\n\n    // matches a fixed string in expanded representation\n    final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n\n    if (commonPrefix.length() > 0) {\n      if (BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n        return new SingleTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    \n      // matches a constant prefix\n      Automaton prefixAutomaton = BasicOperations.concatenate(BasicAutomata\n                                                              .makeString(commonPrefix), BasicAutomata.makeAnyString());\n      if (BasicOperations.sameLanguage(automaton, prefixAutomaton)) {\n        return new PrefixTermsEnum(reader, term.createTerm(commonPrefix));\n      }\n    }\n\n    compileAutomaton();\n    \n    return new AutomatonTermsEnum(runAutomaton, term.field(), reader, isFinite, commonSuffixRef);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33a8b1f99104f4144f210f5d068411c297cd7163"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["33a8b1f99104f4144f210f5d068411c297cd7163"],"3bb13258feba31ab676502787ab2e1779f129b7a":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8dd2a69747e9f2922fd8b6970bd1661b26a692d"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","e8dd2a69747e9f2922fd8b6970bd1661b26a692d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3bb13258feba31ab676502787ab2e1779f129b7a"],"e8dd2a69747e9f2922fd8b6970bd1661b26a692d":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}