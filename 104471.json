{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","sourceNew":"  @Test\n  public void testPayloadIntDecodingIterator() throws Exception {\n    Directory dir = newDirectory();\n    DataTokenStream dts = new DataTokenStream(\"1\",new SortingIntEncoder(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    CategoryListIterator cli = new PayloadIntDecodingIterator(reader, new Term(\n        \"f\",\"1\"), dts.encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i][j]);\n      }\n      cli.skipTo(i);\n      long cat;\n      while ((cat = cli.nextCategory()) < Integer.MAX_VALUE) {\n        assertTrue(\"expected category not found: \" + cat, values.contains((int) cat));\n        totalCategories ++;\n      }\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIntDecodingIterator() throws Exception {\n    Directory dir = newDirectory();\n    DataTokenStream dts = new DataTokenStream(\"1\",new SortingIntEncoder(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    CategoryListIterator cli = new PayloadIntDecodingIterator(reader, new Term(\n        \"f\",\"1\"), dts.encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i][j]);\n      }\n      cli.skipTo(i);\n      long cat;\n      while ((cat = cli.nextCategory()) < Integer.MAX_VALUE) {\n        assertTrue(\"expected category not found: \" + cat, values.contains((int) cat));\n        totalCategories ++;\n      }\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(reader, new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i].ints[j]);\n      }\n      cli.getOrdinals(i, ordinals);\n      assertTrue(\"no ordinals for document \" + i, ordinals.length > 0);\n      for (int j = 0; j < ordinals.length; j++) {\n        assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n      }\n      totalCategories += ordinals.length;\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIntDecodingIterator() throws Exception {\n    Directory dir = newDirectory();\n    DataTokenStream dts = new DataTokenStream(\"1\",new SortingIntEncoder(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    CategoryListIterator cli = new PayloadIntDecodingIterator(reader, new Term(\n        \"f\",\"1\"), dts.encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i][j]);\n      }\n      cli.skipTo(i);\n      long cat;\n      while ((cat = cli.nextCategory()) < Integer.MAX_VALUE) {\n        assertTrue(\"expected category not found: \" + cat, values.contains((int) cat));\n        totalCategories ++;\n      }\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadCategoryListIteraor().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CategoryListIteratorTest#testPayloadIntDecodingIterator().mjava","sourceNew":"  @Test\n  public void testPayloadCategoryListIteraor() throws Exception {\n    Directory dir = newDirectory();\n    final IntEncoder encoder = new SortingIntEncoder(new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder())));\n    DataTokenStream dts = new DataTokenStream(\"1\",encoder);\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    IntsRef ordinals = new IntsRef();\n    CategoryListIterator cli = new PayloadCategoryListIteraor(reader, new Term(\"f\",\"1\"), encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i].ints[j]);\n      }\n      cli.getOrdinals(i, ordinals);\n      assertTrue(\"no ordinals for document \" + i, ordinals.length > 0);\n      for (int j = 0; j < ordinals.length; j++) {\n        assertTrue(\"expected category not found: \" + ordinals.ints[j], values.contains(ordinals.ints[j]));\n      }\n      totalCategories += ordinals.length;\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testPayloadIntDecodingIterator() throws Exception {\n    Directory dir = newDirectory();\n    DataTokenStream dts = new DataTokenStream(\"1\",new SortingIntEncoder(\n        new UniqueValuesIntEncoder(new DGapIntEncoder(new VInt8IntEncoder()))));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)).setMergePolicy(newLogMergePolicy()));\n    for (int i = 0; i < data.length; i++) {\n      dts.setIdx(i);\n      Document doc = new Document();\n      doc.add(new TextField(\"f\", dts));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    CategoryListIterator cli = new PayloadIntDecodingIterator(reader, new Term(\n        \"f\",\"1\"), dts.encoder.createMatchingDecoder());\n    cli.init();\n    int totalCategories = 0;\n    for (int i = 0; i < data.length; i++) {\n      Set<Integer> values = new HashSet<Integer>();\n      for (int j = 0; j < data[i].length; j++) {\n        values.add(data[i][j]);\n      }\n      cli.skipTo(i);\n      long cat;\n      while ((cat = cli.nextCategory()) < Integer.MAX_VALUE) {\n        assertTrue(\"expected category not found: \" + cat, values.contains((int) cat));\n        totalCategories ++;\n      }\n    }\n    assertEquals(\"Missing categories!\",10,totalCategories);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["b89678825b68eccaf09e6ab71675fc0b0af1e099","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}