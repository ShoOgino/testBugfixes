{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","commits":[{"id":"d6a3823714ed5de938fb4f3fc814824fe0f95e1a","date":1413422458,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","sourceNew":"      // binary search against first term in block range \n      // to find term's block\n      long binarySearchBlock(BytesRef text, long low, long high) throws IOException {       \n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          input.seek(addresses.get(mid));\n          term.length = input.readVInt();\n          input.readBytes(term.bytes, 0, term.length);\n          int cmp = term.compareTo(text);\n          \n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","sourceOld":"      // binary search against first term in block range \n      // to find term's block\n      long binarySearchBlock(BytesRef text, long low, long high) throws IOException {       \n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          input.seek(addresses.get(mid));\n          term.length = input.readVInt();\n          input.readBytes(term.bytes, 0, term.length);\n          int cmp = term.compareTo(text);\n          \n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene410/Lucene410DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","sourceNew":"      // binary search against first term in block range \n      // to find term's block\n      long binarySearchBlock(BytesRef text, long low, long high) throws IOException {       \n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          input.seek(addresses.get(mid));\n          term.length = input.readVInt();\n          input.readBytes(term.bytes, 0, term.length);\n          int cmp = term.compareTo(text);\n          \n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","sourceOld":"      // binary search against first term in block range \n      // to find term's block\n      long binarySearchBlock(BytesRef text, long low, long high) throws IOException {       \n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          input.seek(addresses.get(mid));\n          term.length = input.readVInt();\n          input.readBytes(term.bytes, 0, term.length);\n          int cmp = term.compareTo(text);\n          \n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchBlock(BytesRef,long,long).mjava","sourceNew":"      // binary search against first term in block range \n      // to find term's block\n      long binarySearchBlock(BytesRef text, long low, long high) throws IOException {       \n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          input.seek(addresses.get(mid));\n          term.length = input.readVInt();\n          input.readBytes(term.bytes, 0, term.length);\n          int cmp = term.compareTo(text);\n          \n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","sourceOld":"      // binary search against first term in block range \n      // to find term's block\n      long binarySearchBlock(BytesRef text, long low, long high) throws IOException {       \n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          input.seek(addresses.get(mid));\n          term.length = input.readVInt();\n          input.readBytes(term.bytes, 0, term.length);\n          int cmp = term.compareTo(text);\n          \n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"a870f9917149dc600c4ad4417d615c1795de5864":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a870f9917149dc600c4ad4417d615c1795de5864"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","d6a3823714ed5de938fb4f3fc814824fe0f95e1a"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6a3823714ed5de938fb4f3fc814824fe0f95e1a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}