{"path":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","sourceOld":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","sourceOld":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","sourceOld":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","sourceOld":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","bugFix":["f66f1826f07774581d2ec661444fc987bdd1a85d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/TestHarness#validateQuery(SolrQueryRequest,String...).mjava","sourceNew":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","sourceOld":"  /**\n   * Validates a \"query\" response against an array of XPath test strings\n   *\n   * @param req the Query to process\n   * @return null if all good, otherwise the first test that fails.\n   * @exception Exception any exception in the response.\n   * @exception IOException if there is a problem writing the XML\n   * @see LocalSolrQueryRequest\n   */\n  public String validateQuery(SolrQueryRequest req, String... tests)\n    throws IOException, Exception {\n                \n    String res = query(req);\n    return validateXPath(res, tests);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}