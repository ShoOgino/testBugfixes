{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","commits":[{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","sourceNew":"        // Scans to sub-block that has this target fp; only\n        // called by next(); NOTE: does not set\n        // startBytePos/suffix as a side effect\n        public void scanToSubBlock(long subFP) {\n          assert !isLeafBlock;\n          //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n          //assert nextEnt == 0;\n          if (lastSubFP == subFP) {\n            //if (DEBUG) System.out.println(\"    already positioned\");\n            return;\n          }\n          assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n          final long targetSubCode = fp - subFP;\n          //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n          while(true) {\n            assert nextEnt < entCount;\n            nextEnt++;\n            final int code = suffixesReader.readVInt();\n            suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n            //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n            if ((code & 1) != 0) {\n              final long subCode = suffixesReader.readVLong();\n              //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n              if (targetSubCode == subCode) {\n                //if (DEBUG) System.out.println(\"        match!\");\n                lastSubFP = subFP;\n                return;\n              }\n            } else {\n              state.termBlockOrd++;\n            }\n          }\n        }\n\n","sourceOld":"        // Scans to sub-block that has this target fp; only\n        // called by next(); NOTE: does not set\n        // startBytePos/suffix as a side effect\n        public void scanToSubBlock(long subFP) {\n          assert !isLeafBlock;\n          //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n          //assert nextEnt == 0;\n          if (lastSubFP == subFP) {\n            //if (DEBUG) System.out.println(\"    already positioned\");\n            return;\n          }\n          assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n          final long targetSubCode = fp - subFP;\n          //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n          while(true) {\n            assert nextEnt < entCount;\n            nextEnt++;\n            final int code = suffixesReader.readVInt();\n            suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n            //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n            if ((code & 1) != 0) {\n              final long subCode = suffixesReader.readVLong();\n              //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n              if (targetSubCode == subCode) {\n                //if (DEBUG) System.out.println(\"        match!\");\n                lastSubFP = subFP;\n                return;\n              }\n            } else {\n              state.termBlockOrd++;\n            }\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.SegmentTermsEnum.Frame#scanToSubBlock(long).mjava","sourceNew":null,"sourceOld":"        // Scans to sub-block that has this target fp; only\n        // called by next(); NOTE: does not set\n        // startBytePos/suffix as a side effect\n        public void scanToSubBlock(long subFP) {\n          assert !isLeafBlock;\n          //if (DEBUG) System.out.println(\"  scanToSubBlock fp=\" + fp + \" subFP=\" + subFP + \" entCount=\" + entCount + \" lastSubFP=\" + lastSubFP);\n          //assert nextEnt == 0;\n          if (lastSubFP == subFP) {\n            //if (DEBUG) System.out.println(\"    already positioned\");\n            return;\n          }\n          assert subFP < fp : \"fp=\" + fp + \" subFP=\" + subFP;\n          final long targetSubCode = fp - subFP;\n          //if (DEBUG) System.out.println(\"    targetSubCode=\" + targetSubCode);\n          while(true) {\n            assert nextEnt < entCount;\n            nextEnt++;\n            final int code = suffixesReader.readVInt();\n            suffixesReader.skipBytes(isLeafBlock ? code : code >>> 1);\n            //if (DEBUG) System.out.println(\"    \" + nextEnt + \" (of \" + entCount + \") ent isSubBlock=\" + ((code&1)==1));\n            if ((code & 1) != 0) {\n              final long subCode = suffixesReader.readVLong();\n              //if (DEBUG) System.out.println(\"      subCode=\" + subCode);\n              if (targetSubCode == subCode) {\n                //if (DEBUG) System.out.println(\"        match!\");\n                lastSubFP = subFP;\n                return;\n              }\n            } else {\n              state.termBlockOrd++;\n            }\n          }\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}