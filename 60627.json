{"path":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getTopReaderContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getTopReaderContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getTopReaderContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getTopReaderContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getTopReaderContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term, false);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<Term,TermStatistics>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermStates termStates = TermStates.build(s.getIndexReader().getContext(), term, true);\n        stats.put(term, s.termStatistics(term, termStates));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermStates termStates = TermStates.build(s.getIndexReader().getContext(), term, true);\n        stats.put(term, s.termStatistics(term, termStates));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermContext termContext = TermContext.build(s.getIndexReader().getContext(), term);\n        stats.put(term, s.termStatistics(term, termContext));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19238c4860c45945f1b1e39032e056ce9e266152","date":1568753304,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/ShardSearchingTestBase#getNodeTermStats(Set[Term],int,long).mjava","sourceNew":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermStates ts = TermStates.build(s.getIndexReader().getContext(), term, true);\n        if (ts.docFreq() > 0) {\n          stats.put(term, s.termStatistics(term, ts.docFreq(), ts.totalTermFreq()));\n        }\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","sourceOld":"  // Mock: in a real env, this would hit the wire and get\n  // term stats from remote node\n  Map<Term,TermStatistics> getNodeTermStats(Set<Term> terms, int nodeID, long version) throws IOException {\n    final NodeState node = nodes[nodeID];\n    final Map<Term,TermStatistics> stats = new HashMap<>();\n    final IndexSearcher s = node.searchers.acquire(version);\n    if (s == null) {\n      throw new SearcherExpiredException(\"node=\" + nodeID + \" version=\" + version);\n    }\n    try {\n      for(Term term : terms) {\n        final TermStates termStates = TermStates.build(s.getIndexReader().getContext(), term, true);\n        stats.put(term, s.termStatistics(term, termStates));\n      }\n    } finally {\n      node.searchers.release(s);\n    }\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"b94236357aaa22b76c10629851fe4e376e0cea82":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"19238c4860c45945f1b1e39032e056ce9e266152":["b94236357aaa22b76c10629851fe4e376e0cea82"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19238c4860c45945f1b1e39032e056ce9e266152"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"b94236357aaa22b76c10629851fe4e376e0cea82":["19238c4860c45945f1b1e39032e056ce9e266152"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"19238c4860c45945f1b1e39032e056ce9e266152":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}