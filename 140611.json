{"path":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRef payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRef();\n            payload.bytes = new byte[payloadLength];\n          } else if (payload.bytes.length < payloadLength) {\n            payload.grow(payloadLength);\n          }\n\n          positions.readBytes(payload.bytes, 0, payloadLength);\n          payload.length = payloadLength;\n          thisPayload = payload;\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRef payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRef();\n            payload.bytes = new byte[payloadLength];\n          } else if (payload.bytes.length < payloadLength) {\n            payload.grow(payloadLength);\n          }\n\n          positions.readBytes(payload.bytes, 0, payloadLength);\n          payload.length = payloadLength;\n          thisPayload = payload;\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRef payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRef();\n            payload.bytes = new byte[payloadLength];\n          } else if (payload.bytes.length < payloadLength) {\n            payload.grow(payloadLength);\n          }\n\n          positions.readBytes(payload.bytes, 0, payloadLength);\n          payload.length = payloadLength;\n          thisPayload = payload;\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      \n      if (positions == null) {\n        position = -1;\n      } else {\n        position += positions.readVInt();\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRefBuilder payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRefBuilder();\n          }\n          payload.grow(payloadLength);\n\n          positions.readBytes(payload.bytes(), 0, payloadLength);\n          payload.setLength(payloadLength);\n          thisPayload = payload.get();\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRef payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRef();\n            payload.bytes = new byte[payloadLength];\n          } else if (payload.bytes.length < payloadLength) {\n            payload.grow(payloadLength);\n          }\n\n          positions.readBytes(payload.bytes, 0, payloadLength);\n          payload.length = payloadLength;\n          thisPayload = payload;\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","bugFix":["0935c850ea562932997b72c69d93e345f21d7f45"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/TermVectorsWriter#addProx(int,DataInput,DataInput).mjava","sourceNew":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (it's only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRefBuilder payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRefBuilder();\n          }\n          payload.grow(payloadLength);\n\n          positions.readBytes(payload.bytes(), 0, payloadLength);\n          payload.setLength(payloadLength);\n          thisPayload = payload.get();\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","sourceOld":"  /** \n   * Called by IndexWriter when writing new segments.\n   * <p>\n   * This is an expert API that allows the codec to consume \n   * positions and offsets directly from the indexer.\n   * <p>\n   * The default implementation calls {@link #addPosition(int, int, int, BytesRef)},\n   * but subclasses can override this if they want to efficiently write \n   * all the positions, then all the offsets, for example.\n   * <p>\n   * NOTE: This API is extremely expert and subject to change or removal!!!\n   * @lucene.internal\n   */\n  // TODO: we should probably nuke this and make a more efficient 4.x format\n  // PreFlex-RW could then be slow and buffer (its only used in tests...)\n  public void addProx(int numProx, DataInput positions, DataInput offsets) throws IOException {\n    int position = 0;\n    int lastOffset = 0;\n    BytesRefBuilder payload = null;\n\n    for (int i = 0; i < numProx; i++) {\n      final int startOffset;\n      final int endOffset;\n      final BytesRef thisPayload;\n      \n      if (positions == null) {\n        position = -1;\n        thisPayload = null;\n      } else {\n        int code = positions.readVInt();\n        position += code >>> 1;\n        if ((code & 1) != 0) {\n          // This position has a payload\n          final int payloadLength = positions.readVInt();\n\n          if (payload == null) {\n            payload = new BytesRefBuilder();\n          }\n          payload.grow(payloadLength);\n\n          positions.readBytes(payload.bytes(), 0, payloadLength);\n          payload.setLength(payloadLength);\n          thisPayload = payload.get();\n        } else {\n          thisPayload = null;\n        }\n      }\n      \n      if (offsets == null) {\n        startOffset = endOffset = -1;\n      } else {\n        startOffset = lastOffset + offsets.readVInt();\n        endOffset = startOffset + offsets.readVInt();\n        lastOffset = endOffset;\n      }\n      addPosition(position, startOffset, endOffset, thisPayload);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0935c850ea562932997b72c69d93e345f21d7f45"],"0935c850ea562932997b72c69d93e345f21d7f45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"0935c850ea562932997b72c69d93e345f21d7f45":["c7869f64c874ebf7f317d22c00baf2b6857797a6","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}