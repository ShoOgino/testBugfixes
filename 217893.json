{"path":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","commits":[{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo();\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = tiOrd.termOrd / totalIndexInterval;\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo();\n      if (tiOrd == null) {\n        termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, (int) enumerator.position));\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"/dev/null","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"985161df9b1c14b4aa862d74d48cf51561579e62","date":1302636954,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert (int) enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"773f3441f7263f3a1b78e69ba2a38600c336c420","date":1307633537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"bugIntro":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8a181b2ac3ca090b11a2d4ce411832943e65d19","date":1307707503,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n          || compareAsUTF16(term, indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n          || compareAsUTF16(term, indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n          || compareAsUTF16(term, indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && term.compareToUTF16(enumerator.prev())> 0)\n\t    || term.compareToUTF16(enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n    || term.compareToUTF16(indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && term.compareToUTF16(enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5145e7af5e55022ec6ba083c0aef480e49e0d3b","date":1319475599,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n          || compareAsUTF16(term, indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n          || compareAsUTF16(term, indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          // LUCENE-3183: it's possible, if term is Term(\"\",\n          // \"\"), for the STE to be incorrectly un-positioned\n          // after scan-to; work around this by not caching in\n          // this case:\n          if (enumerator.position >= 0) {\n            termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n          }\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":["773f3441f7263f3a1b78e69ba2a38600c336c420"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39509e0276e70b38a5e76aa9d2c468955a1c7855","date":1319748553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexTerms.length == enumOffset\t  // but before end of block\n          || compareAsUTF16(term, indexTerms[enumOffset]) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = getIndexOffset(term);\n    }\n\n    seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene3x/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/preflex/TermInfosReader#seekEnum(SegmentTermEnum,Term,TermInfoAndOrd,boolean).mjava","sourceNew":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n  && ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n      || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","sourceOld":"  TermInfo seekEnum(SegmentTermEnum enumerator, Term term, TermInfoAndOrd tiOrd, boolean useCache) throws IOException {\n    if (size == 0) {\n      return null;\n    }\n\n    // optimize sequential access: first try scanning cached enum w/o seeking\n    if (enumerator.term() != null                 // term is at or past current\n\t&& ((enumerator.prev() != null && compareAsUTF16(term, enumerator.prev())> 0)\n\t    || compareAsUTF16(term, enumerator.term()) >= 0)) {\n      int enumOffset = (int)(enumerator.position/totalIndexInterval)+1;\n      if (indexLength == enumOffset    // but before end of block\n    || index.compareTo(term, enumOffset) < 0) {\n       // no need to seek\n\n        final TermInfo ti;\n        int numScans = enumerator.scanTo(term);\n        if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n          ti = enumerator.termInfo;\n          if (numScans > 1) {\n            // we only  want to put this TermInfo into the cache if\n            // scanEnum skipped more than one dictionary entry.\n            // This prevents RangeQueries or WildcardQueries to \n            // wipe out the cache when they iterate over a large numbers\n            // of terms in order\n            if (tiOrd == null) {\n              if (useCache) {\n                termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n              }\n            } else {\n              assert sameTermInfo(ti, tiOrd, enumerator);\n              assert (int) enumerator.position == tiOrd.termOrd;\n            }\n          }\n        } else {\n          ti = null;\n        }\n\n        return ti;\n      }  \n    }\n\n    // random-access: must seek\n    final int indexPos;\n    if (tiOrd != null) {\n      indexPos = (int) (tiOrd.termOrd / totalIndexInterval);\n    } else {\n      // Must do binary search:\n      indexPos = index.getIndexOffset(term);\n    }\n\n    index.seekEnum(enumerator, indexPos);\n    enumerator.scanTo(term);\n    final TermInfo ti;\n\n    if (enumerator.term() != null && compareAsUTF16(term, enumerator.term()) == 0) {\n      ti = enumerator.termInfo;\n      if (tiOrd == null) {\n        if (useCache) {\n          termsCache.put(new CloneableTerm(term), new TermInfoAndOrd(ti, enumerator.position));\n        }\n      } else {\n        assert sameTermInfo(ti, tiOrd, enumerator);\n        assert enumerator.position == tiOrd.termOrd;\n      }\n    } else {\n      ti = null;\n    }\n    return ti;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","773f3441f7263f3a1b78e69ba2a38600c336c420"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["773f3441f7263f3a1b78e69ba2a38600c336c420"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","985161df9b1c14b4aa862d74d48cf51561579e62"],"b8a181b2ac3ca090b11a2d4ce411832943e65d19":["135621f3a0670a9394eb563224a3b76cc4dddc0f","773f3441f7263f3a1b78e69ba2a38600c336c420"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","985161df9b1c14b4aa862d74d48cf51561579e62"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["773f3441f7263f3a1b78e69ba2a38600c336c420","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"7b91922b55d15444d554721b352861d028eb8278":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","985161df9b1c14b4aa862d74d48cf51561579e62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"773f3441f7263f3a1b78e69ba2a38600c336c420":["985161df9b1c14b4aa862d74d48cf51561579e62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"985161df9b1c14b4aa862d74d48cf51561579e62":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233","985161df9b1c14b4aa862d74d48cf51561579e62"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","c5145e7af5e55022ec6ba083c0aef480e49e0d3b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["b8a181b2ac3ca090b11a2d4ce411832943e65d19"],"b8a181b2ac3ca090b11a2d4ce411832943e65d19":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39509e0276e70b38a5e76aa9d2c468955a1c7855":["7b91922b55d15444d554721b352861d028eb8278"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"773f3441f7263f3a1b78e69ba2a38600c336c420":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","b8a181b2ac3ca090b11a2d4ce411832943e65d19","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"985161df9b1c14b4aa862d74d48cf51561579e62":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","773f3441f7263f3a1b78e69ba2a38600c336c420"],"c5145e7af5e55022ec6ba083c0aef480e49e0d3b":["39509e0276e70b38a5e76aa9d2c468955a1c7855"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8a181b2ac3ca090b11a2d4ce411832943e65d19","962d04139994fce5193143ef35615499a9a96d78","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}