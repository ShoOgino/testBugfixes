{"path":"src/java/org/apache/lucene/util/NumericUtils#splitLongRange(LongRangeBuilder,int,long,long).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/NumericUtils#splitLongRange(LongRangeBuilder,int,long,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: Splits a long range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link LongRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link NumericRangeQuery}.\n   */\n  public static void splitLongRange(final LongRangeBuilder builder,\n    final int precisionStep,  final long minBound, final long maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>64)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..64\");\n    splitRange(builder, 64, precisionStep, minBound, maxBound);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/NumericUtils#splitLongRange(LongRangeBuilder,int,long,long).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#splitLongRange(LongRangeBuilder,int,long,long).mjava","sourceNew":"  /**\n   * Expert: Splits a long range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link LongRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link NumericRangeQuery}.\n   */\n  public static void splitLongRange(final LongRangeBuilder builder,\n    final int precisionStep,  final long minBound, final long maxBound\n  ) {\n    splitRange(builder, 64, precisionStep, minBound, maxBound);\n  }\n\n","sourceOld":"  /**\n   * Expert: Splits a long range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link LongRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link NumericRangeQuery}.\n   */\n  public static void splitLongRange(final LongRangeBuilder builder,\n    final int precisionStep,  final long minBound, final long maxBound\n  ) {\n    if (precisionStep<1 || precisionStep>64)\n      throw new IllegalArgumentException(\"precisionStep may only be 1..64\");\n    splitRange(builder, 64, precisionStep, minBound, maxBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/NumericUtils#splitLongRange(LongRangeBuilder,int,long,long).mjava","pathOld":"src/java/org/apache/lucene/util/NumericUtils#splitLongRange(LongRangeBuilder,int,long,long).mjava","sourceNew":"  /**\n   * Expert: Splits a long range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link LongRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link NumericRangeQuery}.\n   */\n  public static void splitLongRange(final LongRangeBuilder builder,\n    final int precisionStep,  final long minBound, final long maxBound\n  ) {\n    splitRange(builder, 64, precisionStep, minBound, maxBound);\n  }\n\n","sourceOld":"  /**\n   * Expert: Splits a long range recursively.\n   * You may implement a builder that adds clauses to a\n   * {@link org.apache.lucene.search.BooleanQuery} for each call to its\n   * {@link LongRangeBuilder#addRange(String,String)}\n   * method.\n   * <p>This method is used by {@link NumericRangeQuery}.\n   */\n  public static void splitLongRange(final LongRangeBuilder builder,\n    final int precisionStep,  final long minBound, final long maxBound\n  ) {\n    splitRange(builder, 64, precisionStep, minBound, maxBound);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"]},"commit2Childs":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}