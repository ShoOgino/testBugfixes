{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true);\n    FilteredTermEnum termEnum = q.getEnum(searcher.getIndexReader());\n    try {\n      int count = 0;\n      do {\n        final Term t = termEnum.term();\n        if (t != null) {\n          final int val = NumericUtils.prefixCodedToInt(t.text());\n          assertTrue(\"value not in bounds\", val >= lower && val <= upper);\n          count++;\n        } else break;\n      } while (termEnum.next());\n      assertFalse(termEnum.next());\n      System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper + \"] contained \" + count + \" terms.\");\n    } finally {\n      termEnum.close();\n    }\n  }\n\n","sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true);\n    FilteredTermEnum termEnum = q.getEnum(searcher.getIndexReader());\n    try {\n      int count = 0;\n      do {\n        final Term t = termEnum.term();\n        if (t != null) {\n          final int val = NumericUtils.prefixCodedToInt(t.text());\n          assertTrue(\"value not in bounds\", val >= lower && val <= upper);\n          count++;\n        } else break;\n      } while (termEnum.next());\n      assertFalse(termEnum.next());\n      System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper + \"] contained \" + count + \" terms.\");\n    } finally {\n      termEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testEnum(int,int).mjava","sourceNew":null,"sourceOld":"  private void testEnum(int lower, int upper) throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"field4\", 4, lower, upper, true, true);\n    FilteredTermEnum termEnum = q.getEnum(searcher.getIndexReader());\n    try {\n      int count = 0;\n      do {\n        final Term t = termEnum.term();\n        if (t != null) {\n          final int val = NumericUtils.prefixCodedToInt(t.text());\n          assertTrue(\"value not in bounds\", val >= lower && val <= upper);\n          count++;\n        } else break;\n      } while (termEnum.next());\n      assertFalse(termEnum.next());\n      System.out.println(\"TermEnum on 'field4' for range [\" + lower + \",\" + upper + \"] contained \" + count + \" terms.\");\n    } finally {\n      termEnum.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}