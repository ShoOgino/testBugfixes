{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","pathOld":"/dev/null","sourceNew":"  private void addTableCompressed(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues) throws IOException {\n    meta.writeVInt(count);\n    meta.writeByte(TABLE_COMPRESSED); // table-compressed\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    \n    long[] decode = uniqueValues.getDecodeTable();\n    // upgrade to power of two sized array\n    int size = 1 << compression.bitsPerValue;\n    data.writeVInt(size);\n    for (int i = 0; i < decode.length; i++) {\n      data.writeLong(decode[i]);\n    }\n    for (int i = decode.length; i < size; i++) {\n      data.writeLong(0);\n    }\n\n    data.writeVInt(compression.format.getId());\n    data.writeVInt(compression.bitsPerValue);\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, compression.format, count, compression.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n    for(Number nv : values) {\n      writer.add(uniqueValues.getOrd(nv.longValue()));\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","pathOld":"/dev/null","sourceNew":"  private void addTableCompressed(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues) throws IOException {\n    meta.writeVInt(count);\n    meta.writeByte(TABLE_COMPRESSED); // table-compressed\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    \n    long[] decode = uniqueValues.getDecodeTable();\n    // upgrade to power of two sized array\n    int size = 1 << compression.bitsPerValue;\n    data.writeVInt(size);\n    for (int i = 0; i < decode.length; i++) {\n      data.writeLong(decode[i]);\n    }\n    for (int i = decode.length; i < size; i++) {\n      data.writeLong(0);\n    }\n\n    data.writeVInt(compression.format.getId());\n    data.writeVInt(compression.bitsPerValue);\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, compression.format, count, compression.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n    for(Number nv : values) {\n      writer.add(uniqueValues.getOrd(nv.longValue()));\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","sourceNew":"  private void addTableCompressed(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues) throws IOException {\n    meta.writeVInt(count);\n    meta.writeByte(TABLE_COMPRESSED); // table-compressed\n    meta.writeLong(data.getFilePointer());\n\n    writeTable(values, compression, count, uniqueValues, uniqueValues.size);\n  }\n\n","sourceOld":"  private void addTableCompressed(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues) throws IOException {\n    meta.writeVInt(count);\n    meta.writeByte(TABLE_COMPRESSED); // table-compressed\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    \n    long[] decode = uniqueValues.getDecodeTable();\n    // upgrade to power of two sized array\n    int size = 1 << compression.bitsPerValue;\n    data.writeVInt(size);\n    for (int i = 0; i < decode.length; i++) {\n      data.writeLong(decode[i]);\n    }\n    for (int i = decode.length; i < size; i++) {\n      data.writeLong(0);\n    }\n\n    data.writeVInt(compression.format.getId());\n    data.writeVInt(compression.bitsPerValue);\n\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, compression.format, count, compression.bitsPerValue, PackedInts.DEFAULT_BUFFER_SIZE);\n    for(Number nv : values) {\n      writer.add(uniqueValues.getOrd(nv.longValue()));\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addTableCompressed(Iterable[Number],FormatAndBits,int,NormMap).mjava","sourceNew":"  private void addTableCompressed(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues) throws IOException {\n    meta.writeVInt(count);\n    meta.writeByte(Lucene50NormsFormat.TABLE_COMPRESSED); // table-compressed\n    meta.writeLong(data.getFilePointer());\n\n    writeTable(values, compression, count, uniqueValues, uniqueValues.size);\n  }\n\n","sourceOld":"  private void addTableCompressed(Iterable<Number> values, FormatAndBits compression, int count, NormMap uniqueValues) throws IOException {\n    meta.writeVInt(count);\n    meta.writeByte(TABLE_COMPRESSED); // table-compressed\n    meta.writeLong(data.getFilePointer());\n\n    writeTable(values, compression, count, uniqueValues, uniqueValues.size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}