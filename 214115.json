{"path":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","commits":[{"id":"434ff4225627b937a533128f8746eb1e9009fc95","date":1153247240,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\r\n    writer.write('\"');\r\n    // it might be more efficient to use a stringbuilder or write substrings\r\n    // if writing chars to the stream is slow.\r\n    if (needsEscaping) {\r\n      for (int i=0; i<val.length(); i++) {\r\n        char ch = val.charAt(i);\r\n        switch(ch) {\r\n          case '\"':\r\n          case '\\\\':\r\n            writer.write('\\\\');\r\n            writer.write(ch);\r\n            break;\r\n            /*** the following are not required to be escaped\r\n             case '\\r':\r\n             case '\\n':\r\n             case '\\t':\r\n             case '\\b':\r\n             case '\\f':\r\n             case '/':\r\n             ***/\r\n          default: writer.write(ch);\r\n        }\r\n      }\r\n    } else {\r\n      writer.write(val);\r\n    }\r\n    writer.write('\"');\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c0e301b711811c6aaee90440cc1a7925fdd1a1e","date":1153259525,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    writer.write('\"');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n            /*** the following are not required to be escaped\n             case '\\r':\n             case '\\n':\n             case '\\t':\n             case '\\b':\n             case '\\f':\n             case '/':\n             ***/\n          default: writer.write(ch);\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\"');\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\r\n    writer.write('\"');\r\n    // it might be more efficient to use a stringbuilder or write substrings\r\n    // if writing chars to the stream is slow.\r\n    if (needsEscaping) {\r\n      for (int i=0; i<val.length(); i++) {\r\n        char ch = val.charAt(i);\r\n        switch(ch) {\r\n          case '\"':\r\n          case '\\\\':\r\n            writer.write('\\\\');\r\n            writer.write(ch);\r\n            break;\r\n            /*** the following are not required to be escaped\r\n             case '\\r':\r\n             case '\\n':\r\n             case '\\t':\r\n             case '\\b':\r\n             case '\\f':\r\n             case '/':\r\n             ***/\r\n          default: writer.write(ch);\r\n        }\r\n      }\r\n    } else {\r\n      writer.write(val);\r\n    }\r\n    writer.write('\"');\r\n  }\r\n\n","bugFix":null,"bugIntro":["e0b76a57587767a3bd63f3ef335291605690fc5e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"130536983a01e473ed77f2d5d579cf256a9b8acf","date":1154878143,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    writer.write('\"');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write(\"\\\\r\"); break;\n          case '\\n': writer.write(\"\\\\n\"); break;\n          case '\\t': writer.write(\"\\\\t\"); break;\n          case '\\b': writer.write(\"\\\\b\"); break;\n          case '\\f': writer.write(\"\\\\f\"); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\"');\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    writer.write('\"');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n            /*** the following are not required to be escaped\n             case '\\r':\n             case '\\n':\n             case '\\t':\n             case '\\b':\n             case '\\f':\n             case '/':\n             ***/\n          default: writer.write(ch);\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\"');\n  }\n\n","bugFix":null,"bugIntro":["e0b76a57587767a3bd63f3ef335291605690fc5e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0b76a57587767a3bd63f3ef335291605690fc5e","date":1182953849,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n\n      StringBuilder sb = new StringBuilder(val.length()+8);\n      sb.append('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            sb.append('\\\\');\n            sb.append(ch);\n            break;\n          case '\\r': sb.append('\\\\').append('r'); break;\n          case '\\n': sb.append('\\\\').append('n'); break;\n          case '\\t': sb.append('\\\\').append('t'); break;\n          case '\\b': sb.append('\\\\').append('b'); break;\n          case '\\f': sb.append('\\\\').append('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(sb,ch);\n            } else {\n              sb.append(ch);\n            }\n          }\n        }\n      }\n\n      sb.append('\"');\n      writer.append(sb);\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    writer.write('\"');\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write(\"\\\\r\"); break;\n          case '\\n': writer.write(\"\\\\n\"); break;\n          case '\\t': writer.write(\"\\\\t\"); break;\n          case '\\b': writer.write(\"\\\\b\"); break;\n          case '\\f': writer.write(\"\\\\f\"); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n    } else {\n      writer.write(val);\n    }\n    writer.write('\"');\n  }\n\n","bugFix":["130536983a01e473ed77f2d5d579cf256a9b8acf","0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c355d9286f784cff62d09cae2d0752fdacb156e","date":1192387134,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n\n      StringBuilder sb = new StringBuilder(val.length()+8);\n      sb.append('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            sb.append('\\\\');\n            sb.append(ch);\n            break;\n          case '\\r': sb.append('\\\\').append('r'); break;\n          case '\\n': sb.append('\\\\').append('n'); break;\n          case '\\t': sb.append('\\\\').append('t'); break;\n          case '\\b': sb.append('\\\\').append('b'); break;\n          case '\\f': sb.append('\\\\').append('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(sb,ch);\n            } else {\n              sb.append(ch);\n            }\n          }\n        }\n      }\n\n      sb.append('\"');\n      writer.append(sb);\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeStr(String,String,boolean).mjava","sourceNew":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","sourceOld":"  public void writeStr(String name, String val, boolean needsEscaping) throws IOException {\n    // it might be more efficient to use a stringbuilder or write substrings\n    // if writing chars to the stream is slow.\n    if (needsEscaping) {\n\n\n     /* http://www.ietf.org/internet-drafts/draft-crockford-jsonorg-json-04.txt\n      All Unicode characters may be placed within\n      the quotation marks except for the characters which must be\n      escaped: quotation mark, reverse solidus, and the control\n      characters (U+0000 through U+001F).\n     */\n      writer.write('\"');\n\n      for (int i=0; i<val.length(); i++) {\n        char ch = val.charAt(i);\n        if ((ch > '#' && ch != '\\\\') || ch==' ') { // fast path\n          writer.write(ch);\n          continue;\n        }\n        switch(ch) {\n          case '\"':\n          case '\\\\':\n            writer.write('\\\\');\n            writer.write(ch);\n            break;\n          case '\\r': writer.write('\\\\'); writer.write('r'); break;\n          case '\\n': writer.write('\\\\'); writer.write('n'); break;\n          case '\\t': writer.write('\\\\'); writer.write('t'); break;\n          case '\\b': writer.write('\\\\'); writer.write('b'); break;\n          case '\\f': writer.write('\\\\'); writer.write('f'); break;\n          // case '/':\n          default: {\n            if (ch <= 0x1F) {\n              unicodeEscape(writer,ch);\n            } else {\n              writer.write(ch);\n            }\n          }\n        }\n      }\n\n      writer.write('\"');\n    } else {\n      writer.write('\"');\n      writer.write(val);\n      writer.write('\"');\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["434ff4225627b937a533128f8746eb1e9009fc95"],"434ff4225627b937a533128f8746eb1e9009fc95":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"1c355d9286f784cff62d09cae2d0752fdacb156e":["e0b76a57587767a3bd63f3ef335291605690fc5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"e0b76a57587767a3bd63f3ef335291605690fc5e":["130536983a01e473ed77f2d5d579cf256a9b8acf"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"130536983a01e473ed77f2d5d579cf256a9b8acf":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c0e301b711811c6aaee90440cc1a7925fdd1a1e":["130536983a01e473ed77f2d5d579cf256a9b8acf"],"434ff4225627b937a533128f8746eb1e9009fc95":["0c0e301b711811c6aaee90440cc1a7925fdd1a1e"],"1c355d9286f784cff62d09cae2d0752fdacb156e":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["434ff4225627b937a533128f8746eb1e9009fc95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e0b76a57587767a3bd63f3ef335291605690fc5e":["1c355d9286f784cff62d09cae2d0752fdacb156e"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"130536983a01e473ed77f2d5d579cf256a9b8acf":["e0b76a57587767a3bd63f3ef335291605690fc5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}