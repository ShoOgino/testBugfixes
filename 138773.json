{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    String k = args.remove(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.remove(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    String k = args.remove(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.remove(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"623b5245fbd9d5af9f458826ba9ed3d6212db24d","date":1421078865,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    Set<String> k = getSet(args, KEEP);\n    if (k != null) {\n      keep = new CharArraySet(10, ignoreCase);\n      keep.addAll(k);\n    }\n\n    k = getSet(args, OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<>();\n      for (String item : k) {\n        okPrefix.add(item.toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"623b5245fbd9d5af9f458826ba9ed3d6212db24d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}