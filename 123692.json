{"path":"sandbox/contributions/db/src/java/org/apache/lucene/store/db/File#delete(Db,Db,DbTxn).mjava","commits":[{"id":"16869a49920ab77b6df2f6d515ff7499372d7336","date":1074040185,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/db/src/java/org/apache/lucene/store/db/File#delete(Db,Db,DbTxn).mjava","pathOld":"/dev/null","sourceNew":"    protected void delete(Db files, Db blocks, DbTxn txn)\n        throws IOException\n    {\n        if (!exists(files, txn))\n            throw new IOException(\"File does not exist: \" + getName());\n\n        Dbc cursor = null;\n\n        try {\n            try {\n                byte[] bytes = getKey();\n                int ulen = bytes.length + 8;\n                byte[] cursorBytes = new byte[ulen];\n                Dbt cursorKey = new Dbt(cursorBytes);\n                Dbt cursorData = new Dbt(null);\n\n                System.arraycopy(bytes, 0, cursorBytes, 0, bytes.length);\n                cursorKey.setUserBufferLength(ulen);\n                cursorKey.setFlags(Db.DB_DBT_USERMEM);\n                cursorData.setPartialLength(0);\n                cursorData.setFlags(Db.DB_DBT_PARTIAL);\n\n                cursor = blocks.cursor(txn, 0);\n\n                if (cursor.get(cursorKey, cursorData,\n                               Db.DB_SET_RANGE) != Db.DB_NOTFOUND)\n                {\n                    cursor.delete(0);\n\n                    while (cursor.get(cursorKey, cursorData, Db.DB_NEXT) !=\n                           Db.DB_NOTFOUND) {\n                        for (int i = 0; i < bytes.length; i++)\n                            if (bytes[i] != cursorBytes[i])\n                                return;\n\n                        cursor.delete(0);\n                    }\n                }\n\n                files.delete(txn, key, 0);\n            } finally {\n                if (cursor != null)\n                    cursor.close();\n            }\n        } catch (DbException e) {\n            throw new IOException(e.getMessage());\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7093bce16e678ecaf87612e82980c6a5959d84d","date":1086082023,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/db/src/java/org/apache/lucene/store/db/File#delete(Db,Db,DbTxn,int).mjava","pathOld":"sandbox/contributions/db/src/java/org/apache/lucene/store/db/File#delete(Db,Db,DbTxn).mjava","sourceNew":"    protected void delete(Db files, Db blocks, DbTxn txn, int flags)\n        throws IOException\n    {\n        if (!exists(files, txn, flags))\n            throw new IOException(\"File does not exist: \" + getName());\n\n        Dbc cursor = null;\n\n        try {\n            try {\n                byte[] bytes = getKey();\n                int ulen = bytes.length + 8;\n                byte[] cursorBytes = new byte[ulen];\n                Dbt cursorKey = new Dbt(cursorBytes);\n                Dbt cursorData = new Dbt(null);\n\n                System.arraycopy(bytes, 0, cursorBytes, 0, bytes.length);\n                cursorKey.setUserBufferLength(ulen);\n                cursorKey.setFlags(Db.DB_DBT_USERMEM);\n                cursorData.setPartialLength(0);\n                cursorData.setFlags(Db.DB_DBT_PARTIAL);\n\n                cursor = blocks.cursor(txn, flags);\n\n                if (cursor.get(cursorKey, cursorData,\n                               Db.DB_SET_RANGE | flags) != Db.DB_NOTFOUND)\n                {\n                    cursor.delete(0);\n\n                    while (cursor.get(cursorKey, cursorData,\n                                      Db.DB_NEXT | flags) != Db.DB_NOTFOUND) {\n                        for (int i = 0; i < bytes.length; i++)\n                            if (bytes[i] != cursorBytes[i])\n                                return;\n\n                        cursor.delete(0);\n                    }\n                }\n\n                files.delete(txn, key, 0);\n            } finally {\n                if (cursor != null)\n                    cursor.close();\n            }\n        } catch (DbException e) {\n            throw new IOException(e.getMessage());\n        }\n    }\n\n","sourceOld":"    protected void delete(Db files, Db blocks, DbTxn txn)\n        throws IOException\n    {\n        if (!exists(files, txn))\n            throw new IOException(\"File does not exist: \" + getName());\n\n        Dbc cursor = null;\n\n        try {\n            try {\n                byte[] bytes = getKey();\n                int ulen = bytes.length + 8;\n                byte[] cursorBytes = new byte[ulen];\n                Dbt cursorKey = new Dbt(cursorBytes);\n                Dbt cursorData = new Dbt(null);\n\n                System.arraycopy(bytes, 0, cursorBytes, 0, bytes.length);\n                cursorKey.setUserBufferLength(ulen);\n                cursorKey.setFlags(Db.DB_DBT_USERMEM);\n                cursorData.setPartialLength(0);\n                cursorData.setFlags(Db.DB_DBT_PARTIAL);\n\n                cursor = blocks.cursor(txn, 0);\n\n                if (cursor.get(cursorKey, cursorData,\n                               Db.DB_SET_RANGE) != Db.DB_NOTFOUND)\n                {\n                    cursor.delete(0);\n\n                    while (cursor.get(cursorKey, cursorData, Db.DB_NEXT) !=\n                           Db.DB_NOTFOUND) {\n                        for (int i = 0; i < bytes.length; i++)\n                            if (bytes[i] != cursorBytes[i])\n                                return;\n\n                        cursor.delete(0);\n                    }\n                }\n\n                files.delete(txn, key, 0);\n            } finally {\n                if (cursor != null)\n                    cursor.close();\n            }\n        } catch (DbException e) {\n            throw new IOException(e.getMessage());\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"16869a49920ab77b6df2f6d515ff7499372d7336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7093bce16e678ecaf87612e82980c6a5959d84d":["16869a49920ab77b6df2f6d515ff7499372d7336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b7093bce16e678ecaf87612e82980c6a5959d84d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16869a49920ab77b6df2f6d515ff7499372d7336"],"16869a49920ab77b6df2f6d515ff7499372d7336":["b7093bce16e678ecaf87612e82980c6a5959d84d"],"b7093bce16e678ecaf87612e82980c6a5959d84d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}