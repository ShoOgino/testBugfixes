{"path":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","commits":[{"id":"66ab3886c1d845c59c9e5b23b2fb247b927db498","date":1193060587,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public QueryParsing.SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    QueryParsing.SortSpec sort;\n    if (sortStr != null) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n      sort.offset = start;\n      sort.num =  rows;\n    } else {\n      sort = new QueryParsing.SortSpec(null, start, rows);\n    }\n\n    return sort;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a883c02229be6ea3db6c4a3d618c5569e0363346","date":1194441663,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public QueryParsing.SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    QueryParsing.SortSpec sort = null;\n    if (sortStr != null) {\n      // may return null if 'score desc'\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    \n    if( sort == null ) {\n      sort = new QueryParsing.SortSpec(null, start, rows);\n    }\n    else {\n      sort.offset = start;\n      sort.num =  rows;\n    }\n    return sort;\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public QueryParsing.SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    QueryParsing.SortSpec sort;\n    if (sortStr != null) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n      sort.offset = start;\n      sort.num =  rows;\n    } else {\n      sort = new QueryParsing.SortSpec(null, start, rows);\n    }\n\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6075cf7db5ebb03b013c9110fca8f1013ba6a72","date":1196271697,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public QueryParsing.SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    QueryParsing.SortSpec sort = null;\n    if (sortStr != null) {\n      // may return null if 'score desc'\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    \n    if( sort == null ) {\n      sort = new QueryParsing.SortSpec(null, start, rows);\n    }\n    else {\n      sort.offset = start;\n      sort.num =  rows;\n    }\n    return sort;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","pathOld":"src/java/org/apache/solr/search/QParser#getSort(boolean).mjava","sourceNew":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","sourceOld":"  /**\n   * @param useGlobalParams look up sort, start, rows in global params if not in local params\n   * @return the sort specification\n   */\n  public SortSpec getSort(boolean useGlobalParams) throws ParseException {\n    getQuery(); // ensure query is parsed first\n\n    String sortStr = null;\n    String startS = null;\n    String rowsS = null;\n\n    if (localParams != null) {\n      sortStr = localParams.get(CommonParams.SORT);\n      startS = localParams.get(CommonParams.START);\n      rowsS = localParams.get(CommonParams.ROWS);\n\n      // if any of these parameters are present, don't go back to the global params\n      if (sortStr != null || startS != null || rowsS != null) {\n        useGlobalParams = false;\n      }\n    }\n\n    if (useGlobalParams) {\n      if (sortStr ==null) {\n          sortStr = params.get(CommonParams.SORT);\n      }\n      if (startS==null) {\n        startS = params.get(CommonParams.START);\n      }\n      if (rowsS==null) {\n        rowsS = params.get(CommonParams.ROWS);\n      }\n    }\n\n    int start = startS != null ? Integer.parseInt(startS) : 0;\n    int rows = rowsS != null ? Integer.parseInt(rowsS) : 10;\n\n    Sort sort = null;\n    if( sortStr != null ) {\n      sort = QueryParsing.parseSort(sortStr, req.getSchema());\n    }\n    return new SortSpec( sort, start, rows );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a883c02229be6ea3db6c4a3d618c5569e0363346":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["a883c02229be6ea3db6c4a3d618c5569e0363346"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a883c02229be6ea3db6c4a3d618c5569e0363346":["c6075cf7db5ebb03b013c9110fca8f1013ba6a72"],"66ab3886c1d845c59c9e5b23b2fb247b927db498":["a883c02229be6ea3db6c4a3d618c5569e0363346"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["66ab3886c1d845c59c9e5b23b2fb247b927db498"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c6075cf7db5ebb03b013c9110fca8f1013ba6a72":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}