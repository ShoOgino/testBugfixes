{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["bedba8c41772c90fab237170d639e910d36f7755"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = IndexReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newField(\"f\", \"\", StringField.TYPE_UNSTORED);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    _TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                                       .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(\n                                                                                        TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterCommit#testCommitThreadSafety().mjava","sourceNew":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                                       .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-2095: make sure with multiple threads commit\n  // doesn't return until all changes are in fact in the\n  // index\n  public void testCommitThreadSafety() throws Throwable {\n    final int NUM_THREADS = 5;\n    final double RUN_SEC = 0.5;\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                                                       .setMergePolicy(newLogMergePolicy()));\n    TestUtil.reduceOpenFiles(w.w);\n    w.commit();\n    final AtomicBoolean failed = new AtomicBoolean();\n    Thread[] threads = new Thread[NUM_THREADS];\n    final long endTime = System.currentTimeMillis()+((long) (RUN_SEC*1000));\n    for(int i=0;i<NUM_THREADS;i++) {\n      final int finalI = i;\n      threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Document doc = new Document();\n              DirectoryReader r = DirectoryReader.open(dir);\n              Field f = newStringField(\"f\", \"\", Field.Store.NO);\n              doc.add(f);\n              int count = 0;\n              do {\n                if (failed.get()) break;\n                for(int j=0;j<10;j++) {\n                  final String s = finalI + \"_\" + String.valueOf(count++);\n                  f.setStringValue(s);\n                  w.addDocument(doc);\n                  w.commit();\n                  DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n                  assertNotNull(r2);\n                  assertTrue(r2 != r);\n                  r.close();\n                  r = r2;\n                  assertEquals(\"term=f:\" + s + \"; r=\" + r, 1, r.docFreq(new Term(\"f\", s)));\n                }\n              } while(System.currentTimeMillis() < endTime);\n              r.close();\n            } catch (Throwable t) {\n              failed.set(true);\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[i].start();\n    }\n    for(int i=0;i<NUM_THREADS;i++) {\n      threads[i].join();\n    }\n    assertFalse(failed.get());\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"6613659748fe4411a7dcf85266e55db1f95f7315":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}