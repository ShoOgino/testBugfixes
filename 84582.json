{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","commits":[{"id":"cc41b743423981e7ec17a024ce7e107096e472fe","date":1349975327,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: more tests\n  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8","date":1350576194,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  // TODO: more tests\n  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","date":1351615637,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.setPreservePositionIncrements(false);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n        new TermFreqPayload(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.setPreservePositionIncrements(false);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreq keys[] = new TermFreq[] {\n        new TermFreq(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.setPreservePositionIncrements(false);\n    suggester.build(new TermFreqArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.setPreservePositionIncrements(false);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    TermFreqPayload keys[] = new TermFreqPayload[] {\n        new TermFreqPayload(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.setPreservePositionIncrements(false);\n    suggester.build(new TermFreqPayloadArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4e0095ef720d1b8e7406847147af69f19af3ab6","date":1383131477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard);\n    suggester.setPreservePositionIncrements(false);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(_TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(_TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since its a stopword, its suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, its suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    standard.close();\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    standard.close();\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/FuzzySuggesterTest#testStandard().mjava","sourceNew":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    Directory tempDir = getDirectory();\n    FuzzySuggester suggester = new FuzzySuggester(tempDir, \"fuzzy\", standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    IOUtils.close(standard, tempDir);\n  }\n\n","sourceOld":"  /**\n   * basic \"standardanalyzer\" test with stopword removal\n   */\n  public void testStandard() throws Exception {\n    Input keys[] = new Input[] {\n        new Input(\"the ghost of christmas past\", 50),\n    };\n    \n    Analyzer standard = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET);\n    FuzzySuggester suggester = new FuzzySuggester(standard, standard, AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP, 256, -1, false, FuzzySuggester.DEFAULT_MAX_EDITS, FuzzySuggester.DEFAULT_TRANSPOSITIONS,\n        FuzzySuggester.DEFAULT_NON_FUZZY_PREFIX, FuzzySuggester.DEFAULT_MIN_FUZZY_LENGTH, FuzzySuggester.DEFAULT_UNICODE_AWARE);\n    suggester.build(new InputArrayIterator(keys));\n    \n    List<LookupResult> results = suggester.lookup(TestUtil.stringToCharSequence(\"the ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' since it's a stopword, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost of chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n\n    // omit the 'the' and 'of' since they are stopwords, it's suggested anyway\n    results = suggester.lookup(TestUtil.stringToCharSequence(\"ghost chris\", random()), false, 1);\n    assertEquals(1, results.size());\n    assertEquals(\"the ghost of christmas past\", results.get(0).key.toString());\n    assertEquals(50, results.get(0).value, 0.01F);\n    \n    standard.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"6613659748fe4411a7dcf85266e55db1f95f7315":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","a56958d7f71a28824f20031ffbb2e13502a0274e"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","212b08d3e511c7623bf4c1af7a834f0d0bee0dc8"],"cc41b743423981e7ec17a024ce7e107096e472fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":["cc41b743423981e7ec17a024ce7e107096e472fe"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["eafa8c5eabc3dacd34680054e6a33bda024080ac"]},"commit2Childs":{"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["d4e0095ef720d1b8e7406847147af69f19af3ab6"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"cc41b743423981e7ec17a024ce7e107096e472fe":["212b08d3e511c7623bf4c1af7a834f0d0bee0dc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b","cc41b743423981e7ec17a024ce7e107096e472fe"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","867e3d9153fb761456b54a9dcce566e1545c5ef6"],"212b08d3e511c7623bf4c1af7a834f0d0bee0dc8":["4f3db1dca4ec6d06e771211e9f7c4ae5d8e5758b"],"d4e0095ef720d1b8e7406847147af69f19af3ab6":["6613659748fe4411a7dcf85266e55db1f95f7315"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}