{"path":"src/test-deprecated/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","pathOld":"/dev/null","sourceNew":"  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/spans/TestBasics#testSpanFirst().mjava","sourceNew":null,"sourceOld":"  public void testSpanFirst() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    SpanFirstQuery query = new SpanFirstQuery(term1, 1);\n\n    checkHits(query, new int[]\n      {5, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,\n       514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,\n       528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,\n       542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,\n       556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,\n       570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,\n       584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,\n       598, 599});\n\n    assertTrue(searcher.explain(query, 5).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 599).getValue() > 0.0f);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}