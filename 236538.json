{"path":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","pathOld":"contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90329759f82c33c8fdb14d8bc0db5e81d17934b8","date":1270913806,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queries/src/test/org/apache/lucene/search/ChainedFilterTest#testSingleFilter().mjava","pathOld":"lucene/contrib/misc/src/test/org/apache/lucene/misc/ChainedFilterTest#testSingleFilter().mjava","sourceNew":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","sourceOld":"  public void testSingleFilter() throws Exception {\n    ChainedFilter chain = getChainedFilter(new Filter[] {dateFilter}, null);\n\n    int numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX, numHits);\n\n    chain = new ChainedFilter(new Filter[] {bobFilter});\n    numHits = searcher.search(query, chain, 1000).totalHits;\n    assertEquals(MAX / 2, numHits);\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.AND});\n    TopDocs hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"bob\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n    \n    chain = getChainedFilter(new Filter[] {bobFilter}, new int[] {ChainedFilter.ANDNOT});\n    hits = searcher.search(query, chain, 1000);\n    numHits = hits.totalHits;\n    assertEquals(MAX / 2, numHits);\n    assertEquals(\"sue\", searcher.doc(hits.scoreDocs[0].doc).get(\"owner\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90329759f82c33c8fdb14d8bc0db5e81d17934b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90329759f82c33c8fdb14d8bc0db5e81d17934b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}