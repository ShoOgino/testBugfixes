{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testPrelimSortingWithRefinement().mjava","commits":[{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacetRefinement#testPrelimSortingWithRefinement().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPrelimSortingWithRefinement() throws Exception {\n    // NOTE: distributed prelim_sort testing in TestJsonFacets uses identical shards, so never needs\n    // refinement, so here we focus on the (re)sorting of different topN refined buckets\n    // after the prelim_sorting from diff shards\n  \n    initServers();\n    final Client client = servers.getClient(random().nextInt());\n    client.queryDefaults().set(\"shards\", servers.getShards(), \"debugQuery\", Boolean.toString(random().nextBoolean()));\n\n    List<SolrClient> clients = client.getClientProvider().all();\n    assertTrue(clients.size() >= 3); // we only use 2, but assert 3 to also test empty shard\n    final SolrClient c0 = clients.get(0);\n    final SolrClient c1 = clients.get(1);\n\n    client.deleteByQuery(\"*:*\", null);\n    int id = 0;\n\n    // client 0 // shard1: A=1,B=1,C=2 ...\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"A\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"B\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"C\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"C\", \"price_i\",\"1\"));\n    // ... X=3,Y=3\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"X\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"X\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"X\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"Y\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"Y\", \"price_i\",\"1\"));\n    c0.add(sdoc(\"id\", id++, \"cat_s\",\"Y\", \"price_i\",\"1\"));\n    \n    // client 1 // shard2: X=1,Y=2,Z=2 ...\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"X\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"Y\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"Y\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"Z\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"Z\", \"price_i\",\"1\"));\n    // ... C=4\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"C\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"C\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"C\", \"price_i\",\"1\"));\n    c1.add(sdoc(\"id\", id++, \"cat_s\",\"C\", \"price_i\",\"1\"));\n    \n    // Whole Collection: A=1,B=1,Z=2,X=4,Y=5,C=6\n    client.commit();\n    \n    // in both cases, neither C nor Z make the cut for the top3 buckets in phase#1 (due to tie breaker), \n    // so they aren't refined -- after refinement the re-sorting re-orders the buckets\n    client.testJQ(params(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{\"\n                         + \" cat_1 : { type:terms, field:cat_s, limit:3, overrequest:0\"\n                         + \"           , refine:true, prelim_sort:'count asc', sort:'index desc' }, \"\n                         + \" cat_2 : { type:terms, field:cat_s, limit:3, overrequest:0\"\n                         + \"           , refine:true, prelim_sort:'sum_p asc', sort:'count desc' \"\n                         + \"           , facet: { sum_p: 'sum(price_i)' } }\"\n                         + \"}\")\n                  , \"facets=={ count: \"+id+\",\"\n                  + \"  cat_1:{ buckets:[ \"\n                  + \"            {val:X,count:4},\" // index desc\n                  + \"            {val:B,count:1},\" \n                  + \"            {val:A,count:1},\" \n                  + \"  ] },\"\n                  + \"  cat_2:{ buckets:[ \"\n                  + \"            {val:X,count:4,sum_p:4.0},\" // count desc\n                  + \"            {val:A,count:1,sum_p:1.0},\" // index order tie break\n                  + \"            {val:B,count:1,sum_p:1.0},\"\n                  + \"  ] }\"\n                  + \"}\"\n                  );\n\n    // with some explicit overrefinement=2, we also refine C and Y, giving us those additional\n    // (fully populated) buckets to consider during re-sorting...\n    client.testJQ(params(\"q\", \"*:*\", \"rows\", \"0\", \"json.facet\", \"{\"\n                         + \" cat_1 : { type:terms, field:cat_s, limit:3, overrequest:0, overrefine:2\"\n                         + \"           , refine:true, prelim_sort:'count asc', sort:'index desc' }, \"\n                         + \" cat_2 : { type:terms, field:cat_s, limit:3, overrequest:0, overrefine:2\"\n                         + \"           , refine:true, prelim_sort:'sum_p asc', sort:'count desc' \"\n                         + \"           , facet: { sum_p: 'sum(price_i)' } }\"\n                         + \"}\")\n                  , \"facets=={ count: \"+id+\",\"\n                  + \"  cat_1:{ buckets:[ \"\n                  + \"            {val:Y,count:5},\" // index desc\n                  + \"            {val:X,count:4},\" \n                  + \"            {val:C,count:6},\" \n                  + \"  ] },\"\n                  + \"  cat_2:{ buckets:[ \"\n                  + \"            {val:C,count:6,sum_p:6.0},\" // count desc\n                  + \"            {val:Y,count:5,sum_p:5.0},\"\n                  + \"            {val:X,count:4,sum_p:4.0},\"\n                  + \"  ] }\"\n                  + \"}\"\n                  );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}