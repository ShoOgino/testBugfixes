{"path":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","commits":[{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(PayloadSpans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        Iterator it = payload.iterator();\n        while(it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(PayloadSpans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        Iterator it = payload.iterator();\n        while(it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        Iterator it = payload.iterator();\n        while(it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(VERBOSE)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection<byte[]> payload = spans.getPayload();\n        if(VERBOSE)\n          System.out.println(\"payloads for span:\" + payload.size());\n        for (final byte [] bytes : payload) {\n          if(VERBOSE)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}