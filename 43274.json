{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#writeReaderPool(boolean).mjava","commits":[{"id":"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f","date":1525347515,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#writeReaderPool(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Ensures that all changes in the reader-pool are written to disk.\n   * @param writeDeletes if <code>true</code> if deletes should be written to disk too.\n   */\n  private final void writeReaderPool(boolean writeDeletes) throws IOException {\n    assert Thread.holdsLock(this);\n    if (writeDeletes) {\n      if (readerPool.commit(segmentInfos)) {\n        checkpointNoSIS();\n      }\n    } else { // only write the docValues\n      if (readerPool.writeAllDocValuesUpdates()) {\n        checkpoint();\n      }\n    }\n    // now do some best effort to check if a segment is fully deleted\n    List<SegmentCommitInfo> toDrop = new ArrayList<>(); // don't modify segmentInfos in-place\n    for (SegmentCommitInfo info : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = readerPool.get(info, false);\n      if (readersAndUpdates != null) {\n        if (isFullyDeleted(readersAndUpdates)) {\n          toDrop.add(info);\n        }\n      }\n    }\n    for (SegmentCommitInfo info : toDrop) {\n      dropDeletedSegment(info);\n    }\n    if (toDrop.isEmpty() == false) {\n      checkpoint();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2","date":1588002560,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#writeReaderPool(boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#writeReaderPool(boolean).mjava","sourceNew":"  /**\n   * Ensures that all changes in the reader-pool are written to disk.\n   * @param writeDeletes if <code>true</code> if deletes should be written to disk too.\n   */\n  private void writeReaderPool(boolean writeDeletes) throws IOException {\n    assert Thread.holdsLock(this);\n    if (writeDeletes) {\n      if (readerPool.commit(segmentInfos)) {\n        checkpointNoSIS();\n      }\n    } else { // only write the docValues\n      if (readerPool.writeAllDocValuesUpdates()) {\n        checkpoint();\n      }\n    }\n    // now do some best effort to check if a segment is fully deleted\n    List<SegmentCommitInfo> toDrop = new ArrayList<>(); // don't modify segmentInfos in-place\n    for (SegmentCommitInfo info : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = readerPool.get(info, false);\n      if (readersAndUpdates != null) {\n        if (isFullyDeleted(readersAndUpdates)) {\n          toDrop.add(info);\n        }\n      }\n    }\n    for (SegmentCommitInfo info : toDrop) {\n      dropDeletedSegment(info);\n    }\n    if (toDrop.isEmpty() == false) {\n      checkpoint();\n    }\n  }\n\n","sourceOld":"  /**\n   * Ensures that all changes in the reader-pool are written to disk.\n   * @param writeDeletes if <code>true</code> if deletes should be written to disk too.\n   */\n  private final void writeReaderPool(boolean writeDeletes) throws IOException {\n    assert Thread.holdsLock(this);\n    if (writeDeletes) {\n      if (readerPool.commit(segmentInfos)) {\n        checkpointNoSIS();\n      }\n    } else { // only write the docValues\n      if (readerPool.writeAllDocValuesUpdates()) {\n        checkpoint();\n      }\n    }\n    // now do some best effort to check if a segment is fully deleted\n    List<SegmentCommitInfo> toDrop = new ArrayList<>(); // don't modify segmentInfos in-place\n    for (SegmentCommitInfo info : segmentInfos) {\n      ReadersAndUpdates readersAndUpdates = readerPool.get(info, false);\n      if (readersAndUpdates != null) {\n        if (isFullyDeleted(readersAndUpdates)) {\n          toDrop.add(info);\n        }\n      }\n    }\n    for (SegmentCommitInfo info : toDrop) {\n      dropDeletedSegment(info);\n    }\n    if (toDrop.isEmpty() == false) {\n      checkpoint();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"]},"commit2Childs":{"f372764a5bd3ebacde5b99ee3303153eb5ec0d2f":["8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f372764a5bd3ebacde5b99ee3303153eb5ec0d2f"],"8a428f5314daaabf8eab7c50bdc3bc14e6cd1aa2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}