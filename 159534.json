{"path":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","commits":[{"id":"c35c5c6cdce2b681af3103a391f066040c1ef6c4","date":1131786206,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    Query orig = new RegexQuery(term).rewrite(reader);\n\n    // RegexQuery (via MultiTermQuery).rewrite always returns a BooleanQuery\n    BooleanQuery bq = (BooleanQuery) orig;\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74be754ec3ab6906922b673bf951696c442123b2","date":1135778260,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    RegexQuery orig = new RegexQuery(term);\n    orig.setRegexImplementation(regexImpl);\n\n    // RegexQuery (via MultiTermQuery).rewrite always returns a BooleanQuery\n    BooleanQuery bq = (BooleanQuery) orig.rewrite(reader);\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    Query orig = new RegexQuery(term).rewrite(reader);\n\n    // RegexQuery (via MultiTermQuery).rewrite always returns a BooleanQuery\n    BooleanQuery bq = (BooleanQuery) orig;\n\n    BooleanClause[] clauses = bq.getClauses();\n    SpanQuery[] sqs = new SpanQuery[clauses.length];\n    for (int i = 0; i < clauses.length; i++) {\n      BooleanClause clause = clauses[i];\n\n      // Clauses from RegexQuery.rewrite are always TermQuery's\n      TermQuery tq = (TermQuery) clause.getQuery();\n\n      sqs[i] = new SpanTermQuery(tq.getTerm());\n      sqs[i].setBoost(tq.getBoost());\n    }\n\n    SpanOrQuery query = new SpanOrQuery(sqs);\n    query.setBoost(orig.getBoost());\n\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74be754ec3ab6906922b673bf951696c442123b2":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74be754ec3ab6906922b673bf951696c442123b2"]},"commit2Childs":{"74be754ec3ab6906922b673bf951696c442123b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["74be754ec3ab6906922b673bf951696c442123b2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}