{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["727701119ba83331e2715512702367dc549a0d4f","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68281b529b74366dea47f5d3f95138e3c8422474","date":1439843698,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    log.debug(\"clusterStateSet: version {} legacy {} interesting {} watched {} lazy {} total {}\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet(),\n        interestingCollections,\n        watchedCollectionStates.keySet(),\n        lazyCollectionStates.keySet(),\n        clusterState.getCollections());\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    log.debug(\"clusterStateSet: version {} legacy {} interesting {} watched {} lazy {} total {}\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet(),\n        interestingCollections,\n        watchedCollectionStates.keySet(),\n        lazyCollectionStates.keySet(),\n        clusterState.getCollections());\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, ClusterState.CollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    log.debug(\"clusterStateSet: version {} legacy {} interesting {} watched {} lazy {} total {}\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet(),\n        interestingCollections,\n        watchedCollectionStates.keySet(),\n        lazyCollectionStates.keySet(),\n        clusterState.getCollections());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7477015ee104ad8144fba06b9b0a8ea93aea50f8","date":1450790907,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet(),\n        interestingCollections,\n        watchedCollectionStates.keySet(),\n        lazyCollectionStates.keySet(),\n        clusterState.getCollections());\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    log.debug(\"clusterStateSet: version {} legacy {} interesting {} watched {} lazy {} total {}\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet(),\n        interestingCollections,\n        watchedCollectionStates.keySet(),\n        lazyCollectionStates.keySet(),\n        clusterState.getCollections());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e6a62db2872d21ade436729a86feb50ddea1ee9","date":1455926998,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          clusterState.getZkClusterStateVersion(),\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet(),\n        interestingCollections,\n        watchedCollectionStates.keySet(),\n        lazyCollectionStates.keySet(),\n        clusterState.getCollections());\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"733eaf468f18297b1bcc51031353bdfdd1913bdf","date":1456928540,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          clusterState.getZkClusterStateVersion(),\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        clusterState.getZkClusterStateVersion(),\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: version [{}] legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          clusterState.getZkClusterStateVersion(),\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727701119ba83331e2715512702367dc549a0d4f","date":1461113194,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Are there any interesting collections that disappeared from the legacy cluster state?\n    for (String coll : interestingCollections) {\n      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {\n        new StateWatcher(coll).refreshAndWatch(true);\n      }\n    }\n  \n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5b4df85b7268ca40452d6c01343d8eb00ed1f70a","date":1463171656,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f","date":1467384467,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState(Map[String,DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   *\n   * @param changedCollections collections that have changed since the last call,\n   *                           and that should fire notifications\n   */\n  private void constructState(Map<String, DocCollection> changedCollections) {\n\n    Set<String> liveNodes = this.liveNodes; // volatile read\n\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n\n    for (Map.Entry<String, DocCollection> entry : changedCollections.entrySet()) {\n      notifyStateWatchers(liveNodes, entry.getKey(), entry.getValue());\n    }\n  }\n\n","sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        collectionWatches.keySet().size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          collectionWatches.keySet(),\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#constructState().mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct the total state view from all sources.\n   * Must hold {@link #getUpdateLock()} before calling this.\n   */\n  private void constructState() {\n    // Legacy clusterstate is authoritative, for backwards compatibility.\n    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.\n    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);\n\n    // Add state format2 collections, but don't override legacy collection states.\n    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));\n    }\n\n    // Finally, add any lazy collections that aren't already accounted for.\n    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {\n      result.putIfAbsent(entry.getKey(), entry.getValue());\n    }\n\n    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);\n    LOG.debug(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n        legacyCollectionStates.keySet().size(),\n        interestingCollections.size(),\n        watchedCollectionStates.keySet().size(),\n        lazyCollectionStates.keySet().size(),\n        clusterState.getCollectionStates().size());\n\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"clusterStateSet: legacy [{}] interesting [{}] watched [{}] lazy [{}] total [{}]\",\n          legacyCollectionStates.keySet(),\n          interestingCollections,\n          watchedCollectionStates.keySet(),\n          lazyCollectionStates.keySet(),\n          clusterState.getCollectionStates());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"727701119ba83331e2715512702367dc549a0d4f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"9b701e0fcef214f86bab1daf107adce0b0131212":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","727701119ba83331e2715512702367dc549a0d4f"],"0ad30c6a479e764150a3316e57263319775f1df2":["9b701e0fcef214f86bab1daf107adce0b0131212","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2e6a62db2872d21ade436729a86feb50ddea1ee9":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"68281b529b74366dea47f5d3f95138e3c8422474":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9b701e0fcef214f86bab1daf107adce0b0131212","b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["9b701e0fcef214f86bab1daf107adce0b0131212","0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["68281b529b74366dea47f5d3f95138e3c8422474"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["2e6a62db2872d21ade436729a86feb50ddea1ee9","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["2e6a62db2872d21ade436729a86feb50ddea1ee9"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["9b701e0fcef214f86bab1daf107adce0b0131212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"]},"commit2Childs":{"727701119ba83331e2715512702367dc549a0d4f":["9b701e0fcef214f86bab1daf107adce0b0131212"],"9b701e0fcef214f86bab1daf107adce0b0131212":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","5b4df85b7268ca40452d6c01343d8eb00ed1f70a"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e6a62db2872d21ade436729a86feb50ddea1ee9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","733eaf468f18297b1bcc51031353bdfdd1913bdf"],"68281b529b74366dea47f5d3f95138e3c8422474":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b5a3dacb5a7d745cb12121c3b36d19d28dfd8a2f"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["68281b529b74366dea47f5d3f95138e3c8422474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["7477015ee104ad8144fba06b9b0a8ea93aea50f8"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["727701119ba83331e2715512702367dc549a0d4f","9b701e0fcef214f86bab1daf107adce0b0131212"],"733eaf468f18297b1bcc51031353bdfdd1913bdf":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"5b4df85b7268ca40452d6c01343d8eb00ed1f70a":["0ad30c6a479e764150a3316e57263319775f1df2"],"7477015ee104ad8144fba06b9b0a8ea93aea50f8":["2e6a62db2872d21ade436729a86feb50ddea1ee9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}