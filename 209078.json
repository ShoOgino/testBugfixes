{"path":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the {@link Scorer}. This may not return {@code null} and must be called\n   * at most once.\n   * @param randomAccess A hint about the expected usage of the {@link Scorer}.\n   * If {@link DocIdSetIterator#advance} or {@link TwoPhaseIterator} will be\n   * used to check whether given doc ids match, then pass {@code true}.\n   * Otherwise if the {@link Scorer} will be mostly used to lead the iteration\n   * using {@link DocIdSetIterator#nextDoc()}, then {@code false} should be\n   * passed. Under doubt, pass {@code false} which usually has a better\n   * worst-case.\n   */\n  public abstract Scorer get(boolean randomAccess) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the {@link Scorer}. This may not return {@code null} and must be called\n   * at most once.\n   * @param randomAccess A hint about the expected usage of the {@link Scorer}.\n   * If {@link DocIdSetIterator#advance} or {@link TwoPhaseIterator} will be\n   * used to check whether given doc ids match, then pass {@code true}.\n   * Otherwise if the {@link Scorer} will be mostly used to lead the iteration\n   * using {@link DocIdSetIterator#nextDoc()}, then {@code false} should be\n   * passed. Under doubt, pass {@code false} which usually has a better\n   * worst-case.\n   */\n  public abstract Scorer get(boolean randomAccess) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f3e9c0fc20b3107388ec853a6fbad9f891b461","date":1502359844,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the {@link Scorer}. This may not return {@code null} and must be called\n   * at most once.\n   * @param randomAccess A hint about the expected usage of the {@link Scorer}.\n   * If {@link DocIdSetIterator#advance} or {@link TwoPhaseIterator} will be\n   * used to check whether given doc ids match, then pass {@code true}.\n   * Otherwise if the {@link Scorer} will be mostly used to lead the iteration\n   * using {@link DocIdSetIterator#nextDoc()}, then {@code false} should be\n   * passed. Under doubt, pass {@code false} which usually has a better\n   * worst-case.\n   */\n  public abstract Scorer get(boolean randomAccess) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6ba405c7c8192661bdf7ce782181d12f3162a6","date":1502361392,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the {@link Scorer}. This may not return {@code null} and must be called\n   * at most once.\n   * @param randomAccess A hint about the expected usage of the {@link Scorer}.\n   * If {@link DocIdSetIterator#advance} or {@link TwoPhaseIterator} will be\n   * used to check whether given doc ids match, then pass {@code true}.\n   * Otherwise if the {@link Scorer} will be mostly used to lead the iteration\n   * using {@link DocIdSetIterator#nextDoc()}, then {@code false} should be\n   * passed. Under doubt, pass {@code false} which usually has a better\n   * worst-case.\n   */\n  public abstract Scorer get(boolean randomAccess) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58884af1f68e9d61c217c753fbd6266d86a63b14","date":1502363401,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the {@link Scorer}. This may not return {@code null} and must be called\n   * at most once.\n   * @param randomAccess A hint about the expected usage of the {@link Scorer}.\n   * If {@link DocIdSetIterator#advance} or {@link TwoPhaseIterator} will be\n   * used to check whether given doc ids match, then pass {@code true}.\n   * Otherwise if the {@link Scorer} will be mostly used to lead the iteration\n   * using {@link DocIdSetIterator#nextDoc()}, then {@code false} should be\n   * passed. Under doubt, pass {@code false} which usually has a better\n   * worst-case.\n   */\n  public abstract Scorer get(boolean randomAccess) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","date":1502692251,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ScorerSupplier#get(boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the {@link Scorer}. This may not return {@code null} and must be called\n   * at most once.\n   * @param randomAccess A hint about the expected usage of the {@link Scorer}.\n   * If {@link DocIdSetIterator#advance} or {@link TwoPhaseIterator} will be\n   * used to check whether given doc ids match, then pass {@code true}.\n   * Otherwise if the {@link Scorer} will be mostly used to lead the iteration\n   * using {@link DocIdSetIterator#nextDoc()}, then {@code false} should be\n   * passed. Under doubt, pass {@code false} which usually has a better\n   * worst-case.\n   */\n  public abstract Scorer get(boolean randomAccess) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["dca67e06c96e95a8d9ef07418b6299bfd981523b","24f3e9c0fc20b3107388ec853a6fbad9f891b461"],"58884af1f68e9d61c217c753fbd6266d86a63b14":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":["dca67e06c96e95a8d9ef07418b6299bfd981523b","7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"7d6ba405c7c8192661bdf7ce782181d12f3162a6":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58884af1f68e9d61c217c753fbd6266d86a63b14":[],"24f3e9c0fc20b3107388ec853a6fbad9f891b461":["7d6ba405c7c8192661bdf7ce782181d12f3162a6"],"dca67e06c96e95a8d9ef07418b6299bfd981523b":["7d6ba405c7c8192661bdf7ce782181d12f3162a6","58884af1f68e9d61c217c753fbd6266d86a63b14","24f3e9c0fc20b3107388ec853a6fbad9f891b461","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["58884af1f68e9d61c217c753fbd6266d86a63b14","93d40a0287bd8a5b69a8df49a797dcd4a8b1a7be","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}