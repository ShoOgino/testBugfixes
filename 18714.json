{"path":"solr/core/src/java/org/apache/solr/search/JoinQuery.JoinQueryWeight#scorer(LeafReaderContext).mjava","commits":[{"id":"1e1491db4de13536b70146fc5a8f03101f0f84de","date":1593014806,"type":1,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQuery.JoinQueryWeight#scorer(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQuery[JoinQParserPlugin].JoinQueryWeight#scorer(LeafReaderContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        RTimer timer = (debug ? new RTimer() : null);\n        resultSet = getDocSet();\n        if (timer != null) timer.stop();\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<>();\n          dbg.add(\"time\", (long) timer.getTime());\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, null);\n      if (readerSet == null) {\n        return null;\n      }\n      DocIdSetIterator readerSetIterator = readerSet.iterator();\n      if (readerSetIterator == null) {\n        return null;\n      }\n      return new ConstantScoreScorer(this, score(), scoreMode, readerSetIterator);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(LeafReaderContext context) throws IOException {\n      if (filter == null) {\n        boolean debug = rb != null && rb.isDebug();\n        RTimer timer = (debug ? new RTimer() : null);\n        resultSet = getDocSet();\n        if (timer != null) timer.stop();\n\n        if (debug) {\n          SimpleOrderedMap<Object> dbg = new SimpleOrderedMap<>();\n          dbg.add(\"time\", (long) timer.getTime());\n          dbg.add(\"fromSetSize\", fromSetSize);  // the input\n          dbg.add(\"toSetSize\", resultSet.size());    // the output\n\n          dbg.add(\"fromTermCount\", fromTermCount);\n          dbg.add(\"fromTermTotalDf\", fromTermTotalDf);\n          dbg.add(\"fromTermDirectCount\", fromTermDirectCount);\n          dbg.add(\"fromTermHits\", fromTermHits);\n          dbg.add(\"fromTermHitsTotalDf\", fromTermHitsTotalDf);\n          dbg.add(\"toTermHits\", toTermHits);\n          dbg.add(\"toTermHitsTotalDf\", toTermHitsTotalDf);\n          dbg.add(\"toTermDirectCount\", toTermDirectCount);\n          dbg.add(\"smallSetsDeferred\", smallSetsDeferred);\n          dbg.add(\"toSetDocsAdded\", resultListDocs);\n\n          // TODO: perhaps synchronize  addDebug in the future...\n          rb.addDebug(dbg, \"join\", JoinQuery.this.toString());\n        }\n\n        filter = resultSet.getTopFilter();\n      }\n\n      // Although this set only includes live docs, other filters can be pushed down to queries.\n      DocIdSet readerSet = filter.getDocIdSet(context, null);\n      if (readerSet == null) {\n        return null;\n      }\n      DocIdSetIterator readerSetIterator = readerSet.iterator();\n      if (readerSetIterator == null) {\n        return null;\n      }\n      return new ConstantScoreScorer(this, score(), scoreMode, readerSetIterator);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e1491db4de13536b70146fc5a8f03101f0f84de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e1491db4de13536b70146fc5a8f03101f0f84de"]},"commit2Childs":{"1e1491db4de13536b70146fc5a8f03101f0f84de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e1491db4de13536b70146fc5a8f03101f0f84de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}