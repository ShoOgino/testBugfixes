{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testExecutorUpdateStreamInsufficientCredentials().mjava","commits":[{"id":"d959ec4c6f38b465c2b853271aecb516e06e7d94","date":1580403663,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/CloudAuthStreamTest#testExecutorUpdateStreamInsufficientCredentials().mjava","pathOld":"/dev/null","sourceNew":"  public void testExecutorUpdateStreamInsufficientCredentials() throws Exception {\n    int id = 0;\n    // both of these users have valid credentials and authz read COLLECTION_X, but neither has\n    // authz to write to X...\n    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {\n      // ... regardless of how the request is routed...\n      for (String path : Arrays.asList(COLLECTION_X, COLLECTION_Y)) {\n        final String trace = user + \":\" + path;\n        final String expr\n          = \"executor(threads=1,                                                         \"\n          + \"         tuple(expr_s=\\\"update(\"+COLLECTION_X+\", batchSize=5,               \"\n          + \"                               tuple(id='\"+(++id)+\"',foo_s='\"+trace+\"'))    \"\n          + \"                      \\\"))                                                  \"\n          ;\n        final SolrStream solrStream = new SolrStream(solrUrl + \"/\" + path,\n                                                     params(\"qt\", \"/stream\",\n                                                            \"_trace\", \"executor_via_\" + trace,\n                                                            \"expr\", expr));\n        solrStream.setCredentials(user, user);\n\n        // NOTE: Becaue of the backgroun threads, no failures will to be returned to client...\n        final List<Tuple> tuples = getTuples(solrStream);\n        assertEquals(0, tuples.size());\n        \n        // we have to assert that the updates failed solely based on the side effects...\n        assertEquals(\"doc count after execute update via \" + trace,\n                     0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n\n      }\n    }\n\n    // sanity check\n    assertEquals(\"final doc count\",\n                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d959ec4c6f38b465c2b853271aecb516e06e7d94"]},"commit2Childs":{"d959ec4c6f38b465c2b853271aecb516e06e7d94":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d959ec4c6f38b465c2b853271aecb516e06e7d94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}