{"path":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","commits":[{"id":"d729a652b9a64220536d47218ed1c8324955e86d","date":1474975102,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"/dev/null","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, rescoredDocs.getMaxScore()));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      if (sort != null) {\n        TopFieldCollector.populateScores(mainDocs.scoreDocs, searcher, query);\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","sourceNew":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits.value == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      if (sort != null) {\n        TopFieldCollector.populateScores(mainDocs.scoreDocs, searcher, query);\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      if (sort != null) {\n        TopFieldCollector.populateScores(mainDocs.scoreDocs, searcher, query);\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50dfd19525c8d73e856dca6edb64b7aea074037f","date":1591579225,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/ReRankCollector#topDocs(int,int).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits.value == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      if (sort != null) {\n        TopFieldCollector.populateScores(mainDocs.scoreDocs, searcher, query);\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","sourceOld":"  public TopDocs topDocs(int start, int howMany) {\n\n    try {\n\n      TopDocs mainDocs = mainCollector.topDocs(0,  Math.max(reRankDocs, length));\n\n      if(mainDocs.totalHits.value == 0 || mainDocs.scoreDocs.length == 0) {\n        return mainDocs;\n      }\n\n      if (sort != null) {\n        TopFieldCollector.populateScores(mainDocs.scoreDocs, searcher, query);\n      }\n\n      ScoreDoc[] mainScoreDocs = mainDocs.scoreDocs;\n      ScoreDoc[] reRankScoreDocs = new ScoreDoc[Math.min(mainScoreDocs.length, reRankDocs)];\n      System.arraycopy(mainScoreDocs, 0, reRankScoreDocs, 0, reRankScoreDocs.length);\n\n      mainDocs.scoreDocs = reRankScoreDocs;\n\n      TopDocs rescoredDocs = reRankQueryRescorer\n          .rescore(searcher, mainDocs, mainDocs.scoreDocs.length);\n\n      //Lower howMany to return if we've collected fewer documents.\n      howMany = Math.min(howMany, mainScoreDocs.length);\n\n      if(boostedPriority != null) {\n        SolrRequestInfo info = SolrRequestInfo.getRequestInfo();\n        Map requestContext = null;\n        if(info != null) {\n          requestContext = info.getReq().getContext();\n        }\n\n        IntIntHashMap boostedDocs = QueryElevationComponent.getBoostDocs((SolrIndexSearcher)searcher, boostedPriority, requestContext);\n\n        float maxScore = rescoredDocs.scoreDocs.length == 0 ? Float.NaN : rescoredDocs.scoreDocs[0].score;\n        Arrays.sort(rescoredDocs.scoreDocs, new BoostedComp(boostedDocs, mainDocs.scoreDocs, maxScore));\n      }\n\n      if(howMany == rescoredDocs.scoreDocs.length) {\n        return rescoredDocs; // Just return the rescoredDocs\n      } else if(howMany > rescoredDocs.scoreDocs.length) {\n        //We need to return more then we've reRanked, so create the combined page.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(mainScoreDocs, 0, scoreDocs, 0, scoreDocs.length); //lay down the initial docs\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, rescoredDocs.scoreDocs.length);//overlay the re-ranked docs.\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      } else {\n        //We've rescored more then we need to return.\n        ScoreDoc[] scoreDocs = new ScoreDoc[howMany];\n        System.arraycopy(rescoredDocs.scoreDocs, 0, scoreDocs, 0, howMany);\n        rescoredDocs.scoreDocs = scoreDocs;\n        return rescoredDocs;\n      }\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d729a652b9a64220536d47218ed1c8324955e86d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"50dfd19525c8d73e856dca6edb64b7aea074037f":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d729a652b9a64220536d47218ed1c8324955e86d"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"]},"commit2Childs":{"d729a652b9a64220536d47218ed1c8324955e86d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"50dfd19525c8d73e856dca6edb64b7aea074037f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d729a652b9a64220536d47218ed1c8324955e86d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","1d3f7ab1a502671bbdb03bcced21e764d2483221"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["50dfd19525c8d73e856dca6edb64b7aea074037f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}