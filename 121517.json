{"path":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#clauses().mjava","commits":[{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#clauses().mjava","pathOld":"/dev/null","sourceNew":"  protected Map<Query,Occur> clauses() throws SyntaxError {\n    String[] params = localParams.getParams(getFiltersParamName());\n    if(params!=null && params.length == 0) { // never happens \n      throw new SyntaxError(\"Local parameter \"+getFiltersParamName() + \n                           \" is not defined for \"+stringIncludingLocalParams);\n    }\n    Map<Query,Occur> clauses = new IdentityHashMap<>();\n    \n    for (String filter : params==null ? new String[0] : params) {\n      if(filter==null || filter.length() == 0) {\n        throw new SyntaxError(\"Filter '\"+filter + \n                             \"' has been picked in \"+stringIncludingLocalParams);\n      }\n      // as a side effect, qparser is mapped by tags in req context\n      QParser parser = subQuery(filter, null);\n      Query query = parser.getQuery();\n      clauses.put(query, BooleanClause.Occur.FILTER);\n    }\n    String queryText = localParams.get(QueryParsing.V);\n    if (queryText != null && queryText.length() > 0) {\n      QParser parser = subQuery(queryText, null);\n      clauses.put(parser.getQuery(), BooleanClause.Occur.MUST);\n    }\n    return clauses;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b2cebce8aded9fff0c315c32efe811679c29d47","date":1593532507,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#clauses().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/FiltersQParser#clauses().mjava","sourceNew":"  protected Map<QParser,Occur> clauses() throws SyntaxError {\n    String[] params = localParams.getParams(getFiltersParamName());\n    if(params!=null && params.length == 0) { // never happens \n      throw new SyntaxError(\"Local parameter \"+getFiltersParamName() + \n                           \" is not defined for \"+stringIncludingLocalParams);\n    }\n    Map<QParser,Occur> clauses = new IdentityHashMap<>();\n    \n    for (String filter : params==null ? new String[0] : params) {\n      if(filter==null || filter.length() == 0) {\n        throw new SyntaxError(\"Filter '\"+filter + \n                             \"' has been picked in \"+stringIncludingLocalParams);\n      }\n      // as a side effect, qparser is mapped by tags in req context\n      QParser parser = subQuery(filter, null);\n      clauses.put(parser, BooleanClause.Occur.FILTER);\n    }\n    String queryText = localParams.get(QueryParsing.V);\n    if (queryText != null && queryText.length() > 0) {\n      QParser parser = subQuery(queryText, null);\n      clauses.put(parser, BooleanClause.Occur.MUST);\n    }\n    return clauses;\n  }\n\n","sourceOld":"  protected Map<Query,Occur> clauses() throws SyntaxError {\n    String[] params = localParams.getParams(getFiltersParamName());\n    if(params!=null && params.length == 0) { // never happens \n      throw new SyntaxError(\"Local parameter \"+getFiltersParamName() + \n                           \" is not defined for \"+stringIncludingLocalParams);\n    }\n    Map<Query,Occur> clauses = new IdentityHashMap<>();\n    \n    for (String filter : params==null ? new String[0] : params) {\n      if(filter==null || filter.length() == 0) {\n        throw new SyntaxError(\"Filter '\"+filter + \n                             \"' has been picked in \"+stringIncludingLocalParams);\n      }\n      // as a side effect, qparser is mapped by tags in req context\n      QParser parser = subQuery(filter, null);\n      Query query = parser.getQuery();\n      clauses.put(query, BooleanClause.Occur.FILTER);\n    }\n    String queryText = localParams.get(QueryParsing.V);\n    if (queryText != null && queryText.length() > 0) {\n      QParser parser = subQuery(queryText, null);\n      clauses.put(parser.getQuery(), BooleanClause.Occur.MUST);\n    }\n    return clauses;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b2cebce8aded9fff0c315c32efe811679c29d47":["5f7c69c29432074b666568db5e84001acd540dee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b2cebce8aded9fff0c315c32efe811679c29d47"]},"commit2Childs":{"5b2cebce8aded9fff0c315c32efe811679c29d47":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f7c69c29432074b666568db5e84001acd540dee"],"5f7c69c29432074b666568db5e84001acd540dee":["5b2cebce8aded9fff0c315c32efe811679c29d47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}