{"path":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testInitialization().mjava","commits":[{"id":"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9","date":1419431639,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testInitialization().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testInitalization().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testInitialization()\n  {\n    SolrCore core = h.getCore();\n    \n    // Build an explicit list\n    //-----------------------------------------------\n    List<String> names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    NamedList args = new NamedList();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    SearchHandler handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n    \n    assertEquals( 1, handler.getComponents().size() );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), \n        handler.getComponents().get( 0 ) );\n\n    // Build an explicit list that includes the debug comp.\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( FacetComponent.COMPONENT_NAME );\n    names0.add( DebugComponent.COMPONENT_NAME );\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n\n    args = new NamedList();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n\n    assertEquals( 3, handler.getComponents().size() );\n    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ),\n        handler.getComponents().get( 0 ) );\n    assertEquals( core.getSearchComponent( DebugComponent.COMPONENT_NAME ),\n        handler.getComponents().get( 1 ) );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), \n        handler.getComponents().get( 2 ) );\n    \n\n    // First/Last list\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    List<String> names1 = new ArrayList<>();\n    names1.add( FacetComponent.COMPONENT_NAME );\n    \n    args = new NamedList();\n    args.add( SearchHandler.INIT_FIRST_COMPONENTS, names0 );\n    args.add( SearchHandler.INIT_LAST_COMPONENTS, names1 );\n    handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n    \n    List<SearchComponent> comps = handler.getComponents();\n    assertEquals( 2+handler.getDefaultComponents().size(), comps.size() );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), comps.get( 0 ) );\n    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ), comps.get( comps.size()-2 ) );\n    //Debug component is always last in this case\n    assertEquals( core.getSearchComponent( DebugComponent.COMPONENT_NAME ), comps.get( comps.size()-1 ) );\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testInitalization()\n  {\n    SolrCore core = h.getCore();\n    \n    // Build an explicit list\n    //-----------------------------------------------\n    List<String> names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    NamedList args = new NamedList();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    SearchHandler handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n    \n    assertEquals( 1, handler.getComponents().size() );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), \n        handler.getComponents().get( 0 ) );\n\n    // Build an explicit list that includes the debug comp.\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( FacetComponent.COMPONENT_NAME );\n    names0.add( DebugComponent.COMPONENT_NAME );\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n\n    args = new NamedList();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n\n    assertEquals( 3, handler.getComponents().size() );\n    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ),\n        handler.getComponents().get( 0 ) );\n    assertEquals( core.getSearchComponent( DebugComponent.COMPONENT_NAME ),\n        handler.getComponents().get( 1 ) );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), \n        handler.getComponents().get( 2 ) );\n    \n\n    // First/Last list\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    List<String> names1 = new ArrayList<>();\n    names1.add( FacetComponent.COMPONENT_NAME );\n    \n    args = new NamedList();\n    args.add( SearchHandler.INIT_FIRST_COMPONENTS, names0 );\n    args.add( SearchHandler.INIT_LAST_COMPONENTS, names1 );\n    handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n    \n    List<SearchComponent> comps = handler.getComponents();\n    assertEquals( 2+handler.getDefaultComponents().size(), comps.size() );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), comps.get( 0 ) );\n    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ), comps.get( comps.size()-2 ) );\n    //Debug component is always last in this case\n    assertEquals( core.getSearchComponent( DebugComponent.COMPONENT_NAME ), comps.get( comps.size()-1 ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testInitialization().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/SearchHandlerTest#testInitialization().mjava","sourceNew":"  @Test\n  public void testInitialization()\n  {\n    SolrCore core = h.getCore();\n    \n    // Build an explicit list\n    //-----------------------------------------------\n    List<String> names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    NamedList<List<String>> args = new NamedList<>();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    try (SearchHandler handler = new SearchHandler()) {\n      handler.init(args);\n      handler.inform(core);\n\n      assertEquals(1, handler.getComponents().size());\n      assertEquals(core.getSearchComponent(MoreLikeThisComponent.COMPONENT_NAME),\n          handler.getComponents().get(0));\n    } catch (IOException e) {\n      fail(\"IOExcepiton closing SearchHandler\");\n    }\n\n    // Build an explicit list that includes the debug comp.\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( FacetComponent.COMPONENT_NAME );\n    names0.add( DebugComponent.COMPONENT_NAME );\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n\n    args = new NamedList<>();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    try (SearchHandler handler = new SearchHandler()) {\n      handler.init(args);\n      handler.inform(core);\n\n      assertEquals(3, handler.getComponents().size());\n      assertEquals(core.getSearchComponent(FacetComponent.COMPONENT_NAME),\n          handler.getComponents().get(0));\n      assertEquals(core.getSearchComponent(DebugComponent.COMPONENT_NAME),\n          handler.getComponents().get(1));\n      assertEquals(core.getSearchComponent(MoreLikeThisComponent.COMPONENT_NAME),\n          handler.getComponents().get(2));\n    } catch (IOException e) {\n      fail(\"Exception when closing SearchHandler\");\n    }\n    \n\n    // First/Last list\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    List<String> names1 = new ArrayList<>();\n    names1.add( FacetComponent.COMPONENT_NAME );\n    \n    args = new NamedList<>();\n    args.add( SearchHandler.INIT_FIRST_COMPONENTS, names0 );\n    args.add( SearchHandler.INIT_LAST_COMPONENTS, names1 );\n    try (SearchHandler handler = new SearchHandler()) {\n      handler.init(args);\n      handler.inform(core);\n\n      List<SearchComponent> comps = handler.getComponents();\n      assertEquals(2 + handler.getDefaultComponents().size(), comps.size());\n      assertEquals(core.getSearchComponent(MoreLikeThisComponent.COMPONENT_NAME), comps.get(0));\n      assertEquals(core.getSearchComponent(FacetComponent.COMPONENT_NAME), comps.get(comps.size() - 2));\n      //Debug component is always last in this case\n      assertEquals(core.getSearchComponent(DebugComponent.COMPONENT_NAME), comps.get(comps.size() - 1));\n    } catch (IOException e) {\n      fail(\"Exception when closing SearchHandler\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testInitialization()\n  {\n    SolrCore core = h.getCore();\n    \n    // Build an explicit list\n    //-----------------------------------------------\n    List<String> names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    NamedList args = new NamedList();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    SearchHandler handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n    \n    assertEquals( 1, handler.getComponents().size() );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), \n        handler.getComponents().get( 0 ) );\n\n    // Build an explicit list that includes the debug comp.\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( FacetComponent.COMPONENT_NAME );\n    names0.add( DebugComponent.COMPONENT_NAME );\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n\n    args = new NamedList();\n    args.add( SearchHandler.INIT_COMPONENTS, names0 );\n    handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n\n    assertEquals( 3, handler.getComponents().size() );\n    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ),\n        handler.getComponents().get( 0 ) );\n    assertEquals( core.getSearchComponent( DebugComponent.COMPONENT_NAME ),\n        handler.getComponents().get( 1 ) );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), \n        handler.getComponents().get( 2 ) );\n    \n\n    // First/Last list\n    //-----------------------------------------------\n    names0 = new ArrayList<>();\n    names0.add( MoreLikeThisComponent.COMPONENT_NAME );\n    \n    List<String> names1 = new ArrayList<>();\n    names1.add( FacetComponent.COMPONENT_NAME );\n    \n    args = new NamedList();\n    args.add( SearchHandler.INIT_FIRST_COMPONENTS, names0 );\n    args.add( SearchHandler.INIT_LAST_COMPONENTS, names1 );\n    handler = new SearchHandler();\n    handler.init( args );\n    handler.inform( core );\n    \n    List<SearchComponent> comps = handler.getComponents();\n    assertEquals( 2+handler.getDefaultComponents().size(), comps.size() );\n    assertEquals( core.getSearchComponent( MoreLikeThisComponent.COMPONENT_NAME ), comps.get( 0 ) );\n    assertEquals( core.getSearchComponent( FacetComponent.COMPONENT_NAME ), comps.get( comps.size()-2 ) );\n    //Debug component is always last in this case\n    assertEquals( core.getSearchComponent( DebugComponent.COMPONENT_NAME ), comps.get( comps.size()-1 ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba055e19afc289adcb5bedaf68513793a7254012":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9"],"60e4efc947592a22b8b79c8b7a18bfb8f1eb89b9":["ba055e19afc289adcb5bedaf68513793a7254012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}