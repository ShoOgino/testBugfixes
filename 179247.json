{"path":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","sourceNew":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), \"UTF-8\"));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), \"UTF-8\"));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","pathOld":"/dev/null","sourceNew":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), \"UTF-8\"));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","sourceNew":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), \"UTF-8\"));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","sourceNew":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","sourceOld":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), \"UTF-8\"));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, \"UTF-8\"));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","sourceNew":null,"sourceOld":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#randomizeFewInputFiles(FileSystem,Path,Path).mjava","sourceNew":null,"sourceOld":"  private void randomizeFewInputFiles(FileSystem fs, Path outputStep2Dir, Path fullInputList) throws IOException {    \n    List<String> lines = new ArrayList();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(fullInputList), StandardCharsets.UTF_8));\n    try {\n      String line;\n      while ((line = reader.readLine()) != null) {\n        lines.add(line);\n      }\n    } finally {\n      reader.close();\n    }\n    \n    Collections.shuffle(lines, new Random(421439783L)); // constant seed for reproducability\n    \n    FSDataOutputStream out = fs.create(new Path(outputStep2Dir, FULL_INPUT_LIST));\n    Writer writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8));\n    try {\n      for (String line : lines) {\n        writer.write(line + \"\\n\");\n      } \n    } finally {\n      writer.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5eb2511ababf862ea11e10761c70ee560cd84510":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","9d3d365762604952e436b51980101dfc84cc1b3e"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["9d3d365762604952e436b51980101dfc84cc1b3e"],"9d3d365762604952e436b51980101dfc84cc1b3e":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["9d3d365762604952e436b51980101dfc84cc1b3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}