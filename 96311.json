{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"f75cd88b219e040b204bff4c189784659752f786","date":1250640581,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"/dev/null","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) {\n    \n    // set setMultiTermRewriteMethod for WildcardQueryNode and PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode || node instanceof  ParametricRangeQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n      \n      if (!getQueryConfigHandler().hasAttribute(MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the StandardQueryConfigHandler\n        throw new IllegalArgumentException(\"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      //read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n    }\n    \n    return node;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527dcfb2dea8b7ed93540e83a70960a2faec3e90","date":1250843791,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) {\n    \n    // set setMultiTermRewriteMethod for WildcardQueryNode and PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode || node instanceof  ParametricRangeQueryNode) {\n      \n      if (!getQueryConfigHandler().hasAttribute(MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the StandardQueryConfigHandler\n        throw new IllegalArgumentException(\"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      //read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n    }\n    \n    return node;\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) {\n    \n    // set setMultiTermRewriteMethod for WildcardQueryNode and PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode || node instanceof  ParametricRangeQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n      \n      if (!getQueryConfigHandler().hasAttribute(MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the StandardQueryConfigHandler\n        throw new IllegalArgumentException(\"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      //read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n    }\n    \n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) {\n    \n    // set setMultiTermRewriteMethod for WildcardQueryNode and PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode || node instanceof  ParametricRangeQueryNode) {\n      \n      if (!getQueryConfigHandler().hasAttribute(MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the StandardQueryConfigHandler\n        throw new IllegalArgumentException(\"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      //read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = ((MultiTermRewriteMethodAttribute) getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class))\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n    }\n    \n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/MultiTermRewriteMethodProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) {\n\n    // set setMultiTermRewriteMethod for WildcardQueryNode and\n    // PrefixWildcardQueryNode\n    if (node instanceof WildcardQueryNode\n        || node instanceof ParametricRangeQueryNode) {\n\n      if (!getQueryConfigHandler().hasAttribute(\n          MultiTermRewriteMethodAttribute.class)) {\n        // This should not happen, this attribute is created in the\n        // StandardQueryConfigHandler\n        throw new IllegalArgumentException(\n            \"MultiTermRewriteMethodAttribute should be set on the QueryConfigHandler\");\n      }\n\n      // read the attribute value and use a TAG to take the value to the Builder\n      MultiTermQuery.RewriteMethod rewriteMethod = getQueryConfigHandler()\n          .getAttribute(MultiTermRewriteMethodAttribute.class)\n          .getMultiTermRewriteMethod();\n\n      node.setTag(MultiTermRewriteMethodAttribute.TAG_ID, rewriteMethod);\n\n    }\n\n    return node;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"527dcfb2dea8b7ed93540e83a70960a2faec3e90":["f75cd88b219e040b204bff4c189784659752f786"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f75cd88b219e040b204bff4c189784659752f786":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["527dcfb2dea8b7ed93540e83a70960a2faec3e90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"527dcfb2dea8b7ed93540e83a70960a2faec3e90":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f75cd88b219e040b204bff4c189784659752f786"],"f75cd88b219e040b204bff4c189784659752f786":["527dcfb2dea8b7ed93540e83a70960a2faec3e90"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}